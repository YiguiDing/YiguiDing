import{_ as p,o as e,c as t,e as a,a as n,b as s}from"./app-86fda864.js";const o="/assets/51单片机重学笔记-df70aaf3.png",c="/assets/2023-06-23-05-47-33-6303153c.png",l="/assets/2023-06-23-05-48-21-a2c40c7b.png",i="/assets/2023-06-23-06-01-21-98a58fe5.png",u="/assets/2023-06-23-06-14-20-82e741dc.png",r="/assets/2023-06-23-06-23-52-45b08cac.png",k="/assets/2023-06-23-06-29-23-4edab33e.png",d="/assets/2023-06-23-06-32-17-93112193.png",m="/assets/2023-06-23-06-39-13-2d46af9c.png",v="/assets/2023-06-23-06-45-54-3aa77257.png",b="/assets/2023-06-23-06-58-41-acd52abd.png",_="/assets/2023-06-23-07-12-33-f6910f9e.png",h="/assets/2023-06-26-06-24-25-e1d21867.png",C="/assets/2023-06-26-06-27-39-7f56f512.png",y="/assets/2023-06-26-06-26-32-5349c855.png",f="/assets/2023-06-26-06-26-59-7216b594.png",D="/assets/2023-06-26-06-29-25-82ea2dce.png",E="/assets/2023-06-26-06-30-00-eaf4e4f7.png",x="/assets/2023-06-23-07-26-51-e38092a8.png",w="/assets/2023-06-25-10-47-43-3aa27127.png",g="/assets/2023-06-25-11-09-02-adc672d7.png",A="/assets/2023-06-25-11-10-27-3e5a1d4c.png",L="/assets/2023-06-25-11-44-45-ac310e79.png",B="/assets/2023-06-25-11-44-52-ec07315a.png",R="/assets/2023-06-25-11-44-58-ade049c5.png",S="/assets/2023-06-25-11-45-03-dbacbd5a.png",M="/assets/2023-06-26-02-53-09-b9c31dda.png",T="/assets/2023-06-26-02-53-10-aece0a16.png",P="/assets/2023-06-26-02-32-02-54ab8eed.png",F="/assets/2023-06-26-02-15-03-52d2613d.png",I="/assets/2023-06-26-04-57-55-e9bd3b4a.png",N="/assets/2023-06-26-06-13-14-a6a32117.png",O="/assets/2023-06-26-08-11-34-cf02e932.png",G="/assets/2023-06-27-11-22-51-5d99f6b1.png",q="/assets/2023-06-27-11-41-07-d3d30750.png",U="/assets/2023-06-27-11-53-33-ee02386d.png",H="/assets/2023-06-27-11-54-01-da17f065.png",V="/assets/2023-06-27-11-54-09-c34ec775.png",W="/assets/2023-06-27-11-54-19-3d0477b8.png",j="/assets/2023-06-27-11-55-30-d565036a.png",K="/assets/2023-06-27-12-18-38-81159b49.png",z="/assets/2023-06-27-12-53-10-c861a2b0.png",X="/assets/2023-06-29-07-34-10-ab211407.png",Y="/assets/2023-06-29-09-38-02-c820798b.png",Z="/assets/2023-06-29-09-36-27-325e4514.png",J="/assets/2023-06-30-08-02-18-1cb907de.png",Q="/assets/2023-06-30-08-27-01-3ccad96a.png",$={},nn=a('<h1 id="_51单片机重学笔记" tabindex="-1"><a class="header-anchor" href="#_51单片机重学笔记" aria-hidden="true">#</a> 51单片机重学笔记</h1><p><img src="'+o+'" alt=""></p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#51%E5%8D%95%E7%89%87%E6%9C%BA%E9%87%8D%E5%AD%A6%E7%AC%94%E8%AE%B0">51单片机重学笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a><ul><li><a href="#%E4%B8%9D%E5%8D%B0%E5%90%AB%E4%B9%89">丝印含义</a></li><li><a href="#%E5%BC%95%E8%84%9A%E5%8A%9F%E8%83%BD">引脚功能</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%A4%8D%E4%BD%8D%E7%94%B5%E8%B7%AF">最小系统和复位电路</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%A4%96%E5%9B%B4%E5%99%A8%E4%BB%B6">常用外围器件</a><ul><li><a href="#%E5%85%AD%E8%A7%92%E8%87%AA%E9%94%81%E5%BC%80%E5%85%B3">六角自锁开关</a></li><li><a href="#%E8%BD%BB%E8%A7%A6%E5%BC%80%E5%85%B3">轻触开关</a></li><li><a href="#%E4%BA%8C%E6%9E%81%E7%AE%A1">二极管</a></li><li><a href="#%E4%B8%89%E6%9E%81%E7%AE%A1">三极管</a><ul><li><a href="#%E4%BF%A1%E5%8F%B7%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF">信号放大电路</a></li><li><a href="#%E4%B8%89%E6%9E%81%E7%AE%A1%E4%B8%89%E7%A7%8D%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81">三极管三种工作状态</a></li><li><a href="#%E5%9C%BA%E6%95%88%E5%BA%94%E7%AE%A1">场效应管</a></li><li><a href="#%E6%95%B0%E7%A0%81%E7%AE%A1">数码管</a></li><li><a href="#%E5%A4%9A%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1">多位数码管</a></li></ul></li></ul></li><li><a href="#%E7%81%8C%E7%94%B5%E6%B5%81%E9%A9%B1%E5%8A%A8">灌电流驱动</a></li><li><a href="#%E6%97%B6%E9%92%9F%E5%91%A8%E6%9C%9F%E6%9C%BA%E5%99%A8%E5%91%A8%E6%9C%9F%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F">时钟周期、机器周期、指令周期</a></li><li><a href="#%E6%8C%87%E4%BB%A4%E8%A1%A8">指令表</a></li><li><a href="#delay%E5%87%BD%E6%95%B0">delay函数</a><ul><li><a href="#delay%E5%87%BD%E6%95%B0%E5%86%99%E6%B3%951">delay函数：写法1</a></li><li><a href="#delay%E5%87%BD%E6%95%B0%E5%86%99%E6%B3%952">delay函数：写法2</a></li><li><a href="#delay%E5%87%BD%E6%95%B0%E5%86%99%E6%B3%953">delay函数：写法3</a></li></ul></li><li><a href="#c51-ram%E5%88%86%E5%B8%83">c51-RAM分布</a></li><li><a href="#c51-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">C51-基本数据类型</a></li><li><a href="#reg51h%E5%A4%B4%E6%96%87%E4%BB%B6">reg51.h头文件</a><ul><li><a href="#sfr%E5%85%B3%E9%94%AE%E5%AD%97">sfr关键字</a></li><li><a href="#sbit%E5%85%B3%E9%94%AE%E5%AD%97">sbit关键字</a></li><li><a href="#%E5%B8%A6%E6%B3%A8%E9%87%8A%E7%9A%84reg51h">带注释的REG51.H</a></li><li><a href="#cy%E8%BF%9B%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8">CY进位寄存器</a></li></ul></li><li><a href="#led%E6%B5%81%E6%B0%B4%E7%81%AF%E5%AE%9E%E7%8E%B0">LED流水灯实现</a></li><li><a href="#1%E4%BD%8D%E6%95%B0%E6%95%B0%E7%A0%81%E7%AE%A1%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0">1位数数码管驱动实现</a></li><li><a href="#%E5%A4%9A%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0">多位数码管驱动实现</a></li><li><a href="#lcd1602lcm1602%E9%A9%B1%E5%8A%A8%E7%BC%96%E5%86%99">LCD1602(LCM1602)驱动编写</a></li><li><a href="#lcd1602%E9%A9%B1%E5%8A%A8%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95">LCD1602驱动调用测试</a></li><li><a href="#%E8%BD%BB%E8%A7%A6%E5%BC%80%E5%85%B3%E4%B8%8B%E9%99%8D%E6%B2%BF%E8%A7%A6%E5%8F%91">轻触开关下降沿触发</a></li><li><a href="#%E7%9F%A9%E9%98%B5%E6%8C%89%E9%94%AE%E9%A9%B1%E5%8A%A8%E7%BC%96%E5%86%99">矩阵按键驱动编写</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95">使用测试</a></li></ul></li><li><a href="#%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AE%A1%E6%95%B0%E5%99%A8%E7%94%B5%E8%B7%AF%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86"><code>定时器/计数器</code>电路工作原理</a></li><li><a href="#%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">中断系统工作原理</a></li></ul></li></ul><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="丝印含义" tabindex="-1"><a class="header-anchor" href="#丝印含义" aria-hidden="true">#</a> 丝印含义</h3><p><img src="'+c+'" alt=""></p><h3 id="引脚功能" tabindex="-1"><a class="header-anchor" href="#引脚功能" aria-hidden="true">#</a> 引脚功能</h3><p><img src="'+l+'" alt=""></p><h3 id="最小系统和复位电路" tabindex="-1"><a class="header-anchor" href="#最小系统和复位电路" aria-hidden="true">#</a> 最小系统和复位电路</h3><p>RST:复位引脚，高电平复位</p><ul><li>电压高于2.8V视为逻辑1</li><li>电压低于0.8V视为逻辑0</li><li>上电时，电容C1上电压为0V,R1上电压为5V,RST高电平，电路复位</li><li>电容充电完毕后C1上电压为5V,R1上电压为0V<br><img src="'+i+'" alt=""></li></ul><h2 id="常用外围器件" tabindex="-1"><a class="header-anchor" href="#常用外围器件" aria-hidden="true">#</a> 常用外围器件</h2><h3 id="六角自锁开关" tabindex="-1"><a class="header-anchor" href="#六角自锁开关" aria-hidden="true">#</a> 六角自锁开关</h3><p><img src="'+u+'" alt=""></p><h3 id="轻触开关" tabindex="-1"><a class="header-anchor" href="#轻触开关" aria-hidden="true">#</a> 轻触开关</h3><p><img src="'+r+'" alt=""></p><h3 id="二极管" tabindex="-1"><a class="header-anchor" href="#二极管" aria-hidden="true">#</a> 二极管</h3><p><img src="'+k+'" alt=""><br><img src="'+d+'" alt=""></p><h3 id="三极管" tabindex="-1"><a class="header-anchor" href="#三极管" aria-hidden="true">#</a> 三极管</h3><p><img src="'+m+'" alt=""></p><h4 id="信号放大电路" tabindex="-1"><a class="header-anchor" href="#信号放大电路" aria-hidden="true">#</a> 信号放大电路</h4><p><img src="'+v+'" alt=""></p><h4 id="三极管三种工作状态" tabindex="-1"><a class="header-anchor" href="#三极管三种工作状态" aria-hidden="true">#</a> 三极管三种工作状态</h4><p><img src="'+b+'" alt=""></p><h4 id="场效应管" tabindex="-1"><a class="header-anchor" href="#场效应管" aria-hidden="true">#</a> 场效应管</h4><p><img src="'+_+'" alt=""></p><h4 id="数码管" tabindex="-1"><a class="header-anchor" href="#数码管" aria-hidden="true">#</a> 数码管</h4><p><img src="'+h+'" alt=""><br><img src="'+C+'" alt=""><br><img src="'+y+'" alt=""><br><img src="'+f+'" alt=""></p><h4 id="多位数码管" tabindex="-1"><a class="header-anchor" href="#多位数码管" aria-hidden="true">#</a> 多位数码管</h4><p>内部原理图</p><p><img src="'+D+'" alt=""></p><p>驱动原理图<br><img src="'+E+'" alt=""></p><h2 id="灌电流驱动" tabindex="-1"><a class="header-anchor" href="#灌电流驱动" aria-hidden="true">#</a> 灌电流驱动</h2><p><img src="'+x+'" alt=""></p><h2 id="时钟周期、机器周期、指令周期" tabindex="-1"><a class="header-anchor" href="#时钟周期、机器周期、指令周期" aria-hidden="true">#</a> 时钟周期、机器周期、指令周期</h2><p><strong>时钟周期/振荡周期</strong>：</p>',37),sn=n("ul",null,[n("li",null,"是时钟频率的倒数"),n("li",null,"是单片机时序的最小单位，"),n("li",null,[s("51单片机中把1时钟周期定义为1"),n("strong",null,"节拍"),s("（用P表示）,2个节拍定义为"),n("strong",null,"状态周期"),s("（用S表示）")]),n("li",null,[s("时钟频率"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"f"),n("mrow",null,[n("mi",null,"o"),n("mi",null,"s"),n("mi",null,"c")])]),n("mo",null,"="),n("mn",null,"12"),n("mi",null,"M"),n("mi",null,"H"),n("mi",null,"z")]),n("annotation",{encoding:"application/x-tex"},"f_{osc}=12MHz")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.1076em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"osc")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord"},"12"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"Hz")])])]),s("，时钟周期为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mn",null,"1"),n("mrow",null,[n("mn",null,"12"),n("mi",null,"M")])]),n("mo",null,"="),n("mfrac",null,[n("mn",null,"1"),n("mn",null,"12")]),n("mi",null,"μ"),n("mi",null,"s")]),n("annotation",{encoding:"application/x-tex"},"\\frac{1}{12M}=\\frac{1}{12}μs")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8451em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"12"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"M")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8451em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"12")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mord mathnormal"},"μ"),n("span",{class:"mord mathnormal"},"s")])])])]),n("li",null,[n("img",{src:w,alt:""})])],-1),an=a('<p><strong>机器周期</strong></p><ul><li>定义为完成一项基本操作所需要的时间</li><li>在51单片机中1个机器周期由6个状态周期组成,也就是12个时钟周期</li><li>定义机器周期是因为时钟周期时间太短，根本做不了什么。</li><li><img src="'+g+'" alt=""></li><li><img src="'+A+'" alt=""></li></ul><p><strong>指令周期</strong></p><ul><li>定义为执行一条指令所需的时间。</li><li>单周期指令: 只有一个机器周期的指令，MOV指令，CLR指令等</li><li>双周期指令：所有的绝对跳转和条件转移指令，均为2周期指令</li><li>四周期指令：含四个机器周期的指令，MUL、DIV。</li></ul><h2 id="指令表" tabindex="-1"><a class="header-anchor" href="#指令表" aria-hidden="true">#</a> 指令表</h2><p><img src="'+L+'" alt=""><br><img src="'+B+'" alt=""><br><img src="'+R+'" alt=""><br><img src="'+S+`" alt=""></p><h2 id="delay函数" tabindex="-1"><a class="header-anchor" href="#delay函数" aria-hidden="true">#</a> delay函数</h2><p>假设单片机时钟频率为12MHz，那么机器周期就为1μs</p><h3 id="delay函数-写法1" tabindex="-1"><a class="header-anchor" href="#delay函数-写法1" aria-hidden="true">#</a> delay函数：写法1</h3><blockquote><p>（实际上char 8bit无法写入333，所以这么写还是有问题）</p></blockquote><p><strong>c语言编译为汇编后的结果：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>源代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span>
  <span class="token number">33</span>          <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
  <span class="token number">34</span>          <span class="token punctuation">{</span>
  <span class="token number">35</span>   <span class="token number">1</span>          <span class="token keyword">char</span> j<span class="token punctuation">;</span>
  <span class="token number">36</span>   <span class="token number">1</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">110</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 假设这个循环t次，耗时1000机器周期，则 1+3t=1000,则t=(1000-1)/3=333</span>
  <span class="token number">37</span>   <span class="token number">1</span>          <span class="token punctuation">;</span>
  <span class="token number">38</span>   <span class="token number">1</span>      <span class="token punctuation">}</span>
<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>汇编<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span>
             <span class="token punctuation">;</span> FUNCTION <span class="token function">delay</span> <span class="token punctuation">(</span>BEGIN<span class="token punctuation">)</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">33</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">34</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">36</span>
<span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span> Variable <span class="token char">&#39;j&#39;</span> assigned to Register <span class="token char">&#39;R7&#39;</span> <span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">0000</span> <span class="token number">7F</span><span class="token number">01</span>              MOV     R7<span class="token punctuation">,</span>#<span class="token number">01</span>H              <span class="token punctuation">;</span> 将<span class="token number">0x01</span>送到寄存器R7 <span class="token number">1</span>个机器周期
<span class="token number">0001</span>
<span class="token number">0002</span>         <span class="token operator">?</span>C0001<span class="token operator">:</span>
<span class="token number">0002</span> <span class="token number">0F</span>                INC     R7                   <span class="token punctuation">;</span> 自增寄存器R7 <span class="token number">1</span>个机器周期
<span class="token number">0003</span> BF6FFC            CJNE    R7<span class="token punctuation">,</span>#<span class="token number">06F</span>H<span class="token punctuation">,</span><span class="token operator">?</span>C0001      <span class="token punctuation">;</span> R7中的内容与<span class="token number">0x06F</span><span class="token operator">=</span><span class="token number">111</span>不等则跳转 <span class="token number">2</span>个机器周期
<span class="token number">0004</span>                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">38</span>
<span class="token number">0005</span>
<span class="token number">0006</span>         <span class="token operator">?</span>C0004<span class="token operator">:</span>
<span class="token number">0006</span> <span class="token number">22</span>                RET                          <span class="token punctuation">;</span> 子程序返回 <span class="token number">2</span>个机器周期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for循环赋值指令耗时1个周期、自增耗时1个周期、比较耗时2个周期<br> 假设循环t次，耗时1000机器周期，则 1+3t=1000,则t=(1000-1)/3=333</p><p>所以可以设计这样一个延时函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">char</span> second<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">--</span>second<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">333</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 耗时1ms</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delay函数-写法2" tabindex="-1"><a class="header-anchor" href="#delay函数-写法2" aria-hidden="true">#</a> delay函数：写法2</h3><blockquote><p>（实际上char 8bit无法写入500，所以这么写还是有问题）</p></blockquote><p><strong>更高效的写法:</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>源代码<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span>
  <span class="token number">19</span>          <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
  <span class="token number">20</span>          <span class="token punctuation">{</span>
  <span class="token number">21</span>   <span class="token number">1</span>          <span class="token keyword">char</span> j<span class="token operator">=</span><span class="token number">333</span><span class="token punctuation">;</span>
  <span class="token number">22</span>   <span class="token number">1</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --j操作耗时2个机器周期，总共耗时2j个机器周期</span>
  <span class="token number">23</span>   <span class="token number">1</span>      <span class="token punctuation">}</span>
  <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>汇编<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span>
\fC51 COMPILER V9<span class="token punctuation">.</span><span class="token number">01</span>   MAIN                                                                  <span class="token number">06</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">/</span><span class="token number">2023</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">38</span> PAGE <span class="token number">2</span>   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             <span class="token punctuation">;</span> FUNCTION <span class="token function">delay</span> <span class="token punctuation">(</span>BEGIN<span class="token punctuation">)</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">19</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">20</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">21</span>
<span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span> Variable <span class="token char">&#39;j&#39;</span> assigned to Register <span class="token char">&#39;R7&#39;</span> <span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">0000</span> <span class="token number">7F</span><span class="token number">4</span>D              MOV     R7<span class="token punctuation">,</span>#<span class="token number">04</span>DH    <span class="token punctuation">;</span> <span class="token number">0x4d</span>送到R7寄存器 <span class="token number">1</span>个机器周期
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">22</span>
<span class="token number">0002</span>         <span class="token operator">?</span>C0001<span class="token operator">:</span>
<span class="token number">0002</span> DFFE              DJNZ    R7<span class="token punctuation">,</span><span class="token operator">?</span>C0001   <span class="token punctuation">;</span> 寄存器自减，当不为<span class="token number">0</span>时跳转到<span class="token operator">?</span>C0001<span class="token operator">:</span> <span class="token number">2</span>个机器周期
<span class="token number">0004</span>         <span class="token operator">?</span>C0002<span class="token operator">:</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">23</span>
<span class="token number">0004</span>         <span class="token operator">?</span>C0003<span class="token operator">:</span>
<span class="token number">0004</span> <span class="token number">22</span>                RET                 <span class="token punctuation">;</span> 子程序返回 <span class="token number">2</span>个机器周期
             <span class="token punctuation">;</span> FUNCTION <span class="token function">delay</span> <span class="token punctuation">(</span>END<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for循环赋值指令耗时1个周期、循环耗时2t个周期<br> 假设循环t次，耗时1000机器周期，则 1+2t=1000,则t=(1000-1)/2=499.5</p><p>所以可以设计这样一个delay函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">char</span> second<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">--</span>second<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">char</span> j<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 耗时1ms</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delay函数-写法3" tabindex="-1"><a class="header-anchor" href="#delay函数-写法3" aria-hidden="true">#</a> delay函数：写法3</h3><blockquote><p>实际上内层循环应该用int，但是用int后的机器周期的计算就没有用char时的那么显而易见了</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>line level    source

   <span class="token number">1</span>          <span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token number">2</span>          <span class="token punctuation">{</span>
   <span class="token number">3</span>   <span class="token number">1</span>              <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
   <span class="token number">4</span>   <span class="token number">1</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">5</span>   <span class="token number">1</span>      <span class="token punctuation">}</span>
\fC51 COMPILER V9<span class="token punctuation">.</span><span class="token number">01</span>   UTILS                                                                 <span class="token number">06</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">2023</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">57</span> PAGE <span class="token number">2</span>   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             <span class="token punctuation">;</span> FUNCTION <span class="token function">delay</span> <span class="token punctuation">(</span>BEGIN<span class="token punctuation">)</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">1</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">2</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">3</span>
<span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span> Variable <span class="token char">&#39;j&#39;</span> assigned to Register <span class="token char">&#39;R6/R7&#39;</span> <span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">0000</span> <span class="token number">7FF</span><span class="token number">4</span>              MOV     R7<span class="token punctuation">,</span>#<span class="token number">0F</span><span class="token number">4</span>H    <span class="token punctuation">;</span>初始化低八位
<span class="token number">0002</span> <span class="token number">7E01</span>              MOV     R6<span class="token punctuation">,</span>#<span class="token number">01</span>H     <span class="token punctuation">;</span>初始化高八位
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">4</span>
<span class="token number">0004</span>         <span class="token operator">?</span>C0001<span class="token operator">:</span>
<span class="token number">0004</span> EF                MOV     A<span class="token punctuation">,</span>R7        <span class="token punctuation">;</span>低八位复制到ACC寄存器
<span class="token number">0005</span> <span class="token number">1F</span>                DEC     R7          <span class="token punctuation">;</span>低八位自减
<span class="token number">0006</span> <span class="token number">7001</span>              JNZ     <span class="token operator">?</span>C0004      <span class="token punctuation">;</span>ACC不为<span class="token number">0</span>说明低八位没减完了，则跳转到 <span class="token operator">?</span>C0004 继续减低八位
<span class="token number">0008</span> <span class="token number">1</span>E                DEC     R6          <span class="token punctuation">;</span>减完了低八位则去减高八位
<span class="token number">0009</span>         <span class="token operator">?</span>C0004<span class="token operator">:</span>
<span class="token number">0009</span> <span class="token number">14</span>                DEC     A       <span class="token punctuation">;</span>   ACC再次自减，减去低八位
<span class="token number">000</span>A <span class="token number">4</span>E                ORL     A<span class="token punctuation">,</span>R6    <span class="token punctuation">;</span>   将累加器A中的数据或上R6中的数据，数据保存在A中
<span class="token number">000</span>B <span class="token number">70F</span><span class="token number">7</span>              JNZ     <span class="token operator">?</span>C0001  <span class="token punctuation">;</span>   ACC不为<span class="token number">0</span>则说明没减完了，循环
<span class="token number">000</span>D         <span class="token operator">?</span>C0002<span class="token operator">:</span>
                                           <span class="token punctuation">;</span> SOURCE LINE # <span class="token number">5</span>
<span class="token number">000</span>D         <span class="token operator">?</span>C0003<span class="token operator">:</span>
<span class="token number">000</span>D <span class="token number">22</span>                RET     
             <span class="token punctuation">;</span> FUNCTION <span class="token function">delay</span> <span class="token punctuation">(</span>END<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>直接给出代码吧</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 12MHz时实现毫秒级延迟的写法</span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c51-ram分布" tabindex="-1"><a class="header-anchor" href="#c51-ram分布" aria-hidden="true">#</a> c51-RAM分布</h2><ul><li><code>0x00-0x1F</code> 0x20(32)个通用寄存器 <ul><li>分为0、1、2、3四组</li><li>每组有R0~R7八个寄存器</li><li>所以4x8=32个寄存器</li></ul></li><li><code>0x20-0x2F</code> 0x10(16)个支持位寻址的字节数据区</li><li><code>0x30-0x7F</code> 0x50(80)个字节的用户RAM区 <ul><li>同时也是栈区</li></ul></li></ul><p><img src="`+M+'" alt=""></p><h2 id="c51-基本数据类型" tabindex="-1"><a class="header-anchor" href="#c51-基本数据类型" aria-hidden="true">#</a> C51-基本数据类型</h2><p><img src="'+T+`" alt=""></p><h2 id="reg51-h头文件" tabindex="-1"><a class="header-anchor" href="#reg51-h头文件" aria-hidden="true">#</a> reg51.h头文件</h2><p>reg51.h里面主要是一些特殊功能寄存器的地址声明</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sfr  P1 <span class="token operator">=</span> <span class="token number">0x90</span>   <span class="token comment">//这句话表示：P1口所对应的特殊功能寄存器P1在内存中的地址为0x80，</span>
sbit EA <span class="token operator">=</span> <span class="token number">0xAF</span><span class="token punctuation">;</span>   <span class="token comment">//这句话表示EA这一位的地址为0xAF。</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sfr关键字" tabindex="-1"><a class="header-anchor" href="#sfr关键字" aria-hidden="true">#</a> sfr关键字</h3><ul><li>特殊功能寄存器(special function register)</li><li>它并非标准C语言的关键字，而是Keil 为能直接访问80C51中的 SFR 而提供了一个新的关键词，</li><li>用法: <ul><li>sfr 特殊功能寄存器名=地址值</li><li>用户实际上也可以修改的，如P1=0x80，也可改为A1=0x80</li><li>但sfr 和地址值则不能更改，否者会编译出错。</li></ul></li><li>特殊功能寄存器布局 <ul><li>事实上只有第一列的地址可以位寻址</li><li><img src="`+P+`" alt=""></li></ul></li></ul><h3 id="sbit关键字" tabindex="-1"><a class="header-anchor" href="#sbit关键字" aria-hidden="true">#</a> sbit关键字</h3><ul><li>表示特殊功能寄存器位</li><li>是非标准C语言的关键字</li><li>在对寄存器的某一位(必须是可位寻址的特殊功能寄存器才能用)操作时使用</li><li>如： <ul><li>sbit LED = P1^0;</li><li>sbit EA = 0xAF;</li></ul></li><li>位定义用法有三种： <ul><li>第一种方法：sbit 位变量名＝ 寄存器位地址值</li><li>第二种方法：sbit 位变量名＝SFR 名称^寄存器位值(0-7)</li><li>第三种方法：sbit 位变量名＝SFR 地址值^寄存器位值</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// sbit 特殊功能寄存器位</span>
<span class="token comment">// 第一种方法：sbit 位变量名=地址值</span>
<span class="token comment">// 第二种方法：sbit 位变量名=SFR名称^变量位地址值</span>
<span class="token comment">// 第三种方法：sbit 位变量名=SFR地址值^变量位地址值</span>
sbit LED <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span>
sbit BUZ <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带注释的reg51-h" tabindex="-1"><a class="header-anchor" href="#带注释的reg51-h" aria-hidden="true">#</a> 带注释的REG51.H</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*--------------------------------------------------------------------------
REG51.H             //REG 就是 Register(寄存器)的意思，对51单片机的操作就是对寄存器的操作
 
Header file for generic 80C51 and 80C31 microcontroller.
Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
All rights reserved.
--------------------------------------------------------------------------------------------
 
51单片机是8位地址的，用十六进制来表示就是两位十六进制数，所以下面看到的都是两位十六进制的地址
 
关于位寻址及操作，有个简便方法判断，将字节地址换成10进制后能否被“8”整除，能被“8”整除的就
能进行位操作，不能被“8”整除就不能，如P1地址为90H,10进制为144 144/8=18,能被整除，所以可以位
操作。再如TMOD地址为89H, 10进制为137 137/8=17.125,不能被整除，所以不可以位操作。
 
--------------------------------------------------------------------------------------------*/</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__REG51_H__ </span><span class="token comment">//如果没有定义__REG51_H__，那么定义它</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__REG51_H__</span></span>
 
<span class="token comment">/*  BYTE Register  */</span> 
 
<span class="token comment">/*  -------------------------------------------------
   sfr 是 special function register，特殊功能寄存器  
    -------------------------------------------------*/</span>
 
sfr P0   <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment">// P0口</span>
sfr P1   <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span>    <span class="token comment">// P1口</span>
sfr P2   <span class="token operator">=</span> <span class="token number">0xA0</span><span class="token punctuation">;</span>    <span class="token comment">// P2口</span>
sfr P3   <span class="token operator">=</span> <span class="token number">0xB0</span><span class="token punctuation">;</span>    <span class="token comment">// P3口</span>
sfr PSW  <span class="token operator">=</span> <span class="token number">0xD0</span><span class="token punctuation">;</span>    <span class="token comment">// Program Status Word，程序状态字</span>
sfr ACC  <span class="token operator">=</span> <span class="token number">0xE0</span><span class="token punctuation">;</span>    <span class="token comment">// 累加器</span>
sfr B    <span class="token operator">=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span>    <span class="token comment">// 乘除法辅助寄存器</span>
sfr SP   <span class="token operator">=</span> <span class="token number">0x81</span><span class="token punctuation">;</span>    <span class="token comment">// Stack Point，堆栈指针</span>
sfr DPL  <span class="token operator">=</span> <span class="token number">0x82</span><span class="token punctuation">;</span>    <span class="token comment">// 数据指针(低8位)</span>
sfr DPH  <span class="token operator">=</span> <span class="token number">0x83</span><span class="token punctuation">;</span>    <span class="token comment">// 数据指针(高8位)</span>
sfr PCON <span class="token operator">=</span> <span class="token number">0x87</span><span class="token punctuation">;</span>    <span class="token comment">// Power Control，电源控制和波特率选择</span>
sfr TCON <span class="token operator">=</span> <span class="token number">0x88</span><span class="token punctuation">;</span>    <span class="token comment">// Timer Controller  定时器控制</span>
sfr TMOD <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">;</span>    <span class="token comment">// Timer Mode    定时器方式控制寄存器，不可寻址</span>
sfr TL0  <span class="token operator">=</span> <span class="token number">0x8A</span><span class="token punctuation">;</span>    <span class="token comment">// 定时器0低8位</span>
sfr TL1  <span class="token operator">=</span> <span class="token number">0x8B</span><span class="token punctuation">;</span>    <span class="token comment">// 定时器1低8位</span>
sfr TH0  <span class="token operator">=</span> <span class="token number">0x8C</span><span class="token punctuation">;</span>    <span class="token comment">// 定时器0高8位</span>
sfr TH1  <span class="token operator">=</span> <span class="token number">0x8D</span><span class="token punctuation">;</span>    <span class="token comment">// 定时器1高8位</span>
sfr IE   <span class="token operator">=</span> <span class="token number">0xA8</span><span class="token punctuation">;</span>    <span class="token comment">// Interrupt Enable  中断使能</span>
sfr IP   <span class="token operator">=</span> <span class="token number">0xB8</span><span class="token punctuation">;</span>    <span class="token comment">// Interrupt Priority  中断优先级控制</span>
sfr SCON <span class="token operator">=</span> <span class="token number">0x98</span><span class="token punctuation">;</span>    <span class="token comment">// Seriel Controller 串行口控制寄存器，监视和控制51 芯片串行口的工作状态</span>
sfr SBUF <span class="token operator">=</span> <span class="token number">0x99</span><span class="token punctuation">;</span>    <span class="token comment">// Serial Buffer，串行数据收/发缓冲器</span>
 
 
<span class="token comment">/*  BIT Register  */</span>
 
 
<span class="token comment">/*  PSW     Program Status Word   程序状态字  */</span>
 
<span class="token comment">/* ---------------------------------------------------------------------------------------------
    sbit定义特殊功能寄存器的位变量,映射到IO口（P1^1这种IO口的“位”）
    bit和int char差不多，只不过char=8位, bit=1位而已。都是变量，编译器在编译过程中分配地址。
    除非指定，否则这个地址是随机分配的。这个地址是整个可寻址空间，RAM+FLASH+扩展空间。bit只
    有0和1两种值，和Windows下VC中的BOOL类似。
   ---------------------------------------------------------------------------------------------*/</span>
 
sbit CY   <span class="token operator">=</span> <span class="token number">0xD7</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.7，carry,进位标志，在执行加减运算指令时，如果运算结果的最高位(D7)
               发生了进位或借位，则CY由硬件自动置1。*/</span>
sbit AC   <span class="token operator">=</span> <span class="token number">0xD6</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.6，assistant carry,半进位标志位，也称为辅助标志位。在执行加减运算指令时，如
               果运算结果的低半字节(D3)发生了向高半字节进位或借位，则AC由硬件自动置1。*/</span>    
sbit F0   <span class="token operator">=</span> <span class="token number">0xD5</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.5，用户标志位。用户可以根据需要对F0、F1赋予一定的含义，由用户置1和清0，作为软件标 
 
               志。 */</span>
sbit RS1  <span class="token operator">=</span> <span class="token number">0xD4</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.4,工作寄存器组选择控制位。通过对这两位设定，可以从4个工作寄存器组中选择一组作为当   
 
                   前工作寄存器。 */</span>
sbit RS0  <span class="token operator">=</span> <span class="token number">0xD3</span><span class="token punctuation">;</span>   <span class="token comment">// PSW.3</span>
sbit OV   <span class="token operator">=</span> <span class="token number">0xD2</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.2，overflow,溢出标志位，有两种情况影响该位。一是执行加减运算时，如果D7或
               D6任一位，并且只一位发生了进位或借位，则OV自动置1 */</span>
<span class="token comment">/* sbit F1 = 0xD1 */</span>    <span class="token comment">//这个原来的头文件是没有的，自己加上去的，和 F0 作用一样</span>
sbit P    <span class="token operator">=</span> <span class="token number">0xD0</span><span class="token punctuation">;</span>   <span class="token comment">/* PSW.1，奇偶标志位。每条指令执行完后，该位都会指示当前累加器A中1的个数。如果A中有奇数       
 
                       个1，则P自动置1。*/</span>
 
<span class="token comment">/*  TCON    Timer Controller  定时器控制  */</span>
 
sbit TF1  <span class="token operator">=</span> <span class="token number">0x8F</span><span class="token punctuation">;</span>   <span class="token comment">// Timer1 Flag，T1中断标志位</span>
sbit TR1  <span class="token operator">=</span> <span class="token number">0x8E</span><span class="token punctuation">;</span>   <span class="token comment">// Timer1 Run，T1运行控制位</span>
sbit TF0  <span class="token operator">=</span> <span class="token number">0x8D</span><span class="token punctuation">;</span>   <span class="token comment">// Timer0 Flag，T0中断标志位</span>
sbit TR0  <span class="token operator">=</span> <span class="token number">0x8C</span><span class="token punctuation">;</span>   <span class="token comment">// Timer0 Run，T0运行控制位</span>
sbit IE1  <span class="token operator">=</span> <span class="token number">0x8B</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt1 Exterior，外部中断1中断标志位</span>
sbit IT1  <span class="token operator">=</span> <span class="token number">0x8A</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt1 Touch，外部中断1 触发方式选择位</span>
sbit IE0  <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt0 Exterior，外部中断0中断标志位</span>
sbit IT0  <span class="token operator">=</span> <span class="token number">0x88</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt0 Touch，外部中断0触发方式选择位</span>
 
<span class="token comment">/*  IE      Interrupt Enable  中断使能  */</span>
 
sbit EA   <span class="token operator">=</span> <span class="token number">0xAF</span><span class="token punctuation">;</span>   <span class="token comment">// IE.7，Enable All Interrupt，中断总允许位</span>
sbit ES   <span class="token operator">=</span> <span class="token number">0xAC</span><span class="token punctuation">;</span>   <span class="token comment">// IE.4，Enable Serial，串行口中断允许位 </span>
sbit ET1  <span class="token operator">=</span> <span class="token number">0xAB</span><span class="token punctuation">;</span>   <span class="token comment">// IE.3，Enable Timer 1，T1中断允许位</span>
sbit EX1  <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>   <span class="token comment">// IE.2, Enable Exterior 1，外部中断1中断允许位</span>
sbit ET0  <span class="token operator">=</span> <span class="token number">0xA9</span><span class="token punctuation">;</span>   <span class="token comment">// IE.1，Enable Timer 0，T0中断允许位</span>
sbit EX0  <span class="token operator">=</span> <span class="token number">0xA8</span><span class="token punctuation">;</span>   <span class="token comment">// IE.0，Enable Exterior 0，外部中断0中断允许位</span>
 
<span class="token comment">/*  IP      Interrupt Priority  中断优先级控制  */</span> 
 
sbit PS   <span class="token operator">=</span> <span class="token number">0xBC</span><span class="token punctuation">;</span>   <span class="token comment">// IP.4，Priority Serial    串口优先级标志位</span>
sbit PT1  <span class="token operator">=</span> <span class="token number">0xBB</span><span class="token punctuation">;</span>   <span class="token comment">// IP.3，Priority Timer 1    定时器1优先级标志位</span>
sbit PX1  <span class="token operator">=</span> <span class="token number">0xBA</span><span class="token punctuation">;</span>   <span class="token comment">// IP.2，Priority Exterior 1    外部中断1优先级标志位</span>
sbit PT0  <span class="token operator">=</span> <span class="token number">0xB9</span><span class="token punctuation">;</span>   <span class="token comment">// IP.1，Priority Timer 0    定时器0优先级标志位</span>
sbit PX0  <span class="token operator">=</span> <span class="token number">0xB8</span><span class="token punctuation">;</span>   <span class="token comment">// IP.0，Priority Exterior 0    外部中断0优先级标志位</span>
 
<span class="token comment">/*  P3  */</span>
 
sbit RD   <span class="token operator">=</span> <span class="token number">0xB7</span><span class="token punctuation">;</span>   <span class="token comment">// Read Data，读数据</span>
sbit WR   <span class="token operator">=</span> <span class="token number">0xB6</span><span class="token punctuation">;</span>   <span class="token comment">// Write Data，写数据</span>
sbit T1   <span class="token operator">=</span> <span class="token number">0xB5</span><span class="token punctuation">;</span>   <span class="token comment">// Timer 1,定时器1，由TMOD的高四位控制</span>
sbit T0   <span class="token operator">=</span> <span class="token number">0xB4</span><span class="token punctuation">;</span>   <span class="token comment">// Timer 0，定时器0，由TMOD的低四位控制</span>
sbit INT1 <span class="token operator">=</span> <span class="token number">0xB3</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt 1，中断1</span>
sbit INT0 <span class="token operator">=</span> <span class="token number">0xB2</span><span class="token punctuation">;</span>   <span class="token comment">// Interrupt 0，中断0</span>
sbit TXD  <span class="token operator">=</span> <span class="token number">0xB1</span><span class="token punctuation">;</span>   <span class="token comment">// Receive Data，串口接收端</span>
sbit RXD  <span class="token operator">=</span> <span class="token number">0xB0</span><span class="token punctuation">;</span>   <span class="token comment">// Transmit Data，串口发送端</span>
 
<span class="token comment">/*  SCON    Seriel Controller 串行口控制  */</span>
 
sbit SM0  <span class="token operator">=</span> <span class="token number">0x9F</span><span class="token punctuation">;</span>   <span class="token comment">// SM0和SM1组成4种工作方式，对应有不同特性</span>
sbit SM1  <span class="token operator">=</span> <span class="token number">0x9E</span><span class="token punctuation">;</span>   <span class="token comment">//</span>
sbit SM2  <span class="token operator">=</span> <span class="token number">0x9D</span><span class="token punctuation">;</span>   <span class="token comment">/* 多机通信控制位。多机通信是工作于方式2和方式3，SM2位主要用于方式2和方式3。
               接收状态，当串行口工作于方式2或3，以及SM2=1时，只有当接收到第9位数据（RB8）
               为1时，才把接收到的前8位数据送入SBUF，且置位RI发出中断申请，否则会将接受
               到的数据放弃。当SM2=0时，就不管第位数据是0还是1，都难得数据送入SBUF，并发
               出中断申请。工作于方式0时，SM2必须为0。*/</span>
sbit REN  <span class="token operator">=</span> <span class="token number">0x9C</span><span class="token punctuation">;</span>   <span class="token comment">// Receive Enable，使能接收</span>
sbit TB8  <span class="token operator">=</span> <span class="token number">0x9B</span><span class="token punctuation">;</span>   <span class="token comment">// 发送接收数据位8</span>
sbit RB8  <span class="token operator">=</span> <span class="token number">0x9A</span><span class="token punctuation">;</span>   <span class="token comment">// 接收数据位8</span>
sbit TI   <span class="token operator">=</span> <span class="token number">0x99</span><span class="token punctuation">;</span>   <span class="token comment">// 发送中断标志位</span>
sbit RI   <span class="token operator">=</span> <span class="token number">0x98</span><span class="token punctuation">;</span>   <span class="token comment">// 接收中断标志位</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cy进位寄存器" tabindex="-1"><a class="header-anchor" href="#cy进位寄存器" aria-hidden="true">#</a> CY进位寄存器</h3><p><img src="`+F+`" alt=""></p><p><code>REG51.H</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*--------------------------------------------------------------------------
REG51.H

sbit CY    = PSW^7; // 溢出位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="led流水灯实现" tabindex="-1"><a class="header-anchor" href="#led流水灯实现" aria-hidden="true">#</a> LED流水灯实现</h2><p><img src="`+I+`" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REG51.H&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>

sfr LED  <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span> <span class="token comment">// P1</span>
sbit BUZ <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED_STATE<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//00000001 0x01</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//00000010 0x02</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//00000100 0x04</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//00001000 0x08</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">//00010000 0x10</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//00100000 0x20</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">//01000000 0x40</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">//10000000 0x80</span>
                                <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment">//00000000 0x00</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LED <span class="token operator">=</span> <span class="token operator">~</span>LED_STATE<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            BUZ <span class="token operator">=</span> <span class="token operator">~</span>BUZ<span class="token punctuation">;</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 12MHz时实现毫秒级延迟的写法</span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1位数数码管驱动实现" tabindex="-1"><a class="header-anchor" href="#_1位数数码管驱动实现" aria-hidden="true">#</a> 1位数数码管驱动实现</h2><p><img src="`+N+`" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG52.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>

sfr LED                <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span>                                                         <span class="token comment">// P1口</span>
<span class="token class-name">uint8_t</span> SEG7_CODE_CC<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 共阴极七段数码管0~9数字</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LED <span class="token operator">=</span> <span class="token operator">~</span>SEG7_CODE_CC<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_UTILS_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_UTILS_</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token class-name">uint8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">uint16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token class-name">uint32_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> <span class="token class-name">int8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">int</span> <span class="token class-name">int16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token class-name">int32_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXT0_VECTOR</span>  <span class="token expression"><span class="token number">0</span> </span><span class="token comment">/* 0x03 external interrupt 0 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIM0_VECTOR</span>  <span class="token expression"><span class="token number">1</span> </span><span class="token comment">/* 0x0b timer 0 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXT1_VECTOR</span>  <span class="token expression"><span class="token number">2</span> </span><span class="token comment">/* 0x13 external interrupt 1 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIM1_VECTOR</span>  <span class="token expression"><span class="token number">3</span> </span><span class="token comment">/* 0x1b timer 1 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UART0_VECTOR</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">/* 0x23 serial port 0 */</span></span>

<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多位数码管驱动实现" tabindex="-1"><a class="header-anchor" href="#多位数码管驱动实现" aria-hidden="true">#</a> 多位数码管驱动实现</h2><p><img src="`+O+`" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG52.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>

<span class="token comment">// 共阴极七段数码管0~9数字段选信号</span>
<span class="token class-name">uint8_t</span> SEG7_CODE_CC<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token class-name">uint8_t</span> SEG_MASK<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> NUM<span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        P0 <span class="token operator">=</span> <span class="token operator">~</span>SEG7_CODE_CC<span class="token punctuation">[</span>NUM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        P2 <span class="token operator">=</span> <span class="token operator">~</span>SEG_MASK<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        P0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token comment">// 关闭段选 一定要初始化，否则将导致第n位显示在第n-1位上</span>
        P2 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token comment">// 关闭位选 一定要初始化</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_UTILS_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_UTILS_</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token class-name">uint8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">uint16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token class-name">uint32_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> <span class="token class-name">int8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">int</span> <span class="token class-name">int16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token class-name">int32_t</span><span class="token punctuation">;</span>

<span class="token comment">// 共阴极七段数码管0~9数字段选信号</span>
<span class="token class-name">uint8_t</span> SEG7_CODE_CC<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lcd1602-lcm1602-驱动编写" tabindex="-1"><a class="header-anchor" href="#lcd1602-lcm1602-驱动编写" aria-hidden="true">#</a> LCD1602(LCM1602)驱动编写</h2><p><img src="`+G+'" alt=""></p><p><img src="'+q+'" alt=""></p><p><img src="'+U+'" alt=""></p><p><img src="'+H+'" alt=""><br><img src="'+V+'" alt=""></p><p><img src="'+W+'" alt=""></p><p><img src="'+j+`" alt=""></p><p><code>1602.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LCD_1602_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LCD_1602_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token class-name">int8_t</span> _x<span class="token punctuation">,</span> <span class="token class-name">int8_t</span> _y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">LCD_CGRAM_ADD_GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_DDRAM_ADD_SET</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _char<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutNumWithSign</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span> _num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutHexWith0x</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> _hex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_LoadCustomChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _idx_CGRAM<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> _data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_ShowCustomChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _idx<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Show_UnderLine</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _show<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Flash</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _flash<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_View_Auto_Scroll</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _scrollable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LCD_AC_Positive_Increase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _increase<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">LCD_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>1602.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 低级接口</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG51.H&quot;</span></span>

<span class="token comment">// ----------------------------------------------端口定义----------------------------------------------</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCD_DATA</span> <span class="token expression">P0         </span><span class="token comment">// LCD数据8bit端口</span></span>
sbit LCD_BF <span class="token operator">=</span> LCD_DATA <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 数据位的第七位为读/写允许位，进行读写操作前，要确认该位值为 0 才可进行操作</span>
sbit LCD_RS <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 数据/命令选择端(H/L)</span>
sbit LCD_RW <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 读/写选择端(H/L)</span>
sbit LCD_EN <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// 使能信号</span>

<span class="token comment">// ----------------------------------------------常量定义----------------------------------------------</span>
<span class="token keyword">enum</span> <span class="token class-name">LCD_BF_Enum</span> <span class="token punctuation">{</span>
    Lazy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Busy <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">LCD_RW_Enum</span> <span class="token punctuation">{</span>
    Write <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Read  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">LCD_RS_Enum</span> <span class="token punctuation">{</span>
    CMD  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    DATA <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">LCD_EN_Enum</span> <span class="token punctuation">{</span>
    Disable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Enable  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">LCD_Bool_Enum</span> <span class="token punctuation">{</span>
    False <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    True  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ----------------【忙等待、读取、写入】三个基本操作的实现--------------------------------</span>

<span class="token comment">// 基本操作：等待LCD可以读写数据</span>
<span class="token comment">// 功能：读取BF状态字、AC地址(最高位为BF状态字，可判断是否忙)</span>
<span class="token comment">// BF 位为读/写允许位，在 MCU 对 LCD 进行读写操作前，要确认该位值为 0 才可进行操作。</span>
<span class="token class-name">uint8_t</span> <span class="token function">LCD_WaitNoBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> AC_Add<span class="token punctuation">;</span>
    LCD_BF <span class="token operator">=</span> Busy<span class="token punctuation">;</span>            <span class="token comment">// 预先拉高BF信号</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>                      <span class="token comment">// 循环、直到BF为低电平</span>
        LCD_EN <span class="token operator">=</span> Disable<span class="token punctuation">;</span>     <span class="token comment">// 拉低使能信号</span>
        LCD_RW <span class="token operator">=</span> Read<span class="token punctuation">;</span>        <span class="token comment">// 读取操作</span>
        LCD_RS <span class="token operator">=</span> CMD<span class="token punctuation">;</span>         <span class="token comment">// 读取命令</span>
        <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 延时</span>
        LCD_EN <span class="token operator">=</span> Enable<span class="token punctuation">;</span>      <span class="token comment">// 拉高使能</span>
        <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 延时</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>LCD_BF <span class="token operator">==</span> Busy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD_BF==1 说明忙</span>
    AC_Add <span class="token operator">=</span> LCD_DATA<span class="token punctuation">;</span>        <span class="token comment">// 获取AC地址；</span>
    LCD_EN <span class="token operator">=</span> Disable<span class="token punctuation">;</span>         <span class="token comment">// 拉低使能</span>
    <span class="token keyword">return</span> AC_Add<span class="token punctuation">;</span>            <span class="token comment">// 返回AC地址</span>
<span class="token punctuation">}</span>

<span class="token comment">// 基本操作：写操作（数据或命令）</span>
<span class="token keyword">void</span> <span class="token function">LCD_Put</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _CMD_OR_DATA<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> _data<span class="token punctuation">)</span> <span class="token comment">// 传入指令或数据</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_WaitNoBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LCD_EN   <span class="token operator">=</span> Disable<span class="token punctuation">;</span>      <span class="token comment">// EN低电平</span>
    LCD_RW   <span class="token operator">=</span> Write<span class="token punctuation">;</span>        <span class="token comment">// 写入操作</span>
    LCD_RS   <span class="token operator">=</span> _CMD_OR_DATA<span class="token punctuation">;</span> <span class="token comment">// 数据类型：指令？数据？</span>
    LCD_DATA <span class="token operator">=</span> _data<span class="token punctuation">;</span>        <span class="token comment">// 准备数据</span>
    <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 延时</span>
    LCD_EN <span class="token operator">=</span> Enable<span class="token punctuation">;</span>         <span class="token comment">// 给一个上升沿，让LCD读取数据</span>
    <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 延时</span>
    LCD_EN <span class="token operator">=</span> Disable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 基本操作：读操作（数据或命令）</span>
<span class="token class-name">uint8_t</span> <span class="token function">LCD_Get</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _CMD_OR_DATA<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> res<span class="token punctuation">;</span>
    <span class="token function">LCD_WaitNoBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LCD_EN <span class="token operator">=</span> Disable<span class="token punctuation">;</span>      <span class="token comment">// EN低电平</span>
    LCD_RW <span class="token operator">=</span> Read<span class="token punctuation">;</span>         <span class="token comment">// 读取操作</span>
    LCD_RS <span class="token operator">=</span> _CMD_OR_DATA<span class="token punctuation">;</span> <span class="token comment">// 数据类型：指令？数据？</span>
    <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 延时</span>
    LCD_EN <span class="token operator">=</span> Enable<span class="token punctuation">;</span>       <span class="token comment">// 给一个高电平使能</span>
    <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 延时</span>
    res    <span class="token operator">=</span> LCD_DATA<span class="token punctuation">;</span>     <span class="token comment">// 读取数据</span>
    LCD_EN <span class="token operator">=</span> Disable<span class="token punctuation">;</span>      <span class="token comment">// 拉低使能</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token comment">// 返回结果</span>
<span class="token punctuation">}</span>

<span class="token comment">// -------------- ----【写入命令、写入数据、读取命令、读取数据】四个基本操作的宏定义---------------------------</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LCD_PutCmd</span><span class="token expression"><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>  <span class="token function">LCD_Put</span><span class="token punctuation">(</span>CMD<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LCD_PutDat</span><span class="token expression"><span class="token punctuation">(</span>_data<span class="token punctuation">)</span> <span class="token function">LCD_Put</span><span class="token punctuation">(</span>DATA<span class="token punctuation">,</span> _data<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LCD_GetCmd</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">LCD_Get</span><span class="token punctuation">(</span>CMD<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LCD_GetDat</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">LCD_Get</span><span class="token punctuation">(</span>DATA<span class="token punctuation">)</span></span></span>

<span class="token comment">// ----------------------------------8条命令的定义（实际上也保存了状态）------------------------------------</span>

<span class="token class-name">uint8_t</span> CMD_CLEAR <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span> <span class="token comment">// 清屏指令 光标复位到地址00H</span>
<span class="token class-name">uint8_t</span> CMD_CLEAC <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span> <span class="token comment">// 光标归位指令   (使AC清零,光标归位</span>
<span class="token class-name">uint8_t</span> CMD_ENTER <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span> <span class="token comment">// 输入方式设置指令   （该指令的功能在于设置显示字符的进入方式，即在对 DDRM 操作数据写入/读出后，AC 数据地址指针的修改方式）</span>
<span class="token class-name">uint8_t</span> CMD_STATE <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span> <span class="token comment">// 显示状态设置指令 （该指令控制着画面、光标和闪烁的开与关）</span>
<span class="token class-name">uint8_t</span> CMD_SCROL <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">// 画面或光标滚动设置指令</span>
<span class="token class-name">uint8_t</span> CMD_RMODE <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">// 工作方式设置指令</span>
<span class="token class-name">uint8_t</span> CMD_CGADR <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span> <span class="token comment">// 设定 CGRAM 地址设置指令</span>
<span class="token class-name">uint8_t</span> CMD_DDADR <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment">// 设置 DDRAM 地址设置指令    (也可理解为修改 AC 指针位置</span>

<span class="token comment">// ------------------------------低级功能接口实现-------------------------------------</span>
<span class="token comment">// 工作方式设置</span>
<span class="token keyword">void</span> <span class="token function">LCD_RunMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 设置控制器与 MCU 的接口形式为数据总线宽度为 8 位，设置显示字符的行数为 2 行字符，设置显示字符的字体为 5X8 点阵字符体</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_RMODE <span class="token operator">|</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 画面显示</span>
<span class="token keyword">void</span> <span class="token function">LCD_Open</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _open<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_open<span class="token punctuation">)</span>
        CMD_STATE <span class="token operator">|=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_STATE <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_STATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 光标下划线显示</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Show_UnderLine</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _show<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_show<span class="token punctuation">)</span>
        CMD_STATE <span class="token operator">|=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_STATE <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x02</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_STATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 光标闪烁</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Flash</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _flash<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_flash<span class="token punctuation">)</span>
        CMD_STATE <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_STATE <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_STATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 光标滚动一步</span>
<span class="token keyword">void</span> <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _dir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CMD_SCROL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x08</span><span class="token punctuation">;</span> <span class="token comment">// 保证第四位是0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_dir <span class="token operator">==</span> <span class="token char">&#39;R&#39;</span> <span class="token operator">||</span> _dir <span class="token operator">==</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">)</span>
        CMD_SCROL <span class="token operator">|=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_SCROL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_SCROL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 画面滚动</span>
<span class="token keyword">void</span> <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _dir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CMD_SCROL <span class="token operator">|=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_dir <span class="token operator">==</span> <span class="token char">&#39;R&#39;</span> <span class="token operator">||</span> _dir <span class="token operator">==</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">)</span>
        CMD_SCROL <span class="token operator">|=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_SCROL <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x04</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_SCROL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//  在对DDRM 操作数据写入/读出后，AC 数据地址指针自增还是自减。</span>
<span class="token keyword">void</span> <span class="token function">LCD_AC_Positive_Increase</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _increase<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_increase<span class="token punctuation">)</span>
        CMD_ENTER <span class="token operator">|=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_ENTER <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x02</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_ENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在对 DDRM 写入数据后画面是否同步滚动（显示屏上所有文字是否左移或右移）</span>
<span class="token keyword">void</span> <span class="token function">LCD_View_Auto_Scroll</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _scrollable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_scrollable<span class="token punctuation">)</span>
        CMD_ENTER <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        CMD_ENTER <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_ENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 清屏指令,同时光标复位到地址00H</span>
<span class="token keyword">void</span> <span class="token function">LCD_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_CLEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 光标归位指令</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_CLEAC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设定 CGRAM 地址设置</span>
<span class="token keyword">void</span> <span class="token function">LCD_CGRAM_ADD_SET</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _col<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> _row<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _col <span class="token operator">=</span> <span class="token punctuation">(</span>_col <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
    _row <span class="token operator">=</span> _row <span class="token operator">&amp;</span> <span class="token number">0x7</span><span class="token punctuation">;</span>  <span class="token comment">// 只要最低三位</span>
    CMD_CGADR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x3f</span><span class="token punctuation">;</span> <span class="token comment">// 擦除上一次的6bit数据</span>
    CMD_CGADR <span class="token operator">=</span> CMD_CGADR <span class="token operator">|</span> _col <span class="token operator">|</span> _row<span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_CGADR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取DDRAM(AC)地址</span>
<span class="token class-name">uint8_t</span> <span class="token function">LCD_CGRAM_ADD_GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">LCD_WaitNoBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设定 DDRAM(AC) 地址设置</span>
<span class="token keyword">void</span> <span class="token function">LCD_DDRAM_ADD_SET</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CMD_DDADR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x7f</span><span class="token punctuation">;</span> <span class="token comment">// 擦除上一次的7bit数据</span>
    CMD_DDADR <span class="token operator">|=</span> _addr<span class="token punctuation">;</span>
    <span class="token function">LCD_PutCmd</span><span class="token punctuation">(</span>CMD_DDADR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 向 DDRAM 或 CGRAM 写入数据</span>
<span class="token keyword">void</span> <span class="token function">LCD_CGRAM_DDRAM_Put_Data</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_PutDat</span><span class="token punctuation">(</span>_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从 DDRAM 或 CGRAM 读回数据</span>
<span class="token class-name">uint8_t</span> <span class="token function">LCD_CGRAM_DDRAM_Get_Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">LCD_GetDat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ---------------------------------高级功能接口实现-----------------------------------------------------------</span>
<span class="token comment">// 初始化</span>
<span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_RunMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_AC_Positive_Increase</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启写入后自增AC</span>
    <span class="token function">LCD_View_Auto_Scroll</span><span class="token punctuation">(</span>False<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭写入后自动滚动</span>
    <span class="token function">LCD_Open</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 开显示</span>
<span class="token punctuation">}</span>
<span class="token comment">/*------------------------------------------------------
DDRAM
x=     0  1  2  3  4...................0x27
        ____________________________________
y=0    | 00 01 02 03 04 05 06 07 ....... 27 |
y=1    | 40 41 42 43 44 45 46 47 ....... 67 |
------------------------------------------------------*/</span>
<span class="token comment">// 跳转到指定位置（支持负数反向定位） x∈[0,0x27] y∈[0,1] 可以使用-1表示最后一位，-2表示最后第二位</span>
<span class="token keyword">void</span> <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token class-name">int8_t</span> _x<span class="token punctuation">,</span> <span class="token class-name">int8_t</span> _y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> addr<span class="token punctuation">;</span>
    _x   <span class="token operator">=</span> <span class="token punctuation">(</span>_x <span class="token operator">%</span> <span class="token number">0x28</span> <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x28</span><span class="token punctuation">;</span> <span class="token comment">// 使其可以使用-1定位到最后一个位置</span>
    _y   <span class="token operator">=</span> <span class="token punctuation">(</span>_y <span class="token operator">%</span> <span class="token number">0x02</span> <span class="token operator">+</span> <span class="token number">0x02</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x02</span><span class="token punctuation">;</span>
    addr <span class="token operator">=</span> _y <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> _x<span class="token punctuation">;</span>
    <span class="token function">LCD_DDRAM_ADD_SET</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出一个字符</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _char<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_CGRAM_DDRAM_Put_Data</span><span class="token punctuation">(</span>_char<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出字符串</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>_str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>_str<span class="token punctuation">)</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token operator">*</span>_str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 递归输出无符号数</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutNum</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> _num<span class="token punctuation">)</span> reentrant <span class="token comment">// reentrant 关键字用于保证可以递归</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token function">LCD_PutNum</span><span class="token punctuation">(</span>_num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>_num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出有符号数</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutNumWithSign</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span> _num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _num <span class="token operator">=</span> <span class="token operator">-</span>_num<span class="token punctuation">;</span>
        <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LCD_PutNum</span><span class="token punctuation">(</span>_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出一位十六进制字符</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutOneHex</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _hex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> temp <span class="token operator">=</span> _hex <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>temp <span class="token operator">-</span> <span class="token char">&#39;9&#39;</span> <span class="token operator">+</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出一个十六进制数</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutHex</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> _hex<span class="token punctuation">)</span> reentrant
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_hex <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token function">LCD_PutHex</span><span class="token punctuation">(</span>_hex <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutOneHex</span><span class="token punctuation">(</span>_hex <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出一个十六进制数，带0x格式</span>
<span class="token keyword">void</span> <span class="token function">LCD_PutHexWith0x</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> _hex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot;0x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutHex</span><span class="token punctuation">(</span>_hex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 加载自定义字符</span>
<span class="token keyword">void</span> <span class="token function">LCD_LoadCustomChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _idx_CGRAM<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> _data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> _row<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>_row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _row <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> _row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_CGRAM_ADD_SET</span><span class="token punctuation">(</span>_idx_CGRAM<span class="token punctuation">,</span> _row<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCD_CGRAM_DDRAM_Put_Data</span><span class="token punctuation">(</span>_data<span class="token punctuation">[</span>_row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出自定义字符</span>
<span class="token keyword">void</span> <span class="token function">LCD_ShowCustomChar</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _idx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _idx <span class="token operator">&amp;=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span> <span class="token comment">// 只要低四位地址</span>
    <span class="token function">LCD_CGRAM_DDRAM_Put_Data</span><span class="token punctuation">(</span>_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> ding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启测试</span>
    <span class="token function">LCD_Open</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD_Open(False);</span>
    <span class="token function">LCD_Cusor_Show_UnderLine</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD_Cusor_Show_UnderLine(False);</span>
    <span class="token function">LCD_Cusor_Flash</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD_Cusor_Flash(False);</span>
    <span class="token function">LCD_AC_Positive_Increase</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入后自动移动AC位置</span>
    <span class="token function">LCD_View_Auto_Scroll</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 写入后自动滚动</span>

    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>
    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LCD右滚动</span>

    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_LoadCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_ShowCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_PutNumWithSign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_View_Auto_Scroll</span><span class="token punctuation">(</span>False<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入时是否允许AC移动</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LCD_OP_DDRM_AC_Increase(False);// 关闭写入后自动移动位置</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutHexWith0x</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 负数坐标测试</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 光标右移</span>
        <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// LCD左滚动</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 光标左移</span>
        <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// LCD右滚动</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>utils.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> ms<span class="token punctuation">)</span> <span class="token comment">// ms_delay when T=12MHz</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// 耗时1ms</span>
            <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// T=12Mhz 一个机器周期=1us</span>
<span class="token keyword">void</span> <span class="token function">delay_2us</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> _2us<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 耗时2t个机器周期</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>_2us<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lcd1602驱动调用测试" tabindex="-1"><a class="header-anchor" href="#lcd1602驱动调用测试" aria-hidden="true">#</a> LCD1602驱动调用测试</h2><p><img src="`+K+'" alt=""></p><p><img src="'+z+`" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG51.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;lcd1602.h&quot;</span></span>

code <span class="token class-name">uint8_t</span> ding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i<span class="token punctuation">;</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_LoadCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot; Hello LCD1602!! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutHexWith0x</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot;   ----By &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_ShowCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">LCD_Scroll_View_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="轻触开关下降沿触发" tabindex="-1"><a class="header-anchor" href="#轻触开关下降沿触发" aria-hidden="true">#</a> 轻触开关下降沿触发</h2><p><strong>写法</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sbit k1 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>
sbit k2 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>
sbit k3 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">;</span>
sbit k4 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">6</span><span class="token punctuation">;</span>
sbit k5 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> AllKeyUp <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">keyScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    k1 <span class="token operator">=</span> k2 <span class="token operator">=</span> k3 <span class="token operator">=</span> k4 <span class="token operator">=</span> true<span class="token punctuation">;</span>   <span class="token comment">// 向所有端口发送高电平</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k1 <span class="token operator">&amp;&amp;</span> k2 <span class="token operator">&amp;&amp;</span> k3 <span class="token operator">&amp;&amp;</span> k4<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 按键全部抬起</span>
        AllKeyUp <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>AllKeyUp <span class="token comment">/*保证下降沿触发*/</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1 <span class="token operator">||</span> <span class="token operator">!</span>k2 <span class="token operator">||</span> <span class="token operator">!</span>k3 <span class="token operator">||</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token comment">/*任一按键按下(其实可以不用写，程序执行到这里必然满足该条件)*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 防抖动</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1 <span class="token operator">||</span> <span class="token operator">!</span>k2 <span class="token operator">||</span> <span class="token operator">!</span>k3 <span class="token operator">||</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            AllKeyUp <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 标记为有按键按下</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k3<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG51.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;lcd1602.h&quot;</span></span>

code <span class="token class-name">uint8_t</span> ding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

sbit k1 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>
sbit k2 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>
sbit k3 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">;</span>
sbit k4 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">6</span><span class="token punctuation">;</span>
sbit k5 <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token class-name">uint8_t</span> AllKeyUp <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> <span class="token function">keyScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    k1 <span class="token operator">=</span> k2 <span class="token operator">=</span> k3 <span class="token operator">=</span> k4 <span class="token operator">=</span> true<span class="token punctuation">;</span>   <span class="token comment">// 向所有端口发送高电平</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k1 <span class="token operator">&amp;&amp;</span> k2 <span class="token operator">&amp;&amp;</span> k3 <span class="token operator">&amp;&amp;</span> k4<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 按键全部抬起</span>
        AllKeyUp <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>AllKeyUp <span class="token comment">/*保证下降沿触发*/</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1 <span class="token operator">||</span> <span class="token operator">!</span>k2 <span class="token operator">||</span> <span class="token operator">!</span>k3 <span class="token operator">||</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token comment">/*任一按键按下*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 防抖动</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1 <span class="token operator">||</span> <span class="token operator">!</span>k2 <span class="token operator">||</span> <span class="token operator">!</span>k3 <span class="token operator">||</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            AllKeyUp <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 标记为有按键按下</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k3<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k4<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_BackSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Scroll_Cusor_Step</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> i<span class="token punctuation">;</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_LoadCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot; Hello LCD1602!! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutHexWith0x</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token string">&quot; --By &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_ShowCustomChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> res <span class="token operator">=</span> <span class="token function">keyScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">LCD_Cusor_Flash</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">LCD_Cusor_Show_UnderLine</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">LCD_BackSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">LCD_PutNumWithSign</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+X+'" alt=""></p><h2 id="矩阵按键驱动编写" tabindex="-1"><a class="header-anchor" href="#矩阵按键驱动编写" aria-hidden="true">#</a> 矩阵按键驱动编写</h2><blockquote><p>（支持多个按键同时按下）</p></blockquote><p><img src="'+Y+`" alt=""></p><p><code>MatrixBtns.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MatrixBtns_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MatrixBtns_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG51.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token comment">// 端口定义 1~4bit连接列，5~8bit连接行</span>
<span class="token comment">//     1 2 3 4</span>
<span class="token comment">// 5 | x x x x |</span>
<span class="token comment">// 6 | x x x x |</span>
<span class="token comment">// 7 | x x x x |</span>
<span class="token comment">// 8 | x x x x |</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MB_DATA</span> <span class="token expression">P3</span></span>
<span class="token class-name">uint8_t</span> <span class="token function">MatrixKeyCodeScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取按键代码</span>
<span class="token class-name">uint8_t</span> <span class="token function">MatrixCharScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取按下的字符</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MatrixBtns.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MatrixBtns.h&quot;</span></span>
<span class="token class-name">uint8_t</span> <span class="token function">KeyRowScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">uint8_t</span> KeyRowUp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    MB_DATA                 <span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">;</span> <span class="token comment">// 发送行扫描</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MB_DATA <span class="token operator">==</span> <span class="token number">0xf0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 说明没有按键被按下</span>
        KeyRowUp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyRowUp<span class="token punctuation">)</span> <span class="token comment">/*保证下降沿触发*/</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 执行到这里必然是有按键被按下，先去除抖动</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>MB_DATA <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 被按下的列为低电平，取反就能找到被按下的列</span>
            KeyRowUp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">~</span>MB_DATA <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果第一行被按下则返回结果为 0001 0000</span>
            <span class="token comment">// 如果第二行被按下则返回结果为 0010 0000</span>
            <span class="token comment">// 如果第一行和第二行被同时按下 0011 0000</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">KeyColScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">uint8_t</span> KeyColUp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    MB_DATA                 <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MB_DATA <span class="token operator">==</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        KeyColUp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyColUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>MB_DATA <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            KeyColUp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">~</span>MB_DATA <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果第一列被按下则返回结果为 0000 0001</span>
            <span class="token comment">// 如果第二列被按下则返回结果为 0000 0010</span>
            <span class="token comment">// 如果第一列和第二列被同时按下 0000 0011</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint8_t</span> <span class="token function">MatrixKeyCodeScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> row <span class="token operator">=</span> <span class="token function">KeyRowScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> col <span class="token operator">=</span> <span class="token function">KeyColScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 行和列都不为0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&amp;&amp;</span> col<span class="token punctuation">)</span> <span class="token keyword">return</span> row <span class="token operator">|</span> col<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">uint8_t</span> <span class="token function">MatrixCharScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> keyCode <span class="token operator">=</span> <span class="token function">MatrixKeyCodeScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0x11</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x12</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x14</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x18</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x21</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x22</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x24</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x28</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x41</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x42</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x44</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x48</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x81</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x82</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x84</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;=&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0x88</span> <span class="token operator">:</span><span class="token keyword">return</span> <span class="token char">&#39;\\x08&#39;</span><span class="token punctuation">;</span><span class="token comment">// ascii 退格</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用测试" tabindex="-1"><a class="header-anchor" href="#使用测试" aria-hidden="true">#</a> 使用测试</h3><p><img src="`+Z+`" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;REG51.H&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;lcd1602.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MatrixBtns.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint8_t</span> ch <span class="token operator">=</span>  <span class="token function">MatrixCharScanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">LCD_Cusor_GoToXY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定时器-计数器电路工作原理" tabindex="-1"><a class="header-anchor" href="#定时器-计数器电路工作原理" aria-hidden="true">#</a> <code>定时器/计数器</code>电路工作原理</h2><p><img src="`+J+'" alt=""></p><h2 id="中断系统工作原理" tabindex="-1"><a class="header-anchor" href="#中断系统工作原理" aria-hidden="true">#</a> 中断系统工作原理</h2><p><img src="'+Q+'" alt=""></p>',94),pn=[nn,sn,an];function en(tn,on){return e(),t("div",null,pn)}const ln=p($,[["render",en],["__file","index.html.vue"]]);export{ln as default};
