import{_ as n,c as a,e,o as p}from"./app-CHjqYunX.js";const t="/assets/image-3-C5CNjG24.png",o="/assets/image-4-Sw1muvD5.png",c={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p>该多项式只需要计算4次乘法</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// s := a * a</span></span>
<span class="line"><span class="token keyword">float</span> s <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a</span></span>
<span class="line"><span class="token keyword">float</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0464964749f</span> <span class="token operator">*</span> s <span class="token operator">+</span> <span class="token number">0.15931422f</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">-</span> <span class="token number">0.327622764f</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">*</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>根据(x,y)所在象限计算<code>arctan2</code></strong></p><p>下面的<code>1.57079637f</code>为90° <code>3.14159274f</code>为180°</p><p>如果<code>abs_y &gt; abs_x</code>那么上面实际计算的是<code>arctan(a=x/y)</code>，<br> 否则，实际计算的是<code>arctan(a=y/z)</code></p><p>根据公式：<code>arctan(z)=π/2−arctan(1/z)</code><br> 所以<code>r = 1.57079637f - r</code></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// if |y| &gt; |x| then r := 1.57079637 - r</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>abs_y <span class="token operator">&gt;</span> abs_x<span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token number">1.57079637f</span> <span class="token operator">-</span> r<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x&lt;0</code> 可以认为是将r从第一或四象限翻转到第二或三象限：</p><p><img src="`+t+`" alt="alt text"></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// if x &lt; 0 then r := 3.14159274 - r</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token number">3.14159274f</span> <span class="token operator">-</span> r<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>y&lt;0</code> 可以认为是将r从第一或二象限翻转到第三或四象限：</p><p><img src="`+o+`" alt="alt text"></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// if y &lt; 0 then r := -r</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token operator">-</span>r<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;foc_utils.h&quot;</span></span></span>
<span class="line"><span class="token comment">// fast_atan2 based on https://math.stackexchange.com/a/1105038/81278</span></span>
<span class="line"><span class="token comment">// Via Odrive project</span></span>
<span class="line"><span class="token comment">// https://github.com/odriverobotics/ODrive/blob/master/Firmware/MotorControl/utils.cpp</span></span>
<span class="line"><span class="token comment">// This function is MIT licenced, copyright Oskar Weigl/Odrive Robotics</span></span>
<span class="line"><span class="token comment">// The origin for Odrive atan2 is public domain. Thanks to Odrive for making</span></span>
<span class="line"><span class="token comment">// it easy to borrow.</span></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>weak<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">float</span> <span class="token function">_atan2</span><span class="token punctuation">(</span><span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// a := min (|x|, |y|) / max (|x|, |y|)</span></span>
<span class="line">    <span class="token keyword">float</span> abs_y <span class="token operator">=</span> <span class="token function">fabsf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> abs_x <span class="token operator">=</span> <span class="token function">fabsf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// inject FLT_MIN in denominator to avoid division by zero</span></span>
<span class="line">    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>abs_x<span class="token punctuation">,</span> abs_y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>abs_x<span class="token punctuation">,</span> abs_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// s := a * a</span></span>
<span class="line">    <span class="token keyword">float</span> s <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a</span></span>
<span class="line">    <span class="token keyword">float</span> r <span class="token operator">=</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0464964749f</span> <span class="token operator">*</span> s <span class="token operator">+</span> <span class="token number">0.15931422f</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">-</span> <span class="token number">0.327622764f</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">*</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// if |y| &gt; |x| then r := 1.57079637 - r</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>abs_y <span class="token operator">&gt;</span> abs_x<span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token number">1.57079637f</span> <span class="token operator">-</span> r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// if x &lt; 0 then r := 3.14159274 - r</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token number">3.14159274f</span> <span class="token operator">-</span> r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// if y &lt; 0 then r := -r</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token operator">-</span>r<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> r<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const u=n(c,[["render",l],["__file","快速反正切计算.html.vue"]]),d=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/SimpleFOC%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BF%AB%E9%80%9F%E5%8F%8D%E6%AD%A3%E5%88%87%E8%AE%A1%E7%AE%97.html","title":"SimpleFOC源码阅读学习笔记：快速反正切函数","lang":"zh-CN","frontmatter":{"title":"SimpleFOC源码阅读学习笔记：快速反正切函数","shortTitle":"快速反正切函数","date":"2024-09-06T14:38:00.000Z","description":"原理 这段SimpleFOC的代码实际来自开源项目ODrive的utils.cpp， 理论依据来自stackexchange中的一篇问答， 下面尝试记录对该函数的理解。 arctan2(z)的计算过程 参数化简：计算a := min (|x|, |y|) / max (|x|, |y|)，使得a∈[0,1]。 多项式逼近：使用一个多项式来近似计算 ar...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/SimpleFOC%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BF%AB%E9%80%9F%E5%8F%8D%E6%AD%A3%E5%88%87%E8%AE%A1%E7%AE%97.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"SimpleFOC源码阅读学习笔记：快速反正切函数"}],["meta",{"property":"og:description","content":"原理 这段SimpleFOC的代码实际来自开源项目ODrive的utils.cpp， 理论依据来自stackexchange中的一篇问答， 下面尝试记录对该函数的理解。 arctan2(z)的计算过程 参数化简：计算a := min (|x|, |y|) / max (|x|, |y|)，使得a∈[0,1]。 多项式逼近：使用一个多项式来近似计算 ar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:37:49.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:published_time","content":"2024-09-06T14:38:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:37:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SimpleFOC源码阅读学习笔记：快速反正切函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-06T14:38:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:37:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"源代码","slug":"源代码","link":"#源代码","children":[]}],"git":{"createdTime":1725606011000,"updatedTime":1725611869000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":1}]},"readingTime":{"minutes":2.91,"words":873},"filePathRelative":"电子/SimpleFOC源码阅读学习笔记/快速反正切计算.md","localizedDate":"2024年9月6日","excerpt":"","autoDesc":true}');export{u as comp,d as data};
