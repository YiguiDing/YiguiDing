import{_ as o,r as p,o as r,c as d,e as i,w as t,b as c,a as n,d as s}from"./app-Cfj8KYFD.js";const u="/assets/image-24-BaQw_AWa.png",k="/assets/image-1-CyFyrZDP.png",m="/assets/image-23-B5ihtP1P.png",v="/assets/image-2-CHr1FY8x.png",_="/assets/image-3-Drf0_hFZ.png",b="/assets/image-4-CtFoChRh.png",g="/assets/image-Be_yRDMn.png",C="/assets/image-11-Cg_VZhDy.png",I="/assets/image-5-CJ9IWJGt.png",h="/assets/image-6-CVLpab6n.png",y="/assets/image-7-CV5MsY2U.png",P="/assets/image-9-b8CNtCzf.png",x="/assets/image-8-BpPrQI9R.png",f="/assets/image-10-biq1-qbr.png",A="/assets/image-12-lVdsRGFd.png",T="/assets/image-13-eiMo-DQc.png",E="/assets/image-14-zFcOHS-6.png",B="/assets/image-15-C3G42yj8.png",R="/assets/image-17-BGINZ3wP.png",S="/assets/image-16-8Vq75ZBY.png",O="/assets/image-18-CXS3Td8x.png",M="/assets/image-20-CIPN06K6.png",G="/assets/image-19-D9wwyMdh.png",D="/assets/image-21-DYNgp3yX.png",w="/assets/image-22-Rv28hyYn.png",N={},V=c('<h1 id="stm32及标准库学习笔记" tabindex="-1"><a class="header-anchor" href="#stm32及标准库学习笔记"><span>STM32及标准库学习笔记</span></a></h1><p><img src="'+u+'" alt="Alt text"></p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#stm32%E5%8F%8A%E6%A0%87%E5%87%86%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">STM32及标准库学习笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#f103c8t6%E7%AE%80%E4%BB%8B">F103C8T6简介</a></li><li><a href="#f1x%E7%89%87%E4%B8%8A%E8%B5%84%E6%BA%90">F1X片上资源</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84">系统结构</a></li><li><a href="#%E5%BC%95%E8%84%9A%E5%AE%9A%E4%B9%89">引脚定义</a></li><li><a href="#%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE">启动配置</a></li><li><a href="#%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84">工程架构</a></li><li><a href="#hello_world">Hello_World</a></li><li><a href="#%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93">标准外设库</a></li><li><a href="#rcc">RCC</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">基本介绍</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0">常用函数</a></li></ul></li><li><a href="#gpio">GPIO</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D-1">基本介绍</a></li><li><a href="#stm32f10x_gpioh">stm32f10x_gpio.h</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81%E7%82%B9%E7%81%AF">案例代码：点灯</a></li></ul></li><li><a href="#%E4%B8%AD%E6%96%AD">中断</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li><li><a href="#stm32%E7%9A%84%E4%B8%AD%E6%96%AD">STM32的中断</a></li><li><a href="#exti%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD">EXTI外部中断</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%85%89%E7%94%B5%E8%AE%A1%E6%95%B0%E5%99%A8%E8%A7%A6%E5%8F%91%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD">案例代码：光电计数器触发外部中断</a></li></ul></li><li><a href="#tim%E5%AE%9A%E6%97%B6%E5%99%A8">TIM定时器</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E9%80%9A%E7%94%A8%E9%AB%98%E7%BA%A7%E5%AE%9A%E6%97%B6%E5%99%A8">基本、通用、高级定时器</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8">基本定时器</a></li><li><a href="#%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8">通用定时器</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E5%AE%9A%E6%97%B6%E5%99%A8">高级定时器</a></li></ul></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD">案例：定时中断</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84">基本结构</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4">基本步骤</a></li><li><a href="#%E9%80%9A%E8%BF%87%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F%E6%BA%90%E5%AE%9E%E7%8E%B0setintervalcallbackms">通过内部时钟源——实现<code>setInterval(callback,ms)</code></a></li><li><a href="#%E9%80%9A%E8%BF%87%E5%A4%96%E9%83%A8%E6%97%B6%E9%92%9F%E6%BA%90%E5%AE%9E%E7%8E%B0setintervalcallbacktimes">通过外部时钟源——实现<code>setInterval(callback,times)</code></a></li></ul></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%AE%9A%E6%97%B6%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E8%BE%93%E5%87%BApwm%E6%B3%A2%E5%BD%A2">案例：定时输出比较——输出PWM波形</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E8%BE%93%E5%87%BA%E6%8D%95%E8%8E%B7%E6%B5%8B%E9%87%8F%E6%96%B9%E6%B3%A2">案例：定时器输出捕获——测量方波</a></li></ul></li></ul></li></ul><h2 id="f103c8t6简介" tabindex="-1"><a class="header-anchor" href="#f103c8t6简介"><span>F103C8T6简介</span></a></h2><ul><li>系列：主流系列STM32F1</li><li>内核：ARM Cortex-M3</li><li>主频：72MHz</li><li>RAM：20K（SRAM）</li><li>ROM：64K（Flash）</li><li>供电：2.0~3.6V（标准3.3V）</li><li>封装：LQFP48</li><li><img src="'+k+'" alt="Alt text"></li></ul><p><img src="'+m+'" alt="Alt text"></p><h2 id="f1x片上资源" tabindex="-1"><a class="header-anchor" href="#f1x片上资源"><span>F1X片上资源</span></a></h2><table><thead><tr><th style="text-align:center;">英文缩写</th><th style="text-align:center;">名称</th><th style="text-align:center;">笔记</th></tr></thead><tbody><tr><td style="text-align:center;">NVIC</td><td style="text-align:center;">嵌套向量中断控制器</td><td style="text-align:center;">系统外设，内核中管理中断的设备，如配置中断优先级</td></tr><tr><td style="text-align:center;">SysTick</td><td style="text-align:center;">系统滴答定时器</td><td style="text-align:center;">系统外设，内核定时器，给操作系统提供定时服务</td></tr><tr><td style="text-align:center;">RCC</td><td style="text-align:center;">复位和时钟控制</td><td style="text-align:center;">用于对系统时钟进行配置、开启其他模块的时钟</td></tr><tr><td style="text-align:center;">GPIO</td><td style="text-align:center;">通用IO口</td><td style="text-align:center;">通用IO口，可点灯，读取按键</td></tr><tr><td style="text-align:center;">AFIO</td><td style="text-align:center;">复用IO口</td><td style="text-align:center;">复用IO口，可实现复用端口重定义和中断端口配置</td></tr><tr><td style="text-align:center;">EXTI</td><td style="text-align:center;">外部中断</td><td style="text-align:center;">配置好外部中断后，可用于触发中断</td></tr><tr><td style="text-align:center;">TIM</td><td style="text-align:center;">定时器</td><td style="text-align:center;">可用于实现定时中断、测频率、生成PWM、配置成编码器</td></tr><tr><td style="text-align:center;">ADC</td><td style="text-align:center;">模数转换器</td><td style="text-align:center;">内置12位模数转换器 ,可直接读取IO口模拟电压</td></tr><tr><td style="text-align:center;">DMA</td><td style="text-align:center;">直接内存访问</td><td style="text-align:center;">配置好后，可替代CPU完成搬运数据的工作</td></tr><tr><td style="text-align:center;">USART</td><td style="text-align:center;">同步/异步串口通信</td><td style="text-align:center;">UART是同步串口 USART是同步/异步串口</td></tr><tr><td style="text-align:center;">I2C</td><td style="text-align:center;">I2C通信</td><td style="text-align:center;">内置控制器，实现了直接使用硬件输出时序波形</td></tr><tr><td style="text-align:center;">SPI</td><td style="text-align:center;">SPI通信</td><td style="text-align:center;">同上</td></tr><tr><td style="text-align:center;">CAN</td><td style="text-align:center;">CAN通信</td><td style="text-align:center;">同上</td></tr><tr><td style="text-align:center;">USB</td><td style="text-align:center;">USB通信</td><td style="text-align:center;">USB从机模式接口</td></tr><tr><td style="text-align:center;">RTC</td><td style="text-align:center;">实时时钟</td><td style="text-align:center;">实现年月日时分秒的计时功能，可接外部配用电池</td></tr><tr><td style="text-align:center;">CRC</td><td style="text-align:center;">CRC校验</td><td style="text-align:center;">直接通过硬件电路完成数据校验</td></tr><tr><td style="text-align:center;">PWR</td><td style="text-align:center;">电源控制</td><td style="text-align:center;">可让芯片睡眠，省电</td></tr><tr><td style="text-align:center;">BKP</td><td style="text-align:center;">备份寄存器</td><td style="text-align:center;">在断电时通过备用电池完成保持数据的操作</td></tr><tr><td style="text-align:center;">IWDG</td><td style="text-align:center;">独立看门狗</td><td style="text-align:center;">在程序卡死一定的时间后，自动复位芯片</td></tr><tr><td style="text-align:center;">WWDG</td><td style="text-align:center;">窗口看门狗</td><td style="text-align:center;">同上</td></tr><tr><td style="text-align:center;">DAC</td><td style="text-align:center;">数模转换器</td><td style="text-align:center;">可在IO口直接输出模拟电压</td></tr><tr><td style="text-align:center;">SDIO</td><td style="text-align:center;">SD卡接口</td><td style="text-align:center;">读写SD卡</td></tr><tr><td style="text-align:center;">FSMC</td><td style="text-align:center;">可变静态存储控制器</td><td style="text-align:center;">扩展内存</td></tr><tr><td style="text-align:center;">USB OTG</td><td style="text-align:center;">USB主机接口</td><td style="text-align:center;">USB主机模式接口，可读写其他USB设备</td></tr></tbody></table><h2 id="系统结构" tabindex="-1"><a class="header-anchor" href="#系统结构"><span>系统结构</span></a></h2><p><strong>几个重要总线</strong></p><ul><li><p><code>ICode总线</code> 连接Flash闪存 主要用来加载指令（Instruction）如：程序</p></li><li><p><code>DCode总线</code> 连接Flash闪存 主要用来加载数据（Data）如：常量、调试参数</p></li><li><p><code>System总线</code> 系统总线，通过总线矩阵连接到其他部分，如：SRAM(内存) FSMC</p></li><li><p><code>AHB系统总线</code> AHB(先进高性能)总线，挂载其他最基本的外设和高性能外设 如：复位、时钟控制、SDIO</p><ul><li><code>APB2</code> APB(先进外设)总线 连接一般外设 <code>频率一般72Mhz</code> <code>连接重要的外设</code> 如：高级定时器，GPIO，ADC</li><li><code>APB1</code> APB(先进外设)总线 连接一般外设 <code>频率一般36Mhz</code> <code>连接次要的外设</code> 如：普通定时器，USB</li></ul></li><li><p><code>DMA总线</code> DMA(直接内存访问)总线 DMA外设可以通过该总线代替CPU完成数据搬运工作，如：从ADC模数转换外设中的读取数值复制到内存中</p></li><li><p><img src="'+v+'" alt="Alt text"></p></li></ul><h2 id="引脚定义" tabindex="-1"><a class="header-anchor" href="#引脚定义"><span>引脚定义</span></a></h2><p><strong>特殊端口笔记</strong></p><table><thead><tr><th style="text-align:center;">引脚号</th><th style="text-align:left;">名称</th><th style="text-align:left;">默认功能</th><th style="text-align:left;">笔记</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>电源</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">1</td><td style="text-align:left;">VBAT</td><td style="text-align:left;">VBAT</td><td style="text-align:left;">可接3v备用电池给RTC时钟和备份寄存器供电</td></tr><tr><td style="text-align:center;">8-9</td><td style="text-align:left;">VSSA VDDA</td><td style="text-align:left;">VSSA VDDA</td><td style="text-align:left;">内部模拟电路供电</td></tr><tr><td style="text-align:center;">23-24</td><td style="text-align:left;">VSS_1 VDD_1</td><td style="text-align:left;">VSS_1 VDD_1</td><td style="text-align:left;">主电源</td></tr><tr><td style="text-align:center;">35-36</td><td style="text-align:left;">VSS_2 VDD_2</td><td style="text-align:left;">VSS_2 VDD_2</td><td style="text-align:left;">主电源</td></tr><tr><td style="text-align:center;">47-48</td><td style="text-align:left;">VSS_3 VDD_3</td><td style="text-align:left;">VSS_3 VDD_3</td><td style="text-align:left;">主电源</td></tr><tr><td style="text-align:center;"><strong>时钟</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">PC14-OSC32-IN</td><td style="text-align:left;">PC14</td><td style="text-align:left;">默认为PC14口 可外接32.768kMhz</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">PC15-OSC32-OUT</td><td style="text-align:left;">PC15</td><td style="text-align:left;">默认为PC15口 可外接32.768kMhz</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">OSC_IN</td><td style="text-align:left;">OSC_IN</td><td style="text-align:left;">默认为时钟输入 一般为8M</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">OSC_OUT</td><td style="text-align:left;">OSC_OUT</td><td style="text-align:left;">默认为时钟输入 一般为8M</td></tr><tr><td style="text-align:center;"><strong>复位</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:left;">NRST</td><td style="text-align:left;">NRST</td><td style="text-align:left;">低电平复位 N表示低电平</td></tr><tr><td style="text-align:center;"><strong>调试</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">34</td><td style="text-align:left;">PA13</td><td style="text-align:left;">JTMS/SWDIO</td><td style="text-align:left;">调试口 JTAG调试线1 / SWD调试线1</td></tr><tr><td style="text-align:center;">37</td><td style="text-align:left;">PA14</td><td style="text-align:left;">JTCK/SWCLK</td><td style="text-align:left;">调试口 JTAG调试线2 / SWD调试线2（共两根线）</td></tr><tr><td style="text-align:center;">38</td><td style="text-align:left;">PA15</td><td style="text-align:left;">JTDI</td><td style="text-align:left;">调试口 JTAG调试线3</td></tr><tr><td style="text-align:center;">39</td><td style="text-align:left;">PB3</td><td style="text-align:left;">JTDO</td><td style="text-align:left;">调试口 JTAG调试线4</td></tr><tr><td style="text-align:center;">40</td><td style="text-align:left;">PB4</td><td style="text-align:left;">NJTRST</td><td style="text-align:left;">调试口 JTAG调试线5（共五根线）</td></tr><tr><td style="text-align:center;"><strong>其他</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">PC13-TARMPER-RTC</td><td style="text-align:left;">PC13</td><td style="text-align:left;">默认为PC13口 另外可以实现侵入检测或输出RTC校准时钟</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:left;">PA0-WKUP</td><td style="text-align:left;">PA0</td><td style="text-align:left;">默认PA0 兼具唤醒功能，用于唤醒待机的STM32</td></tr><tr><td style="text-align:center;">20</td><td style="text-align:left;">BP2</td><td style="text-align:left;">BP2/BOOT1</td><td style="text-align:left;">BOOT1用来配置启动模式，配置成功后退化为BP2</td></tr><tr><td style="text-align:center;">44</td><td style="text-align:left;">BOOT0</td><td style="text-align:left;">BOOT0</td><td style="text-align:left;">BOOT0用来配置启动模式</td></tr></tbody></table><p><strong>所有引脚</strong></p><p><img src="'+_+'" alt="Alt text"></p><p>上图备注：</p><ul><li>红色：电源</li><li>蓝色：最小系统相关</li><li>绿色：IO口 功能口</li><li>类型：S电源 I输入 O输出</li><li>IO口电平：默认为3.3v；FT表示能够容忍5v电压</li><li>主功能： 该端口的默认功能</li><li>默认复用功能：该端口支持的其他功能</li><li>重定义功能：可将该端口上的功能重新映射到其他端口上</li></ul><h2 id="启动配置" tabindex="-1"><a class="header-anchor" href="#启动配置"><span>启动配置</span></a></h2><ul><li><code>BOOT1=x BOOT0=0</code> 从主闪存中加载程序并执行</li><li><code>BOOT1=0 BOOT0=1</code> 从系统存储器加载BootLoader程序并执行,该程序把从串口接收的数据写入主闪存，完成程序的烧录</li><li><code>BOOT1=1 BOOT0=1</code> 从内置SRAM启动，用于程序调试</li><li><img src="'+b+'" alt="Alt text"></li></ul><h2 id="工程架构" tabindex="-1"><a class="header-anchor" href="#工程架构"><span>工程架构</span></a></h2><p><strong>工程架构</strong></p><p><img src="'+g+`" alt="Alt text"></p><p><strong>项目结构</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
<span class="token operator">|</span>---Startup <span class="token comment"># 启动Stm32所需的最基本的几个文件,这几个文件可以在标准外设库中找到</span>
<span class="token operator">|</span>   +---startup*stm32f10x*??.s <span class="token comment"># 汇编启动文件，主要定义复位中断函数，在其中调用SystemInit();main();</span>
<span class="token operator">|</span>   +---system_stm32f10x.h
<span class="token operator">|</span>   +---system_stm32f10x.c <span class="token comment"># 定义了系统初始化函数SystemInit()负责初始化寄存器</span>
<span class="token operator">|</span>   +---core_cm3.h <span class="token comment"># 内核寄存器描述</span>
<span class="token operator">|</span>   +---core_cm3.c <span class="token comment"># 内核寄存器配置函数</span>
<span class="token operator">|</span>   <span class="token punctuation">\\</span>---stm32f10x.h <span class="token comment"># 外设寄存器描述，当定义USE_STDPERIPH_DRIVER后，将自动包含stm32f10x_conf.h</span>
<span class="token operator">|</span>
<span class="token operator">|</span>---StdPeriph_Lib <span class="token comment"># 标准外设库</span>
<span class="token operator">|</span>   +---misc.h <span class="token comment"># 内核中的外设</span>
<span class="token operator">|</span>   +---misc.c
<span class="token operator">|</span>   +---stm32f10x_gpio.h <span class="token comment"># GPIO外设</span>
<span class="token operator">|</span>   +---stm32f10x_gpio.c
<span class="token operator">|</span>   <span class="token punctuation">\\</span>---<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>略
<span class="token operator">|</span>
<span class="token operator">|</span>---User
<span class="token operator">|</span>   +---main.c <span class="token comment"># 用户代码</span>
<span class="token operator">|</span>   +---stm32f10x_conf.h <span class="token comment"># 外设库配置文件，用来#include&lt;标准外设&gt;</span>
<span class="token operator">|</span>   +---stm32f10x_it.h
<span class="token operator">|</span>   <span class="token punctuation">\\</span>---stm32f10x_it.c <span class="token comment"># 各种中断函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello_World</span></a></h2><p><strong>寄存器点灯</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stm32f10x.h&quot;</span> <span class="token comment">// 包含了外设寄存器描述</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.通过RCC寄存器 开启GPIO_C的时钟</span>
    RCC<span class="token operator">-&gt;</span>APB2ENR <span class="token operator">=</span> <span class="token number">0x00000010</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.通过GOPIO_C_CRH高寄存器 配置13号口的模式 为通用推挽输出模式、最大速度为50Mhz</span>
    GPIOC<span class="token operator">-&gt;</span>CRH <span class="token operator">=</span> <span class="token number">0x00300000</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.通过GPIO_C_ODR输出数据寄存器 配置C13口输出低电平</span>
    GPIOC<span class="token operator">-&gt;</span>ODR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x00002000</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>标准库点灯</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 定义 USE_STDPERIPH_DRIVER 后</span>
<span class="token comment">// \`stm32f10x.h\` 会通过条件编译自动包含 \`stm32f10x_conf.h\` 文件</span>
<span class="token comment">// 要在 \`stm32f10x_conf.h\` 中配置： \`#include &quot;stm32f10x_gpio.h&quot;\` 还有rcc</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_STDPERIPH_DRIVER</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stm32f10x.h&quot;</span> <span class="token comment">// 包含了外设寄存器描述</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 启用APB2_GPIOC外设时钟</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 初始化GPIOC_13 为推挽输出、速度50MHz</span>
    GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span>GPIO_Pin_13<span class="token punctuation">,</span> GPIO_Speed_50MHz<span class="token punctuation">,</span> GPIO_Mode_Out_PP<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.设置输出低电平</span>
    <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> GPIO_Pin_13<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准外设库" tabindex="-1"><a class="header-anchor" href="#标准外设库"><span>标准外设库</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>- STM32F10x_StdPeriph_Lib_V3.5.0
  - Libraries/ <span class="token variable"><span class="token variable">\`</span>标准库<span class="token variable">\`</span></span>
    - CMSIS/CM3/ <span class="token variable"><span class="token variable">\`</span>CMSIS表示：通用微控制器软件接口标准<span class="token punctuation">;</span> CM3表示：Cortex-M3<span class="token variable">\`</span></span>
      - /CoreSupport/ <span class="token variable"><span class="token variable">\`</span>内核支持<span class="token variable">\`</span></span>
        - core_cm3.h <span class="token variable"><span class="token variable">\`</span>内核寄存器描述文件<span class="token variable">\`</span></span>
        - core_cm3.c <span class="token variable"><span class="token variable">\`</span>内核寄存器配置函数<span class="token variable">\`</span></span>
      - DeviceSupport/ <span class="token variable"><span class="token variable">\`</span>外设支持<span class="token variable">\`</span></span>
        - ST/STM32F10x/ <span class="token variable"><span class="token variable">\`</span>ST公司产品系列<span class="token variable">\`</span></span>
          - startup/ <span class="token variable"><span class="token variable">\`</span>启动文件,汇编代码,定义了复位中断和其他中断函数，复位中断函数中调用了SystemInit<span class="token punctuation">(</span><span class="token punctuation">)</span>和main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
            - arm/ <span class="token variable"><span class="token variable">\`</span>ARM公司生产的芯片<span class="token variable">\`</span></span>
              - startup_stm32f10x_ld_vl.s
              - startup_stm32f10x_md_vl.s
              - startup_stm32f10x_hd_vl.s
              - startup_stm32f10x_ld.s
              - startup_stm32f10x_md.s
              - startup_stm32f10x_hd.s
              - startup_stm32f10x_xl.s
              - startup_stm32f10x_cl.s
          - stm32f10x.h <span class="token variable"><span class="token variable">\`</span>外设寄存器描述文件；当定义了USE_STDPERIPH_DRIVER后，将自动包含stm32f10x_conf.h文件，该文件用于包含标准外设库<span class="token variable">\`</span></span>
          - system_stm32f10x.c <span class="token variable"><span class="token variable">\`</span>定义了SystemInit<span class="token punctuation">(</span><span class="token punctuation">)</span>负责初始化寄存器<span class="token variable">\`</span></span>
          - system_stm32f10x.h
    - STM32F10x_StdPeriph_Driver/ <span class="token variable"><span class="token variable">\`</span>标准外设驱动<span class="token variable">\`</span></span>
      - inc/ <span class="token variable"><span class="token variable">\`</span>头文件<span class="token variable">\`</span></span>
        - misc.h <span class="token variable"><span class="token variable">\`</span>内核中的外设<span class="token variable">\`</span></span>
        - stm32f10x_dac.h
        - stm32f10x_gpio.h
        - <span class="token punctuation">..</span>.略
      - src/ <span class="token variable"><span class="token variable">\`</span>具体实现<span class="token variable">\`</span></span>
        - <span class="token punctuation">..</span>.略
      - Release_Notes.html
- Project/ <span class="token variable"><span class="token variable">\`</span>官方提供的工程案例和模板，可以作为使用库函数的参考<span class="token variable">\`</span></span>
  - STM32F10x_StdPeriph_Examples/ <span class="token variable"><span class="token variable">\`</span>案例<span class="token variable">\`</span></span>
  - STM32F10x_StdPeriph_Template/ <span class="token variable"><span class="token variable">\`</span>模板<span class="token variable">\`</span></span>
    - RIDE/
    - EWARM/
    - HiTOP/
    - MDK-ARM/
    - TrueSTUDIO/
    - stm32f10x_conf.h <span class="token variable"><span class="token variable">\`</span>用来配置标准外设库头文件的配置文件，同时包含一个所有库函数都需要的参数检查函数定义<span class="token variable">\`</span></span>
    - stm32f10x_it.c <span class="token variable"><span class="token variable">\`</span>用来存放中断函数<span class="token variable">\`</span></span>
    - stm32f10x_it.h
    - system_stm32f10x.c
    - main.c 主函数
    - Release_Notes.html 发布说明
- Utilities/ <span class="token variable"><span class="token variable">\`</span>官方用于测评STM32的程序<span class="token variable">\`</span></span>
- Release_Notes.html <span class="token variable"><span class="token variable">\`</span>发布说明<span class="token variable">\`</span></span>
- stm32f10x_stdperiph_lib_um.chm <span class="token variable"><span class="token variable">\`</span>帮助文档<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动文件的选择——型号分类及缩写</strong></p><table><thead><tr><th style="text-align:left;">文件</th><th style="text-align:left;">缩写</th><th>释义</th><th>释义</th><th>型号</th></tr></thead><tbody><tr><td style="text-align:left;">startup_stm32f10x_ld_vl.s</td><td style="text-align:left;">LD_VL(Value Line)</td><td>小容量产品超值系列</td><td>16~32K</td><td>STM32F100</td></tr><tr><td style="text-align:left;">startup_stm32f10x_md_vl.s</td><td style="text-align:left;">MD_VL(Value Line)</td><td>中容量产品超值系列</td><td>64~128K</td><td>STM32F100</td></tr><tr><td style="text-align:left;">startup_stm32f10x_hd_vl.s</td><td style="text-align:left;">HD_VL(Value Line)</td><td>大容量产品超值系列</td><td>256~512K</td><td>STM32F100</td></tr><tr><td style="text-align:left;">startup_stm32f10x_ld.s</td><td style="text-align:left;">LD(Low Density)</td><td>小容量产品</td><td>16~32K</td><td>STM32F101/102/103</td></tr><tr><td style="text-align:left;">startup_stm32f10x_md.s</td><td style="text-align:left;">MD(Medium Density)</td><td>中容量产品</td><td>64~128K</td><td>STM32F101/102/103</td></tr><tr><td style="text-align:left;">startup_stm32f10x_hd.s</td><td style="text-align:left;">HD(High Density)</td><td>大容量产品</td><td>256~512K</td><td>STM32F101/102/103</td></tr><tr><td style="text-align:left;">startup_stm32f10x_xl.s</td><td style="text-align:left;">XL(Extra Large)</td><td>加大容量产品</td><td>大于512K</td><td>STM32F101/102/103</td></tr><tr><td style="text-align:left;">startup_stm32f10x_cl.s</td><td style="text-align:left;">CL(Connectivity Line)</td><td>互联型产品</td><td>-</td><td>STM32F105/107</td></tr></tbody></table><h2 id="rcc" tabindex="-1"><a class="header-anchor" href="#rcc"><span>RCC</span></a></h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h3><blockquote><p>RCC复位和时钟控制外设</p></blockquote><p><strong>在系统结构中的位置</strong></p><ul><li>位于AHB系统总线上</li><li><img src="`+C+'" alt="Alt text"></li></ul><p><strong>RCC相关寄存器</strong></p><ul><li>时钟控制寄存器 <code>RCC_CR</code></li><li>时钟配置寄存器<code>RCC_CFGR</code></li><li>时钟中断寄存器 <code>RCC_CIR</code></li><li>APB2 外设复位寄存器 <code>RCC_APB2RSTR</code></li><li>APB1 外设复位寄存器 <code>RCC_APB1RSTR</code></li><li><strong>AHB 外设时钟使能寄存器</strong> <code>RCC_AHBENR</code></li><li><strong>APB2 外设时钟使能寄存器</strong> <code>RCC_APB2ENR</code></li><li><strong>APB1 外设时钟使能寄存器</strong> <code>RCC_APB1ENR</code></li><li>备份域控制寄存器 <code>RCC_BDCR</code></li><li>控制/状态寄存器 <code>RCC_CSR</code></li></ul><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数"><span>常用函数</span></a></h3><blockquote><p>大部分功能都用不到，这里只粘贴几个最常用的函数的使用方法。</p></blockquote>',44),F=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/**
  * @brief  启用或禁用高速APB2外设时钟
  * @param  RCC_APB2Periph: 指定哪一个APB2外设获得时钟
  *   这个参数可以是以下任何参数的结合:
  *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
  *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
  *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
  *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
  *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
  *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
  *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11
  * @param  NewState: 指定外设时钟的新状态.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"RCC_APB2PeriphClockCmd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint32_t"),s(" RCC_APB2Periph"),n("span",{class:"token punctuation"},","),s(" FunctionalState NewState"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/**
  * @brief  启用或禁用低速APB1外设时钟
  * @param  RCC_APB1Periph: 指定哪一个APB1外设获得时钟
  *   这个参数可以是以下任何参数的结合:
  *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
  *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
  *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
  *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4,
  *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
  *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
  *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
  *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
  * @param  NewState: 指定外设时钟的新状态.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"RCC_APB1PeriphClockCmd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint32_t"),s(" RCC_APB1Periph"),n("span",{class:"token punctuation"},","),s(" FunctionalState NewState"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/**
  * @brief  启用或禁用AHB(先进高性能)总线外设时钟
  *
  * @param  RCC_AHBPeriph: 指定哪一个AHB外设可以获得时钟
  *
  *   对于其他STM32互联型设备，这个参数可以是以下任何值的结合
  *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
  *   of the following values:
  *     @arg RCC_AHBPeriph_DMA1
  *     @arg RCC_AHBPeriph_DMA2
  *     @arg RCC_AHBPeriph_SRAM
  *     @arg RCC_AHBPeriph_FLITF
  *     @arg RCC_AHBPeriph_CRC
  *     @arg RCC_AHBPeriph_OTG_FS
  *     @arg RCC_AHBPeriph_ETH_MAC
  *     @arg RCC_AHBPeriph_ETH_MAC_Tx
  *     @arg RCC_AHBPeriph_ETH_MAC_Rx
  *
  *   对于其他STM32设备，这个参数可以是以下任何值的结合
  *   For @b other_STM32_devices, this parameter can be any combination of the
  *   following values:
  *     @arg RCC_AHBPeriph_DMA1
  *     @arg RCC_AHBPeriph_DMA2
  *     @arg RCC_AHBPeriph_SRAM
  *     @arg RCC_AHBPeriph_FLITF
  *     @arg RCC_AHBPeriph_CRC
  *     @arg RCC_AHBPeriph_FSMC
  *     @arg RCC_AHBPeriph_SDIO
  * @note SRAM 和 FLITF 的时钟只能在睡眠模式被关闭
  *
  * @param  NewState: 新的状态
  *     @arg ENABLE
  *     @arg DISABLE
  */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"RCC_AHBPeriphClockCmd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"uint32_t"),s(" RCC_AHBPeriph"),n("span",{class:"token punctuation"},","),s(" FunctionalState NewState"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=c('<p><strong>RCC外设所有函数功能描述</strong></p><blockquote><p>感觉大概知道下有哪些功能就行了</p></blockquote><table><thead><tr><th style="text-align:left;">函数名 (加粗表示常用)</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">RCC_DeInit</td><td style="text-align:left;">将外设 RCC 寄存器重设为缺省值</td></tr><tr><td style="text-align:left;">RCC_HSEConfig</td><td style="text-align:left;">设置外部高速晶振（HSE）</td></tr><tr><td style="text-align:left;">RCC_WaitForHSEStartUp</td><td style="text-align:left;">等待 HSE 起振</td></tr><tr><td style="text-align:left;">RCC_AdjustHSICalibrationValue</td><td style="text-align:left;">调整内部高速晶振（HSI）校准值</td></tr><tr><td style="text-align:left;">RCC_HSICmd</td><td style="text-align:left;">使能或者失能内部高速晶振（HSI）</td></tr><tr><td style="text-align:left;">RCC_PLLConfig</td><td style="text-align:left;">设置 PLL 时钟源及倍频系数</td></tr><tr><td style="text-align:left;">RCC_PLLCmd</td><td style="text-align:left;">使能或者失能 PLL</td></tr><tr><td style="text-align:left;">RCC_SYSCLKConfig</td><td style="text-align:left;">设置系统时钟（SYSCLK）</td></tr><tr><td style="text-align:left;">RCC_GetSYSCLKSource</td><td style="text-align:left;">返回用作系统时钟的时钟源</td></tr><tr><td style="text-align:left;">RCC_HCLKConfig</td><td style="text-align:left;">设置 AHB 时钟（HCLK）</td></tr><tr><td style="text-align:left;">RCC_PCLK1Config</td><td style="text-align:left;">设置低速 AHB 时钟（PCLK1）</td></tr><tr><td style="text-align:left;">RCC_PCLK2Config</td><td style="text-align:left;">设置高速 AHB 时钟（PCLK2）</td></tr><tr><td style="text-align:left;">RCC_ITConfig</td><td style="text-align:left;">使能或者失能指定的 RCC 中断</td></tr><tr><td style="text-align:left;">RCC_USBCLKConfig</td><td style="text-align:left;">设置 USB 时钟（USBCLK）</td></tr><tr><td style="text-align:left;">RCC_ADCCLKConfig</td><td style="text-align:left;">设置 ADC 时钟（ADCCLK）</td></tr><tr><td style="text-align:left;">RCC_LSEConfig</td><td style="text-align:left;">设置外部低速晶振（LSE）</td></tr><tr><td style="text-align:left;">RCC_LSICmd</td><td style="text-align:left;">使能或者失能内部低速晶振（LSI）</td></tr><tr><td style="text-align:left;">RCC_RTCCLKConfig</td><td style="text-align:left;">设置 RTC 时钟（RTCCLK）</td></tr><tr><td style="text-align:left;">RCC_RTCCLKCmd</td><td style="text-align:left;">使能或者失能 RTC 时钟</td></tr><tr><td style="text-align:left;">RCC_GetClocksFreq</td><td style="text-align:left;">返回不同片上时钟的频率</td></tr><tr><td style="text-align:left;"><strong>RCC_AHBPeriphClockCmd</strong></td><td style="text-align:left;">使能或者失能 AHB 外设时钟</td></tr><tr><td style="text-align:left;"><strong>RCC_APB2PeriphClockCmd</strong></td><td style="text-align:left;">使能或者失能 APB2 外设时钟</td></tr><tr><td style="text-align:left;"><strong>RCC_APB1PeriphClockCmd</strong></td><td style="text-align:left;">使能或者失能 APB1 外设时钟</td></tr><tr><td style="text-align:left;">RCC_APB2PeriphResetCmd</td><td style="text-align:left;">强制或者释放高速 APB（APB2）外设复位</td></tr><tr><td style="text-align:left;">RCC_APB1PeriphResetCmd</td><td style="text-align:left;">强制或者释放低速 APB（APB1）外设复位</td></tr><tr><td style="text-align:left;">RCC_BackupResetCmd</td><td style="text-align:left;">强制或者释放后备域复位</td></tr><tr><td style="text-align:left;">RCC_ClockSecuritySystemCmd</td><td style="text-align:left;">使能或者失能时钟安全系统</td></tr><tr><td style="text-align:left;">RCC_MCOConfig</td><td style="text-align:left;">选择在 MCO 管脚上输出的时钟源</td></tr><tr><td style="text-align:left;">RCC_GetFlagStatus</td><td style="text-align:left;">检查指定的 RCC 标志位设置与否</td></tr><tr><td style="text-align:left;">RCC_ClearFlag</td><td style="text-align:left;">清除 RCC 的复位标志位</td></tr><tr><td style="text-align:left;">RCC_GetITStatus</td><td style="text-align:left;">检查指定的 RCC 中断发生与否</td></tr><tr><td style="text-align:left;">RCC_ClearITPendingBit</td><td style="text-align:left;">清除 RCC 的中断待处理位</td></tr></tbody></table><h2 id="gpio" tabindex="-1"><a class="header-anchor" href="#gpio"><span>GPIO</span></a></h2><h3 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1"><span>基本介绍</span></a></h3><ul><li>GPIO（General Purpose Input Output）通用输入输出口</li><li>可配置为8种输入输出模式</li><li>引脚电平：0V~3.3V，部分引脚可容忍5V</li><li>输出模式下可控制端口输出高低电平</li><li>输入模式下可读取端口的高低电平或电压</li></ul><p><strong>GPIO基本结构</strong></p><ul><li>这里的寄存器实际上共有7个 <ul><li>32bit配置寄存器x2 <code>GPIOx_CRL</code> <code>GPIOx_CRH</code> (4bit x 16 = 64bit)</li><li>32bit配置锁定寄存器x1 <code>GPIOx_LCKR</code></li><li>32bit数据寄存器x2 <code>GPIOx_IDR</code> <code>GPIOx_ODR</code> (输入/输出)</li><li>32bit置位/复位寄存器x1 <code>GPIOx_BSRR</code> (低16bit置位，高16bit复位) (可用于设置某位的同时清除另一位)</li><li>16bit复位寄存器x1 <code>GPIOx_BRR</code> (低16bit复位)</li></ul></li><li><img src="'+I+'" alt="Alt text"></li></ul><p><strong>GPIO位结构</strong></p><ul><li>这里值得注意的一些点： <ul><li>对<code>输出数据寄存器</code>操作会影响16个端口</li><li>对<code>位设置/清除寄存器</code>操作只影响具体的位</li><li>复用功能输入实际上是数字信号</li><li>GPIO模式决定了上拉电阻和下拉电阻是否启用，以及上下MOS管是否受控。</li></ul></li><li><img src="'+h+'" alt="Alt text"></li></ul><p><strong>八种GPIO模式</strong></p><table><thead><tr><th style="text-align:center;">模式名称</th><th style="text-align:center;">性质</th><th style="text-align:left;">特征</th></tr></thead><tbody><tr><td style="text-align:center;">浮空输入</td><td style="text-align:center;"><strong>数字输入</strong></td><td style="text-align:left;">可读取引脚电平，若引脚悬空，则电平不确定</td></tr><tr><td style="text-align:center;">上拉输入</td><td style="text-align:center;"><strong>数字输入</strong></td><td style="text-align:left;">可读取引脚电平，内部连接上拉电阻，悬空时默认高电平</td></tr><tr><td style="text-align:center;">下拉输入</td><td style="text-align:center;"><strong>数字输入</strong></td><td style="text-align:left;">可读取引脚电平，内部连接下拉电阻，悬空时默认低电平</td></tr><tr><td style="text-align:center;">模拟输入</td><td style="text-align:center;"><strong>模拟输入</strong></td><td style="text-align:left;">GPIO无效，引脚直接接入内部ADC</td></tr><tr><td style="text-align:center;">开漏输出</td><td style="text-align:center;"><code>数字输出</code></td><td style="text-align:left;">可输出引脚电平，高电平为高阻态，低电平接VSS</td></tr><tr><td style="text-align:center;">推挽输出</td><td style="text-align:center;"><code>数字输出</code></td><td style="text-align:left;">可输出引脚电平，高电平接VDD，低电平接VSS</td></tr><tr><td style="text-align:center;">复用开漏输出</td><td style="text-align:center;"><code>数字输出</code></td><td style="text-align:left;">由片上外设控制，高电平为高阻态，低电平接VSS</td></tr><tr><td style="text-align:center;">复用推挽输出</td><td style="text-align:center;"><code>数字输出</code></td><td style="text-align:left;">由片上外设控制，高电平接VDD，低电平接VSS</td></tr></tbody></table><p><strong>数字输入模式电路</strong></p><ul><li>特点 <ul><li>无法输出</li><li>浮空输入 上下拉电阻失效 电平不确定</li><li>上拉输入 上拉电阻有效 默认高电平</li><li>下拉输入 下拉电阻有效 默认低电平</li></ul></li><li><img src="'+y+'" alt="Alt text"></li></ul><p><strong>模拟输入模式电路</strong></p><ul><li>特点 <ul><li>肖特基触发器关闭，无法读取数字输入信号</li><li>输出电路断开，无法输出信号</li><li>引脚信号直接接入ADC</li></ul></li><li><img src="'+P+'" alt="Alt text"></li></ul><p><strong>数字输出模式电路</strong></p><ul><li>特点 <ul><li>上管无效为开漏输出</li><li>上下管都有效为推挽输出</li><li>肖特基触发器开启，可以读取到数字输入</li></ul></li><li><img src="'+x+'" alt="Alt text"></li></ul><p><strong>复用输出模式</strong></p><ul><li>特点 <ul><li>输出的控制权转交给片上外设</li><li>肖特基触发器开启，仍然能够读取数字输入</li></ul></li><li><img src="'+f+`" alt="Alt text"></li></ul><h3 id="stm32f10x-gpio-h" tabindex="-1"><a class="header-anchor" href="#stm32f10x-gpio-h"><span>stm32f10x_gpio.h</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 接口描述：</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_DeInit</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 说明：</span>
    复位指定GPIO
<span class="token comment">// 示例：</span>
    <span class="token function">GPIO_DeInit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 接口描述：</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_AFIODeInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 说明：</span>
    复位AFIO外设
<span class="token comment">// 示例：</span>
    <span class="token function">GPIO_AFIODeInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 接口描述：</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> GPIO_InitTypeDef<span class="token operator">*</span> GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 说明：</span>
    用结构体的参数来复位指定IO口
<span class="token comment">// 示例：</span>
    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>
    <span class="token comment">// 配置Pin</span>
    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment">// GPIO_Pin_[0,15] And GPIO_Pin_All</span>
    <span class="token comment">// 配置速度</span>
    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> <span class="token comment">// GPIO_Speed_10MHz,GPIO_Speed_2MHz,GPIO_Speed_50MHz</span>
    <span class="token comment">// 配置模式：</span>
    <span class="token comment">// GPIO_Mode_AIN模拟输入</span>
    <span class="token comment">// GPIO_Mode_IN_FLOATING 悬空数字输入 GPIO_Mode_IPD上拉数字输入</span>
    <span class="token comment">// GPIO_Mode_Out_OD 开漏输出 GPIO_Mode_Out_PP推挽输出</span>
    <span class="token comment">// GPIO_Mode_AF_OD复用开漏输出  GPIO_Mode_AF_PP复用推挽输出</span>
    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 接口描述：</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_StructInit</span><span class="token punctuation">(</span>GPIO_InitTypeDef<span class="token operator">*</span> GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 说明：</span>
    给接口体初始化<span class="token punctuation">(</span>赋默认值<span class="token punctuation">)</span>
<span class="token comment">// 示例：</span>
    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>
    <span class="token function">GPIO_StructInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 四个读取函数</span>
    <span class="token comment">// 读取输入寄存器某位</span>
    <span class="token keyword">uint8_t</span> <span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取输入寄存器</span>
    <span class="token keyword">uint16_t</span> <span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取输出寄存器某位</span>
    <span class="token keyword">uint8_t</span> <span class="token function">GPIO_ReadOutputDataBit</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取输出寄存器</span>
    <span class="token keyword">uint16_t</span> <span class="token function">GPIO_ReadOutputData</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 四个写入函数</span>
    <span class="token comment">// 给指定的某些位写入1</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 给指定的某些位写入0</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 给指定的某些位写入1-Bit_SET或0-Bit_RESET</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">,</span> BitAction BitVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 给指定端口写入16位数据</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> PortVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token comment">// 锁定端口配置</span>
    <span class="token keyword">void</span> <span class="token function">GPIO_PinLockConfig</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -----------------------------------------------------</span>
<span class="token keyword">void</span> <span class="token function">GPIO_EventOutputConfig</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> GPIO_PortSource<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> GPIO_PinSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">GPIO_EventOutputCmd</span><span class="token punctuation">(</span>FunctionalState NewState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> GPIO_Remap<span class="token punctuation">,</span> FunctionalState NewState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> GPIO_PortSource<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> GPIO_PinSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">GPIO_ETH_MediaInterfaceConfig</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> GPIO_ETH_MediaInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例代码-点灯" tabindex="-1"><a class="header-anchor" href="#案例代码-点灯"><span>案例代码：点灯</span></a></h3><p><strong>步骤</strong></p><ul><li>配置RCC外设开启相关端口的时钟</li><li>配置GPIO口输出模式</li><li>输出</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_STDPERIPH_DRIVER</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stm32f10x.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.启用APB2_GPIOC外设时钟</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.初始化GPIOC_13 为推挽输出、速度50MHz</span>
    GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span>GPIO_Pin_13<span class="token punctuation">,</span> GPIO_Speed_50MHz<span class="token punctuation">,</span> GPIO_Mode_Out_PP<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.设置输出低电平</span>
    <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span>GPIO_Pin_13<span class="token punctuation">,</span>Bit_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中断" tabindex="-1"><a class="header-anchor" href="#中断"><span>中断</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><ul><li><strong>中断：</strong> 在主程序运行过程中，出现了特定的<strong>中断触发条件</strong>（中断源），使得CPU暂停当前正在运行的程序，转而去处理<strong>中断程序</strong>，处理完成后又返回原来被暂停的位置继续运行</li><li><strong>中断优先级：</strong> 当有多个中断源同时申请中断时，CPU会根据中断源的轻重缓急进行裁决，优先响应更加紧急的中断源</li><li><strong>中断嵌套：</strong> 当一个中断程序正在运行时，又有新的更高优先级的中断源申请中断，CPU再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次进行返回</li></ul><p><strong>中断执行流程</strong></p><p><img src="`+A+'" alt="Alt text"></p><h3 id="stm32的中断" tabindex="-1"><a class="header-anchor" href="#stm32的中断"><span>STM32的中断</span></a></h3><p><strong>介绍</strong></p><ul><li>68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等多个外设</li><li>使用NVIC统一管理中断，每个中断通道都拥有<strong>16</strong>个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</li></ul><p><strong>STM32中断向量表</strong></p><ul><li>分类 <ul><li>灰色的都是内核的中断，一般用不到。 <ul><li>Reset复位中断，当产生复位事件时程序就会自动执行复位中断。</li></ul></li><li>其余部分为外设中断</li></ul></li><li>中断地址 <ul><li>外设申请中断时，会跳转到相应的中断地址执行程序</li><li>而中断跳转只能跳转到固定的地址</li><li>用户定义的中断处理函数在编译器编译后，其地址是不固定的</li><li>这就需要在跳转到中断地址后再次跳转到用户定义的中断函数，这部分工作将会由编译器自动完成（定义在了setup汇编文件中）。</li></ul></li><li><img src="'+T+'" alt="Alt text"></li></ul><p><strong>NVIC-嵌套中断向量控制器</strong></p><ul><li>是统一分配中断优先级和管理中断的<strong>内核外设</strong>，</li><li>负责根据中断的优先级决定中断的先后顺序，</li><li>以及是否要嵌套处理新的中断。</li><li><img src="'+E+'" alt="Alt text"></li></ul><p><strong>NVIC优先级分组</strong></p><ul><li>分组 <ul><li>NVIC的中断优先级由优先级寄存器的4位决定（共16个优先级）</li><li>这4位可以进行切分，分为</li><li>高n位的<strong>抢占优先级</strong>和</li><li>低(4-n)位的<strong>响应优先级</strong></li></ul></li><li>优先级 <ul><li><code>抢占优先级高的可以中断嵌套，</code></li><li><code>响应优先级高的可以优先排队，</code></li><li><code>抢占优先级和响应优先级均相同的按中断号排队</code></li></ul></li></ul><table><thead><tr><th style="text-align:center;">分组方式</th><th style="text-align:center;">抢占优先级</th><th style="text-align:center;">响应优先级</th></tr></thead><tbody><tr><td style="text-align:center;">分组0</td><td style="text-align:center;">0位，取值为0</td><td style="text-align:center;">4位，取值为0~15</td></tr><tr><td style="text-align:center;">分组1</td><td style="text-align:center;">1位，取值为0~1</td><td style="text-align:center;">3位，取值为0~7</td></tr><tr><td style="text-align:center;">分组2</td><td style="text-align:center;">2位，取值为0~3</td><td style="text-align:center;">2位，取值为0~3</td></tr><tr><td style="text-align:center;">分组3</td><td style="text-align:center;">3位，取值为0~7</td><td style="text-align:center;">1位，取值为0~1</td></tr><tr><td style="text-align:center;">分组4</td><td style="text-align:center;">4位，取值为0~15</td><td style="text-align:center;">0位，取值为0</td></tr></tbody></table><h3 id="exti外部中断" tabindex="-1"><a class="header-anchor" href="#exti外部中断"><span>EXTI外部中断</span></a></h3><p><strong>介绍</strong></p><ul><li>EXTI（Extern Interrupt）外部中断</li><li><code>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序</code></li><li>支持的触发方式： <ul><li>上升沿</li><li>下降沿</li><li>双边沿</li><li>软件触发</li></ul></li><li>支持的GPIO口： <ul><li><strong>所有GPIO口</strong></li><li>但<strong>相同的Pin不能同时触发中断</strong>,就是说PA0和PB0不能同时作为中断触发源</li></ul></li><li>通道数（<strong>共20个通道</strong>）： <ul><li>16个GPIO_Pin</li><li>外加PVD输出</li><li>RTC闹钟</li><li>USB唤醒</li><li>以太网唤醒</li></ul></li><li>触发响应方式： <ul><li>中断响应：通道电压变化，申请中断，让CPU执行中断函数</li><li>事件响应：通道电压变化，触发事件，触发其他外设的操作</li></ul></li><li><strong>EXTI基本结构</strong><ul><li><img src="'+B+'" alt="Alt text"></li></ul></li></ul><p><strong>EXTI外部中断框图</strong></p><ul><li>下图左侧的输入线就是20个外部中断通道</li><li><strong>边沿检测电路</strong>根据<strong>上升沿触发选择寄存器</strong>和<strong>下降沿触发选择寄存器</strong>的值</li><li>决定输出到或门的值，然后输出到<strong>请求挂起寄存器</strong>，然后再输出至后续的与门。</li><li><strong>中断屏蔽寄存器</strong>就相当于是这个与门的开关，决定了中断信号能否发送至后续的NVIC</li><li>从或门输出的信号还将经过脉冲发生器，用来触发其他外设</li><li><img src="'+R+'" alt="Alt text"></li></ul><p><strong>AFIO中断引脚选择</strong></p><ul><li>AFIO主要用于引脚复用功能的选择和重定义</li><li>在STM32中，AFIO主要完成两个任务： <ul><li>复用功能引脚重映射</li><li><strong>中断引脚选择</strong></li></ul></li><li>下图的主要意思就是<strong>EXTIO只能是PA0~PG0中的其中一个</strong>，具体选择哪一个，由AFIO来控制</li><li><img src="'+S+`" alt="Alt text"></li></ul><h3 id="案例代码-光电计数器触发外部中断" tabindex="-1"><a class="header-anchor" href="#案例代码-光电计数器触发外部中断"><span>案例代码：光电计数器触发外部中断</span></a></h3><p><strong>基本步骤</strong></p><ul><li>开启GPIOx时钟</li><li>配置GPIOx_Pinx</li><li>开启AFIO时钟</li><li>配置AFIO，使GPIOx_Pinx通向 EXTIx中断信号</li><li>配置EXTI，启用EXTI_Linex</li><li>配置NVIC,设置EXTIxx_IRQn中断函数优先级</li><li>定义中断函数EXTIxx_IRQn <ul><li>在中断执行完毕后清除请求挂起寄存器对应的位</li></ul></li></ul><p><strong>配置GPIO_G_Pin_13口外部中断的示例代码</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stm32f10x.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdint.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CountSensor.h&quot;</span></span>

<span class="token comment">/**
 * @ref 初始化光电计数器
 */</span>
<span class="token keyword">void</span> <span class="token function">CountSensor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/**
     * 配置GPIO
     */</span>
    <span class="token comment">// 开启APB2_GPIO_C外设时钟</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化GPIO_C13为上拉输入模式</span>
    GPIO_InitTypeDef GPIO_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span>GPIO_Pin_13<span class="token punctuation">,</span> GPIO_Speed_50MHz<span class="token punctuation">,</span> GPIO_Mode_IPU<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 配置AFIO
     * AFIO用于配置引脚复用功能重映射 中断引脚
     */</span>
    <span class="token comment">// 开启APB2_AFIO外设时钟</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置AFIO的数据选择器联通GPIO_C13到EXTI电路</span>
    <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOC<span class="token punctuation">,</span> GPIO_PinSource13<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 配置EXTI
     */</span>
    <span class="token comment">// EXTI外设时钟默认开启</span>
    <span class="token comment">// 配置EXTI</span>
    EXTI_InitTypeDef EXTI_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span>
        EXTI_Line13<span class="token punctuation">,</span>          <span class="token comment">// 配置EXTI_Line13</span>
        EXTI_Mode_Interrupt<span class="token punctuation">,</span>  <span class="token comment">// 中断模式</span>
        EXTI_Trigger_Falling<span class="token punctuation">,</span> <span class="token comment">// 下降沿触发</span>
        ENABLE<span class="token punctuation">,</span>               <span class="token comment">// 启用</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 配置NVCI
     */</span>
    <span class="token comment">// NVCI是内核外设，时钟默认开启</span>
    <span class="token comment">// 通过NVIC寄存器配置优先级分组（先占优先级和从占优先级）</span>
    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置EXTI15_10_IRQn中断的优先级</span>
    NVIC_InitTypeDef NVIC_InitStruct <span class="token operator">=</span> <span class="token punctuation">{</span>
        EXTI15_10_IRQn<span class="token punctuation">,</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 先占优先级</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 从占优先级</span>
        ENABLE<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">uint16_t</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">uint16_t</span> <span class="token function">CountSensor_GetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * @ref 重写中断回调
 */</span>
<span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 获取EXTI状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>EXTI_Line13<span class="token punctuation">)</span> <span class="token operator">==</span> SET<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 清除中断请求挂起寄存器相应的位</span>
        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line13<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tim定时器" tabindex="-1"><a class="header-anchor" href="#tim定时器"><span>TIM定时器</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><ul><li>TIM（Timer）定时器</li><li>定时器可以对<strong>输入的时钟</strong>进行<strong>计数</strong>，并在计数值达到设定值时触发中断 <ul><li><strong>输入时钟可以是系统时钟、外部输入</strong></li><li><strong>对高精度时钟计数，实际就是计时</strong><ul><li>对系统时钟72Mhz计数72次，就是1us</li></ul></li></ul></li><li><strong>预分频器</strong>、<strong>16位计数器</strong>、<strong>自动重装寄存器</strong>的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时 <ul><li>预分频器，可以对时钟进行分频，</li><li>16位计数器,用来执行计数定时的计数器，每来一个时钟，计数器加1</li><li>单个定时器最大定时时长： <code>(1/72Mhz) * 65536 * 65536 = 59.65232355555556 s</code></li><li>两个定时器级联最大定时时长：<code>59.65s * 65536 * 65536 ≈ 8千多年</code></li><li>三个定时器级联最大定时时长：<code>8K * 65536 * 65536 ≈ 34万亿年</code></li></ul></li><li>不仅具备基本的<strong>定时中断功能</strong>，而且还包含<strong>内外时钟源选择</strong>、<strong>输入捕获</strong>、<strong>输出比较</strong>、编码器接口、主从触发模式等多种功能</li><li>根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型</li></ul><p><strong>定时器类型</strong></p><blockquote><p>STM32F103C8T6定时器资源：TIM1、TIM2、TIM3、TIM4</p></blockquote><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">编号</th><th style="text-align:left;">总线</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">高级定时器</td><td style="text-align:left;">TIM1、TIM8</td><td style="text-align:left;">APB2</td><td style="text-align:left;">拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</td></tr><tr><td style="text-align:left;">通用定时器</td><td style="text-align:left;">TIM2、TIM3、TIM4、TIM5</td><td style="text-align:left;">APB1</td><td style="text-align:left;">拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</td></tr><tr><td style="text-align:left;">基本定时器</td><td style="text-align:left;">TIM6、TIM7</td><td style="text-align:left;">APB1</td><td style="text-align:left;">拥有定时中断、主模式触发DAC的功能</td></tr></tbody></table><h3 id="基本、通用、高级定时器" tabindex="-1"><a class="header-anchor" href="#基本、通用、高级定时器"><span>基本、通用、高级定时器</span></a></h3><h4 id="基本定时器" tabindex="-1"><a class="header-anchor" href="#基本定时器"><span>基本定时器</span></a></h4><p><strong>基本定时器框图</strong></p><ul><li><strong><code>CK_PSC</code>时钟：</strong> 一般直接使用<code>CK_INT</code>内部时钟72Mhz作为定时器时钟</li><li><strong>时基单元：</strong> 预分频器+计数器+自动重装寄存器 <ul><li><strong>预分频器：</strong> 对时钟进行降频 <ul><li>写0 输出 72/1 Mhz （不分频/也叫1分频）</li><li>写1 输出 72/2 Mhz （2分频）</li><li>写2 输出 72/3 Mhz （3分频）</li><li>......</li><li>写n 输出 72/(n+1) Mhz （n+1分频）</li></ul></li><li><strong>计数器：</strong> 对预分频器输出的方波上升沿计数，计数就是计数器值+1 <ul><li>对于基本定时器，计数器只有向上计数模式</li></ul></li><li><strong>自动重装寄存器：</strong> 当计数器数值达到自动重装值时，产生中断信号并清零计时器 <ul><li>下图中向上的折现箭头就是中断信号，这种计数值等于重装值的中断一般称为更新中断，该中断信号会通往NVIC，配置好NVIC的定时器通道，那么定时器的更新中断就能得到CPU的响应</li><li>向下的折现表示会产生一个事件，这里就是更新事件，不会触发中断，但可用于触发内部其他电路工作，可以实现一种不需要CPU直接参与的自动化任务。</li></ul></li></ul></li><li><strong>主模式触发DAC:</strong> 可以把定时器的更新事件，映射到TRGO（Trigger Oout）触发输出，然后再接到DAC的触发转换引脚上，实现定时触发DAC转换输出模拟量，不需要CPU参与，实现硬件自动化</li><li><img src="`+O+'" alt="Alt text"></li></ul><h4 id="通用定时器" tabindex="-1"><a class="header-anchor" href="#通用定时器"><span>通用定时器</span></a></h4><p><strong>通用定时器框图</strong></p><ul><li><p><strong>时基单元</strong>: 没有改变，和<strong>基本定时器</strong>一样</p><ul><li><strong>计数器：</strong><ul><li>对于通用寄存器和高级寄存器，计数器支持向上计数、向下计数，中央对齐计数</li></ul></li></ul></li><li><p><code>CK_PSC</code><strong>时钟</strong></p><ul><li><code>CK_INT 内部时钟</code><ul><li>可直接使用内部时钟72Mhz作为定时器时钟</li></ul></li><li><code>CK_PSC 外部时钟模式2</code><ul><li>可以把ETR（TIMx_ETR）外部时钟引脚信号作为定时器时钟；如：TIM2_CH1_ETR引脚</li><li>需要配置边沿检测、分配器</li><li>可以用来对外部时钟引脚上的信号计数</li></ul></li><li><code>TRGI 外部时钟模式1</code><ul><li>TRGI主要作为触发输入使用，可以触发定时器的从模式</li><li>也可以用来作为定时器的外部时钟输入信号 <ul><li><code>ITRx</code> 是来自其他定时器的触发输出 用于实现定时器的级联 <ul><li>具体来说， <ul><li>可以初始化TIM3,主模式，更新事件映射到TRGO;</li><li>初始化TIM2,选择ITR2（也就是TIM3的TRGO）,外部时钟模式1，作为定时器的时钟信号。</li></ul></li><li><img src="'+M+'" alt="Alt text"></li></ul></li><li><code>TI1F_ED</code> 连接的是输入捕获单元的CH1引脚，ED表示边沿触发，上升沿和下降沿均有效 <ul><li>可用于输入捕获，测频率</li></ul></li><li><code>TI1FP1</code> CH1引脚的时钟</li><li><code>TI1FP2</code> CH2引脚的时钟</li></ul></li></ul></li></ul></li><li><p>编码器接口：可用于读取正交编码器的输出波形</p></li><li><p><code>TRGO</code>触发输出：</p><ul><li>可以把定时器内部的一些事件映射到该接口</li></ul></li><li><p><code>捕获/比较电路</code></p><ul><li>四个捕获/比较电路寄存器，及其<strong>左侧</strong>的电路称为<strong>输入捕获电路</strong>，可用于<strong>测量方波频率</strong></li><li>四个捕获/比较电路寄存器，及其<strong>右侧</strong>的电路称为<strong>输出比较电路</strong>，可用于<strong>输出PWM波形</strong></li><li>输入捕获电路 和 输出比较电路 <strong>共用引脚和寄存器</strong>，<strong>不能同时使用</strong></li></ul></li><li><p><img src="'+G+'" alt="Alt text"></p></li></ul><h4 id="高级定时器" tabindex="-1"><a class="header-anchor" href="#高级定时器"><span>高级定时器</span></a></h4><p><strong>高级定时器框图</strong></p><ul><li>对比高级定时器框图，新增的部分为右下角的一圈电路 <ul><li><code>重复计数器</code>：实现每隔几个计数周期触发中断和更新事件，相当于对输出的更新信号又做了分频</li><li><strong>DTG(Dead Time Generate四驱时间生成)寄存器</strong>，用于控制输出上下互补的PWM波，为了防止输出的互补PWM波驱动MOS管时，在开关切换的瞬间，由于器件的不理想，导致短暂的上下管都导通的情况发生，所以这里添加了死区生成电路，实现在上管完全关闭时，再开启下管。</li><li><strong>输出控制</strong>，用于输出两个上下互补的PWM波形，用于控制三相电机，第四路由于用不到，所以只有一根线。</li><li><code>BRK刹车输入功能</code>：当从外部引脚BKIN得到刹车信号时，或者时钟信号失效事件发生时，控制电路将自动切断电机的输出，防止意外发生。</li></ul></li><li><img src="'+D+'" alt="Alt text"></li></ul><h3 id="案例-定时中断" tabindex="-1"><a class="header-anchor" href="#案例-定时中断"><span>案例：定时中断</span></a></h3><h4 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构"><span>基本结构</span></a></h4><p><img src="'+w+'" alt="Alt text"></p><h4 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤"><span>基本步骤</span></a></h4><ol><li>通过 RCC 开启相关外设时钟</li><li>为时基单元选择时钟源：内部时钟源、外部时钟模式、编码器模式</li><li>配置时基单元：预分频器、自动重装器、计数模式</li><li>配置输出中断控制: 允许输出中断到NVIC</li><li>配置NVIC: 打开定时中断通道、分配中断优先级</li><li>运行控制：使能计数器</li></ol><h4 id="通过内部时钟源——实现setinterval-callback-ms" tabindex="-1"><a class="header-anchor" href="#通过内部时钟源——实现setinterval-callback-ms"><span>通过内部时钟源——实现<code>setInterval(callback,ms)</code></span></a></h4><p>setInterval是一个在前端开发中经常使用的函数，这里尝试实现一下</p>',76),X=n("code",null,"main.cpp",-1),K=n("code",null,"Timer2.c",-1),W=n("code",null,"Timer2.h",-1),z=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"stm32f10x.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"OLED.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer2.h"')]),s(`

`),n("span",{class:"token class-name"},"uint16_t"),s(" num "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"update_callback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    num`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"OLED_Init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),s("update_callback"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"OLED_ShowString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Hello World!!!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"OLED_ShowNum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"stm32f10x.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer2.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stddef.h>")]),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},`/**
 * @arg _callback 回调函数
 * @arg ms 毫秒 取值范围 [1,0xffff/10+1]
 */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("_callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"uint16_t"),s(" ms"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 步骤"),s(`
    `),n("span",{class:"token comment"},"// 1. 通过 RCC 开启相关外设时钟"),s(`
    `),n("span",{class:"token comment"},"// 2. 为时基单元选择时钟源：内部时钟源、外部时钟模式、编码器模式"),s(`
    `),n("span",{class:"token comment"},"// 3. 配置时基单元：预分频器、自动重装器、计数模式"),s(`
    `),n("span",{class:"token comment"},"// 4. 配置输出中断控制: 允许输出中断到NVIC"),s(`
    `),n("span",{class:"token comment"},"// 5. 配置NVIC: 打开定时中断通道、分配中断优先级"),s(`
    `),n("span",{class:"token comment"},"// 6. 运行控制：使能计数器"),s(`

    `),n("span",{class:"token comment"},"// 1开启Tim2外设时钟"),s(`
    `),n("span",{class:"token function"},"RCC_APB1PeriphClockCmd"),n("span",{class:"token punctuation"},"("),s("RCC_APB1Periph_TIM2"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 2为TIM2时基单元选择内部时钟（可不写，默认使用内部时钟）"),s(`
    `),n("span",{class:"token function"},"TIM_InternalClockConfig"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 3配置时基单元"),s(`
    `),n("span",{class:"token comment"},"// CK_CNT_OV计数器溢出频率 = CK_CNT定时器时钟/(ARR重装值+1) = CK_PSC内部时钟/(PSC预分频器+1)/(ARR重装值+1)"),s(`
    `),n("span",{class:"token comment"},"// 溢出频率"),s(`
    `),n("span",{class:"token comment"},"//      1s => 72Mhz / 7.2k / 10k => 1s"),s(`
    `),n("span",{class:"token comment"},"//      1ms => 72Mhz / 7.2k / 10  => 1ms"),s(`
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},";"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_ClockDivision "),n("span",{class:"token operator"},"="),s(" TIM_CKD_DIV1"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 采样点数，外部时钟信号滤波器的一个参数，这里填一分频，也就是不分频，那么就会以（内部时钟频率/1）的频率对外部时钟信号进行采样，这里用不到，随便写"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_CounterMode "),n("span",{class:"token operator"},"="),s(" TIM_CounterMode_Up"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 计数模式，向上计数"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_Prescaler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"7200"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("             "),n("span",{class:"token comment"},"// 预分频器"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_Period "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},"*"),s(" ms "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("             "),n("span",{class:"token comment"},"// 自动重装器"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_RepetitionCounter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("            "),n("span",{class:"token comment"},"// 重复计数器，高级定时器才有"),s(`
    `),n("span",{class:"token function"},"TIM_TimeBaseInit"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("TIM_TimeBaseInitStruct"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 上面配置时基单元的函数为了让写入预分频器和自动重装器的值立即生效，"),s(`
    `),n("span",{class:"token comment"},"// 手动触发了更新事件，这里要清除一下，否则中断函数也会立即执行一次"),s(`
    `),n("span",{class:"token function"},"TIM_ClearFlag"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_FLAG_Update"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 4把TIM2的更新中断连接到NVIC"),s(`
    `),n("span",{class:"token function"},"TIM_ITConfig"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 5配置NVIC优先级"),s(`
    `),n("span",{class:"token function"},"NVIC_PriorityGroupConfig"),n("span",{class:"token punctuation"},"("),s("NVIC_PriorityGroup_2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    NVIC_InitTypeDef NVIC_InitStruct`),n("span",{class:"token punctuation"},";"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannel "),n("span",{class:"token operator"},"="),s(" TIM2_IRQn"),n("span",{class:"token punctuation"},";"),s("           "),n("span",{class:"token comment"},"// 定时器2中断通道"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelCmd "),n("span",{class:"token operator"},"="),s(" ENABLE"),n("span",{class:"token punctuation"},";"),s("           "),n("span",{class:"token comment"},"// 启用"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelPreemptionPriority "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 抢占优先级"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelSubPriority "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("        "),n("span",{class:"token comment"},"// 响应优先级"),s(`
    `),n("span",{class:"token function"},"NVIC_Init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("NVIC_InitStruct"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 回调"),s(`
    callback `),n("span",{class:"token operator"},"="),s(" _callback"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 6启动定时器"),s(`
    `),n("span",{class:"token function"},"TIM_Cmd"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},`/**
 * 重写中断函数
 */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"TIM2_IRQHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"TIM_GetITStatus"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(" SET"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("callback"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token function"},"callback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 清除更新中断Pending标志"),s(`
        `),n("span",{class:"token function"},"TIM_ClearITPendingBit"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"__Timer2_H__")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"__Timer2_H__")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifdef"),s(),n("span",{class:"token expression"},"__cplusplus")]),s(`
`),n("span",{class:"token keyword"},"extern"),s(),n("span",{class:"token string"},'"C"'),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("_callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"uint16_t"),s(" ms"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifdef"),s(),n("span",{class:"token expression"},"__cplusplus")]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("h4",{id:"通过外部时钟源——实现setinterval-callback-times",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通过外部时钟源——实现setinterval-callback-times"},[n("span",null,[s("通过外部时钟源——实现"),n("code",null,"setInterval(callback,times)")])])],-1),Z=n("code",null,"main.cpp",-1),Y=n("code",null,"Timer2.c",-1),j=n("code",null,"Timer2.h",-1),$=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"stm32f10x.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"OLED.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer2.h"')]),s(`

`),n("span",{class:"token class-name"},"uint16_t"),s(" num "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"update_callback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    num`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"OLED_Init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),s("update_callback"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"OLED_ShowString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Hello World!!!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"OLED_ShowNum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"stm32f10x.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Timer2.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stddef.h>")]),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},`/**
 * @brief 外部触发times次后执行传入的_callback函数
 * @arg _callback 回调函数
 * @arg times 计数次数 取值范围 [1,0xffff-1]
 */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("_callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"uint16_t"),s(" times"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 步骤"),s(`
    `),n("span",{class:"token comment"},"// 1. 通过 RCC 开启相关外设时钟"),s(`
    `),n("span",{class:"token comment"},"// 2. 为时基单元选择时钟源：内部时钟源、外部时钟模式、编码器模式"),s(`
    `),n("span",{class:"token comment"},"// 3. 配置时基单元：预分频器、自动重装器、计数模式"),s(`
    `),n("span",{class:"token comment"},"// 4. 配置输出中断控制: 允许输出中断到NVIC"),s(`
    `),n("span",{class:"token comment"},"// 5. 配置NVIC: 打开定时中断通道、分配中断优先级"),s(`
    `),n("span",{class:"token comment"},"// 6. 运行控制：使能计数器"),s(`

    `),n("span",{class:"token comment"},"// 1开启Tim2外设时钟"),s(`
    `),n("span",{class:"token function"},"RCC_APB1PeriphClockCmd"),n("span",{class:"token punctuation"},"("),s("RCC_APB1Periph_TIM2"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 2为TIM2时基单元选择外部时钟"),s(`
    `),n("span",{class:"token comment"},"// 2.1 PA0默认复用功能是TIM2_CH1_ETR,这里要配置PA0"),s(`
    `),n("span",{class:"token function"},"RCC_APB2PeriphClockCmd"),n("span",{class:"token punctuation"},"("),s("RCC_APB2Periph_GPIOA"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    GPIO_InitTypeDef GPIO_InitStruct `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s("GPIO_Pin_0"),n("span",{class:"token punctuation"},","),s(" GPIO_Speed_50MHz"),n("span",{class:"token punctuation"},","),s(" GPIO_Mode_IPU"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"GPIO_Init"),n("span",{class:"token punctuation"},"("),s("GPIOA"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("GPIO_InitStruct"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 2.2 配置外部时钟2"),s(`
    `),n("span",{class:"token function"},"TIM_ETRClockMode2Config"),n("span",{class:"token punctuation"},"("),s(`
        TIM2`),n("span",{class:"token punctuation"},","),s("                        "),n("span",{class:"token comment"},"// 配置TIM2"),s(`
        TIM_ExtTRGPSC_OFF`),n("span",{class:"token punctuation"},","),s("           "),n("span",{class:"token comment"},"// 外部时钟分频"),s(`
        TIM_ExtTRGPolarity_Inverted`),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// 下降沿触发"),s(`
        `),n("span",{class:"token number"},"0x00"),s("                         "),n("span",{class:"token comment"},"// 滤波器配置"),s(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 3配置时基单元"),s(`
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},";"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_ClockDivision "),n("span",{class:"token operator"},"="),s(" TIM_CKD_DIV1"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 采样点数，外部时钟信号滤波器的一个参数，这里填一分频，也就是不分频，那么就会以（内部时钟频率/1）的频率对外部时钟信号进行采样，这里用不到，随便写"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_CounterMode "),n("span",{class:"token operator"},"="),s(" TIM_CounterMode_Up"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 计数模式，向上计数"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_Prescaler "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("                "),n("span",{class:"token comment"},"// 预分频器"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_Period "),n("span",{class:"token operator"},"="),s(" times "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("               "),n("span",{class:"token comment"},"// 自动重装器"),s(`
    TIM_TimeBaseInitStruct`),n("span",{class:"token punctuation"},"."),s("TIM_RepetitionCounter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("            "),n("span",{class:"token comment"},"// 重复计数器，高级定时器才有"),s(`
    `),n("span",{class:"token function"},"TIM_TimeBaseInit"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("TIM_TimeBaseInitStruct"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 上面配置时基单元的函数为了让写入预分频器和自动重装器的值立即生效，"),s(`
    `),n("span",{class:"token comment"},"// 手动触发了更新事件，这里要清除一下，否则中断函数也会立即执行一次"),s(`
    `),n("span",{class:"token function"},"TIM_ClearFlag"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_FLAG_Update"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 4把TIM2的更新中断连接到NVIC"),s(`
    `),n("span",{class:"token function"},"TIM_ITConfig"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 5配置NVIC优先级"),s(`
    `),n("span",{class:"token function"},"NVIC_PriorityGroupConfig"),n("span",{class:"token punctuation"},"("),s("NVIC_PriorityGroup_2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    NVIC_InitTypeDef NVIC_InitStruct`),n("span",{class:"token punctuation"},";"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannel "),n("span",{class:"token operator"},"="),s(" TIM2_IRQn"),n("span",{class:"token punctuation"},";"),s("           "),n("span",{class:"token comment"},"// 定时器2中断通道"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelCmd "),n("span",{class:"token operator"},"="),s(" ENABLE"),n("span",{class:"token punctuation"},";"),s("           "),n("span",{class:"token comment"},"// 启用"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelPreemptionPriority "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 抢占优先级"),s(`
    NVIC_InitStruct`),n("span",{class:"token punctuation"},"."),s("NVIC_IRQChannelSubPriority "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("        "),n("span",{class:"token comment"},"// 响应优先级"),s(`
    `),n("span",{class:"token function"},"NVIC_Init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("NVIC_InitStruct"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 回调"),s(`
    callback `),n("span",{class:"token operator"},"="),s(" _callback"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 6启动定时器"),s(`
    `),n("span",{class:"token function"},"TIM_Cmd"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" ENABLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},`/**
 * 重写中断函数
 */`),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"TIM2_IRQHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"TIM_GetITStatus"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(" SET"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("callback"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token function"},"callback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 清除更新中断Pending标志"),s(`
        `),n("span",{class:"token function"},"TIM_ClearITPendingBit"),n("span",{class:"token punctuation"},"("),s("TIM2"),n("span",{class:"token punctuation"},","),s(" TIM_IT_Update"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("div",{class:"language-c line-numbers-mode","data-ext":"c","data-title":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"__Timer2_H__")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"__Timer2_H__")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifdef"),s(),n("span",{class:"token expression"},"__cplusplus")]),s(`
`),n("span",{class:"token keyword"},"extern"),s(),n("span",{class:"token string"},'"C"'),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`

    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"Timer2_setInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("_callback"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"uint16_t"),s(" times"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifdef"),s(),n("span",{class:"token expression"},"__cplusplus")]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),tn=n("a",{class:"header-anchor",href:"#案例-定时输出比较——输出pwm波形"},[n("span",null,"案例：定时输出比较——输出PWM波形")],-1),an=n("a",{class:"header-anchor",href:"#案例-定时器输出捕获——测量方波"},[n("span",null,"案例：定时器输出捕获——测量方波")],-1);function en(ln,cn){const l=p("CodeTabs");return r(),d("div",null,[V,i(l,{id:"1299",data:[{id:"RCC_APB2PeriphClockCmd"},{id:"RCC_APB1PeriphClockCmd"},{id:"RCC_AHBPeriphClockCmd"}]},{title0:t(({value:a,isActive:e})=>[s("RCC_APB2PeriphClockCmd")]),title1:t(({value:a,isActive:e})=>[s("RCC_APB1PeriphClockCmd")]),title2:t(({value:a,isActive:e})=>[s("RCC_AHBPeriphClockCmd")]),tab0:t(({value:a,isActive:e})=>[F]),tab1:t(({value:a,isActive:e})=>[L]),tab2:t(({value:a,isActive:e})=>[H]),_:1}),U,i(l,{id:"2987",data:[{id:"<code v-pre>main.cpp</code>"},{id:"<code v-pre>Timer2.c</code>"},{id:"<code v-pre>Timer2.h</code>"}]},{title0:t(({value:a,isActive:e})=>[X]),title1:t(({value:a,isActive:e})=>[K]),title2:t(({value:a,isActive:e})=>[W]),tab0:t(({value:a,isActive:e})=>[z]),tab1:t(({value:a,isActive:e})=>[q]),tab2:t(({value:a,isActive:e})=>[Q]),_:1},8,["data"]),J,i(l,{id:"3001",data:[{id:"<code v-pre>main.cpp</code>"},{id:"<code v-pre>Timer2.c</code>"},{id:"<code v-pre>Timer2.h</code>"}]},{title0:t(({value:a,isActive:e})=>[Z]),title1:t(({value:a,isActive:e})=>[Y]),title2:t(({value:a,isActive:e})=>[j]),tab0:t(({value:a,isActive:e})=>[$]),tab1:t(({value:a,isActive:e})=>[nn]),tab2:t(({value:a,isActive:e})=>[sn,tn,an]),_:1},8,["data"])])}const pn=o(N,[["render",en],["__file","index.html.vue"]]),rn=JSON.parse('{"path":"/%E7%94%B5%E5%AD%90/STM32%E5%8F%8A%E6%A0%87%E5%87%86%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"STM32及标准库学习笔记","lang":"zh-CN","frontmatter":{"title":"STM32及标准库学习笔记","date":"2024-02-15T23:00:00.000Z","cover":"./assets/cover/STM32及标准库学习笔记.png","tag":["stm32"],"category":["笔记","电子"],"star":true,"description":"STM32及标准库学习笔记 Alt text 目录 STM32及标准库学习笔记 目录 F103C8T6简介 F1X片上资源 系统结构 引脚定义 启动配置 工程架构 Hello_World 标准外设库 RCC 基本介绍 常用函数 GPIO 基本介绍 stm32f10x_gpio.h 案例代码：点灯 中断 基本概念 STM32的中断 EXTI外部中断 案例...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%94%B5%E5%AD%90/STM32%E5%8F%8A%E6%A0%87%E5%87%86%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],["meta",{"property":"og:site_name","content":"Yigui-Ding的Blog小站"}],["meta",{"property":"og:title","content":"STM32及标准库学习笔记"}],["meta",{"property":"og:description","content":"STM32及标准库学习笔记 Alt text 目录 STM32及标准库学习笔记 目录 F103C8T6简介 F1X片上资源 系统结构 引脚定义 启动配置 工程架构 Hello_World 标准外设库 RCC 基本介绍 常用函数 GPIO 基本介绍 stm32f10x_gpio.h 案例代码：点灯 中断 基本概念 STM32的中断 EXTI外部中断 案例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T09:30:40.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:tag","content":"stm32"}],["meta",{"property":"article:published_time","content":"2024-02-15T23:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T09:30:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"STM32及标准库学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-15T23:00:00.000Z\\",\\"dateModified\\":\\"2024-03-18T09:30:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"F103C8T6简介","slug":"f103c8t6简介","link":"#f103c8t6简介","children":[]},{"level":2,"title":"F1X片上资源","slug":"f1x片上资源","link":"#f1x片上资源","children":[]},{"level":2,"title":"系统结构","slug":"系统结构","link":"#系统结构","children":[]},{"level":2,"title":"引脚定义","slug":"引脚定义","link":"#引脚定义","children":[]},{"level":2,"title":"启动配置","slug":"启动配置","link":"#启动配置","children":[]},{"level":2,"title":"工程架构","slug":"工程架构","link":"#工程架构","children":[]},{"level":2,"title":"Hello_World","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"标准外设库","slug":"标准外设库","link":"#标准外设库","children":[]},{"level":2,"title":"RCC","slug":"rcc","link":"#rcc","children":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"常用函数","slug":"常用函数","link":"#常用函数","children":[]}]},{"level":2,"title":"GPIO","slug":"gpio","link":"#gpio","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-1","link":"#基本介绍-1","children":[]},{"level":3,"title":"stm32f10x_gpio.h","slug":"stm32f10x-gpio-h","link":"#stm32f10x-gpio-h","children":[]},{"level":3,"title":"案例代码：点灯","slug":"案例代码-点灯","link":"#案例代码-点灯","children":[]}]},{"level":2,"title":"中断","slug":"中断","link":"#中断","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"STM32的中断","slug":"stm32的中断","link":"#stm32的中断","children":[]},{"level":3,"title":"EXTI外部中断","slug":"exti外部中断","link":"#exti外部中断","children":[]},{"level":3,"title":"案例代码：光电计数器触发外部中断","slug":"案例代码-光电计数器触发外部中断","link":"#案例代码-光电计数器触发外部中断","children":[]}]},{"level":2,"title":"TIM定时器","slug":"tim定时器","link":"#tim定时器","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"基本、通用、高级定时器","slug":"基本、通用、高级定时器","link":"#基本、通用、高级定时器","children":[]},{"level":3,"title":"案例：定时中断","slug":"案例-定时中断","link":"#案例-定时中断","children":[]}]}],"git":{"createdTime":1710439010000,"updatedTime":1710754240000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":3}]},"readingTime":{"minutes":30.97,"words":9292},"filePathRelative":"电子/STM32及标准库学习笔记/index.md","localizedDate":"2024年2月15日","excerpt":"","autoDesc":true}');export{pn as comp,rn as data};
