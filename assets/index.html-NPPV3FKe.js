import{_ as u,r as l,o as r,c as k,a as n,b as s,f as a,w as p,e as c}from"./app-enjwP1iI.js";const d="/assets/使用递归下降算法实现简易解释器-wuohSpRq.png",v={},m=c('<h1 id="尝试使用递归下降算法实现简易词法分析器和文法分析器以及解释器" tabindex="-1"><a class="header-anchor" href="#尝试使用递归下降算法实现简易词法分析器和文法分析器以及解释器" aria-hidden="true">#</a> 尝试使用递归下降算法实现简易词法分析器和文法分析器以及解释器</h1><p><img src="'+d+'" alt=""></p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E5%92%8C%E6%96%87%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%A7%A3%E9%87%8A%E5%99%A8">尝试使用递归下降算法实现简易词法分析器和文法分析器以及解释器</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%BC%98%E7%94%B1">缘由</a></li><li><a href="#%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E6%B3%95">目前支持的语法</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C">实现效果</a><ul><li><a href="#%E8%A7%A3%E9%87%8A%E5%99%A8%E6%B5%8B%E8%AF%95">解释器测试</a></li></ul></li><li><a href="#%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E7%8E%B0">词法分析的实现</a></li><li><a href="#%E6%96%87%E6%B3%95%E5%AE%9A%E4%B9%89">文法定义</a></li><li><a href="#%E6%96%87%E6%B3%95%E5%88%86%E6%9E%90%E7%9A%84%E5%AE%9E%E7%8E%B0">文法分析的实现</a></li><li><a href="#%E8%A7%A3%E9%87%8A%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0">解释器的实现</a></li></ul></li></ul><h2 id="缘由" tabindex="-1"><a class="header-anchor" href="#缘由" aria-hidden="true">#</a> 缘由</h2>',5),b={href:"https://www.bilibili.com/video/BV1Kf4y1V783",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),g={href:"https://github.com/archeryue/cpc",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("当时虽然调侃的评论了一句"),n("code",null,"c--"),s(",但其实内心对写出这种东西的人还是感到由衷的钦佩的，")],-1),x=n("p",null,"视频的内容我那时只大概的浏览过一些，当时没有时间仔细去看。",-1),f={href:"https://github.com/jamiebuilds/the-super-tiny-compiler",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"the-super-tiny-compiler",-1),E=n("p",null,"这个项目仅用几百行的代码用比较贴近真实编译器的流程实现了将某种作者定义的代码翻译成为类似于c语言的代码，",-1),S=n("p",null,"这个项目的代码我大概看过，并用ts尝试着将它重新实现了一遍，最近，就是上周的时候，我另外尝试着为其实现了一个解释器，使得可以将其生成的抽象语法树翻译执行。",-1),A={href:"https://github.com/AttackOnMorty/rdp",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"这个项目中的代码提供了一种比较完美编程范式，但是在文法的定义部分有些让人感到难以理解，我那时刚看到这个项目的时候，完全看不懂，过于沮丧，放弃了。",-1),_=n("p",null,"后来还看到过一个项目，名字忘了，大概就是在前端中实现了一个虚拟机，使得可以加载并执行那种语言编写的游戏，",-1),B=n("p",null,"还有iPhone上的iSH,也是开源项目,32bit虚拟机，解释执行字节码，可以运行Linux。",-1),I=n("p",null,"还有就是UTM,一款可以在手机上运行的开源的虚拟机，能在平板电脑上运行win7系统。",-1),O=n("p",null,"总之，这些都是我之前接触过、看过、用过、让我感到Amazing的项目,这些项目或多或少都影响了我，使我产生了也要写一个类似东西的想法。",-1),D=n("p",null,"然后，最近在学游戏设计模式，其中作者在讲解行为模式的部分时，提到了解释器模式和如何实现一个虚拟机并执行字节码的内容，用于使得玩家可以用另外一种和游戏本身的编程语言无关的语言来二次开发游戏角色的行为。",-1),L=n("p",null,"这部分内容中作者虽然讲了很多这种解释器模式的缺点和实现虚拟机执行字节码的优点，但却没有提及如何生成字节码，作者只给了一种通过图形界面拖拽生成指令序列的方式来生成字节码，优点自然是对用户友好，但缺点也是显然的，图形化的界面感觉就不如直接编写程序那样能对游戏做到非常精细化的控制。",-1),N=n("p",null,"总之，但这让我回想起了这之前看到过的上述几个项目，让我突然也想完整的实现一个编译器，编译出字节码，另外再实现一个虚拟机，用来执行字节码。有这个想法后我便抑制不住内心的想要实现它的冲动。",-1),F={href:"https://github.com/gfwilliams/tiny-js",target:"_blank",rel:"noopener noreferrer"},C=c('<p>最近几天，终于尝试着把词法分析和文法分析的内容搞懂了，特别是如何定义文法的那部分。</p><p>昨天下午(2023/12/20)五点的时候，感觉已经差不多完整理解了，然后通宵敲了一晚上的代码，一直到今天早上，完整的从头实现了Tokenizer Parser 以及，解释器，支持的语法包括：变量、函数的定义和调用，循环语句，块作用域变量和全局作用域变量，甚至可以注入预定义函数，某种程度上讲，我认为这已经图灵完备了。感觉就像是玩游戏终于通过了某一关 Exciting!</p><h2 id="目前支持的语法" tabindex="-1"><a class="header-anchor" href="#目前支持的语法" aria-hidden="true">#</a> 目前支持的语法</h2><ul><li>语句： <ul><li>空语句 <code>;</code></li><li>块语句 <code>{}</code></li><li>if语句 <code>if(){}else{}</code></li><li>where语句 <code>where(){}</code></li><li>标识符定义语句 <ul><li>变量定义 <code>def a=1,b=2,c;</code></li><li>函数定义 <code>def main(def a){};</code></li></ul></li></ul></li><li>表达式： <ul><li>逗号表达式 <code>,</code></li><li>赋值表达式： <ul><li>基本赋值表达式 <code>=</code></li><li>复合赋值表达式 <code>+= -= *= /=</code></li></ul></li><li>逻辑或表达式 <code>||</code></li><li>逻辑与表达试 <code>&amp;&amp;</code></li><li>等值判断表达式 <code>== !=</code></li><li>条件表达式 <code>&lt; &gt; &lt;= &gt;=</code></li><li>加减运算表达式 <code>+ -</code></li><li>乘除取余运算表达式 <code>* / %</code></li><li>括号表达式: <code>(表达式)</code></li><li>标识符表达式 <code>a</code></li><li>函数调用表达式 <code>main(1,2,3);</code></li></ul></li></ul><h2 id="实现效果" tabindex="-1"><a class="header-anchor" href="#实现效果" aria-hidden="true">#</a> 实现效果</h2><h3 id="解释器测试" tabindex="-1"><a class="header-anchor" href="#解释器测试" aria-hidden="true">#</a> 解释器测试</h3>',6),V=n("code",null,"test/index.ts",-1),M=n("code",null,"output.txt",-1),P=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Interpreater "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'../Interpreater'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Parser "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'../Parser'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Tokenizer "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'../Tokenizer'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" regFuncs "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'../functions'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"testForInterpreater"),n("span",{class:"token punctuation"},"("),s("code"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" tokenizer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Tokenizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" parser "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Parser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" interpreater "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Interpreater"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token function"},"regFuncs"),n("span",{class:"token punctuation"},"("),s("interpreater"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"let"),s(" tokens "),n("span",{class:"token operator"},"="),s(" tokenizer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTokens"),n("span",{class:"token punctuation"},"("),s("code"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" ast "),n("span",{class:"token operator"},"="),s(" parser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"parse"),n("span",{class:"token punctuation"},"("),s("tokens"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'源代码:'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("code"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'解释器执行结果:'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  interpreater`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exec"),n("span",{class:"token punctuation"},"("),s("ast"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'源代码词法分析结果:'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("tokens"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'源代码文法分析结果:'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"dir"),n("span",{class:"token punctuation"},"("),s("ast"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" depth"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 测试解释器"),s(`
  `),n("span",{class:"token function"},"testForInterpreater"),n("span",{class:"token punctuation"},"("),s(`
    `),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},`
      def fbnq(def max){
        def a=1,b=1,c;
        while(a<max){
          print(a);
          c = b;
          b = a + b;
          a = c;
        }
      };

      def main(){
        fbnq(200); // 输出200以内斐波那契数列
      };
      main();
    `),n("span",{class:"token template-punctuation string"},"`")]),s(`
  `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[s("源代码"),n("span",{class:"token operator"},":"),s(`

      def `),n("span",{class:"token function"},"fbnq"),n("span",{class:"token punctuation"},"("),s("def max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        def a`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s("b"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s("c"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token operator"},"<"),s("max"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          c `),n("span",{class:"token operator"},"="),s(" b"),n("span",{class:"token punctuation"},";"),s(`
          b `),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
          a `),n("span",{class:"token operator"},"="),s(" c"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

      def `),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"fbnq"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 输出200以内斐波那契数列"),s(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
解释器执行结果`),n("span",{class:"token operator"},":"),s(`
`),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"2"),s(`
`),n("span",{class:"token number"},"3"),s(`
`),n("span",{class:"token number"},"5"),s(`
`),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"13"),s(`
`),n("span",{class:"token number"},"21"),s(`
`),n("span",{class:"token number"},"34"),s(`
`),n("span",{class:"token number"},"55"),s(`
`),n("span",{class:"token number"},"89"),s(`
`),n("span",{class:"token number"},"144"),s(`
源代码词法分析结果`),n("span",{class:"token operator"},":"),s(`
`),n("span",{class:"token punctuation"},"["),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'fbnq'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'max'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignOpSimple'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Number'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"','"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"','"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignOpSimple'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Number'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"','"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"','"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'while'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'while'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'EqualityOp'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'<'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'max'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'print'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignOpSimple'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignOpSimple'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AddOp'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'+'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignOpSimple'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'def'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'main'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'{'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'fbnq'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Number'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'200'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'}'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'main'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"')'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"';'"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"]"),s(`
源代码文法分析结果`),n("span",{class:"token operator"},":"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
  type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Program'"),n("span",{class:"token punctuation"},","),s(`
  statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'IdentifierDeclarationsStatement'"),n("span",{class:"token punctuation"},","),s(`
      declarations`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
          type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FunctionDeclaration'"),n("span",{class:"token punctuation"},","),s(`
          name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'fbnq'"),n("span",{class:"token punctuation"},","),s(`
          FormedArguments`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token punctuation"},"{"),s(`
              type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'VariableDeclaration'"),n("span",{class:"token punctuation"},","),s(`
              name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'max'"),n("span",{class:"token punctuation"},","),s(`
              value`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"undefined"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
          `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
          statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'BlockStatement'"),n("span",{class:"token punctuation"},","),s(`
            statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
              `),n("span",{class:"token punctuation"},"{"),s(`
                type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'IdentifierDeclarationsStatement'"),n("span",{class:"token punctuation"},","),s(`
                declarations`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
                  `),n("span",{class:"token punctuation"},"{"),s(`
                    type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'VariableDeclaration'"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),n("span",{class:"token punctuation"},","),s(`
                    value`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'NumberLiteral'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                  `),n("span",{class:"token punctuation"},"{"),s(`
                    type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'VariableDeclaration'"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),n("span",{class:"token punctuation"},","),s(`
                    value`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'NumberLiteral'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'1'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                  `),n("span",{class:"token punctuation"},"{"),s(`
                    type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'VariableDeclaration'"),n("span",{class:"token punctuation"},","),s(`
                    name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),n("span",{class:"token punctuation"},","),s(`
                    value`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"undefined"),s(`
                  `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"]"),s(`
              `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
              `),n("span",{class:"token punctuation"},"{"),s(`
                type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'WhileStatement'"),n("span",{class:"token punctuation"},","),s(`
                condition`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                  type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'BineryExpression'"),n("span",{class:"token punctuation"},","),s(`
                  operator`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'<'"),n("span",{class:"token punctuation"},","),s(`
                  left`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                  right`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'max'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                statement`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                  type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'BlockStatement'"),n("span",{class:"token punctuation"},","),s(`
                  statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
                    `),n("span",{class:"token punctuation"},"{"),s(`
                      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
                      expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FunctionCall'"),n("span",{class:"token punctuation"},","),s(`
                        calee`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'print'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                        args`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"]"),s(`
                      `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                    `),n("span",{class:"token punctuation"},"{"),s(`
                      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
                      expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignExpression'"),n("span",{class:"token punctuation"},","),s(`
                        operator`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),n("span",{class:"token punctuation"},","),s(`
                        left`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                        right`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                      `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                    `),n("span",{class:"token punctuation"},"{"),s(`
                      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
                      expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignExpression'"),n("span",{class:"token punctuation"},","),s(`
                        operator`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),n("span",{class:"token punctuation"},","),s(`
                        left`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                        right`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                          type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'BineryExpression'"),n("span",{class:"token punctuation"},","),s(`
                          operator`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'+'"),n("span",{class:"token punctuation"},","),s(`
                          left`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                          right`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'b'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                        `),n("span",{class:"token punctuation"},"}"),s(`
                      `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                    `),n("span",{class:"token punctuation"},"{"),s(`
                      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
                      expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'AssignExpression'"),n("span",{class:"token punctuation"},","),s(`
                        operator`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'='"),n("span",{class:"token punctuation"},","),s(`
                        left`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'a'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                        right`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'c'"),s(),n("span",{class:"token punctuation"},"}"),s(`
                      `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                  `),n("span",{class:"token punctuation"},"]"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
              `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
          `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'IdentifierDeclarationsStatement'"),n("span",{class:"token punctuation"},","),s(`
      declarations`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
          type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FunctionDeclaration'"),n("span",{class:"token punctuation"},","),s(`
          name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'main'"),n("span",{class:"token punctuation"},","),s(`
          FormedArguments`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
          statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'BlockStatement'"),n("span",{class:"token punctuation"},","),s(`
            statements`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
              `),n("span",{class:"token punctuation"},"{"),s(`
                type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
                expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
                  type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FunctionCall'"),n("span",{class:"token punctuation"},","),s(`
                  calee`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'fbnq'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
                  args`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'NumberLiteral'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'200'"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"]"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
              `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"]"),s(`
          `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ExpressionStatement'"),n("span",{class:"token punctuation"},","),s(`
      expression`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        type`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'FunctionCall'"),n("span",{class:"token punctuation"},","),s(`
        calee`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" type"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Identifier'"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'main'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        args`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=c(`<h2 id="词法分析的实现" tabindex="-1"><a class="header-anchor" href="#词法分析的实现" aria-hidden="true">#</a> 词法分析的实现</h2><p><code>Tokenizer.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TokenType</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&#39;Space&#39;</span> <span class="token comment">//空白符</span>
  <span class="token operator">|</span> <span class="token string">&#39;Comment&#39;</span> <span class="token comment">// 注释</span>
  <span class="token operator">|</span> <span class="token string">&#39;;&#39;</span> <span class="token comment">// 分号</span>
  <span class="token operator">|</span> <span class="token string">&#39;if&#39;</span> <span class="token comment">// if语句</span>
  <span class="token operator">|</span> <span class="token string">&#39;else&#39;</span> <span class="token comment">// else语句</span>
  <span class="token operator">|</span> <span class="token string">&#39;while&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;do&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;def&#39;</span> <span class="token comment">// 声明</span>
  <span class="token operator">|</span> <span class="token string">&#39;AssignOpSimple&#39;</span> <span class="token comment">// 简单赋值操作符</span>
  <span class="token operator">|</span> <span class="token string">&#39;AssignOpComplex&#39;</span> <span class="token comment">// 复杂赋值操作符</span>
  <span class="token operator">|</span> <span class="token string">&#39;TernaryOp?&#39;</span> <span class="token comment">// 三目运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;TernaryOp:&#39;</span> <span class="token comment">// 三目运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;LogicalOr&#39;</span> <span class="token comment">// 逻辑或运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;LogicalAnd&#39;</span> <span class="token comment">// 逻辑与运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;EqualityOp&#39;</span> <span class="token comment">// 等值运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;RelationalOp&#39;</span> <span class="token comment">// 关系运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;AddOp&#39;</span> <span class="token comment">// 算数加减运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;MutOp&#39;</span> <span class="token comment">// 算数乘除取余运算符</span>
  <span class="token operator">|</span> <span class="token string">&#39;Number&#39;</span> <span class="token comment">// 字面量</span>
  <span class="token operator">|</span> <span class="token string">&#39;Boolean&#39;</span> <span class="token comment">// 字面量</span>
  <span class="token operator">|</span> <span class="token string">&#39;String&#39;</span> <span class="token comment">// 字面量</span>
  <span class="token operator">|</span> <span class="token string">&#39;null&#39;</span> <span class="token comment">// 字面量</span>
  <span class="token operator">|</span> <span class="token string">&#39;(&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;)&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;[&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;]&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;{&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;}&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;.&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;,&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;this&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;super&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TokenDef</span> <span class="token operator">=</span> <span class="token punctuation">[</span>TokenType<span class="token punctuation">,</span> RegExp<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Token</span> <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">;</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> TokenDefs<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TokenDef<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Space&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Comment&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/\\/[^\\n]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Comment&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/\\*(\\s|.)*?\\*\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;if&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bif\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;else&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\belse\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;while&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bwhile\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;do&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bdo\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bdef\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;EqualityOp&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[&gt;&lt;][=]?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;RelationalOp&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[=!]=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;AssignOpSimple&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;AssignOpComplex&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\+\\-\\*\\/\\%]=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;TernaryOp?&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;TernaryOp:&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[:]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;LogicalOr&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\|\\|</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;LogicalAnd&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&amp;&amp;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;AddOp&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+-]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;MutOp&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\*\\/\\%]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Number&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+\\.\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0.123</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Number&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 123</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\btrue\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bfalse\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bnull\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&#39;[^\\&#39;]*\\&#39;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&quot;[^\\&quot;]*\\&quot;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\(</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\{</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bthis\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\bsuper\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tokenizer</span> <span class="token punctuation">{</span>
  idx<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  code<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  tokens<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Token<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">init</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getTokens</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;Space&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;Comment&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">hasMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idx <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">getNextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Token <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token string">&#39;no more token.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>tokenType<span class="token punctuation">,</span> reg<span class="token punctuation">]</span> <span class="token keyword">of</span> TokenDefs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> tokenValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> tokenType<span class="token punctuation">,</span> value<span class="token operator">:</span> tokenValue <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unknow token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token operator">:</span> RegExp<span class="token punctuation">,</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matchs <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 没有匹配到</span>
    <span class="token keyword">let</span> matched <span class="token operator">=</span> matchs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 匹配到了</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idx <span class="token operator">+=</span> matched<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 移动指针</span>
    <span class="token keyword">return</span> matched<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文法定义" tabindex="-1"><a class="header-anchor" href="#文法定义" aria-hidden="true">#</a> 文法定义</h2><p><code>ast.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> TokenType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Tokenizer&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Program
 * : Statements
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Program</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">;</span>
  statements<span class="token operator">:</span> Statements<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Statements
 * : Statement
 * | Statements Statement
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Statements</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Statement<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 语句
 * Statement
 * : EmptyStatement
 * | IdentifierDeclarationsStatement
 * | ExpressionStatement
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Statement</span> <span class="token operator">=</span>
  <span class="token operator">|</span> EmptyStatement
  <span class="token operator">|</span> BlockStatement
  <span class="token operator">|</span> IfStatement
  <span class="token operator">|</span> WhileStatement
  <span class="token operator">|</span> IdentifierDeclarationsStatement
  <span class="token operator">|</span> ExpressionStatement<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 空语句
 * EmptyStatement
 * : &#39;;&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">EmptyStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;EmptyStatement&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 代码块
 * BlockStatement
 * | &#39;<span class="token punctuation">{</span>&#39; Statements &#39;<span class="token punctuation">}</span>&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BlockStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;BlockStatement&#39;</span><span class="token punctuation">;</span>
  statements<span class="token operator">:</span> Statements<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * if语句：
 * IfStatement
 * : if(Expression) [空语句,块语句]
 * | IfStatement [&#39;else&#39; [空语句,块语句,if语句]]*
 * ;
 *
 * 简化
 * 由于 \`Statement:=空语句|块语句|if语句|...;\` 所以可以直接简化：
 * IfStatement
 * : if(Expression) Statement
 * | IfStatement [else Statement]?
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IfStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;IfStatement&#39;</span><span class="token punctuation">;</span>
  condition<span class="token operator">:</span> Expression<span class="token punctuation">;</span>
  case1<span class="token operator">:</span> Statement<span class="token punctuation">;</span>
  case2<span class="token operator">?</span><span class="token operator">:</span> Statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * WhileStatement
 * : while(表达式) 空语句|单语句|块语句|....
 * ;
 *
 * 简化
 * WhileStatement
 * : while(表达式) 语句
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WhileStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;WhileStatement&#39;</span><span class="token punctuation">;</span>
  condition<span class="token operator">:</span> Expression<span class="token punctuation">;</span>
  statement<span class="token operator">:</span> Statement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 标识符声明语句可以用来声明多个变量或函数
 *
 * 标识符声明语句
 * | &#39;def&#39; [变量或函数声明]+ &#39;;&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IdentifierDeclarationsStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;IdentifierDeclarationsStatement&#39;</span><span class="token punctuation">;</span>
  declarations<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VariableOrFunctionDeclaration<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 变量或函数声明，
 * 函数声明的写法是 ：标识符 + [(]
 * 变量声明的写法是 ：标识符 + [= 表达式]?
 * 区别就在于有没有括号
 *
 * 变量或函数声明:
 * | 函数声明
 * : 变量声明
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VariableOrFunctionDeclaration</span> <span class="token operator">=</span>
  <span class="token operator">|</span> VariableDeclaration
  <span class="token operator">|</span> FunctionDeclaration<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 变量声明由一个标识符和一个可选的初始化语句组成，初始化语句由&#39;=&#39;符号开头。
 *
 * 变量声明
 * : 标识符 [&#39;=&#39; 逻辑或表达式]?
 * : 标识符 变量声明初始化?
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VariableDeclaration</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  value<span class="token operator">?</span><span class="token operator">:</span> VariableDeclarationInit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 变量声明初始化
 * : [&#39;=&#39; 逻辑或表达式]?
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VariableDeclarationInit</span> <span class="token operator">=</span> LogicalOrExpression <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 函数声明
 * : 标识符 函数形式参数列表 块语句组成
 * ;
 *
 * FunctionDeclaration
 * | Identifier FormedArguments  BlockStatement
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FunctionDeclaration</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  FormedArguments<span class="token operator">:</span> FormedArguments<span class="token punctuation">;</span>
  statements<span class="token operator">:</span> BlockStatement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 函数形式参数列表
 * : (   [    [def 变量或函数声明]    [,def 变量或函数声明]*    ]*    )
 * ;
 *
 * FormedArguments
 * : (   [    [def VariableOrFunctionDeclaration]    [,def VariableOrFunctionDeclaration]*    ]*    )
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">FormedArguments</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VariableOrFunctionDeclaration<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 表达式语句
 * ExpressionStatement
 * : Expression &#39;;&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ExpressionStatement</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;ExpressionStatement&#39;</span><span class="token punctuation">;</span>
  expression<span class="token operator">:</span> Expression<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 表达式
 * Expression
 * : CommaExpression
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Expression</span> <span class="token operator">=</span> CommaExpression<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 逗号表达式
 * CommaExpression
 * | AssignExpression [CommaOp AssignExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CommaExpression</span> <span class="token operator">=</span> AssignExpression <span class="token operator">|</span> _CommaExpression<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">_CommaExpression</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;CommaExpression&#39;</span><span class="token punctuation">;</span>
  expressions<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>AssignExpression<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 赋值表达式
 * AssignExpression
 * : TernaryExpression
 * | MumberAccessExpression [AssignOp AssignExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AssignExpression</span> <span class="token operator">=</span> TernaryExpression <span class="token operator">|</span> _AssignExpression<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">_AssignExpression</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;AssignExpression&#39;</span><span class="token punctuation">;</span>
  operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  left<span class="token operator">:</span> MumberAccessExpression <span class="token operator">|</span> Identifier<span class="token punctuation">;</span>
  right<span class="token operator">:</span> AssignExpression<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 三目表达式
 * TernaryExpression
 * : LogicalOrExpression [? TernaryExpression : TernaryExpression]
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TernaryExpression</span> <span class="token operator">=</span> LogicalOrExpression <span class="token operator">|</span> _TernaryExpression<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">_TernaryExpression</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;TernaryExpression&#39;</span><span class="token punctuation">;</span>
  condition<span class="token operator">:</span> LogicalOrExpression<span class="token punctuation">;</span>
  case1<span class="token operator">:</span> TernaryExpression<span class="token punctuation">;</span>
  case2<span class="token operator">:</span> TernaryExpression<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 双目运算表达式
 * BineryExpression&lt;Child,OpType&gt;
 * | Child OpType Child
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BineryExpression<span class="token operator">&lt;</span>Child<span class="token punctuation">,</span> OpType <span class="token keyword">extends</span> TokenType<span class="token operator">&gt;</span></span>
  <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;BineryExpression&#39;</span><span class="token punctuation">;</span>
  operatorType<span class="token operator">:</span> Extract<span class="token operator">&lt;</span>TokenType<span class="token punctuation">,</span> OpType<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  left<span class="token operator">:</span> Child<span class="token punctuation">;</span>
  right<span class="token operator">:</span> Child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 逻辑或表达式
 * LogicalOrExpression
 * : LogicalAndExpression [LogicalOr LogicalAndExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">LogicalOrExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> LogicalAndExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>LogicalAndExpression<span class="token punctuation">,</span> <span class="token string">&#39;LogicalOr&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 逻辑或表达式
 * LogicalAndExpression
 * : EqualityExpression [LogicalAnd EqualityExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">LogicalAndExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> EqualityExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>EqualityExpression<span class="token punctuation">,</span> <span class="token string">&#39;LogicalAnd&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 等值表达式
 * EqualityExpression
 * : RelationalExpression [EqualityOp RelationalExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EqualityExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> RelationalExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>RelationalExpression<span class="token punctuation">,</span> <span class="token string">&#39;EqualityOp&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 关系表达式
 * EqualityExpression
 * : AdditiveExpression [RelationalOp AdditiveExpression]*
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RelationalExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> AdditiveExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>AdditiveExpression<span class="token punctuation">,</span> <span class="token string">&#39;RelationalOp&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 加减表达式
 * AdditiveExpression
 * : MultiplicativeExpression
 * | AdditiveExpression AddOp MultiplicativeExpression
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AdditiveExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> MultiplicativeExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>MultiplicativeExpression<span class="token punctuation">,</span> <span class="token string">&#39;AddOp&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 乘除取余表达式
 * MultiplicativeExpression
 * : PrimaryExpression
 * | PrimaryExpression MutOp PrimaryExpression
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MultiplicativeExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> PrimaryExpression
  <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>PrimaryExpression<span class="token punctuation">,</span> <span class="token string">&#39;MutOp&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 成员属性访问表达式和函数调用都以标识符开头，这是字面量所没有的特征
 * 所以在主表达式中可以根据该特征来做区分
 *
 * PrimaryExpression
 * : MumberAccessExpressionOrFunctionCallExpression
 * | BracketedExpression
 * | Literal
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PrimaryExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> MumberAccessExpressionOrFunctionCallExpression
  <span class="token operator">|</span> BracketedExpression
  <span class="token operator">|</span> Literal<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 成员属性访问表达式和函数调用的区分就在于后续有没有括号
 * 所以可以先假设这里是一个成员属性访问表达式，如果后面接着一个括号，则假设错误，说明这里是一个函数调用
 *
 * MumberAccessExpressionOrFunctionCallExpression
 * : MumberAccessExpression
 * | FunctionCall
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MumberAccessExpressionOrFunctionCallExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> MumberAccessExpression
  <span class="token operator">|</span> FunctionCall<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 成员属性访问表达式
 * 把this,super,标识符,都归到这类，因为他们都有相同的特征
 *
 * MumberAccessExpression
 * : This
 * | Super
 * | Identifier
 * | MumberAccessExpression &#39;.&#39; Identifier
 * | MumberAccessExpression &#39;[&#39; Expression &#39;]&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MumberAccessExpression</span> <span class="token operator">=</span>
  <span class="token operator">|</span> This
  <span class="token operator">|</span> Super
  <span class="token operator">|</span> Identifier
  <span class="token operator">|</span> _MumberAccessExpression<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">_MumberAccessExpression</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;MumberAccessExpression&#39;</span><span class="token punctuation">;</span>
  object<span class="token operator">:</span> MumberAccessExpression<span class="token punctuation">;</span>
  property<span class="token operator">:</span> Identifier <span class="token operator">|</span> Expression<span class="token punctuation">;</span>
  isIndex<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * FunctionCall
 * : Calee Arguments
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FunctionCall</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;FunctionCall&#39;</span><span class="token punctuation">;</span>
  calee<span class="token operator">:</span> Calee<span class="token punctuation">;</span>
  args<span class="token operator">:</span> Arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Calee
 * : MumberAccessExpression
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Calee</span> <span class="token operator">=</span> MumberAccessExpression<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Arguments
 * : &#39;(&#39; AssignExpression &#39;)&#39;
 * | &#39;(&#39; &#39;)&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Arguments</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>AssignExpression<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * This
 * : &#39;this&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">This</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;this&#39;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Super
 * : &#39;super&#39;
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Super</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;super&#39;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Identifier
 * : [\\w]+
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Identifier</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 括号表达式
 * BracketedExpression
 * : &#39;(&#39; Expression &#39;)&#39;
 * ;
 * 这里原本可以直接写 BracketedExpression = Expression; 但是这会导致类型循环定义。
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BracketedExpression</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;BracketedExpression&#39;</span><span class="token punctuation">;</span>
  expression<span class="token operator">:</span> Expression<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Literal
 * : NumberLiteral
 * | BooleanLiteral
 * | StringLiteral
 * | NullLiteral
 * ;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Literal</span> <span class="token operator">=</span>
  <span class="token operator">|</span> NumberLiteral
  <span class="token operator">|</span> BooleanLiteral
  <span class="token operator">|</span> StringLiteral
  <span class="token operator">|</span> NullLiteral<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">NumberLiteral</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;NumberLiteral&#39;</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BooleanLiteral</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;BooleanLiteral&#39;</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StringLiteral</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">NullLiteral</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;NullLiteral&#39;</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AST_NODE_TYPE</span></span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&#39;Program&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;Statement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;EmptyStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;BlockStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;IfStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;WhileStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;IdentifierDeclarationsStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;VariableDeclaration&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;FunctionDeclaration&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;ExpressionStatement&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;AssignExpression&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;CommaExpression&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;TernaryExpression&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;BineryExpression&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;MumberAccessExpression&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;this&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;super&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;Identifier&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;FunctionCall&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;NumberLiteral&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;BooleanLiteral&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;StringLiteral&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;NullLiteral&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;BracketedExpression&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AST_NODE</span></span> <span class="token operator">=</span>
  <span class="token operator">|</span> Program
  <span class="token operator">|</span> Statement
  <span class="token operator">|</span> EmptyStatement
  <span class="token operator">|</span> BlockStatement
  <span class="token operator">|</span> IfStatement
  <span class="token operator">|</span> WhileStatement
  <span class="token operator">|</span> IdentifierDeclarationsStatement
  <span class="token operator">|</span> VariableDeclaration
  <span class="token operator">|</span> FunctionDeclaration
  <span class="token operator">|</span> ExpressionStatement
  <span class="token operator">|</span> Expression <span class="token comment">/* Expression中以递归下降的方式定义了其他所有表达式 */</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">AST_BASE_NODE</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token constant">AST_NODE_TYPE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文法分析的实现" tabindex="-1"><a class="header-anchor" href="#文法分析的实现" aria-hidden="true">#</a> 文法分析的实现</h2><p><code>Parser.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> TokenType<span class="token punctuation">,</span> Token <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Tokenizer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Program<span class="token punctuation">,</span>
  Statements<span class="token punctuation">,</span>
  Statement<span class="token punctuation">,</span>
  EmptyStatement<span class="token punctuation">,</span>
  BlockStatement<span class="token punctuation">,</span>
  IfStatement<span class="token punctuation">,</span>
  WhileStatement<span class="token punctuation">,</span>
  ExpressionStatement<span class="token punctuation">,</span>
  IdentifierDeclarationsStatement<span class="token punctuation">,</span>
  VariableOrFunctionDeclaration<span class="token punctuation">,</span>
  VariableDeclaration<span class="token punctuation">,</span>
  VariableDeclarationInit<span class="token punctuation">,</span>
  FunctionDeclaration<span class="token punctuation">,</span>
  FormedArguments<span class="token punctuation">,</span>
  Expression<span class="token punctuation">,</span>
  CommaExpression<span class="token punctuation">,</span>
  AssignExpression<span class="token punctuation">,</span>
  TernaryExpression<span class="token punctuation">,</span>
  LogicalOrExpression<span class="token punctuation">,</span>
  LogicalAndExpression<span class="token punctuation">,</span>
  EqualityExpression<span class="token punctuation">,</span>
  RelationalExpression<span class="token punctuation">,</span>
  AdditiveExpression<span class="token punctuation">,</span>
  MultiplicativeExpression<span class="token punctuation">,</span>
  PrimaryExpression<span class="token punctuation">,</span>
  MumberAccessExpressionOrFunctionCallExpression<span class="token punctuation">,</span>
  MumberAccessExpression<span class="token punctuation">,</span>
  Identifier<span class="token punctuation">,</span>
  This<span class="token punctuation">,</span>
  Super<span class="token punctuation">,</span>
  Arguments<span class="token punctuation">,</span>
  BracketedExpression<span class="token punctuation">,</span>
  Literal<span class="token punctuation">,</span>
  NumberLiteral<span class="token punctuation">,</span>
  BooleanLiteral<span class="token punctuation">,</span>
  StringLiteral<span class="token punctuation">,</span>
  NullLiteral<span class="token punctuation">,</span>
  BineryExpression<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  curToken<span class="token operator">!</span><span class="token operator">:</span> Token <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  tk_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  tokens<span class="token operator">!</span><span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>tokens<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> tokens<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tk_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Program <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>
      statements<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Statements</span><span class="token punctuation">(</span>stopAt<span class="token operator">?</span><span class="token operator">:</span> TokenType<span class="token punctuation">)</span><span class="token operator">:</span> Statements <span class="token punctuation">{</span>
    <span class="token keyword">let</span> statements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">!=</span> stopAt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      statements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> statements<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Statement <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;;&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">EmptyStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;{&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BlockStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;if&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">IfStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;while&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhileStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;def&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">IdentifierDeclarationsStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ExpressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">EmptyStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> EmptyStatement <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;EmptyStatement&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">BlockStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BlockStatement <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> statements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">!=</span> <span class="token string">&#39;}&#39;</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statements</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;BlockStatement&#39;</span><span class="token punctuation">,</span>
      statements<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">IfStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IfStatement <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;if&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> case1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> case2<span class="token operator">:</span> Statement <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;else&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      case2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;IfStatement&#39;</span><span class="token punctuation">,</span>
      condition<span class="token punctuation">,</span>
      case1<span class="token punctuation">,</span>
      case2<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">WhileStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> WhileStatement <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;while&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> statement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;WhileStatement&#39;</span><span class="token punctuation">,</span>
      condition<span class="token punctuation">,</span>
      statement<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">ExpressionStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ExpressionStatement <span class="token punctuation">{</span>
    <span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;ExpressionStatement&#39;</span><span class="token punctuation">,</span>
      expression<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">IdentifierDeclarationsStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IdentifierDeclarationsStatement <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> declarations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">VariableOrFunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      declarations<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">VariableOrFunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;IdentifierDeclarationsStatement&#39;</span><span class="token punctuation">,</span>
      declarations<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">VariableOrFunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> VariableOrFunctionDeclaration <span class="token punctuation">{</span>
    <span class="token keyword">let</span> identifier <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;(&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">VariableDeclaration</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">VariableDeclaration</span><span class="token punctuation">(</span>variableName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> VariableDeclaration <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> variableName<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">VariableDeclarationInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">VariableDeclarationInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> VariableDeclarationInit <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;AssignOpSimple&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;AssignOpSimple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LogicalOrExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span>functionName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> FunctionDeclaration <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> functionName<span class="token punctuation">,</span>
      FormedArguments<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FormedArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      statements<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BlockStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">FormedArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FormedArguments <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> args<span class="token operator">:</span> VariableOrFunctionDeclaration<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">VariableOrFunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// @ts-ignore</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> args<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Expression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CommaExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">CommaExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CommaExpression <span class="token punctuation">{</span>
    <span class="token keyword">let</span> exp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> exps <span class="token operator">=</span> <span class="token punctuation">[</span>exp<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        exps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;CommaExpression&#39;</span><span class="token punctuation">,</span>
        expressions<span class="token operator">:</span> exps<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> exp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AssignExpression <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left<span class="token operator">:</span> AssignExpression <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TernaryExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>left<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;MumberAccessExpression&#39;</span> <span class="token operator">||</span> left<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;AssignOpSimple&#39;</span> <span class="token operator">||</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;AssignOpComplex&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> operator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      left <span class="token operator">=</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;AssignExpression&#39;</span><span class="token punctuation">,</span>
        operator<span class="token punctuation">,</span>
        left<span class="token punctuation">,</span>
        right<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">TernaryExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> TernaryExpression <span class="token punctuation">{</span>
    <span class="token keyword">let</span> condition<span class="token operator">:</span> TernaryExpression <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LogicalOrExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;TernaryOp?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;TernaryOp?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> case1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TernaryExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;TernaryOp:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> case2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TernaryExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;TernaryExpression&#39;</span><span class="token punctuation">,</span>
        condition<span class="token punctuation">,</span>
        case1<span class="token punctuation">,</span>
        case2<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> condition<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">LogicalOrExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LogicalOrExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>LogicalAndExpression<span class="token punctuation">,</span> <span class="token string">&#39;LogicalOr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">LogicalAndExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LogicalAndExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>EqualityExpression<span class="token punctuation">,</span> <span class="token string">&#39;LogicalAnd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">EqualityExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> EqualityExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>RelationalExpression<span class="token punctuation">,</span> <span class="token string">&#39;EqualityOp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">RelationalExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RelationalExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>AdditiveExpression<span class="token punctuation">,</span> <span class="token string">&#39;RelationalOp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">AdditiveExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AdditiveExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>MultiplicativeExpression<span class="token punctuation">,</span> <span class="token string">&#39;AddOp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">MultiplicativeExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MultiplicativeExpression <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BineryExpression</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PrimaryExpression<span class="token punctuation">,</span> <span class="token string">&#39;MutOp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">PrimaryExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> PrimaryExpression <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Identifier&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;this&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;super&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MumberAccessExpressionOrFunctionCallExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;(&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BracketedExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Literal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">MumberAccessExpressionOrFunctionCallExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MumberAccessExpressionOrFunctionCallExpression <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mumberExp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MumberAccessExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;FunctionCall&#39;</span><span class="token punctuation">,</span>
        calee<span class="token operator">:</span> mumberExp<span class="token punctuation">,</span>
        args<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mumberExp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">MumberAccessExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MumberAccessExpression <span class="token punctuation">{</span>
    <span class="token keyword">let</span> object<span class="token operator">!</span><span class="token operator">:</span> MumberAccessExpression<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;this&#39;</span><span class="token operator">:</span>
        object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;super&#39;</span><span class="token operator">:</span>
        object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Identifier&#39;</span><span class="token operator">:</span>
        object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unexpectted token:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> property<span class="token operator">!</span><span class="token operator">:</span> Identifier <span class="token operator">|</span> Expression<span class="token punctuation">;</span>
      <span class="token keyword">let</span> isIndex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        property <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isIndex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        property <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isIndex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      object <span class="token operator">=</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;MumberAccessExpression&#39;</span><span class="token punctuation">,</span>
        object<span class="token operator">:</span> object<span class="token punctuation">,</span>
        property<span class="token operator">:</span> property<span class="token punctuation">,</span>
        isIndex<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> This <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> ts<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Super <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> sp<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Identifier <span class="token punctuation">{</span>
    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Arguments <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>AssignExpression<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> args<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AssignExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> args<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">BracketedExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BracketedExpression <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;BracketedExpression&#39;</span><span class="token punctuation">,</span>
      expression<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Literal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Literal <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Number&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">NumberLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;String&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;null&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">NullLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Boolean&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BooleanLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unknow Literal: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">NumberLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> NumberLiteral <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;Number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;NumberLiteral&#39;</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> val<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">BooleanLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BooleanLiteral <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;BooleanLiteral&#39;</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> val<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> StringLiteral <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> val<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">NullLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> NullLiteral <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;NullLiteral&#39;</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> val<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token generic-function"><span class="token function">BineryExpression</span><span class="token generic class-name"><span class="token operator">&lt;</span>ChildNode<span class="token punctuation">,</span> operatorType <span class="token keyword">extends</span> TokenType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token function-variable function">childBuilder</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ChildNode<span class="token punctuation">,</span>
    operatorType<span class="token operator">:</span> operatorType
  <span class="token punctuation">)</span><span class="token operator">:</span> ChildNode <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>ChildNode<span class="token punctuation">,</span> operatorType<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left<span class="token operator">:</span> ChildNode <span class="token operator">|</span> BineryExpression<span class="token operator">&lt;</span>ChildNode<span class="token punctuation">,</span> operatorType<span class="token operator">&gt;</span> <span class="token operator">=</span>
      <span class="token function">childBuilder</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">==</span> operatorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> operator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>operatorType<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">childBuilder</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      left <span class="token operator">=</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;BineryExpression&#39;</span><span class="token punctuation">,</span>
        operator<span class="token punctuation">,</span>
        left<span class="token punctuation">,</span>
        right<span class="token punctuation">,</span>
      <span class="token punctuation">}</span> <span class="token keyword">as</span> BineryExpression<span class="token operator">&lt;</span>ChildNode<span class="token punctuation">,</span> operatorType<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">eat</span><span class="token punctuation">(</span>tkt<span class="token operator">:</span> TokenType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>type <span class="token operator">!=</span> tkt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">expected:&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tkt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;;but actually get:&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token operator">?.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tk_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curToken <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tk_idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>tk_idx<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> token<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解释器的实现" tabindex="-1"><a class="header-anchor" href="#解释器的实现" aria-hidden="true">#</a> 解释器的实现</h2><p><code>Interpreater.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">AST_NODE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Interpreater</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 暂时的想法是，进入一个块作用域，就创建一个上下文对象，压入栈顶，
   * 当要在该作用域定义变量时，把变量存储到栈顶的上下文对象中。
   * 当要寻找一个变量的值时，则从栈顶往栈底遍历。
   * 当离开一个作用域时，弹出栈顶上下文对象，并将其销毁
   */</span>
  ctxIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 上下文栈指针，第0个栈为系统栈</span>
  ctxStack<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 上下文对象栈</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">AST_NODE</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Program&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;BlockStatement&#39;</span><span class="token operator">:</span>
        <span class="token comment">// 执行代码块，返回最后一条语句的值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> node<span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;EmptyStatement&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;IfStatement&#39;</span><span class="token operator">:</span>
        <span class="token comment">// TODO: 需要考虑 return 和 break</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>case1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>case2<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>case2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;WhileStatement&#39;</span><span class="token operator">:</span>
        <span class="token comment">// TODO: 需要考虑return 和 break</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回最后执行的一条语句</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;IdentifierDeclarationsStatement&#39;</span><span class="token operator">:</span>
        <span class="token comment">// 返回标识符列表</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token operator">:</span>
        <span class="token comment">// 变量声明以及初始化</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">declear</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token operator">:</span>
        <span class="token comment">// 返回函数名</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">declear</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;ExpressionStatement&#39;</span><span class="token operator">:</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;CommaExpression&#39;</span><span class="token operator">:</span>
        <span class="token comment">// 计算并返回逗号表达式的最后一个值</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>expressions<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;AssignExpression&#39;</span><span class="token operator">:</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> <span class="token string">&#39;Identifier&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
              node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
              node<span class="token punctuation">.</span>operator<span class="token punctuation">,</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token string">&#39;unimplement functions.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token string">&#39;TernaryExpression&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>condition<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>case1<span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>case2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;BineryExpression&#39;</span><span class="token operator">:</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> <span class="token string">&#39;||&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;&amp;&amp;&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;==&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;!=&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;&lt;&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;&gt;&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;&lt;=&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;&gt;=&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;+&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;-&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;*&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;/&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">case</span> <span class="token string">&#39;%&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unknow operator:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>operator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;FunctionCall&#39;</span><span class="token operator">:</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>calee<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">case</span> <span class="token string">&#39;Identifier&#39;</span><span class="token operator">:</span>
            <span class="token keyword">let</span> <span class="token builtin">symbol</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>calee<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
            <span class="token keyword">let</span> fun<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token constant">AST_NODE</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>fun <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> args <span class="token operator">=</span> node<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fun<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 计算实参</span>
                <span class="token keyword">let</span> argValus <span class="token operator">=</span> node<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 进入函数调用</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// 声明初始化形式参数</span>
                <span class="token keyword">let</span> argNames <span class="token operator">=</span> fun<span class="token punctuation">.</span>FormedArguments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 把实参传给形式参数</span>
                argNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> argValus<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span>statements<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unimplement function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">symbol</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token string">&#39;unimplement functions.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token string">&#39;BracketedExpression&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;Identifier&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;NumberLiteral&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;BooleanLiteral&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;NullLiteral&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;MumberAccessExpression&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;super&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;this&#39;</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token string">&#39;unimplement functions.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 获取当前作用域的上下文对象
   * 如果不存在，则要负责创建它
   */</span>
  <span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 自上而下的到上下文对象栈中去寻找定义了某个符号的上下文对象。
   */</span>
  <span class="token function">findContextWithSymbol</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctxIdx<span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> idx<span class="token punctuation">;</span> idx<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> stack<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">registerFun</span><span class="token punctuation">(</span>funName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> fun<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 把预定义函数定义在系统栈中</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctxStack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>funName<span class="token punctuation">,</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 在当前的作用域中声明变量
   */</span>
  <span class="token function">declear</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">redefined symbol: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">symbol</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 对一个已经定义的变量赋值
   */</span>
  <span class="token function">assign</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findContextWithSymbol</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">undefined symbol: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">symbol</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newVal <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;+=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;-=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">-=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;*=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">*=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;/=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">/=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;%=&#39;</span><span class="token operator">:</span>
        newVal <span class="token operator">%=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unknow operator:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>operator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newVal<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 获取一个已经定义的变量的值
   */</span>
  <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findContextWithSymbol</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">undefined symbol: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">symbol</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function W(j,z){const t=l("ExternalLinkIcon"),i=l("CodeTabs");return r(),k("div",null,[m,n("p",null,[s("2021年08月的时候，在bilibili上看到过一个讲解如何用700行手写实现一个编译器的"),n("a",b,[s("视频"),a(t)]),s("，"),y,s(" 源代码在这里，"),n("a",g,[s("cpc"),a(t)])]),w,x,n("p",null,[s("再那后来不久的时间里，我又看到过另外一个编译器项目，"),n("a",f,[h,a(t)]),s(",")]),E,S,n("p",null,[s("还有一个项目，"),n("a",A,[s("Recursive Descent Parser"),a(t)]),s(" 一个递归下降Parser的实现，用的是js实现的。")]),T,_,B,I,O,D,L,N,n("p",null,[s("这几天我重新阅读了上面几个项目的源代码，甚至去读了js的标准文档，去看了它的文法定义，另外还大概看了另一个项目 "),n("a",F,[s("tiny-js"),a(t)]),s(",这个项目用大概2000行的代码实现了一款可嵌入至c++程序的js解释器，虽然没有完全看完，但给我的感觉还是挺震撼的，就是太牛了。")]),C,a(i,{id:"251",data:[{id:"解释器代码:<code v-pre>test/index.ts</code>"},{id:"输出结果:<code v-pre>output.txt</code>"}]},{title0:p(({value:e,isActive:o})=>[s("解释器代码:"),V]),title1:p(({value:e,isActive:o})=>[s("输出结果:"),M]),tab0:p(({value:e,isActive:o})=>[P]),tab1:p(({value:e,isActive:o})=>[q]),_:1},8,["data"]),R])}const Y=u(v,[["render",W],["__file","index.html.vue"]]);export{Y as default};
