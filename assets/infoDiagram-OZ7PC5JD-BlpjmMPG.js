var g=(e,t,a)=>new Promise((o,s)=>{var v=r=>{try{i(a.next(r))}catch(n){s(n)}},d=r=>{try{i(a.throw(r))}catch(n){s(n)}},i=r=>r.done?o(r.value):Promise.resolve(r.value).then(v,d);i((a=a.apply(e,t)).next())});import{_ as p,l as m,K as c,k as l,L as f}from"./mermaid.core-CjFIY7bQ.js";import{p as u}from"./gitGraph-YCYPL57B-BRntCMMK.js";import"./app-CHjqYunX.js";import"./commonjsHelpers-D6Ya60D-.js";import"./baseUniq-DLWBS8Ta.js";import"./basePickBy-Ckl3rxJV.js";import"./clone-D7tLb8wA.js";var x={parse:p(e=>g(void 0,null,function*(){const t=yield u("info",e);m.debug(t)}),"parse")},_={version:f},b=p(()=>_.version,"getVersion"),w={getVersion:b},y=p((e,t,a)=>{m.debug(`rendering info diagram
`+e);const o=c(t);l(o,100,400,!0),o.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${a}`)},"draw"),S={draw:y},A={parser:x,db:w,renderer:S};export{A as diagram};
