import{_ as s,c as a,e as p,o as t}from"./app-CHjqYunX.js";const e="/assets/2023-02-09-12-06-03-DFoPozhF.png",c="/assets/2023-02-09-12-05-51-BYmTAK-0.png",l="/assets/2023-02-09-13-57-38-DRpiL_nw.png",o="/assets/2023-02-09-14-00-00-CAdH3YFv.png",i="/assets/2023-02-09-16-10-33-xy7_DIzB.png",u="/assets/2023-02-09-20-22-18-D94BsZNc.png",k="/assets/2023-02-09-20-27-16-CCiEAQwr.png",r="/assets/2023-02-10-11-40-48-BePZZu9g.png",d="/assets/2023-02-10-12-24-48-CpUl0wkA.png",m="/assets/2023-02-10-17-44-42-COVFfzHO.png",v="/assets/2023-02-11-06-06-00-nJ7iajEl.gif",b="/assets/2023-02-12-08-37-44-BRUeDNSS.png",g="/assets/2023-02-12-10-01-50-CaGvaMy0.png",h="/assets/2023-02-12-11-44-54-Bp0aH_NR.png",y="/assets/2023-02-13-00-32-12-CnQfz2jf.png",f="/assets/2023-02-13-00-27-26-DC5m234W.png",w="/assets/2023-02-13-00-28-31-DiONLAfU.png",_="/assets/2023-02-13-00-28-49-bFRHM61c.png",A="/assets/2023-02-13-00-29-55-DrHf4sTy.png",x="/assets/2023-02-13-00-30-47-DUkerlRb.png",N="/assets/2023-02-13-00-33-31-Y9XQjP_L.png",E="/assets/2023-02-13-00-34-33-CKhe4K8-.png",B="/assets/2023-02-13-10-52-02-nELMo1T5.png",j="/assets/2023-02-13-12-05-16-DLxshjGO.png",S="/assets/2023-02-13-11-18-48-DB6EOw22.png",C="/assets/2023-02-13-11-19-36-B_pXpeCQ.png",V="/assets/2023-02-13-11-20-08-BTjhG7Yk.png",M="/assets/2023-02-13-11-37-55-C2JrqrL4.png",T="/assets/2023-02-13-11-51-47-DZVNiiQm.png",D="/assets/2023-02-13-12-26-07-BBh2VZFi.png",I="/assets/2023-02-13-12-57-35-BKh-zxi1.png",F="/assets/2023-02-13-14-27-48-CAKDLTfI.png",L="/assets/2023-02-13-14-55-59-CvxxfUF-.png",q="/assets/2023-02-13-14-56-37-ClElnADv.png",H="/assets/2023-02-14-11-18-43-DkwPJWb5.png",P="/assets/2023-02-14-11-18-15-B5DvwzbT.png",G="/assets/2023-02-14-11-31-48-BOKya6Ip.png",z="/assets/2023-02-14-12-36-34-CasjNP0G.png",K="/assets/2023-02-14-14-20-20-CRjY0TPC.png",O="/assets/2023-02-14-14-19-29-CyZiD60X.png",Q="/assets/2023-02-14-16-10-58-8CbOApVt.png",Z="/assets/2023-02-14-16-31-00-wqhEPLSW.png",R={};function U(Y,n){return t(),a("div",null,n[0]||(n[0]=[p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TreeInfo</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> depth<span class="token punctuation">,</span><span class="token keyword">public</span> nodes</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isFullTree</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span>TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token comment">// 认为空树是满树</span></span>
<span class="line"> <span class="token keyword">let</span> treeInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>treeInfo<span class="token punctuation">.</span>depth<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> treeInfo<span class="token punctuation">.</span>nodes</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span>TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">let</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">let</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">let</span> depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>depth<span class="token punctuation">,</span>rightInfo<span class="token punctuation">.</span>depth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"> <span class="token keyword">let</span> nodes <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>nodes<span class="token operator">+</span>rightInfo<span class="token punctuation">.</span>nodes <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeInfo</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span>nodes<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断一颗树是否是搜索二叉树" tabindex="-1"><a class="header-anchor" href="#判断一颗树是否是搜索二叉树"><span>判断一颗树是否是搜索二叉树</span></a></h4><p>搜索二叉树</p><ul><li>左树是搜索二叉树</li><li>右树是搜索二叉树</li><li>左树的最大值&lt; 根的值 &lt; 右树的最小值</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BSTinfo</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token function">contractor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> isBST<span class="token punctuation">,</span><span class="token keyword">public</span> maxVal<span class="token punctuation">,</span><span class="token keyword">public</span> minVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isBST</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span>TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>isBST</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span>TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> BSTinfo leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line"> BSTinfo rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">let</span> minVal <span class="token operator">=</span> current<span class="token punctuation">.</span>val</span>
<span class="line"> <span class="token keyword">let</span> maxVal <span class="token operator">=</span> current<span class="token punctuation">.</span>val</span>
<span class="line"> <span class="token keyword">let</span> isBST <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  minVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minVal<span class="token punctuation">,</span>leftInfo<span class="token punctuation">.</span>minVal<span class="token punctuation">)</span></span>
<span class="line">  maxVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span>leftInfo<span class="token punctuation">.</span>maxVal<span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  minVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minVal<span class="token punctuation">,</span>rightInfo<span class="token punctuation">.</span>minVal<span class="token punctuation">)</span></span>
<span class="line">  maxVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span>rightInfo<span class="token punctuation">.</span>maxVal<span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  isBST <span class="token operator">=</span> isBST <span class="token operator">&amp;&amp;</span>  leftInfo<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span> leftInfo<span class="token punctuation">.</span>maxVal <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>val</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  isBST <span class="token operator">=</span> isBST <span class="token operator">&amp;&amp;</span>  rightInfo<span class="token punctuation">.</span>isBST <span class="token operator">&amp;&amp;</span>  current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> rightInfo<span class="token punctuation">.</span>minVal</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BSTinfo</span><span class="token punctuation">(</span>isBST<span class="token punctuation">,</span>minVal<span class="token punctuation">,</span>maxVal<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="题目-2-1" tabindex="-1"><a class="header-anchor" href="#题目-2-1"><span>题目 2</span></a></h3><h3 id="找最低公共祖先" tabindex="-1"><a class="header-anchor" href="#找最低公共祖先"><span>找最低公共祖先</span></a></h3><p><img src="`+e+'" alt=""></p><blockquote><p><img src="'+c+`" alt=""><br> DE 的最低公共祖先是 B<br> EF 的最低公共祖先是 E</p></blockquote><p>我的思路：</p><ul><li>先用之前的动态规划的方式，将节点所在的路径上的节点串成链</li><li>如果 A 在 B 的链上，则 A 是公共祖先节点，反之亦然</li><li>否则遍历(其实可以直接遍历)长链上的节点，如果该节点能在短链上能找到，则该节点就是要找的节点</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">findCommonFather</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span>TreeNode<span class="token punctuation">,</span><span class="token literal-property property">nodeA</span><span class="token operator">:</span>TreeNode<span class="token punctuation">,</span><span class="token literal-property property">nodeB</span><span class="token operator">:</span>TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">let</span> listA <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>nodeA<span class="token punctuation">)</span> <span class="token comment">// 假设能找到这条链</span></span>
<span class="line"> <span class="token keyword">let</span> listB <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>nodeB<span class="token punctuation">)</span> <span class="token comment">// 假设能找到这条链</span></span>
<span class="line"> <span class="token keyword">let</span> tempA <span class="token operator">=</span> <span class="token punctuation">(</span>listA<span class="token punctuation">.</span>length<span class="token operator">&gt;</span>listB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> listA<span class="token operator">:</span>listB</span>
<span class="line"> <span class="token keyword">let</span> tempB <span class="token operator">=</span><span class="token punctuation">(</span>listA<span class="token punctuation">.</span>length<span class="token operator">&gt;</span>listB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> listB<span class="token operator">:</span>listA</span>
<span class="line"> <span class="token comment">// 从最长的链上找</span></span>
<span class="line"> <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tempA<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span>int j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>tempB<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span><span class="token punctuation">(</span>tempA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>tempB<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> tempA</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> isFind<span class="token punctuation">,</span><span class="token keyword">public</span> list</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 动态规划，找到这条链</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span>TreeNode<span class="token punctuation">,</span><span class="token literal-property property">val</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> list</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">let</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">let</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">let</span> list <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>list <span class="token operator">||</span> rightInfo<span class="token punctuation">.</span>list</span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">return</span> list</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路 2</p><ul><li>依然是动态规划，问左右子树要答案</li><li>当前节点是要找的节点就返回当前节点</li><li>左右两边都没有找到就返回 null</li><li>左右两边任意一边找到了就返回这一边</li><li>左右两边都找到了就返回当前节点</li><li><img src="`+l+'" alt=""></li><li><img src="'+o+`" alt=""></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">findCommonFather</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> targetA<span class="token punctuation">,</span> targetB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> current <span class="token operator">==</span> targetA <span class="token operator">||</span> current <span class="token operator">==</span> targetB<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> current<span class="token punctuation">;</span> <span class="token comment">// 自己就是要找的节点</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> resLeft <span class="token operator">=</span> <span class="token function">findCommonFather</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetA<span class="token punctuation">,</span> targetB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> resRight <span class="token operator">=</span> <span class="token function">findCommonFather</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetA<span class="token punctuation">,</span> targetB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>resLeft <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resRight <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 左边右边都没有找到</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>resLeft <span class="token operator">&amp;&amp;</span> resRight<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> current<span class="token punctuation">;</span> <span class="token comment">// 左边右边都找到了，则自己就是公共节点</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">return</span> resLeft <span class="token operator">?</span> resLeft <span class="token operator">:</span> resRight<span class="token punctuation">;</span> <span class="token comment">// 左边找到就返回左边，右边找到就返回右边</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何找二叉树中某节点的后继节点" tabindex="-1"><a class="header-anchor" href="#如何找二叉树中某节点的后继节点"><span>如何找二叉树中某节点的后继节点</span></a></h3><p>根据定义来说，某个节点的后继就是中序遍历时该节点的下一个节点</p><p>从结构上来说，一个节点的后继就是</p><ul><li>如果这个节点有右子树，则后继就是右树上的最左节点</li><li>如果这个节点没有右子树，则其后继就要从其父节点找 <ul><li>如果这个节点是父节点的右子树，则一直往上找，</li><li>直到这个节点在父节点中是左子树，那么该节点的父节点就是后继</li><li><img src="`+i+`" alt=""></li></ul></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">findNext</span><span class="token punctuation">(</span>node<span class="token operator">:</span> TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> current<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">let</span> current <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">let</span> father <span class="token operator">=</span> current<span class="token punctuation">.</span>father<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">while</span> <span class="token punctuation">(</span>father <span class="token operator">&amp;&amp;</span> father<span class="token punctuation">.</span>right <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  current <span class="token operator">=</span> current<span class="token punctuation">.</span>father<span class="token punctuation">;</span></span>
<span class="line">  father <span class="token operator">=</span> father<span class="token punctuation">.</span>father<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">return</span> father<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉树的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#二叉树的序列化和反序列化"><span>二叉树的序列化和反序列化</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">EnCode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span>TreeNode<span class="token punctuation">,</span>visiter</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visiter<span class="token punctuation">)</span> visiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token function">EnCode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>visiter<span class="token punctuation">)</span></span>
<span class="line"> <span class="token function">EnCode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>visiter<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">return</span> visiter</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">DnCode</span><span class="token punctuation">(</span><span class="token parameter">visiter</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>visiter<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>visiter<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"> head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">EnCode</span><span class="token punctuation">(</span>visiter<span class="token punctuation">)</span></span>
<span class="line"> head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">EnCode</span><span class="token punctuation">(</span>visiter<span class="token punctuation">)</span></span>
<span class="line"> <span class="token keyword">return</span> head</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="纸条折痕问题-微软面试题" tabindex="-1"><a class="header-anchor" href="#纸条折痕问题-微软面试题"><span>纸条折痕问题，微软面试题</span></a></h4><p>将纸条反复对折 n 次，输出其折痕顺序</p><p><img src="`+u+'" alt=""></p><p><img src="'+k+`" alt=""></p><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><blockquote><p>表达图的数据结构的方式比较多，但算法都是一样的<br> 可以选一种擅长的数据结构，把算法写熟练，碰到不同的数据结构，就写一个接口，把两种数据结构对应起来，这样就可以用旧的算法解新的题</p></blockquote><h3 id="图的模板代码" tabindex="-1"><a class="header-anchor" href="#图的模板代码"><span>图的模板代码</span></a></h3><blockquote><p>图的存储方式，邻接表 邻接矩阵</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_13_图的通用模板<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">// 点集 其中键可以是任何数据结构，表示节点的值，</span></span>
<span class="line"> <span class="token comment">// 但如果刷题，值一般是不重复的value，可以用数组来实现，会更快</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 边集合</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_13_图的通用模板<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">// 数据项，可以是int 可以是一个复杂的数据类型</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span><span class="token comment">// 入度</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span><span class="token comment">// 出度</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nexts<span class="token punctuation">;</span><span class="token comment">// 节点的下一跳（从自己所在位置出发的目的地）</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token comment">// 节点的边（发出的）</span></span>
<span class="line"></span>
<span class="line"> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_13_图的通用模板<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment">// 权重</span></span>
<span class="line"> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从矩阵图结构转换到模板图结构" tabindex="-1"><a class="header-anchor" href="#从矩阵图结构转换到模板图结构"><span>从矩阵图结构转换到模板图结构</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_13_图的通用模板<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphCreater</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">/*</span>
<span class="line">  * 将矩阵转换成Graph</span>
<span class="line">  * matrix: [</span>
<span class="line">  * * [fromNodeValue,toNodeValue,Weight],</span>
<span class="line">  * * [fromNodeValue,toNodeValue,Weight]</span>
<span class="line">  * ]</span>
<span class="line">  */</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraphUseMatrix</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> matrix<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Integer</span> fromValue <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Integer</span> toValue <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Integer</span> weightVal <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>fromValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fromValue<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>fromValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>toValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toValue<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>toValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token class-name">Node</span> fromNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Node</span> toNode <span class="token operator">=</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Edge</span> edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">,</span> weightVal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">   toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">   fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> graph<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图的宽度优先遍历和宽度优先遍历" tabindex="-1"><a class="header-anchor" href="#图的宽度优先遍历和宽度优先遍历"><span>图的宽度优先遍历和宽度优先遍历</span></a></h3><blockquote><p>和二叉树的宽度有限遍历不同，二叉树没有回路，图可能有回路，算法要避免在回路中形成死循环</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_13_图的通用模板<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 从一个点出发，做宽度优先遍历</span></span>
<span class="line"> <span class="token keyword">void</span> <span class="token function">wideFirstOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 深度优先，使用队列实现先进先出</span></span>
<span class="line">  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 集合，遍历过的点的集合，防止重复遍历</span></span>
<span class="line"></span>
<span class="line">  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">   <span class="token class-name">Node</span> current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 依次将当前节点的下一跳加入到队列，等待遍历</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果没有遍历过才添加到队列</span></span>
<span class="line">     set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 从一个点出发 深度优先遍历</span></span>
<span class="line"> <span class="token keyword">void</span> <span class="token function">deepFirstOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先处理这个节点</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Node</span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 找到一个没有遍历的节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册当前节点防止后续重复处理</span></span>
<span class="line">     stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 入栈父节点，因为后续还要来遍历他的next节点，找到另一条没走过的路</span></span>
<span class="line">     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理当前节点</span></span>
<span class="line">     <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 跳出当前循环，开始处理找到的这个没有遍历过的节点</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拓扑排序" tabindex="-1"><a class="header-anchor" href="#拓扑排序"><span>拓扑排序</span></a></h3><blockquote><p>应用：编译流程的确定,编译文件的依赖关系的图是有向图，且应当没有循环依赖，也就是没有环<br><img src="`+r+`" alt=""></p></blockquote><p><strong>原理</strong></p><ul><li>先找到一个入度为 0 的节点 <code>{应该说，先找到所有的}</code></li><li>处理这个节点 <code>｛处理所有的节点｝</code></li><li>在图中删除这个节点，更新图中其他节点的入度</li><li>于是图中就会出现另一个入度为零的节点</li><li>循环</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token function">topologyOrder</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> inValMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录所有节点入度的hash表</span></span>
<span class="line">  <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> zeroinVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入度为零的队列</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序结果</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 先把图中所有节点遍历，添加到表中</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   inValMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录所有节点的入度</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>in <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    zeroinVal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录入度为0的节点</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>zeroinVal<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Node</span> current <span class="token operator">=</span> zeroinVal<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 拿出队列中入度为0的节点，放入排序结果中</span></span>
<span class="line">   result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    inValMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> inValMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于一个节点的出度就是另一个节点的入度,所以更新其他节点的入度就是在原来的基础上-1</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inValMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     zeroinVal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果更新后，入度为零，则添加到队列</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无向图拓扑排序" tabindex="-1"><a class="header-anchor" href="#无向图拓扑排序"><span>无向图拓扑排序</span></a></h3><p>用于生成最小生成树的算法，</p><p>最小生成树，就是保证图中的所有的点都可以<strong>直接或间接</strong>的联通 但是联通后，边的<strong>权重</strong>是最小的</p><p><img src="`+d+`" alt=""></p><h4 id="kruskal-算法" tabindex="-1"><a class="header-anchor" href="#kruskal-算法"><span>kruskal 算法</span></a></h4><p><strong>过程</strong></p><ul><li>有一个待排序图，另创建一个空图</li><li><strong>从边的角度考虑</strong></li><li>按权重从小到大遍历所有的边</li><li>把这条边添加到空图中，但要检查并防止产生环 <ul><li>（因为形成环则表示添加的这条边后所连接的节点原先就已经能够间接的和其他部分联通了，图中的节点只需要保证间接连接）</li></ul></li></ul><p>实际上，就是根据权重从小到大依次用边来构建局部的图，新的边可能会连接两个局部的图，从而形成一个更大的图，也可能新边只是一条连接一个局部的图的内部两个节点的一条边</p><p><strong>如何判断添加边后是否形成环？</strong></p><ul><li>需要使用并查集</li><li>先将图中所有的节点各自放入单独的集合中,并最后存进 hash 表，如： [A:{A} B:{B} C:{C} D:{D}]</li><li>如果添加的一条边是[from:A,to:B] 则先检测 A:{A}中是否有 B B:{B}中是否有 A,也就是判断 AB 是否在同一个集合中</li><li>如果不在，就合并两个集合，得到：[A:{A,B} B:{A,B} C:{C} D:{D}]</li><li>如果又添加一条边[from:B,to:C] 则可得到 [A:{A,B,C} B:{A,B,C} C:{A,B,C} D:{D}]</li><li>如果又添加一条边[from:C,to:D] 则可得到 [A:{A,B,C,D} B:{A,B,C,D} C:{A,B,C,D} D:{A,B,C,D}]</li><li>但如果又添加一条边：[from:C,to:A] 则会发现，C、A 所在的集合是{A,B,C},这意味着添加这条边就会形成环，所以不能添加</li><li>至此所有的节点都联通，且没有形成环</li></ul><h4 id="简易并查集的实现" tabindex="-1"><a class="header-anchor" href="#简易并查集的实现"><span>简易并查集的实现</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SimpleUnionFind</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> ndoes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> ndoes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n1<span class="token punctuation">,</span> <span class="token class-name">Node</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 判断两个节点是否在同一个集合</span></span>
<span class="line">   <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">Node</span> n1<span class="token punctuation">,</span> <span class="token class-name">Node</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 合并两个节点所在的集合</span></span>
<span class="line">   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> setA <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> setB <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> setB<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    setA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将集合B中的节点放入集合A</span></span>
<span class="line">    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> setA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 节点现在在集合A中，所以从新调成其指向</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="k-算法的具体实现" tabindex="-1"><a class="header-anchor" href="#k-算法的具体实现"><span>K 算法的具体实现</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token comment">// KruskalMST算法实际就是在计算一个无向图要保证全联通，实际需要保留哪些边，所以返回值是边的集合</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">KruskalMST</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 边的集合</span></span>
<span class="line">  <span class="token class-name">SimpleUnionFind</span> unionFind <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUnionFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简易并查集</span></span>
<span class="line">  <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 优先级队列就是堆，这里要传递一个比较器。</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> o1<span class="token punctuation">,</span> <span class="token class-name">Edge</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> o1<span class="token punctuation">.</span>weight <span class="token operator">-</span> o2<span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token comment">// o1-o2 就是降序排序，按照权重排序</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  unionFind<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化简易并查集</span></span>
<span class="line">  heap<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把所有边添加到堆中，这样堆顶就是权重最小的边</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Edge</span> edge <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unionFind<span class="token punctuation">.</span><span class="token function">isSameSet</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>from<span class="token punctuation">,</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 不在同一个集合中则说明添加这条边不会产生回路</span></span>
<span class="line">    unionFind<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>from<span class="token punctuation">,</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合并两个集合</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加这条边</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prim-算法" tabindex="-1"><a class="header-anchor" href="#prim-算法"><span>prim 算法</span></a></h4><p><img src="`+m+`" alt=""></p><p><strong>流程</strong></p><ul><li>随便选一个节点，如 A</li><li>标记 A 为已经处理，将 A 的所有边放入堆中，然后拿出权重最低的边也就是 1</li><li>1 是链接 AC 的，A 已经处理，C 未处理，所以将 C 标记为处理，然后将 C 的所有边放入堆中，再次拿出权重最低的边，将拿到 1，但是 1 是连接 AC 的，而 AC 已经标记为处理过了，所以再次拿出一条边，这将是 4，4 连接 CF,C 处理过了，F 未处理，标记 F 为已处理，然后将 F 的边入堆，然后再次拿出权重最小的边，这将是 2</li><li>循环往复。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token comment">// prim算法是站在节点的角度考虑，返回的值是这个图生成最小生成树所需的边的集合</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">PrimMST</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用于判断是否是已经联通过的节点</span></span>
<span class="line">  <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@Override</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Edge</span> o1<span class="token punctuation">,</span> <span class="token class-name">Edge</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> o1<span class="token punctuation">.</span>weight <span class="token operator">-</span> o2<span class="token punctuation">.</span>weight<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// for循环是为了防止出现森林的情况，就是说图中存在两片独立而不联通的区域</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    nodeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加节点到集合中表示处理过了</span></span>
<span class="line">    heap<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加所有发出的边</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span> edge <span class="token operator">:</span> heap<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 从堆中拿出权重最低的边</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 仅当目的节点未被处理时</span></span>
<span class="line">       nodeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录这条边</span></span>
<span class="line">       heap<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">.</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加该节点发出的所有边。</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迪杰斯特拉算法" tabindex="-1"><a class="header-anchor" href="#迪杰斯特拉算法"><span>迪杰斯特拉算法</span></a></h3><p><img src="`+v+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 求一个节点到图中其他节点的最短距离，</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 记录图中其他节点到node的最短距离</span></span>
<span class="line">  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 更新完毕的节点,已经使用最短路径到达的节点</span></span>
<span class="line">  <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> arrivedNodeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// node 到 node 的距离是0</span></span>
<span class="line">  distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 找到到node距离最小路径的节点</span></span>
<span class="line">  <span class="token class-name">Node</span> minNode <span class="token operator">=</span> <span class="token function">getMinDistanceNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> arrivedNodeSet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>minNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Integer</span> distance <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前节点到node的距离</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span> edge <span class="token operator">:</span> minNode<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 遍历该节点的边</span></span>
<span class="line">    <span class="token class-name">Node</span> toNode <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">;</span><span class="token comment">// 获取边的目的节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distanceMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// 如果是一个新的节点，则在distanceMap中添加一条记录，距离就是distance+边的权重</span></span>
<span class="line">     distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> distance <span class="token operator">+</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 更新距离，如果从node到这些节点的路径变得更短了就更新</span></span>
<span class="line">    distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">,</span> distance <span class="token operator">+</span> edge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   arrivedNodeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 处理完毕，让下次不会被选中</span></span>
<span class="line">   minNode <span class="token operator">=</span> <span class="token function">getMinDistanceNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span> arrivedNodeSet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> distanceMap<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token comment">// 获取最短路径的节点，但排除excldeSet集合</span></span>
<span class="line"> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">getMinDistanceNode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> distanceMap<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> excludeSet<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Integer</span> min_distance <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Node</span> min_node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> distanceMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Node</span> node <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Integer</span> distance <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>excludeSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> min_distance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    min_node <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    min_distance <span class="token operator">=</span> distance<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> min_node<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前缀树" tabindex="-1"><a class="header-anchor" href="#前缀树"><span>前缀树</span></a></h2><p>可以很方便的根据字符串前缀查询。</p><p><img src="`+b+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> 左程云算法课初级班基础知识学习笔记<span class="token punctuation">.</span>_14_前缀树<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrieTree</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 路径上经过该节点几次</span></span>
<span class="line">  <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 以该节点结尾几次</span></span>
<span class="line">  <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 经典写法，可以认为是26个字母26个方向、路径，子节点的指针，初始为空</span></span>
<span class="line">  <span class="token comment">// HashMap&lt;Character,Node&gt; nexts = new HashMap&lt;Character,Node&gt;(); //</span></span>
<span class="line">  <span class="token comment">// 如果字符不止26个可以用hashMap、HashSet</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根节点</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 插入一个字符串记录，即使是空串</span></span>
<span class="line"> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Node</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">  current<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> direction <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 如果路径不存在则新建</span></span>
<span class="line">    current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 经过此节点的串的个数++</span></span>
<span class="line">   current <span class="token operator">=</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 跳到下一个</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  current<span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 结尾</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 删除字符串</span></span>
<span class="line"> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token class-name">Node</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">   current<span class="token punctuation">.</span>pass<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> direction <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">.</span>pass<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">.</span>pass <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 直接丢弃后续的节点引用</span></span>
<span class="line">     <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    current <span class="token operator">=</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 跳到下一个</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   current<span class="token punctuation">.</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// 字符串结束</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 查询一个字符串插入了几次，包括空串</span></span>
<span class="line"> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Node</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> direction <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 查到一半路没了</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   current <span class="token operator">=</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> current<span class="token punctuation">.</span>end<span class="token punctuation">;</span><span class="token comment">// 以此节点为截止的字符串个数。</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 查询以【perfix】开头的字符串的个数</span></span>
<span class="line"> <span class="token keyword">int</span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Node</span> current <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">int</span> direction <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 查到一半路没了</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   current <span class="token operator">=</span> current<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> current<span class="token punctuation">.</span>pass<span class="token punctuation">;</span><span class="token comment">// 经过此节点的串的个数</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><p><img src="`+g+'" alt=""></p><h3 id="解题套路" tabindex="-1"><a class="header-anchor" href="#解题套路"><span>解题套路</span></a></h3><p><img src="'+h+'" alt=""></p><p><img src="'+y+'" alt=""></p><h3 id="题目-1-1" tabindex="-1"><a class="header-anchor" href="#题目-1-1"><span>题目 1</span></a></h3><p><img src="'+f+'" alt=""></p><blockquote><p><strong>思路</strong></p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 按会议开始时间排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 按会议时间长短排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 按会议结束时间排序</label><ul><li>【因为实际上会议结束时间早的，开始时间也早，会议持续时间也短。】</li></ul></li></ul></blockquote><p><img src="'+w+'" alt=""> <img src="'+_+'" alt=""></p><h3 id="题目-2-2" tabindex="-1"><a class="header-anchor" href="#题目-2-2"><span>题目 2</span></a></h3><p><img src="'+A+'" alt=""> <img src="'+x+'" alt=""></p><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3"><span>题目 3</span></a></h3><p><img src="'+N+'" alt=""></p><p><strong>思路</strong></p><ul><li>先将所有项目根据成本放入小根堆，</li><li>在小根堆中弹出所有当前能够投资的项目，根据利润放入另一大根堆。</li><li>大根堆堆顶，就是当前能够投资且利润最高的项目。</li><li>说白了，就是打怪升级的思路，先找出能打得过的怪物</li><li>再从能打的过的怪物中找出经验值（回报）最高的怪物</li></ul><p><img src="'+E+'" alt=""></p><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4"><span>题目 4</span></a></h3><p><img src="'+B+'" alt=""></p><blockquote><p><strong>思路</strong></p><ul><li>用暴力递归，按行落子，每次落一个子，落子前检查落子是否合法，如是否共列，共斜线</li></ul></blockquote><p><img src="'+j+'" alt=""></p><p><img src="'+S+'" alt=""></p><p><img src="'+C+'" alt=""></p><p><img src="'+V+'" alt=""></p><p><strong>使用位运算优化版本</strong></p><p><img src="'+M+'" alt=""></p><p><img src="'+T+'" alt=""></p><h2 id="暴力递归【动态规划的基础】" tabindex="-1"><a class="header-anchor" href="#暴力递归【动态规划的基础】"><span>暴力递归【动态规划的基础】</span></a></h2><p><img src="'+D+'" alt=""></p><h3 id="汉诺塔问题" tabindex="-1"><a class="header-anchor" href="#汉诺塔问题"><span>汉诺塔问题</span></a></h3><p><img src="'+I+'" alt=""></p><p>要把一堆圆盘从 from 移动到 to,首先要把最上面的 n-1 个圆盘移动到 other,然后才能把最底下的圆盘移动到 to,然后就可以把 other 上的圆盘移到 to 上。 在这个过程中，把 n-1 个圆盘移动到 other 也是相同的操作，但是对于 n-1 个圆盘来说，他的 from、to、other 便不一定是原来的了，而是：from&#39; = 原 from;to&#39; = 原 other;other = 原 to,</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hannuota</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">move </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">hannuota</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> other<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先把之上的圆盘全部移到other</span></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">move </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再把最底下的最大的圆盘移到目标位置to上</span></span>\n<span class="line">  <span class="token function">hannuota</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再把暂时放在other上的圆盘放到to上</span></span>\n<span class="line"> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打印输出字符串所有子串" tabindex="-1"><a class="header-anchor" href="#打印输出字符串所有子串"><span>打印输出字符串所有子串</span></a></h3><p><strong>思路</strong></p><ul><li>遍历字符串的所有字符</li><li>对于任何一个字符，都给出包含和不包含的两条路径</li><li>最终会形成一个完全二叉树</li></ul><p><img src="'+F+'" alt=""></p><p>更省空间的算法</p><p><img src="'+L+'" alt=""></p><h3 id="打印字符串的全排列" tabindex="-1"><a class="header-anchor" href="#打印字符串的全排列"><span>打印字符串的全排列</span></a></h3><p><img src="'+q+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span>int pos<span class="token punctuation">,</span>Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">let</span> doneSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span>pos<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>doneSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   doneSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 防止重复</span></span>
<span class="line">   <span class="token function">exchange</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">process</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">exchange</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纸牌游戏" tabindex="-1"><a class="header-anchor" href="#纸牌游戏"><span>纸牌游戏</span></a></h3><p><img src="`+H+'" alt=""></p><p><img src="'+P+'" alt=""></p><h3 id="逆序栈" tabindex="-1"><a class="header-anchor" href="#逆序栈"><span>逆序栈</span></a></h3><p><img src="'+G+'" alt=""></p><p><img src="'+z+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">reverseStack</span><span class="token punctuation">(</span><span class="token parameter">stack<span class="token punctuation">,</span> targetPos<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="字符串转换问题" tabindex="-1"><a class="header-anchor" href="#字符串转换问题"><span>字符串转换问题</span></a></h3><p><img src="`+K+'" alt=""></p><p><img src="'+O+'" alt=""></p><h3 id="背包问题" tabindex="-1"><a class="header-anchor" href="#背包问题"><span>背包问题</span></a></h3><p><img src="'+Q+'" alt=""></p><p><img src="'+Z+'" alt=""></p>',123)]))}const $=s(R,[["render",U],["__file","左程云算法课【初级班】学习笔记.html.vue"]]),W=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"左程云算法课【初级班】学习笔记","lang":"zh-CN","frontmatter":{"date":"2023-01-24T00:00:00.000Z","title":"左程云算法课【初级班】学习笔记","cover":"./cover/default_cover.jpg","tag":["JAVA","算法","学习笔记"],"category":"算法","star":true,"description":"左程云算法课【初级班】学习笔记 目录 左程云算法课【初级班】学习笔记 目录 [0]算法好坏的度量 [1]选择排序 [2]冒泡排序 [3]异或 概念 性质 作用 案例 存在问题 例题 [4]插入排序 [5]二分查找 查找某个数 查找>=num 的第一个数 局部最小值 [6]对数器 [7]递归 递归概念 [9]归并排序 小和问题 逆序对问题 [10]快速排...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"左程云算法课【初级班】学习笔记"}],["meta",{"property":"og:description","content":"左程云算法课【初级班】学习笔记 目录 左程云算法课【初级班】学习笔记 目录 [0]算法好坏的度量 [1]选择排序 [2]冒泡排序 [3]异或 概念 性质 作用 案例 存在问题 例题 [4]插入排序 [5]二分查找 查找某个数 查找>=num 的第一个数 局部最小值 [6]对数器 [7]递归 递归概念 [9]归并排序 小和问题 逆序对问题 [10]快速排..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T22:25:18.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T22:25:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"左程云算法课【初级班】学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T22:25:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"[0]算法好坏的度量","slug":"_0-算法好坏的度量","link":"#_0-算法好坏的度量","children":[]},{"level":2,"title":"[1]选择排序","slug":"_1-选择排序","link":"#_1-选择排序","children":[]},{"level":2,"title":"[2]冒泡排序","slug":"_2-冒泡排序","link":"#_2-冒泡排序","children":[]},{"level":2,"title":"[3]异或","slug":"_3-异或","link":"#_3-异或","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"性质","slug":"性质","link":"#性质","children":[]},{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"存在问题","slug":"存在问题","link":"#存在问题","children":[]},{"level":3,"title":"例题","slug":"例题","link":"#例题","children":[]}]},{"level":2,"title":"[4]插入排序","slug":"_4-插入排序","link":"#_4-插入排序","children":[]},{"level":2,"title":"[5]二分查找","slug":"_5-二分查找","link":"#_5-二分查找","children":[{"level":3,"title":"查找某个数","slug":"查找某个数","link":"#查找某个数","children":[]},{"level":3,"title":"查找>=num 的第一个数","slug":"查找-num-的第一个数","link":"#查找-num-的第一个数","children":[]},{"level":3,"title":"局部最小值","slug":"局部最小值","link":"#局部最小值","children":[]}]},{"level":2,"title":"[6]对数器","slug":"_6-对数器","link":"#_6-对数器","children":[]},{"level":2,"title":"[7]递归","slug":"_7-递归","link":"#_7-递归","children":[{"level":3,"title":"递归概念","slug":"递归概念","link":"#递归概念","children":[]},{"level":3,"title":"[9]归并排序","slug":"_9-归并排序","link":"#_9-归并排序","children":[]},{"level":3,"title":"[10]快速排序","slug":"_10-快速排序","link":"#_10-快速排序","children":[]}]},{"level":2,"title":"[11]堆","slug":"_11-堆","link":"#_11-堆","children":[{"level":3,"title":"[11.1]堆的数据结构","slug":"_11-1-堆的数据结构","link":"#_11-1-堆的数据结构","children":[]},{"level":3,"title":"[11.2]堆排序","slug":"_11-2-堆排序","link":"#_11-2-堆排序","children":[]},{"level":3,"title":"java 内置堆：优先级队列","slug":"java-内置堆-优先级队列","link":"#java-内置堆-优先级队列","children":[]},{"level":3,"title":"系统内置了现成的数据结构为什么还要自己手写实现？","slug":"系统内置了现成的数据结构为什么还要自己手写实现","link":"#系统内置了现成的数据结构为什么还要自己手写实现","children":[]},{"level":3,"title":"例题","slug":"例题-1","link":"#例题-1","children":[]}]},{"level":2,"title":"基于比较的排序总结","slug":"基于比较的排序总结","link":"#基于比较的排序总结","children":[]},{"level":2,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":2,"title":"基数排序","slug":"基数排序","link":"#基数排序","children":[]},{"level":2,"title":"排序算法稳定性","slug":"排序算法稳定性","link":"#排序算法稳定性","children":[]},{"level":2,"title":"排序总结","slug":"排序总结","link":"#排序总结","children":[]},{"level":2,"title":"hash 表和有序表概述","slug":"hash-表和有序表概述","link":"#hash-表和有序表概述","children":[{"level":3,"title":"hash 表","slug":"hash-表","link":"#hash-表","children":[]},{"level":3,"title":"有序表","slug":"有序表","link":"#有序表","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":3,"title":"面试时链表解题方法论","slug":"面试时链表解题方法论","link":"#面试时链表解题方法论","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"什么是二叉树递归遍历","slug":"什么是二叉树递归遍历","link":"#什么是二叉树递归遍历","children":[]},{"level":3,"title":"二叉树的非递归遍历","slug":"二叉树的非递归遍历","link":"#二叉树的非递归遍历","children":[]},{"level":3,"title":"题目 1","slug":"题目-1","link":"#题目-1","children":[]},{"level":3,"title":"题目 2","slug":"题目-2","link":"#题目-2","children":[]},{"level":3,"title":"二叉树的递归套路【重要】【动态规划】","slug":"二叉树的递归套路【重要】【动态规划】","link":"#二叉树的递归套路【重要】【动态规划】","children":[]},{"level":3,"title":"题目 2","slug":"题目-2-1","link":"#题目-2-1","children":[]},{"level":3,"title":"找最低公共祖先","slug":"找最低公共祖先","link":"#找最低公共祖先","children":[]},{"level":3,"title":"如何找二叉树中某节点的后继节点","slug":"如何找二叉树中某节点的后继节点","link":"#如何找二叉树中某节点的后继节点","children":[]}]},{"level":2,"title":"图","slug":"图","link":"#图","children":[{"level":3,"title":"图的模板代码","slug":"图的模板代码","link":"#图的模板代码","children":[]},{"level":3,"title":"从矩阵图结构转换到模板图结构","slug":"从矩阵图结构转换到模板图结构","link":"#从矩阵图结构转换到模板图结构","children":[]},{"level":3,"title":"图的宽度优先遍历和宽度优先遍历","slug":"图的宽度优先遍历和宽度优先遍历","link":"#图的宽度优先遍历和宽度优先遍历","children":[]},{"level":3,"title":"拓扑排序","slug":"拓扑排序","link":"#拓扑排序","children":[]},{"level":3,"title":"无向图拓扑排序","slug":"无向图拓扑排序","link":"#无向图拓扑排序","children":[]},{"level":3,"title":"迪杰斯特拉算法","slug":"迪杰斯特拉算法","link":"#迪杰斯特拉算法","children":[]}]},{"level":2,"title":"前缀树","slug":"前缀树","link":"#前缀树","children":[]},{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[{"level":3,"title":"解题套路","slug":"解题套路","link":"#解题套路","children":[]},{"level":3,"title":"题目 1","slug":"题目-1-1","link":"#题目-1-1","children":[]},{"level":3,"title":"题目 2","slug":"题目-2-2","link":"#题目-2-2","children":[]},{"level":3,"title":"题目 3","slug":"题目-3","link":"#题目-3","children":[]},{"level":3,"title":"题目 4","slug":"题目-4","link":"#题目-4","children":[]}]},{"level":2,"title":"暴力递归【动态规划的基础】","slug":"暴力递归【动态规划的基础】","link":"#暴力递归【动态规划的基础】","children":[{"level":3,"title":"汉诺塔问题","slug":"汉诺塔问题","link":"#汉诺塔问题","children":[]},{"level":3,"title":"打印输出字符串所有子串","slug":"打印输出字符串所有子串","link":"#打印输出字符串所有子串","children":[]},{"level":3,"title":"打印字符串的全排列","slug":"打印字符串的全排列","link":"#打印字符串的全排列","children":[]},{"level":3,"title":"纸牌游戏","slug":"纸牌游戏","link":"#纸牌游戏","children":[]},{"level":3,"title":"逆序栈","slug":"逆序栈","link":"#逆序栈","children":[]},{"level":3,"title":"字符串转换问题","slug":"字符串转换问题","link":"#字符串转换问题","children":[]},{"level":3,"title":"背包问题","slug":"背包问题","link":"#背包问题","children":[]}]}],"git":{"createdTime":1700226391000,"updatedTime":1721773518000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":3}]},"readingTime":{"minutes":74.44,"words":22332},"filePathRelative":"算法/左程云算法课【初级班】学习笔记/左程云算法课【初级班】学习笔记.md","localizedDate":"2023年1月24日","excerpt":"","autoDesc":true}');export{$ as comp,W as data};
