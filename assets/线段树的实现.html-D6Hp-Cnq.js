import{_ as n,c as l,o as h,b as a,a as s,e as i}from"./app-DDZPXrq3.js";const t={},p=a(`<h1 id="线段树的实现" tabindex="-1"><a class="header-anchor" href="#线段树的实现"><span>线段树的实现</span></a></h1><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h2><p><strong>一个线段树的案例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// -------------------------------[1,11]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ---------------[1,5]-----------------------[6,11]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ----------[1,3]-----[4,5]------------[6,8]--------[9,11]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ------[1,2]--[3]---[4]--[5]-------[6,7]--[8]---[9,10]--[11]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// -----[1]-[2]---------------------[6]-[7]------[9]-[10]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="层数" tabindex="-1"><a class="header-anchor" href="#层数"><span>层数</span></a></h2><p><strong>层数</strong></p><ul><li>划分后的元素个数是之前元素个数的一半，</li><li>划分多少次就是 log(元素个数)，</li><li>另外根节点也算一层</li><li>层数就是 1 + ceil( log_2(end-start+1) )</li></ul>`,7),k=s("blockquote",{A:""},[s("p",null,[s("strong",null,"注大意")]),s("p",{x:""},"java 中，Math.log() 计算的是 log_e"),s("p",{x:""},"要计算 log_2"),s("p",null,"需要使用换底公式：log_A{B} = log_n{B}/log_n")],-1),e=a(`<p><strong>示例 1</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ---------------[1,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// --------[1,2]--------[3,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ------[1]---[2]-----[3]---[4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 层数为1 + ceil(log_2{4}) == 1+2 = 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ---------------[1,5]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// --------[1,3]--------[4,5]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// ----[1,2]---[3]-----[4]---[5]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// -----[1]-[2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 层数为1 + ceil(log_2{5}) == 1 + 3 = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容量" tabindex="-1"><a class="header-anchor" href="#容量"><span>容量</span></a></h2>`,5),r=s("ul",null,[s("li",{"log(元素个数)":""},"可以直接按满二叉树分配容量，由于层数是 k = 1+ ceil"),s("li",null,[i("满二叉树的元素个数为各层元素个数相加 "),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mn",null,"1")]),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"= 1 + 2^1 + 2^2 + ......+ 2^{k-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"......"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8491em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mn",null,"0")]),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mn",null,"1")]),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"= 2^0 + 2^1 + 2^2 + ......+ 2^{k-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"......"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8491em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])])])]),s("li",null,[i("即等比数列求和 "),s("ul",null,[s("li",null,[i("公比: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"q"),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"q=2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])])]),s("li",null,[i("首项："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mn",null,"1")]),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"a_1=2^{1-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[i("末项："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"n")]),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"a_n=2^{n-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,"项数：n = k"),s("li",null,[i("求和："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"S"),s("mi",null,"n")]),s("mo",null,"="),s("msub",null,[s("mi",null,"a"),s("mn",null,"1")]),s("mfrac",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("msup",null,[s("mi",null,"q"),s("mi",null,"n")])]),s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"q")])])]),s("annotation",{encoding:"application/x-tex"},"S_n = a_1\\frac{1-q^n}{1-q}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4442em","vertical-align":"-0.4811em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9631em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"q")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.4461em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"q"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7385em"}},[s("span",{style:{top:"-2.931em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4811em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])])])],-1),d=a(`<p><strong>容量计算</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 层数就是 1 + ceil( log_2(end-start+1) )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) length));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 满二叉树元素个数,个层元素数的和，等比数列求和：S_n = a1*((1-q^n)/(1-q)) 公比：q = 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, layer)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arrLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> length;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(capacity);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="完整实现" tabindex="-1"><a class="header-anchor" href="#完整实现"><span>完整实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> 线段树的实现</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> st</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 长度为 5 的线段树的结构 index:[start,end]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // ----------------------0:[0,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -------------1:[0,2]-----------2:[3,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -------3:[0,1]----4:[2,2]---5:[3,3]-----6:[4,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // ---7:[0,0]-7:[1,1]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  st</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 非递归方式在0的位置统计元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 插入操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,4],1]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,2],1]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,1],1]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,0],1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  st</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 递归方式在1的位置统计元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,4],2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,2],2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,1],2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[1,1],1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  st</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,4],2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,2],2]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // debug:[[left,right],value]:[[0,1],2]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> SegmentTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 层数就是 1 + ceil( log_2(end-start+1) )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) length));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 满二叉树元素个数,个层元素数的和，等比数列求和：S_n = a1*((1-q^n)/(1-q)) 公比：q = 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, layer)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1d</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arrLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> length;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(capacity);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 非递归方式的插入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arrLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arrLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> curIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   data[curIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 自增</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;debug:[[left,right],value]:[[%d,%d],%d]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D7BA7D;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, left, right, data[curIdx]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 到达叶节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 计算下一轮的位置信息。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 第i个节点的左子树的是2i+1 右子树是2i+2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // ----------------------0:[0,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // -------------1:[0,2]-----------2:[3,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // -------3:[0,1]----4:[2,2]---5:[3,3]-----6:[4,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // ---7:[0,0]-7:[1,1]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 计算中间位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 注意第一个是小于等于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 进入左子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 进入右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 递归方式版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(targetIdx, num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, arrLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 递归方式版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curRight) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   data[curIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 自增</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;debug:[[left,right],value]:[[%d,%d],%d]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D7BA7D;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curLeft, curRight, data[curIdx]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 未到达叶节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curRight) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 计算下一轮的位置信息。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 第i个节点的左子树的是2i+1 右子树是2i+2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // ----------------------0:[0,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // -------------1:[0,2]-----------2:[3,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // -------3:[0,1]----4:[2,2]---5:[3,3]-----6:[4,4]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // ---7:[0,0]-7:[1,1]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 计算中间位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> curMid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curLeft) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 注意第一个是小于等于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curMid) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 进入左子树</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">     insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(targetIdx, num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curLeft, curMid);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curMid) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 进入右子树</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">     insert_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(targetIdx, num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curMid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curRight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 可以查找任意区间的统计结果,递归方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, arrLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, targetLeft, targetRight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> curRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 过滤非法的当前区间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    targetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetRight</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 过滤非法的目标区间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;debug:[[left,right],value]:[[%d,%d],%d]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D7BA7D;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curLeft, curRight, data[curIdx]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curRight) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 所查找的区间和当前所在区间完全匹配,直接返回其统计结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> data[curIdx];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (curRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curLeft) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 查找的区间在左子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     k </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curLeft, mid, targetLeft, targetRight);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左子树查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetLeft) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 查找的区间在右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     k </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curRight, targetLeft, targetRight);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 右子树查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 查找的区间横跨左右子树,则分别去查找</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     k </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curLeft, mid, targetLeft, mid);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左子树查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     k </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> query_r</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, curRight, mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, targetRight);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 右子树查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> k;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> log_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // &gt; 需要使用换底公式：log_A{B} = log_n{B}/log_n{A}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // &gt; 即log_2{B} = log_n{B}/log_n{2}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 这种查找方式不能查找横跨中间位置的区间,没什么用。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> targetRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetRight)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arrLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> curIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;debug:[[left,mid,right],value]:[[%d,%d,%d],%d]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D7BA7D;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, left, mid, right, data[curIdx]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> targetRight) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 到达目标位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 计算下一轮的信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 进入左子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (targetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> curIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 进入右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> data[curIdx];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E=[p,k,e,r,d];function g(c,y){return h(),l("div",null,E)}const D=n(t,[["render",g],["__file","线段树的实现.html.vue"]]),C=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/zip%E5%BD%92%E6%A1%A3/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"线段树的实现","lang":"zh-CN","frontmatter":{"date":"2023-03-08T20:58:00.000Z","title":"线段树的实现","cover":"./cover/default_cover.jpg","tag":["蓝桥杯","JAVA","算法","刷题笔记"],"category":"算法","description":"线段树的实现 结构 一个线段树的案例： 层数 层数 划分后的元素个数是之前元素个数的一半， 划分多少次就是 log(元素个数)， 另外根节点也算一层 层数就是 1 + ceil( log_2(end-start+1) ) 注大意 java 中，Math.log() 计算的是 log_e 要计算 log_2 需要使用换底公式：log_A{B} = log...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%AE%97%E6%B3%95/zip%E5%BD%92%E6%A1%A3/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"线段树的实现"}],["meta",{"property":"og:description","content":"线段树的实现 结构 一个线段树的案例： 层数 层数 划分后的元素个数是之前元素个数的一半， 划分多少次就是 log(元素个数)， 另外根节点也算一层 层数就是 1 + ceil( log_2(end-start+1) ) 注大意 java 中，Math.log() 计算的是 log_e 要计算 log_2 需要使用换底公式：log_A{B} = log..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T08:31:16.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:tag","content":"蓝桥杯"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"刷题笔记"}],["meta",{"property":"article:published_time","content":"2023-03-08T20:58:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T08:31:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线段树的实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-08T20:58:00.000Z\\",\\"dateModified\\":\\"2024-03-18T08:31:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":2,"title":"层数","slug":"层数","link":"#层数","children":[]},{"level":2,"title":"容量","slug":"容量","link":"#容量","children":[]},{"level":2,"title":"完整实现","slug":"完整实现","link":"#完整实现","children":[]}],"git":{"createdTime":1700226391000,"updatedTime":1710750676000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":1}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"算法/zip归档/线段树的实现/线段树的实现.md","localizedDate":"2023年3月8日","excerpt":"","autoDesc":true}');export{D as comp,C as data};
