import{_ as e,o,c as l,e as r}from"./app-86fda864.js";const t={},s=r(`<h2 id="同源策略和跨域" tabindex="-1"><a class="header-anchor" href="#同源策略和跨域" aria-hidden="true">#</a> 同源策略和跨域</h2><p>同源策略(Same-Origin Policy)最早由Netscape公司提出,是<strong>浏览器</strong>的一种安全策略</p><ul><li><strong>同源</strong>: 协议 域名 端口号 均一致</li><li><strong>跨域</strong>: 违背同源策略就是跨域,</li><li><strong>具体表现</strong>: 如果在<code>a.com</code>的页面中向<code>b.com</code>的服务器的发送<strong>请求报文</strong>,则其<strong>响应报文</strong>会被浏览器<strong>拦截</strong>.</li></ul><h2 id="cros跨域-源-资源共享" tabindex="-1"><a class="header-anchor" href="#cros跨域-源-资源共享" aria-hidden="true">#</a> CROS跨域(源)资源共享</h2><p><strong>CROS</strong>(Cross-Origin Resource Sharing)跨域(源)资源共享,解决跨域资源共享的解决方案.</p><p><strong>特点</strong>: 不需要在客户端做特殊操作,解决跨域的步骤完全在服务器中进行.</p><p><strong>工作原理</strong>: 通过设置一个<strong>响应头</strong>来告诉浏览器该请求允许跨域</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Access-Control-Allow-Origin: *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="完整访问控制请求头" tabindex="-1"><a class="header-anchor" href="#完整访问控制请求头" aria-hidden="true">#</a> 完整访问控制请求头</h2><ul><li><code>Access-Control-Allow-Origin: URL或*</code> 指定了允许访问该资源的外域</li><li><code>Access-Control-Expose-Headers: 自定义响应头名1, 自定义响应头名2</code> 使得客户端能够获取到自定义的响应头</li><li><code>Access-Control-Max-Age: &lt;delta-seconds&gt;</code> 指定了 preflight 请求的结果能够被缓存多久</li><li><code>Access-Control-Allow-Credentials: true</code> 指定跨域请求时候能够携带验证信息,如cookie</li><li><code>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</code> 设置请求允许的方法,默认仅支持 GET POST HEAD</li><li><code>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code> 设置允许的请求头的头名,默认仅支持9个请求头</li></ul><h2 id="cors请求分类" tabindex="-1"><a class="header-anchor" href="#cors请求分类" aria-hidden="true">#</a> CORS请求分类</h2><ul><li>简单请求 : <ul><li>请求方式必须为: <code>GET</code> <code>POST</code> <code>HEAD</code></li><li>请求头必须: <strong>不能包含自定义请求</strong> ,仅能包含默认支持9个请求头</li><li>简单请求仅会在客户端和服务端之间发送一次请求,</li></ul></li><li>预检请求 : <ul><li>请求方式: 除去<code>GET</code> <code>POST</code> <code>HEAD</code>之外的请求</li><li>请求头为: 请求头中<strong>包含自定义的头部</strong> 或包含 <code>application/json</code></li><li>预检请求会在客户端和服务端之间发送两次请求,第一次会发送OPTIONS类型的请求进行预检,之后才会发送真正的请求</li></ul></li></ul><p><strong>预检请求</strong><br> 在浏览器和服务器通信前,浏览器会先发送OPTIONS类型的请求进行预检,以获知服务器是否允许该实际请求,<br><strong>服务器响应OPTIONS类型的请求后浏览器才会发送真正的请求并携带真实的数据</strong></p>`,13),c=[s];function i(n,d){return o(),l("div",null,c)}const g=e(t,[["render",i],["__file","同源策略和跨域.html.vue"]]);export{g as default};
