var g=(e,t,a)=>new Promise((s,o)=>{var d=r=>{try{n(a.next(r))}catch(i){o(i)}},m=r=>{try{n(a.throw(r))}catch(i){o(i)}},n=r=>r.done?s(r.value):Promise.resolve(r.value).then(d,m);n((a=a.apply(e,t)).next())});import{_ as p,l as v,K as c,k as l,L as f}from"./mermaid.core-Tl0nE_bu.js";import{p as u}from"./gitGraph-YCYPL57B-C8BoFx_u.js";import"./app-Qo1VnoVi.js";import"./baseUniq-Wwe6nJt9.js";import"./basePickBy-BMvJiE2M.js";import"./clone-CJ60v02S.js";var x={parse:p(e=>g(void 0,null,function*(){const t=yield u("info",e);v.debug(t)}),"parse")},_={version:f},b=p(()=>_.version,"getVersion"),w={getVersion:b},y=p((e,t,a)=>{v.debug(`rendering info diagram
`+e);const s=c(t);l(s,100,400,!0),s.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${a}`)},"draw"),S={draw:y},k={parser:x,db:w,renderer:S};export{k as diagram};
