import{_ as a,o as s,c as n,d as l,e}from"./app-80e9a47d.js";const i={},c=e('<h1 id="js高级学习笔记" tabindex="-1"><a class="header-anchor" href="#js高级学习笔记" aria-hidden="true">#</a> js高级学习笔记</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#js%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">js高级学习笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F">基本语法格式</a></li><li><a href="#%E6%AD%A3%E5%88%99%E5%9C%A8search%E5%92%8Creplace%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8">正则在search()和replace()中的使用</a></li><li><a href="#regexp-%E5%AF%B9%E8%B1%A1">RegExp 对象</a></li></ul></li></ul></li></ul>',3),o=e(`<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><h3 id="基本语法格式" tabindex="-1"><a class="header-anchor" href="#基本语法格式" aria-hidden="true">#</a> 基本语法格式</h3><p><code>/正则表达式主体/修饰符(可选)</code></p><ul><li>修饰符: <ul><li>i 不区分大小写</li><li>g 全局匹配</li><li>m 多行匹配</li></ul></li><li>范围查找: <ul><li><code>[abc]</code> 查找方括号之间的任何字符。</li><li><code>[0-9]</code> 查找任何从 0 至 9 的数字。</li><li><code>(x|y)</code> 查找任何以 | 分隔的选项。</li></ul></li><li>特殊字符: <ul><li><code>\\d</code> 查找数字。</li><li><code>\\s</code> 查找空白字符。</li><li><code>\\b</code> 匹配单词边界。</li><li><code>\\uxxxx</code> 查找以十六进制数 xxxx 规定的 Unicode 字符。</li></ul></li><li>量词: <ul><li><code>n+</code> 匹配任何包含至少一个 n 的字符串。</li><li><code>n*</code> 匹配任何包含零个或多个 n 的字符串。</li><li><code>n?</code> 匹配任何包含零个或一个 n 的字符串。</li></ul></li></ul><h3 id="正则在search-和replace-中的使用" tabindex="-1"><a class="header-anchor" href="#正则在search-和replace-中的使用" aria-hidden="true">#</a> 正则在search()和replace()中的使用</h3><ul><li><code>str.search(字符串或正则表达式)</code> 返回查找到的第一个子字符串的下标</li><li><code>str.replace(字符串A或正则表达式A,字符串B)</code> 替换A为B</li></ul><h3 id="regexp-对象" tabindex="-1"><a class="header-anchor" href="#regexp-对象" aria-hidden="true">#</a> RegExp 对象</h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p><p><strong>创建对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>正则表达式主体<span class="token punctuation">,</span>修饰符<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rpatte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者更简单的方式:</span>
<span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token operator">/</span>正则表达式主体<span class="token operator">/</span>修饰符<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RegExp方法</strong></p><ul><li><code>reg.exec(string)</code> 检索字符串中的正则表达式的匹配。返回该匹配值，否则返回null。</li><li><code>reg.test()</code> 检测一个字符串是否匹配某个模式。返回 true 或 false。</li><li><code>reg.toString()</code> 返回正则表达式的字符串值</li></ul><p><strong>RegExp属性</strong></p><ul><li><code>reg.constructor</code> 返回一个函数，该函数是一个创建 RegExp 对象的原型。</li><li><code>reg.global</code> 判断是否设置了 &quot;g&quot; 修饰符</li><li><code>reg.ignoreCase</code> 判断是否设置了 &quot;i&quot; 修饰符</li><li><code>reg.multiline</code> 判断是否设置了 &quot;m&quot; 修饰符</li><li><code>reg.lastIndex</code> 用于规定下次匹配的起始位置</li><li><code>reg.source</code> 返回正则表达式的匹配模式</li></ul><p><strong>支持正则表达式的 String 对象的方法</strong></p><ul><li><code>str.search(字符串或正则)</code> 检索与正则表达式相匹配的值</li><li><code>str.match()</code> 找到一个或多个正则表达式的匹配</li><li><code>str.replace()</code> 替换与正则表达式匹配的子串</li><li><code>str.split()</code> 把字符串分割为字符串数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regOBJ <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">正则表达方式</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function r(t,d){return s(),n("div",null,[c,l(` ## ES6模块化规范
**早期社区版的模块化解决方案**
* AMD CMD 用于浏览器的模块化规范
* commonJS 用于服务端的模块化规范

**当前ES6模块化规范**
* 官方的模块化规范
* 前端和后端共同的模块化规范 `),o])}const u=a(i,[["render",r],["__file","js高级学习笔记.html.vue"]]);export{u as default};
