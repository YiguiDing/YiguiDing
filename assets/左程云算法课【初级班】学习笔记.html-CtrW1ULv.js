import{_ as n,c as l,o as h,b as a,a as s,e as i}from"./app-waFVzZpQ.js";const k="/assets/2023-01-23-21-06-33-DVjJjxwR.png",t="/assets/2023-01-24-18-42-34-jPi6tK8n.png",p="/assets/2023-01-24-22-19-14-B4DUQfsr.png",e="/assets/2023-01-24-23-03-45-rtLflvD0.png",E="/assets/2023-01-26-12-08-14-Ce7EanxE.png",r="/assets/2023-01-26-16-40-44-Dl9Gjf_o.png",d="/assets/2023-01-29-15-13-00-nxFUuUjY.png",g="/assets/2023-01-29-15-43-29-a9-JKSpD.png",y="/assets/2023-01-29-15-45-33-CYNqelNy.png",D="/assets/2023-01-29-16-03-38-rVPcU1cb.png",C="/assets/2023-01-29-21-35-11-Dit8mNkK.png",c="/assets/2023-01-29-21-53-58-A7_-T6XP.png",m="/assets/2023-01-29-22-05-54-Dabed-6K.png",u="/assets/2023-01-29-23-02-19-C8y_rrMX.png",A="/assets/2023-01-29-23-02-55-CjoK87cd.png",v="/assets/2023-01-29-22-56-14-CWHQHb4k.png",o="/assets/2023-01-29-23-03-42-D5vMVJ83.png",b="/assets/2023-01-29-23-04-25-B1j4_9DV.png",F="/assets/2023-01-29-23-07-58-BRuy6jDN.png",B="/assets/2023-01-30-00-16-05-0obNFQN-.png",f="/assets/2023-01-30-00-16-26-C8KTeQ5c.png",x="/assets/2023-01-30-00-16-47-BDa0G_cg.png",w="/assets/2023-01-30-01-20-07-BycIv6Sj.png",_="/assets/2023-01-30-01-49-12-Dqy_3pcX.png",N="/assets/2023-01-30-01-50-26-twhpgUiP.png",M="/assets/2023-01-30-01-52-19-Bahzpv6E.png",j="/assets/2023-01-30-02-06-34-BlcNQ8Oy.png",O="/assets/2023-01-31-00-32-26-DEwz0Bli.png",S="/assets/2023-01-31-02-07-35-B0jQ5v3s.png",L="/assets/2023-01-31-03-47-11-D53NwfFo.png",T="/assets/2023-01-31-04-12-52-BmiWWBcQ.png",z="/assets/2023-01-31-04-20-07-j0Gb_ruA.png",I="/assets/2023-01-31-04-36-23-D-pdd5O1.png",q="/assets/2023-01-31-04-51-40-CvDC4P5E.png",V="/assets/2023-01-31-04-50-58-CvA0tPJJ.png",H="/assets/2023-01-31-04-53-28-DREw-ijj.png",P="/assets/2023-02-04-21-20-44-DdW_nbYJ.png",R="/assets/2023-02-04-21-34-46-ElAvirAL.png",Q="/assets/2023-02-04-21-34-56-B18mrQs1.png",K="/assets/2023-02-04-21-35-07-Bqt547DW.png",U="/assets/2023-02-04-23-11-11-DzfK9ih1.png",G="/assets/2023-02-04-23-30-20-IZMay_wD.png",Z="/assets/2023-02-06-06-13-30-BTucyD_y.png",J="/assets/2023-02-09-06-45-13-wgYlNhoc.png",Y="/assets/2023-02-06-06-59-33-2GqKrTF3.png",W="/assets/2023-02-09-07-47-05-C3R-UOkY.png",X="/assets/2023-02-09-12-06-03-DFoPozhF.png",$="/assets/2023-02-09-12-05-51-BYmTAK-0.png",ss="/assets/2023-02-09-13-57-38-DRpiL_nw.png",is="/assets/2023-02-09-14-00-00-CAdH3YFv.png",as="/assets/2023-02-09-16-10-33-xy7_DIzB.png",ns="/assets/2023-02-09-20-22-18-D94BsZNc.png",ls="/assets/2023-02-09-20-27-16-CCiEAQwr.png",hs="/assets/2023-02-10-11-40-48-BePZZu9g.png",ks="/assets/2023-02-10-12-24-48-CpUl0wkA.png",ts="/assets/2023-02-10-17-44-42-COVFfzHO.png",ps="/assets/2023-02-11-06-06-00-nJ7iajEl.gif",es="/assets/2023-02-12-08-37-44-BRUeDNSS.png",Es="/assets/2023-02-12-10-01-50-CaGvaMy0.png",rs="/assets/2023-02-12-11-44-54-Bp0aH_NR.png",ds="/assets/2023-02-13-00-32-12-CnQfz2jf.png",gs="/assets/2023-02-13-00-27-26-DC5m234W.png",ys="/assets/2023-02-13-00-28-31-DiONLAfU.png",Ds="/assets/2023-02-13-00-28-49-bFRHM61c.png",Cs="/assets/2023-02-13-00-29-55-DrHf4sTy.png",cs="/assets/2023-02-13-00-30-47-DUkerlRb.png",ms="/assets/2023-02-13-00-33-31-Y9XQjP_L.png",us="/assets/2023-02-13-00-34-33-CKhe4K8-.png",As="/assets/2023-02-13-10-52-02-nELMo1T5.png",vs="/assets/2023-02-13-12-05-16-DLxshjGO.png",os="/assets/2023-02-13-11-18-48-DB6EOw22.png",bs="/assets/2023-02-13-11-19-36-B_pXpeCQ.png",Fs="/assets/2023-02-13-11-20-08-BTjhG7Yk.png",Bs="/assets/2023-02-13-11-37-55-C2JrqrL4.png",fs="/assets/2023-02-13-11-51-47-DZVNiiQm.png",xs="/assets/2023-02-13-12-26-07-BBh2VZFi.png",ws="/assets/2023-02-13-12-57-35-BKh-zxi1.png",_s="/assets/2023-02-13-14-27-48-CAKDLTfI.png",Ns="/assets/2023-02-13-14-55-59-CvxxfUF-.png",Ms="/assets/2023-02-13-14-56-37-ClElnADv.png",js="/assets/2023-02-14-11-18-43-DkwPJWb5.png",Os="/assets/2023-02-14-11-18-15-B5DvwzbT.png",Ss="/assets/2023-02-14-11-31-48-BOKya6Ip.png",Ls="/assets/2023-02-14-12-36-34-CasjNP0G.png",Ts="/assets/2023-02-14-14-20-20-CRjY0TPC.png",zs="/assets/2023-02-14-14-19-29-CyZiD60X.png",Is="/assets/2023-02-14-16-10-58-8CbOApVt.png",qs="/assets/2023-02-14-16-31-00-wqhEPLSW.png",Vs={},Hs=a('<h1 id="左程云算法课【初级班】学习笔记" tabindex="-1"><a class="header-anchor" href="#左程云算法课【初级班】学习笔记"><span>左程云算法课【初级班】学习笔记</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E5%88%9D%E7%BA%A7%E7%8F%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">左程云算法课【初级班】学习笔记</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#0%E7%AE%97%E6%B3%95%E5%A5%BD%E5%9D%8F%E7%9A%84%E5%BA%A6%E9%87%8F">[0]算法好坏的度量</a></li><li><a href="#1%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">[1]选择排序</a></li><li><a href="#2%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">[2]冒泡排序</a></li><li><a href="#3%E5%BC%82%E6%88%96">[3]异或</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#%E6%80%A7%E8%B4%A8">性质</a></li><li><a href="#%E4%BD%9C%E7%94%A8">作用</a></li><li><a href="#%E6%A1%88%E4%BE%8B">案例</a></li><li><a href="#%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98">存在问题</a></li><li><a href="#%E4%BE%8B%E9%A2%98">例题</a></li></ul></li><li><a href="#4%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">[4]插入排序</a></li><li><a href="#5%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">[5]二分查找</a><ul><li><a href="#%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%AA%E6%95%B0">查找某个数</a></li><li><a href="#%E6%9F%A5%E6%89%BEnum-%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%95%B0">查找&gt;=num 的第一个数</a></li><li><a href="#%E5%B1%80%E9%83%A8%E6%9C%80%E5%B0%8F%E5%80%BC">局部最小值</a></li></ul></li><li><a href="#6%E5%AF%B9%E6%95%B0%E5%99%A8">[6]对数器</a></li><li><a href="#7%E9%80%92%E5%BD%92">[7]递归</a><ul><li><a href="#%E9%80%92%E5%BD%92%E6%A6%82%E5%BF%B5">递归概念</a></li><li><a href="#9%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">[9]归并排序</a><ul><li><a href="#%E5%B0%8F%E5%92%8C%E9%97%AE%E9%A2%98">小和问题</a></li><li><a href="#%E9%80%86%E5%BA%8F%E5%AF%B9%E9%97%AE%E9%A2%98">逆序对问题</a></li></ul></li><li><a href="#10%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">[10]快速排序</a><ul><li><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E9%97%AE%E9%A2%98">前置知识:荷兰国旗问题</a><ul><li><a href="#%E4%B8%A4%E8%89%B2%E5%9B%BD%E6%97%97">两色国旗</a></li><li><a href="#%E4%B8%89%E8%89%B2%E5%9B%BD%E6%97%97">三色国旗</a></li></ul></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-v10">快速排序 v1.0</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-v20">快速排序 v2.0</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-v30">快速排序 v3.0</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-c-%E8%AF%AD%E8%A8%80%E7%89%88">快速排序 c 语言版</a></li></ul></li></ul></li><li><a href="#11%E5%A0%86">[11]堆</a><ul><li><a href="#111%E5%A0%86%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">[11.1]堆的数据结构</a></li><li><a href="#112%E5%A0%86%E6%8E%92%E5%BA%8F">[11.2]堆排序</a></li><li><a href="#java-%E5%86%85%E7%BD%AE%E5%A0%86%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97">java 内置堆：优先级队列</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E5%86%85%E7%BD%AE%E4%BA%86%E7%8E%B0%E6%88%90%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E8%87%AA%E5%B7%B1%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0">系统内置了现成的数据结构为什么还要自己手写实现？</a></li><li><a href="#%E4%BE%8B%E9%A2%98-1">例题</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93">基于比较的排序总结</a></li><li><a href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F">计数排序</a></li><li><a href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F">基数排序</a></li><li><a href="#%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7">排序算法稳定性</a></li><li><a href="#%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93">排序总结</a></li><li><a href="#hash-%E8%A1%A8%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8%E6%A6%82%E8%BF%B0">hash 表和有序表概述</a><ul><li><a href="#hash-%E8%A1%A8">hash 表</a></li><li><a href="#%E6%9C%89%E5%BA%8F%E8%A1%A8">有序表</a></li><li><a href="#%E9%93%BE%E8%A1%A8">链表</a></li><li><a href="#%E9%9D%A2%E8%AF%95%E6%97%B6%E9%93%BE%E8%A1%A8%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95%E8%AE%BA">面试时链表解题方法论</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8C%E5%8F%89%E6%A0%91%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86">什么是二叉树递归遍历</a></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86">二叉树的非递归遍历</a><ul><li><a href="#%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86">先序遍历</a></li><li><a href="#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">后序遍历</a></li><li><a href="#%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86">中序遍历</a></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86">二叉树的深度优先遍历</a></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86">二叉树的宽度优先遍历</a></li></ul></li><li><a href="#%E9%A2%98%E7%9B%AE-1">题目 1</a><ul><li><a href="#%E6%B1%82%E4%B8%80%E9%A2%97%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%BD%E5%BA%A6%E4%BD%BF%E7%94%A8-hash-%E8%A1%A8%E7%9A%84%E6%96%B9%E6%B3%95">求一颗二叉树的宽度【使用 hash 表的方法】</a></li><li><a href="#%E6%B1%82%E4%B8%80%E9%A2%97%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%BD%BF%E7%94%A8-hash-%E8%A1%A8%E8%8A%82%E7%9C%81%E7%A9%BA%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95">求一颗二叉树的宽度【不使用 hash 表，节省空间的方法】</a></li></ul></li><li><a href="#%E9%A2%98%E7%9B%AE-2">题目 2</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%A0%91%E6%98%AF%E5%90%A6%E6%98%AF%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91">如何判断一个树是否是搜索二叉树</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E9%A2%97%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">如何判断一颗二叉树是完全二叉树</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E5%A5%97%E8%B7%AF%E9%87%8D%E8%A6%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">二叉树的递归套路【重要】【动态规划】</a><ul><li><a href="#%E5%88%A4%E6%96%AD%E4%B8%80%E9%A2%97%E6%A0%91%E6%98%AF%E5%90%A6%E6%98%AF-avl-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91">判断一颗树是否是 AVL 平衡二叉树</a></li><li><a href="#%E5%88%A4%E6%96%AD%E4%B8%80%E9%A2%97%E6%A0%91%E6%98%AF%E5%90%A6%E6%98%AF%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91">判断一颗树是否是满二叉树</a></li><li><a href="#%E5%88%A4%E6%96%AD%E4%B8%80%E9%A2%97%E6%A0%91%E6%98%AF%E5%90%A6%E6%98%AF%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91">判断一颗树是否是搜索二叉树</a></li></ul></li><li><a href="#%E9%A2%98%E7%9B%AE-2-1">题目 2</a></li><li><a href="#%E6%89%BE%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88">找最低公共祖先</a></li><li><a href="#%E5%A6%82%E4%BD%95%E6%89%BE%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%9F%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%90%8E%E7%BB%A7%E8%8A%82%E7%82%B9">如何找二叉树中某节点的后继节点</a><ul><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">二叉树的序列化和反序列化</a></li><li><a href="#%E7%BA%B8%E6%9D%A1%E6%8A%98%E7%97%95%E9%97%AE%E9%A2%98%E5%BE%AE%E8%BD%AF%E9%9D%A2%E8%AF%95%E9%A2%98">纸条折痕问题，微软面试题</a></li></ul></li></ul></li><li><a href="#%E5%9B%BE">图</a><ul><li><a href="#%E5%9B%BE%E7%9A%84%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81">图的模板代码</a></li><li><a href="#%E4%BB%8E%E7%9F%A9%E9%98%B5%E5%9B%BE%E7%BB%93%E6%9E%84%E8%BD%AC%E6%8D%A2%E5%88%B0%E6%A8%A1%E6%9D%BF%E5%9B%BE%E7%BB%93%E6%9E%84">从矩阵图结构转换到模板图结构</a></li><li><a href="#%E5%9B%BE%E7%9A%84%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%92%8C%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86">图的宽度优先遍历和宽度优先遍历</a></li><li><a href="#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">拓扑排序</a></li><li><a href="#%E6%97%A0%E5%90%91%E5%9B%BE%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">无向图拓扑排序</a><ul><li><a href="#kruskal-%E7%AE%97%E6%B3%95">kruskal 算法</a></li><li><a href="#%E7%AE%80%E6%98%93%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E5%AE%9E%E7%8E%B0">简易并查集的实现</a></li><li><a href="#k-%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">K 算法的具体实现</a></li><li><a href="#prim-%E7%AE%97%E6%B3%95">prim 算法</a></li></ul></li><li><a href="#%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95">迪杰斯特拉算法</a></li></ul></li><li><a href="#%E5%89%8D%E7%BC%80%E6%A0%91">前缀树</a></li><li><a href="#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">贪心算法</a><ul><li><a href="#%E8%A7%A3%E9%A2%98%E5%A5%97%E8%B7%AF">解题套路</a></li><li><a href="#%E9%A2%98%E7%9B%AE-1-1">题目 1</a></li><li><a href="#%E9%A2%98%E7%9B%AE-2-2">题目 2</a></li><li><a href="#%E9%A2%98%E7%9B%AE-3">题目 3</a></li><li><a href="#%E9%A2%98%E7%9B%AE-4">题目 4</a></li></ul></li><li><a href="#%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E5%9F%BA%E7%A1%80">暴力递归【动态规划的基础】</a><ul><li><a href="#%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98">汉诺塔问题</a></li><li><a href="#%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%80%E6%9C%89%E5%AD%90%E4%B8%B2">打印输出字符串所有子串</a></li><li><a href="#%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97">打印字符串的全排列</a></li><li><a href="#%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F">纸牌游戏</a></li><li><a href="#%E9%80%86%E5%BA%8F%E6%A0%88">逆序栈</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98">字符串转换问题</a></li><li><a href="#%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98">背包问题</a></li></ul></li></ul></li></ul><h2 id="_0-算法好坏的度量" tabindex="-1"><a class="header-anchor" href="#_0-算法好坏的度量"><span>[0]算法好坏的度量</span></a></h2><blockquote><p><strong>主要内容略</strong></p></blockquote><p><strong>补充知识</strong></p>',6),Ps=s("ul",null,[s("li",null,[i("时间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(n)=O(f(n))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"))")])])])]),s("li",null,[i("空间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"S(n)=O(f(n))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"))")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O")]),s("annotation",{encoding:"application/x-tex"},"O")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O")])])]),i(" 为算法"),s("strong",null,"最差"),i("情况的下的时间复杂度")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Ω")]),s("annotation",{encoding:"application/x-tex"},"Ω")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Ω")])])]),i(" 为算法"),s("strong",null,"最优"),i("情况的下的时间复杂度")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ")]),s("annotation",{encoding:"application/x-tex"},"Θ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Θ")])])]),i(" 为算法"),s("strong",null,"平均"),i("情况的下的时间复杂度")])],-1),Rs=s("h2",{id:"_1-选择排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-选择排序"},[s("span",null,"[1]选择排序")])],-1),Qs=s("ul",null,[s("li",null,[i("时间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("空间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1),Ks=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._1_选择排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  SelectSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 选择排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> SelectSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> minIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    minIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[minIndex] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> minIndex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i, minIndex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 交换元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_2-冒泡排序"><span>[2]冒泡排序</span></a></h2>`,2),Us=s("ul",null,[s("li",null,[i("时间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("空间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1),Gs=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._2_冒泡排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 循环n次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> top</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; top </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; top</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i  </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> top; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i])</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 比较两个数，如果第一数比第二个数大，交换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">     exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 交换元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-异或" tabindex="-1"><a class="header-anchor" href="#_3-异或"><span>[3]异或</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p><strong>比特位的异或：</strong> 相同为 0 相异为 1</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span>0^0=0</span></span>
<span class="line"><span>0^1=1</span></span>
<span class="line"><span>1^0=1</span></span>
<span class="line"><span>1^1=0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数值间的异或：</strong> 可以理解为两数无进位的按位相加</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span> a:10110</span></span>
<span class="line"><span> b:01010</span></span>
<span class="line"><span>---------</span></span>
<span class="line"><span> ^:11100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性质" tabindex="-1"><a class="header-anchor" href="#性质"><span>性质</span></a></h3><p><strong>性质 1</strong></p><ul><li>任何数和 0 异或都得这个数，一个数和自身异或得 0</li><li>N^0=N</li><li>N^N=0</li></ul><p><strong>性质 2</strong></p><ul><li>异或满足交换律和结合律</li><li>A^B=B^A</li><li>(A^B)^C=A^(B^C)</li></ul><p><strong>性质 3</strong></p><ul><li>一堆数依次异或得到的结果和其异或的顺序无关</li><li>（就是前两个性质的推广）</li></ul><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><p><strong>可以实现不用额外第三个变量来交换两个数</strong></p><ul><li>即空间复杂度 O(0)</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span>int a = 甲</span></span>
<span class="line"><span>int b = 乙</span></span>
<span class="line"><span></span></span>
<span class="line"><span>a = a^b; // b不变 a = a^b = 甲^乙</span></span>
<span class="line"><span>b = a^b; // a不变 b = a^b = 甲^乙^乙 = 甲^0 = 甲</span></span>
<span class="line"><span>a = a^b; // b不变 a = a^b = 甲^乙^甲 = 甲^甲^乙 = 0^乙 = 乙</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._3_异或运算的概念性质作用和案例</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">888</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// [888, 999]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在问题" tabindex="-1"><a class="header-anchor" href="#存在问题"><span>存在问题</span></a></h3><ul><li>使用上述方法来交换两变量的值时，两变量的值可以一样，</li><li><strong>但两变量的地址不能一样，否则该位置的数将被清零</strong></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 如果i==j 两数的值将被清零</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 如果 i==j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// arr[i] = 自身 ^ 自身 = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// arr[j] = 自身 ^ 自身 = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// arr[i] = 自身 ^ 自身 = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例题" tabindex="-1"><a class="header-anchor" href="#例题"><span>例题</span></a></h3><p><strong>题 1(常见面试题)</strong></p><ul><li>**题 1.1：**一个数组中有一个数出现了奇数次，其余 others 数所有数都只会出现偶数次，找出这一个数，要求：T(n)=O(n) S(n)=1</li><li>**题 1.2：**一个数组中有两个数出现了奇数次，其余 others 数所有数都只会出现偶数次，找出这两个数，要求：T(n)=O(n) S(n)=1</li></ul><p><strong>思路 1</strong></p><ul><li>遍历这个数组</li><li>用 hashMap 来统计某个数的出现的次数</li><li>遍历结束后，hashMap 中统计次数为奇数次的就是结果</li><li>**存在问题:**空间复杂度 S(n)=n,不满足题目要求 S(n)=1</li></ul><p><strong>题 1.1 思路</strong></p><ul><li>T=0</li><li>遍历这个数组</li><li>将遍历到的数和 T 做异或运算</li><li>遍历结束后，T 中的值就是要找的数</li></ul><p><strong>题 1.2 思路</strong></p><ul><li>T=0</li><li>遍历这个数组</li><li>将遍历到的数和 T 做异或运算</li><li>遍历结束后，T= 要找的数 A ^ 要找的数 B</li><li>由于 A!=B 所以 T!=0;</li><li>T!=0,这就意味着 T 中至少有一个 bit 位是 1，</li><li>而这个 bit 位的第 i 位置是 1，意味着 A 和 B 的比特在这个第 i 位置上是不同的。</li><li>通过 i 可以将原数组中的数分为两类数 <ul><li>第 i 位为 1 的数 <ul><li>others 中第 i 位为 1 的数(有偶数个)</li><li>A (有奇数个 A)</li></ul></li><li>第 i 位为 0 的数 <ul><li>others 中第 i 位为 0 的数(有偶数个)</li><li>B (有奇数个 B)</li></ul></li></ul></li><li>取 K=0;</li><li>遍历数组中 所有第 i 位为 1 的数 ,K ^= 遍历到的数，</li><li>遍历结束后，要找的数 A == K;</li><li>于是，要找的数 B==T^K</li></ul><p><strong>题 1.1：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._3_异或运算的概念性质作用和案例</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// - **题 1.1：**一个数组中有一个数出现了奇数次，其余 others 数所有数都只会出现偶数次，找出这一个数，要求：T(n)=O(n) S(n)=1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> 例题1_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  printOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(Test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   T </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题 1.2：</strong></p><p><code>int differBit = T&amp;(~T+1); // 提取T中的最后一位1</code><strong>原理</strong></p><ul><li>1.假设 T 为 1010111100</li><li>2.取反 T 为 0101000011</li><li>3.再加 1 为 0101000100</li><li>4.与上 T 为 <code>0000000100</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._3_异或运算的概念性质作用和案例</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> 例题1_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  printTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(Test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // **题 1.2：**一个数组中有两个数出现了奇数次，其余 others 数所有数都只会出现偶数次，找出这两个数，要求：T(n)=O(n) S(n)=1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   T </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 此时T=A^B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> differBit</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> ((differBit </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> T) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 找到从右往左数第一个为\`1\`的位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   differBit </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> differBit </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // int differBit = T&amp;(~T+1); // 提取T中的最后一位1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 此时differBit的大概形式为 00000100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> K</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> ((differBit </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    K </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 此时K中就是A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  T </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> K;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 此时T中就是B</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(K);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-插入排序" tabindex="-1"><a class="header-anchor" href="#_4-插入排序"><span>[4]插入排序</span></a></h2><p><strong>时间复杂度</strong></p>`,40),Zs=s("ul",null,[s("li",null,"插入排序的时间复杂度不同于之前的选择排序和冒泡排序（这两者的时间复杂度都是固定的）"),s("li",null,[i("插入排序的时间复杂度和待排序数组的有序程度有关， "),s("ul",null,[s("li",null,[i("如果待排序的数组已经是有序的，插入排序的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Ω"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"Ω(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"Ω"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),i(", "),s("ul",null,[s("li",null,"即只需要遍历一遍即可")])]),s("li",null,[i("如果待排序的数组已经是倒序的，插入排序的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])])])]),s("li",null,"而算法的时间复杂度一般是指最差情况的时间复杂度"),s("li",null,[i("所以插入排序的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])])],-1),Js=s("p",null,[s("strong",null,"补充知识")],-1),Ys=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O")]),s("annotation",{encoding:"application/x-tex"},"O")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O")])])]),i(" 为算法"),s("strong",null,"最差"),i("情况的下的时间复杂度")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Ω")]),s("annotation",{encoding:"application/x-tex"},"Ω")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Ω")])])]),i(" 为算法"),s("strong",null,"最优"),i("情况的下的时间复杂度")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ")]),s("annotation",{encoding:"application/x-tex"},"Θ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Θ")])])]),i(" 为算法"),s("strong",null,"平均"),i("情况的下的时间复杂度")])],-1),Ws=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._4_插入排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  insertSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(Test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(Test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insertSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 遍历n次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// j从i开始</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">     0</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 同时判断是否到头和是否满足交换条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 前移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, j);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-二分查找" tabindex="-1"><a class="header-anchor" href="#_5-二分查找"><span>[5]二分查找</span></a></h2>`,2),Xs=s("p",null,[i("二分查找时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])],-1),$s=a(`<p><strong>细节问题：中点坐标的计算</strong></p><ul><li><code>int middle = (left+right)/2</code><ul><li>这种方式可能在加法操作的时候导致移除，从而得到一个负数</li></ul></li><li><code>int middle = left + (right-left)/2</code><ul><li>这种方式就不会溢出</li></ul></li><li><code>int middle = left + ((right-left)&gt;&gt;2)</code><ul><li>这种方式同上，只是用了移位操作，效率会更高，</li><li>但其实，也许编译器会自动优化为移位操作</li></ul></li></ul><p><strong>几种题型</strong></p><ul><li>有序数组中查找某个数 num 的位置</li><li>有序数组中查找大于等于某个数 num 的第一个数的位置</li><li><strong>无序</strong>数组中查找局部最小值</li></ul><h3 id="查找某个数" tabindex="-1"><a class="header-anchor" href="#查找某个数"><span>查找某个数</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._5_二分查找</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 注意middle的计算公式，bug写法：middle=(right - left) / 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 注意一定是小于等于,bug写法：while (left &lt; right)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[middle] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 找到直接返回下标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // num在左侧区域</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 收紧右边界</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // num在右侧区域</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[middle] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 收紧左边界</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 重新计算middle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找-num-的第一个数" tabindex="-1"><a class="header-anchor" href="#查找-num-的第一个数"><span>查找&gt;=num 的第一个数</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._5_二分查找</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> front</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> front </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (end </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> front) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> pos</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> end;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (front </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> end) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[mid]) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 注意这个符号是&lt;=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> pos;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录最小坐标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[mid]) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">//注意 num &lt;= arr[mid]时，要向左边搜索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    end </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[mid]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    front </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> front </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (end </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> front) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> pos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部最小值" tabindex="-1"><a class="header-anchor" href="#局部最小值"><span>局部最小值</span></a></h3>`,9),si=s("ul",null,[s("li",null,[i("有一个数组，无序，但其任意相邻两个数不相等，求出一个数组中的一个局部最小值,要求时间复杂度小于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),i("。")]),s("li",null,[s("strong",null,"局部最小值:"),s("ul",null,[s("li",null,[i("[n,j,....] "),s("code",null,"n<j"),i("则 n 为局部最小值")]),s("li",null,[i("[.......j,n] "),s("code",null,"n<j"),i("则 n 为局部最小值")]),s("li",null,[i("[...,j,n,k,...] "),s("code",null,"n<j && n<k"),i(" 则 n 为局部最小值")])])])],-1),ii=a('<p><strong>思路</strong></p><ul><li>先直接根据定义判断， <ul><li>如果<code>arr[0]&lt;arr[1]</code> 则<code>arr[0]</code>是局部最小值</li><li>如果<code>arr[arr.length-1]&lt;arr[arr.length-2]</code> 则<code>arr[arr.length-1]</code>是局部最小值</li></ul></li><li>如果不满足上述两个条件，这意味着,</li><li>数组 <code>arr[1] ~ arr[n-2]</code> 之间一定有一个局部最小值</li><li>计算中间坐标 M,判断<code>arr[M]</code>是否是一个局部最小值,如果是，直接返回该值</li><li>如果不是，则再继续分别看 M 两边的数值，看其变化趋势，</li><li>如果 <code>arr[M-1] &lt; arr[M]</code> 则以为着左侧的区间一定能找到一个局部最小值</li><li>选择一定能找到局部最小值的一侧继续二分查找</li><li><img src="'+k+`" alt=""></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._5_二分查找</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9999</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">FindMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test1));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 111是局部最小值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9999</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">FindMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test2)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 111是局部最小值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">444</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">333</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">444</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">33</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">444</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">FindMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test3));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 11是局部最小值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> FindMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 根据局部最小值定义，直接判断数组开头和结尾是否为局部最下值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从第二个数开始</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从最后第二个数结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[middle] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 小于左边的数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     arr[middle] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 也小于右边的数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle]) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左边的数比右边的数小，这意味着往左边走，数会更小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[middle] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 右边的数比右边的数小，这意味着往右边走，数会更小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-对数器" tabindex="-1"><a class="header-anchor" href="#_6-对数器"><span>[6]对数器</span></a></h2><p><strong>对数器</strong>的概念</p><ul><li>用来测试写的算法是否正确</li></ul><p><strong>对数器</strong>的实现</p><ul><li>你有一个需要测试正确性的算法 A</li><li>写一个算法 B, 可以是使用暴力解法实现的，可以是空间复杂度不满足要求，或者是时间复杂度不满足要求的算法</li><li>实现一个随机样本生成器</li><li>使用样本生成器生成大批量样本</li><li>把样本给算法 A 计算，得到结果 a</li><li>把样本给算法 B 计算，得到结果 b</li><li>比较 a 和 b 是否一致。</li><li>如果对于大量样本，结果全部一致则说明算法 A 和算法 B 一致</li><li>如果有不一致，则说明算法 A 和算法 B 中有一个或两个算法写错了</li></ul><p><strong>测试冒泡排序和插入排序算法排序算法一致性的对数器的实现</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._6_对数器</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> times</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> MaxLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> valueFrom</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> valueTo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  do</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 生成一个样本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> generateRandomArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(MaxLength, valueFrom, valueTo);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 拷贝样本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> arrayCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrA);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   insertSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrA);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 插入排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrB);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 比较结果一致性,不一致就报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrA, arrB)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;测试不通过，两函数处理结果不一致&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrA));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arrB));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   times</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 进入下一次测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (times </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 测试通过</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;测试通过，两函数处理结果一致&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 数组拷贝</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">arrayCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   array[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> array;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 生成随机数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">generateRandomArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> MaxLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> valueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> valueTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">RandomRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, MaxLength)];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   array[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> RandomRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(valueFrom, valueTo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> array;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 生成随机数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> RandomRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) (from </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (to </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> from));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 比较数组是否相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arrA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arrB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arrA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arrA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arrA[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arrB[i])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 插入排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insertSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 遍历n次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// j从i开始</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">     0</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 同时判断是否到头和是否满足交换条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 前移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, j);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 循环n次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> top</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; top </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; top</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> top; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i])</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 比较两个数，如果第一数比第二个数大，交换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">     exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 交换元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-递归" tabindex="-1"><a class="header-anchor" href="#_7-递归"><span>[7]递归</span></a></h2><h3 id="递归概念" tabindex="-1"><a class="header-anchor" href="#递归概念"><span>递归概念</span></a></h3><ul><li>递归就是把一个大问题拆分成多个小问题来求解，</li><li>且求解大问题和求解小问题所用的算法是相同的。</li></ul><p><strong>递归算法时间复杂度计算：Master 公式</strong></p>`,14),ai=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mi",null,"b")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(N)=a*T(\\frac{N}{b})+O(N^d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])]),s("ul",null,[s("li",null,[i("a 表示"),s("strong",null,"求解子问题的算法"),i("被调用了多少次")]),s("li",null,[i("b 表示"),s("strong",null,"原问题规模"),i("和"),s("strong",null,"子问题规模"),i("比值")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])]),i(" 算法中"),s("strong",null,"除去递归调用后"),i("的时间复杂度")])])]),s("li",null,[s("strong",null,"若递归算法满足 Master 公式："),s("ul",null,[s("li",null,[i("若 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"<"),s("mi",null,"d")]),s("annotation",{encoding:"application/x-tex"},"\\log_{b}{a}<d")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.242em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d")])])]),i(" 则算法时间复杂度为:"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("若 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,">"),s("mi",null,"d")]),s("annotation",{encoding:"application/x-tex"},"\\log_{b}{a}>d")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.242em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d")])])]),i(" 则算法时间复杂度为:"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a")])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^{\\log_{b}{a}})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mop mtight"},[s("span",{class:"mop mtight"},[s("span",{class:"mtight"},"l"),s("span",{class:"mtight"},"o"),s("span",{class:"mtight",style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2302em"}},[s("span",{style:{top:"-2.2341em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2659em"}},[s("span")])])])])]),s("span",{class:"mspace mtight",style:{"margin-right":"0.1952em"}}),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("若 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"="),s("mo",null,"="),s("mi",null,"d")]),s("annotation",{encoding:"application/x-tex"},"\\log_{b}{a}==d")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.242em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"=="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d")])])]),i(" 则算法时间复杂度为:"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",null,"∗"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^{d}*\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])]),s("li",null,"前人栽树后人乘凉，别人已经证明过了，不浪费时间了")])]),s("li",null,"这种计算方式仅适用于子问题是等规模的")],-1),ni=s("p",null,[s("strong",null,"示例")],-1),li=s("ul",null,[s("li",null,"a=2 因为递归调用了自己两次"),s("li",null,[i("b=2 因为子问题是母问题的"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mn",null,"1"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"\\frac{1}{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])]),s("li",null,[i("d=0 因为算法中除去递归调用后的时间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(N)=2*T(\\frac{N}{2}+O(1))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"))")])])])]),s("li",null,[i("又因为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"="),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"<"),s("mi",null,"d")]),s("annotation",{encoding:"application/x-tex"},"\\log_{b}{a}==1 < d")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.242em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"=="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6835em","vertical-align":"-0.0391em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d")])])])]),s("li",null,[i("所以 算法时间复杂度为 "),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"0")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"=O(N^0)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])])])])])]),s("span",{class:"mclose"},")")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"=O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])])])])],-1),hi=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._7_递归</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Demo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[left];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 注意：这里不能写middle-1 否则对于长度为2的子问题， middle就等于-1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, right);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 注意：只能在这里写middle+1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(max1, max2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-归并排序" tabindex="-1"><a class="header-anchor" href="#_9-归并排序"><span>[9]归并排序</span></a></h3><p><strong>概念</strong></p><ul><li>归并排序整体是一个递归，先对左边归并排序，在对右边归并排序，然后合并左右两边两个数组，保持整体有序。</li><li>让整体有序的过程用了<strong>外排序法</strong>，就是使用将数排序到另一个数组中，然后再拷贝回原来的数组中。</li></ul><p><strong>优点</strong></p>`,5),ki=s("ul",null,[s("li",null,[i("之前的几种排序算法的时间复杂度都是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),i(",因为每一轮遍历数组都要浪费大量的比较运算，但却只能确定一个数的位置。而这种操作要进行 N 轮")]),s("li",null,"归并排序在递归的过程中，一边比较，一边排序，没有浪费比较运算。")],-1),ti=s("p",null,[s("strong",null,"空间复杂度:"),i(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),s("br"),s("strong",null,"时间复杂度:"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])],-1),pi=s("ul",null,[s("li",null,[s("strong",null,"使用 Master 公式计算："),s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mi",null,"b")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(N)=a*T(\\frac{N}{b})+O(N^d)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")")])])]),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"a=2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"b"),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"b=2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"d"),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"d=1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),i(" 因为：非递归操作时间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^d)=O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),s("br"),i(" 又因为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"="),s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mn",null,"2")]),s("mn",null,"2"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"="),s("mo",null,"="),s("mi",null,"d")]),s("annotation",{encoding:"application/x-tex"},"\\log_{b}{a} =\\log_{2}{2}= 1 == d")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.242em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"b")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.207em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"=="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"d")])])]),s("br"),i(" 所以算法时间复杂度为："),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",null,"∗"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^{d} * \\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"d")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])]),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"1")]),s("mo",null,"∗"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"=O(N^{1} * \\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])]),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"=O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])])])]),s("li",null,[i("这是目前为止唯一一个时间复杂度小于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),i(" 的算法")])],-1),ei=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._8_归并排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 归并排序，</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, right);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 仍然需要注意，应当是middle+1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle, right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 合并为一个</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left, p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, p2_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // copy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   arr[left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="小和问题" tabindex="-1"><a class="header-anchor" href="#小和问题"><span>小和问题</span></a></h4><p><img src="`+t+'" alt=""></p><p><code>[1,3,4,2,5]</code>的小和</p><ul><li>1 的左边比 1 小的数的和：0</li><li>3 的左边比 3 小的数的和：1 = 1</li><li>4 的左边比 4 小的数的和：1 + 3 = 4</li><li>2 的左边比 2 小的数的和：1 = 1</li><li>5 的左边比 5 小的数的和：1 + 2 + 4 + 2 = 10</li><li>数组的小和为：0 + 1 + 4 + 1 + 10 = 16</li></ul><p><strong>求解思路 1</strong></p>',6),Ei=s("ul",null,[s("li",null,"暴力求解"),s("li",null,[i("时间复杂度"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])])],-1),ri=s("p",null,[s("strong",null,"求解思路 2")],-1),di=s("ul",null,[s("li",null,"归并排序求解"),s("li",null,[i("时间复杂度"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])]),s("li",null,"观察上述案例的最终结果，其实只需要关注一个问题，"),s("li",null,"每个元素是否被加到最终结果中，就是要看这个元素的右边是否有比他大的数"),s("li",null,"每个元素被加到最终的结果中几次，就是要看这个元素右边有几个比他大的数。"),s("li",null,[i("如： "),s("blockquote",null,[s("p",null,[i("求"),s("code",null,"[1,3,4,2,5]"),i("的小和")]),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"="),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"result = 0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])])]),s("li",null,[i("1 的右边比 1 大的数有 4 个 ："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"+"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"∗"),s("mn",null,"4"),s("mo",null,"="),s("mn",null,"0"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"="),s("mn",null,"4")]),s("annotation",{encoding:"application/x-tex"},"result += 1*4 = 0 +4=4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mord"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])])])]),s("li",null,[i("3 的右边比 3 大的数有 2 个 ："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"+"),s("mo",null,"="),s("mn",null,"3"),s("mo",null,"∗"),s("mn",null,"2"),s("mo",null,"="),s("mn",null,"4"),s("mo",null,"+"),s("mn",null,"6"),s("mo",null,"="),s("mn",null,"10")]),s("annotation",{encoding:"application/x-tex"},"result += 3*2 = 4 +6=10")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mord"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"6"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10")])])])]),s("li",null,[i("4 的右边比 4 大的数有 1 个 ："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"+"),s("mo",null,"="),s("mn",null,"4"),s("mo",null,"∗"),s("mn",null,"1"),s("mo",null,"="),s("mn",null,"10"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"="),s("mn",null,"14")]),s("annotation",{encoding:"application/x-tex"},"result += 4*1 = 10+4=14")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mord"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"10"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"14")])])])]),s("li",null,[i("2 的右边比 2 大的数有 1 个 ："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"+"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"∗"),s("mn",null,"1"),s("mo",null,"="),s("mn",null,"14"),s("mo",null,"+"),s("mn",null,"2"),s("mo",null,"="),s("mn",null,"16")]),s("annotation",{encoding:"application/x-tex"},"result += 2*1 = 14+2=16")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mord"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"14"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16")])])])]),s("li",null,[i("5 的右边比 5 大的数有 0 个 ："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"+"),s("mo",null,"="),s("mn",null,"5"),s("mo",null,"∗"),s("mn",null,"0"),s("mo",null,"="),s("mn",null,"16"),s("mo",null,"+"),s("mn",null,"0"),s("mo",null,"="),s("mn",null,"16")]),s("annotation",{encoding:"application/x-tex"},"result += 5*0 = 16+0=16")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mord"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"l"),s("mi",null,"t"),s("mo",null,"="),s("mn",null,"16")]),s("annotation",{encoding:"application/x-tex"},"result = 16")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"res"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"lt"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16")])])])])])])]),s("li",null,"这个过程可以很方便的用归并排序求解")],-1),gi=a(`<p><strong>归并排序求解数组小和</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._8_归并排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">getMinSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 输出： 16</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 求小和</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">    +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, right) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 仍然需要注意，应当是middle+1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">    +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle, right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 合并并计算小和</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left, p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, p2_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // ------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   res </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p2_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 相等的时候一定要先拷贝右边数组的数，否则就会错过一位数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // copy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   arr[left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逆序对问题" tabindex="-1"><a class="header-anchor" href="#逆序对问题"><span>逆序对问题</span></a></h4><p>逆序对问题在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对，请打印所有逆序对。</p><p><strong>[3,2,4,5,0]</strong> 的逆序对</p><ul><li>[3,2]</li><li>[3,0]</li><li>[2,0]</li><li>[4,0]</li><li>[5,0]</li></ul><p><strong>思路</strong></p><ul><li>左边的数比右边的大，就是说如果一个数右边存在另一个数比这个数小，就输出这个数</li><li>依然可以使用归并排序来做，</li><li>但需要用倒序排序，并在数值相同时，先复制右边数组的值</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._8_归并排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, right);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 仍然需要注意，应当是middle+1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, middle, right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 合并为一个</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left, p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, p2_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 如果倒序，输出这两个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;[&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &quot;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 倒序排序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 两数相等时，剔除右边数组的数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p1_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2_max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[help_i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // copy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   arr[left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-快速排序" tabindex="-1"><a class="header-anchor" href="#_10-快速排序"><span>[10]快速排序</span></a></h3><h4 id="前置知识-荷兰国旗问题" tabindex="-1"><a class="header-anchor" href="#前置知识-荷兰国旗问题"><span>前置知识:荷兰国旗问题</span></a></h4><h5 id="两色国旗" tabindex="-1"><a class="header-anchor" href="#两色国旗"><span>两色国旗</span></a></h5><p><img src="`+p+`" alt=""></p><p><strong>思路</strong></p><ul><li>将数组划分为两片区域，</li><li>左侧为小于 num 的区域</li><li>右侧为为排序区域</li><li>遍历数组， <ul><li>如果遍历到的数小于 num,就把这个数放到小于 num 的区域的下一个位置，并更新小于 num 区域的大小</li><li>如果不小于，就继续遍历。</li></ul></li></ul><p><strong>具体实现</strong></p><ul><li>需要一个指针 p=-1;</li><li>遍历数组，<code>i&lt;num.len</code>， <ul><li>如果<code>num[i]&lt;num</code>,则交换 num[i] 和 num[++p];</li></ul></li><li>遍历完毕后,小于 num 的数就在 0~p 的区域</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._9_快速排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// [4, 3, 2, 1, 5, 9, 8, 7, 6]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 荷兰国旗问题1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">num){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i,p</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="三色国旗" tabindex="-1"><a class="header-anchor" href="#三色国旗"><span>三色国旗</span></a></h5><p><img src="`+e+`" alt=""></p><p><strong>思路</strong></p><ul><li>将数组划分为两片区域，最左侧为小于 num 区域，最右侧为大于 num 区域</li><li>遍历数组， <ul><li>如果一个元素小于 num 就放到最左侧区域的下一个位置</li><li>如果一个元素大于 num 就放到最右侧区域的上一个位置</li></ul></li></ul><p><strong>具体实现</strong></p><ul><li>需要两个指针 p=-1;,q=len</li><li>遍历数组，<code>i&lt;q</code>， <ul><li>如果<code>num[i]&lt;num</code>,则交换 num[i] 和 num[++p] 然后 i++;</li><li>如果<code>num[i]==num</code> 则 i++;</li><li>如果<code>num[i]&gt;num</code>,则交换 num[i] 和 num[--q] 然后 i 不变;</li></ul></li><li>遍历完毕后, <ul><li>小于 num 的数就在 0~p 的区域，</li><li>等于 num 的就在 p+1~q-1 的区域</li><li>大于 num 的就在 q~len-1 的区域</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._9_快速排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Problem_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(T));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// [1, 3, 4, 5, 5, 5, 6, 7, 9]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 荷兰国旗问题2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> head</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 注意这个终止条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> end;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[idx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, idx, head</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[idx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, idx, end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 这里不必i++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;交换&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> j);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="快速排序-v1-0" tabindex="-1"><a class="header-anchor" href="#快速排序-v1-0"><span>快速排序 v1.0</span></a></h4><p><strong>排序过程</strong></p><ul><li>选取数组最后一个数为 num</li><li>小于等于 num 的数放到左侧区域，</li><li>大于 num 的数入栈数组右侧区域</li><li>将数组最后一个数和右侧区域第一个数交换</li><li>对左侧区域执行递归调用</li><li>对右侧区域执行递归调用</li><li>然后数组就有序了</li></ul>`,28),yi=s("p",null,[s("strong",null,"时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])],-1),Di=s("ul",null,[s("li",null,[i("最差情况： "),s("ul",null,[s("li",null,"当待排序数组是一个有序数组时。"),s("li",null,"选取的 num 数就是数组的最大值或最小值"),s("li",null,[i("大于 num 的数放右边，小于 num 的数放左边， "),s("ul",null,[s("li",null,[i("这一步操作需要遍历整个数组，所以耗时"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])])])]),s("li",null,"那么左侧区域的范围就是[0,n-1],右侧区域不存在"),s("li",null,"或者右侧区域的范围就是[0,n-1],左侧区域不存在"),s("li",null,"这就使其每一次函数调用只能确定一个数的位置，"),s("li",null,[i("有 n 个数，需要执行函数调用 n 次，每次时间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("即，时间复杂度为："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])])])]),s("li",null,[i("最好情况 "),s("ul",null,[s("li",null,"选取的 num 是数组的中位数时，"),s("li",null,[i("大于 num 的数放右边，小于 num 的数放左边， "),s("ul",null,[s("li",null,[i("这一步操作需要遍历整个数组，所以耗时"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])])])]),s("li",null,"需要对左侧[0,n/2]区域做递归排序"),s("li",null,"需要对右侧[n/2,n-1]区域做递归排序"),s("li",null,[i("使用 Master 公式就是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"2"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"T(N)=2T(\\frac{N}{2}+O(N))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},"))")])])])]),s("li",null,[i("即，时间复杂度为："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])])])])],-1),Ci=s("p",null,[s("strong",null,"空间复杂度"),i("：")],-1),ci=s("ul",null,[s("li",null,[i("最坏情况："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("最好情况："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])])],-1),mi=a('<h4 id="快速排序-v2-0" tabindex="-1"><a class="header-anchor" href="#快速排序-v2-0"><span>快速排序 v2.0</span></a></h4><p><strong>排序过程</strong></p><ul><li>选取数组最后一个数为 num</li><li>小于 num 的数放到左侧区域</li><li>等于 num 的数放到中间区域</li><li>大于 num 的数放到右侧区域</li><li>将数组最后一个数和右侧区域第一个数交换</li><li>对左侧区域执行递归调用</li><li>对中间区域不执行递归调用（因为已经有序了）</li><li>对右侧区域执行递归调用</li><li>然后数组就有序了</li></ul>',3),ui=s("p",null,[s("strong",null,"时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])],-1),Ai=a('<h4 id="快速排序-v3-0" tabindex="-1"><a class="header-anchor" href="#快速排序-v3-0"><span>快速排序 v3.0</span></a></h4><p><strong>排序步骤/过程</strong></p><ul><li><strong>随机选取</strong>数组中的一个数为 num</li><li>将其和数组中最后一个数交换 <ul><li>（这步其实没必要，只需要找到一个数就行了）</li></ul></li><li>小于 num 的数放到左侧区域</li><li>等于 num 的数放到中间区域</li><li>大于 num 的数放到右侧区域</li><li>将数组最后一个数和右侧区域第一个数交换 <ul><li>（这步其实没必要，上面三步会将最后一个数放到正确的位置）</li></ul></li><li>对左侧区域执行递归调用</li><li>对中间区域不执行递归调用（因为已经有序了）</li><li>对右侧区域执行递归调用</li><li>然后数组就有序了</li></ul>',3),vi=s("p",null,[s("strong",null,"时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])],-1),oi=s("ul",null,[s("li",null,"由于存在随机行为，每次选到什么数都成为了概率事件"),s("li",null,[i("视频中说时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("但我感觉应该是： "),s("ul",null,[s("li",null,[i("平均时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"Θ(N\\log{N})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"Θ"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[i("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("最差时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),s("ul",null,[s("li",null,"因为即使是随机选取 num,"),s("li",null,"依然存在每次都选取到最大或最小数的可能，"),s("li",null,[i("这种概率应该是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"P"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mi",null,"n")]),s("mo",null,"∗"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"∗"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"2")])]),s("mo",null,"∗"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},".")]),s("annotation",{encoding:"application/x-tex"},"P=\\frac{1}{n}*\\frac{1}{n-1}*\\frac{1}{n-2}*...")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2484em","vertical-align":"-0.4033em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4033em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2484em","vertical-align":"-0.4033em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4033em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.1056em"}}),s("span",{class:"mord"},"...")])])])])])])])])],-1),bi=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._9_快速排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> QuickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 这个判断条件也是关键，因为mid[0] mid[1] 取值范围的原因</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> mid</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, left, mid[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, mid[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 对于数组 [5,4,3,2,1,0]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 该函数会随机选一个数作为num</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 该函数会将其变为 [小于num的数，等于num的数，大于num的数]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 返回值为 等于num的数的区域 的开始和结束坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 随机最后一个数作为比较对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">randomRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(left, right)];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> p2) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">p1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">    swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">p2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 返回 中间区域的范围</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] { p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> randomRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) (from </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (to </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> from));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="快速排序-c-语言版" tabindex="-1"><a class="header-anchor" href="#快速排序-c-语言版"><span>快速排序 c 语言版</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&lt;time.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> quickQort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">( i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">  arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">Rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> quickQort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> srand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(to</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">start);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">j){</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">  arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[j];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">  arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[j]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[j];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">  arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">^</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> pagination</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> midVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[left];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">right){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">midVal) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(midVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,i);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> left;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">right){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> pagination</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,left,right);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,left,mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> quickQort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;[&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">( i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">length;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#CE9178;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#CE9178;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D7BA7D;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-堆" tabindex="-1"><a class="header-anchor" href="#_11-堆"><span>[11]堆</span></a></h2><h3 id="_11-1-堆的数据结构" tabindex="-1"><a class="header-anchor" href="#_11-1-堆的数据结构"><span>[11.1]堆的数据结构</span></a></h3><p><strong>前置知识</strong></p><ul><li>完全二叉树：满二叉树或即将变满的二叉树就是完全二叉树。</li><li>二叉树的顺序存储结构</li><li><img src="`+E+'" alt=""></li></ul><p><strong>堆的顺序存储结构</strong></p>',8),Fi=s("ul",null,[s("li",null,[s("strong",null,"堆是一颗完全二叉树")]),s("li",null,"堆的结构类似于上面的二叉树的顺序存储结构，"),s("li",null,[s("strong",null,"但第 0 个位置存储第 0 个元素"),i("，所以")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),i(" 的左孩子为: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2i+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),i(" 的右孩子为: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2i+2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),i(" 的父孩子为: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"(i-1)/2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"/2")])])])]),s("li",null,[s("strong",null,"大根堆"),i("：根节点的值为最大值")]),s("li",null,[s("strong",null,"小根堆"),i("：根节点的值为最小值")])],-1),Bi=a(`<p><strong>堆的堆化操作</strong></p><ul><li>从某个节点的子节点中找出最大值</li><li>如果最大值比当前节点的值大</li><li>交换这两个节点的值</li><li>交换后，继续向下寻找比根节点值大的节点然后交换</li><li>直到没有子节点或没有子节点比父节点大为止</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆化：从某个的子节点地位提升的过程，假皇帝被贬的过程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> currentIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 判断是否存在子节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 找出子节点中最大节点的下标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[rightIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[leftIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[maxIdx])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(heap, currentIdx, maxIdx);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 父节点和子节点交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> maxIdx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>堆的添加操作</strong></p>`,4),fi=s("ul",null,[s("li",null,[i("时间复杂度"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])]),s("li",null,"先将要插入的数放在堆的末尾的位置"),s("li",null,"然后将该元素的值和所在子树的根节点的值做比较"),s("li",null,"如果比根节点的值大，则和根节点交换"),s("li",null,"交换后，继续往上和根节点比较，"),s("li",null,"直到不比根节点的数大，或到达根节点")],-1),xi=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆插入操作,插入一个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆插入操作,仅可以在[0,length]位置插入一个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 堆满则扩容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 先将其插入到末尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 获取插入位置并更新堆大小</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 子节点依次打败父节点，提升地位的过程：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> fatherIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[fatherIdx]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 如果当前节点比其父节点大，则交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(heap, currentIdx, fatherIdx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> fatherIdx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   fatherIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 子节点篡位的过程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从i位置往下堆化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 扩容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 分配内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 拷贝</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩容的时间复杂度</strong></p>`,2),wi=s("ul",null,[s("li",null,[i("数据量为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),i(",每次扩容"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),i("倍,")]),s("li",null,[i("扩容的次数就为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"logN")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])]),s("li",null,[i("每次扩容需要复制原数据到新数组，复杂度"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])]),s("li",null,[i("则总共的扩容代价为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"NlogN")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"Nl"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])]),s("li",null,[i("平均下来，每次添加操作的复杂度就是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"logN")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])])],-1),_i=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 扩容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 分配内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 拷贝</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实现堆的完整代码</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._11_堆</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(nums);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 从末尾遍历</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   nums[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> popMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 弹出最大的数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Integer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> popMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 将末尾节点的数放置到根节点上，然后缩小堆的大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从根节点开始堆化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> maxNum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆化：从某个的子节点地位提升的过程，假皇帝被贬的过程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> currentIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 判断是否存在子节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 找出子节点中最大节点的下标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[rightIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[leftIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[maxIdx])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(heap, currentIdx, maxIdx);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 父节点和子节点交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> maxIdx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   rightIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> leftIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆插入操作,插入一个数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆插入操作,插入一个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 堆插入操作,仅可以在[0,length]位置插入一个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 堆满则扩容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 先将其插入到末尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 获取插入位置并更新堆大小</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 子节点依次打败父节点，提升地位的过程：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> fatherIdx</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[currentIdx] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[fatherIdx]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 如果当前节点比其父节点大，则交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(heap, currentIdx, fatherIdx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> fatherIdx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   fatherIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (currentIdx </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 子节点篡位的过程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从i位置往下堆化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 是否满</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 是否空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 清空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 扩容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 分配内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 拷贝</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   help[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-堆排序" tabindex="-1"><a class="header-anchor" href="#_11-2-堆排序"><span>[11.2]堆排序</span></a></h3><p><strong>利用堆进行排序</strong></p>`,5),Ni=s("ul",null,[s("li",null,[i("时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(NlogN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"Nl"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("将数组中的数依次放入堆中,【时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i("】")]),s("li",null,[i("从后往前遍历原数组, "),s("ul",null,[s("li",null,[i("从堆中取出最大值,【时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"logN")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),i("】")]),s("li",null,"放回原数组")])])],-1),Mi=a(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._11_堆</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heapLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(nums);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 从末尾遍历</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   nums[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> popMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 弹出最大的数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Integer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> popMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 将末尾节点的数放置到根节点上，然后缩小堆的大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heapLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapify</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从根节点开始堆化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> maxNum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-内置堆-优先级队列" tabindex="-1"><a class="header-anchor" href="#java-内置堆-优先级队列"><span>java 内置堆：优先级队列</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._11_堆</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> heapSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 优先级队列，就是堆，默认为小根堆</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> pq</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; index </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; index</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   pq</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[index]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; index </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; index</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   arr[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pq</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统内置了现成的数据结构为什么还要自己手写实现" tabindex="-1"><a class="header-anchor" href="#系统内置了现成的数据结构为什么还要自己手写实现"><span>系统内置了现成的数据结构为什么还要自己手写实现？</span></a></h3><ul><li><strong>内置的数据结构只能对数据做系统允许的有限数量的操作</strong>，如添加数据，删除数据，</li><li>但不能随意修改指定位置的数据后再以<strong>很小的时间复杂度</strong>再恢复到原先的状态，也就是说，</li><li><strong>系统提供的数据结构对数据的操作是受到限制的，自己实现的数据结构对数据的操作是任意的、可自由发挥的</strong></li></ul><h3 id="例题-1" tabindex="-1"><a class="header-anchor" href="#例题-1"><span>例题</span></a></h3><p><strong>对几乎有序的数组排序</strong><br><img src="`+r+`" alt=""></p><p><strong>思路</strong></p><ul><li>假设 k=6</li><li>这意味着，[0,5]位置上的最小的数，就是整个数组的最小的数</li><li>所以只需要先把 k 个数放入小根堆中，</li><li>然后每次把数组中的数添加一个入推，再拿出一个元素放回数组</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._11_堆</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Question_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[],</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> k</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pq</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, k</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   pq</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   arr[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> pq</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    pq</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于比较的排序总结" tabindex="-1"><a class="header-anchor" href="#基于比较的排序总结"><span>基于比较的排序总结</span></a></h2><ul><li>上述排序算法都是基于比较的排序,</li><li>完全可以通过比较器或模板方法，</li><li>将上述算法复用到对含有多个属性的对象的排序中</li></ul><blockquote><p>不基于比较的排序：桶排序(计数排序、基数排序）</p></blockquote><h2 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h2><p><strong>概念</strong></p><ul><li>如有一个数组 A，其中的数代表员工的年龄，要求对其进行排序</li><li>由于人的年龄范围不会太宽泛，可以假设年龄区间在[0,150]</li><li>准备一个长度和年龄区间范围一致的数组 B，</li><li>遍历员工的年龄数组 A <ul><li>遇到 0 岁,则 B[0]++</li><li>遇到 1 岁,则 B[1]++</li><li>遇到 13 岁,则 B[13]++</li><li>...</li></ul></li><li>遍历完数组 A 后，遍历数组 B</li><li>如果遇到 B[10]=5,</li><li>则表示员工中年龄为 10 岁的员工有 5 个</li><li>所以向数字 A 中写入 5 个 10</li><li>....</li></ul><h2 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序"><span>基数排序</span></a></h2><p><strong>概念</strong></p><ul><li>基数是指，二进制有两个基数：0、1，八进制有八个基数，0~7.</li><li>基数是几，就准备几个桶（队列，数组），桶可以是队列、数组、栈、啥都行</li><li>如数据是 10 进制，就准备一个长度为 10 的桶数组 B</li><li>遍历数组 A，依次放入桶中， <ul><li>先根据元素的个位来决定放入哪个桶，个位为 0 就放入 0 号桶</li></ul></li><li>遍历完毕后，遍历桶数组，按照先入先出取出桶中的元素，放到原数组中。</li><li>然后再根据元素十位数来执行上述操作，</li><li>循环往复...</li></ul><p><strong>示例代码：支持负数的基数排序</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._12_桶排序</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> RadixSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">test</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  radixSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(test));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// [-8, -7, -6, -4, -4, 1, 2, 3, 4, 5, 6, 6, 8, 9]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> radixSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> radix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxLen</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findMaxBitLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr, radix);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> maxLen; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 统计</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 假设radix为10进制，则要统计 [-9,-1] and [0] and [+1,+9] 也就是2*radix-1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 如果遍历到 -??4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 则counter[&quot;-4&quot;]++</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 表示又统计到个位为-4的数一次</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 因为getDigit()的返回值范围为[-9,0,+9],所以将其加9，则范围就成了[0,18]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    counter[radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[j], i, radix)]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 计算前缀和，这就表示之前一共有多少位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    counter[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> counter[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> counter[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 如果遍历到 ??5 且counter[&quot;5&quot;]=8 则表示 7号位置就是??5应当存在的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    help[</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">counter[radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[j], i, radix)]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 复制到arr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> help[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 找到数组中位数最长的数的位数，如189 就是3位数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findMaxBitLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> radix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(max), </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(arr[i]));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   len</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   max </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> radix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> len;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 获取一个数的第i位 如1458 的第1位为8 第2位为5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> radix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">/=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> radix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> radix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序算法稳定性" tabindex="-1"><a class="header-anchor" href="#排序算法稳定性"><span>排序算法稳定性</span></a></h2><p><strong>排序算法的稳定性：</strong><br> 排序后，相同值的元素之间相对位置保持不变，称排序算法具有稳定性。</p><p><strong>不具有稳定性的排序算法</strong></p><ul><li><strong>选择排序</strong><ul><li>回顾：看成有序部分和无序部分，从无序部分中选择一个最小的元素和无序部分的第一个元素交换。交换这一步破坏了稳定性</li><li><img src="`+d+'" alt=""></li></ul></li><li><strong>快速排序</strong><ul><li>回顾：荷兰国旗问题，一旦产生元素交换行为就有可能破坏稳定性</li><li><img src="'+g+'" alt=""></li></ul></li><li><strong>堆排序</strong></li><li>堆化的过程会破坏稳定性</li><li><img src="'+y+'" alt=""></li></ul><p><strong>可以实现具有稳定性的排序算法</strong></p><ul><li><strong>冒泡排序</strong><ul><li>要求元素值相等的时候不能交换值，否则会破坏相对位置</li></ul></li><li><strong>插入排序</strong><ul><li>要求在插入阶段的时候，在两元素相等时停止交换</li></ul></li><li><strong>归并排序</strong><ul><li>要求在 merge 合并的时候，当元素相等时，先处理第一个数组的元素，保持相对位置</li></ul></li><li><strong>一切基于桶排序思想的排序</strong><ul><li>基数排序</li><li>计数排序（？）</li></ul></li></ul><p><strong>应用</strong></p><p>使用具有稳定性的排序算法对商品进行价格升序排序，<br> 然后再根据商品的好评率对上一步的排序结果进行降序排序，<br> 排序结果就是物美价廉的商品</p><h2 id="排序总结" tabindex="-1"><a class="header-anchor" href="#排序总结"><span>排序总结</span></a></h2>',30),ji=s("ul",null,[s("li",null,[s("img",{src:D,alt:""})]),s("li",null,"最后三个排序算法最常用。"),s("li",null,"所谓的十大排序算法中，除了上述这些排序算法，其他算法都不常用"),s("li",null,[i("最常用的是快速排序， "),s("ul",null,[s("li",null,"虽然快速排序和归并的最差时间复杂度是相同的，但实际的上快速排序时间复杂度的系数、常数项小。")])]),s("li",null,[i("基于比较的排序算法中"),s("strong",null,"目前为止没有找到"),i("时间复杂度"),s("strong",null,"小于"),i(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,"∗"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N*logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i(" 的算法")]),s("li",null,[i("基于比较的排序算法中时间复杂度 "),s("strong",null,"为"),i(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,"∗"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N*logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i(" 的算法中 "),s("strong",null,"空间复杂度"),i(" 为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i(" ，同时又 "),s("strong",null,"具有稳定性"),i(" 的算法， "),s("strong",null,"目前为止没有找到")]),s("li",null,"所以目前来说，算法时间复杂度小、空间复杂度低、具有稳定性 不能同时满足")],-1),Oi=s("p",null,[s("strong",null,"工程上对排序算法的改进")],-1),Si=s("ul",null,[s("li",null,[s("p",null,[i("充分利用"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(NlogN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"Nl"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i("算法和"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),i("算法各自的优势。")]),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),i("小样本情况下常数项低、系数小")])]),s("div",{class:"language-js line-numbers-mode","data-highlighter":"shiki","data-ext":"js","data-title":"js",style:{"--shiki-light":"#24292e","--shiki-dark":"#E6E6E6","--shiki-light-bg":"#fff","--shiki-dark-bg":"#222222"}},[s("pre",{class:"shiki shiki-themes github-light slack-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#569CD6"}},"function"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#DCDCAA"}}," Sort"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"("),s("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#9CDCFE"}},"arr"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"[]){")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A9955"}}," // 小样本量时，插入排序的时间复杂度低")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C586C0"}}," if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"("),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#9CDCFE"}},"arr"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#9CDCFE"}},"length"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#D4D4D4"}},"<="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#B5CEA8"}},"60"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},") "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C586C0"}},"return"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#DCDCAA"}}," insertSort"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"("),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#9CDCFE"}},"arr"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A9955"}}," // 大样本量时，使用快速排序")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C586C0"}}," return"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#DCDCAA"}}," quickSort"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"("),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#9CDCFE"}},"arr"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E6E6E6"}},"}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])]),s("li",null,[s("p",null,"稳定性问题：面试问题，为什么 arrays.sort()对基础类型使用快速排序，而对非基础类型使用归并排序？"),s("ul",null,[s("li",null,"因为基础类型不需要考虑算法稳定性，而非基础类型要考虑算法稳定性")])])],-1),Li=s("p",null,[s("strong",null,"常见的坑（没用的知识）")],-1),Ti=s("ul",null,[s("li",null,[i("归并排序使用 "),s("strong",null,"内部缓存法（非常难）"),i(" 可以实现空间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i(",但会失去稳定性，不如直接用堆排序。")]),s("li",null,[s("strong",null,"原地归并排序法"),i("可以实现空间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"0"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(0)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},")")])])]),i(",但会使得算法时间复杂度变为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),i(" 不如直接用插入排序。")]),s("li",null,[i("快速排序可以做到稳定，但非常难，但空间复杂度会变为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i(" ,不如直接用归并排序。 "),s("ul",null,[s("li",null,[s("strong",null,"谷歌：quick sort + 01 stable sort")])])]),s("li",null,[i("所有对现有算法的改进都不重要，因为目前为止没有人找到时间复杂度小于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,"∗"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(N*logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),i(" 空间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i(" 且具有稳定性的算法。")]),s("li",null,[i("有一道题目，要求把数组中奇数放左边，偶数放右边，还要保持相对次序，要求时间复杂度 O(N) 空间复杂度 O(1). "),s("ul",null,[s("li",null,"“奇数放左边，偶数放右边” 的过程和经典的快速排序中 partition 过程是等效的，"),s("li",null,"但快速排序中 partition 过程无法做到稳定性，那谁能做到? 面试官能做到？"),s("li",null,"简单来说就是荷兰国旗问题，但是要求稳定，能做到，但非常的难，论文级别的算法“01 stable sort”")])])],-1),zi=s("h2",{id:"hash-表和有序表概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hash-表和有序表概述"},[s("span",null,"hash 表和有序表概述")])],-1),Ii=s("h3",{id:"hash-表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hash-表"},[s("span",null,"hash 表")])],-1),qi=s("ul",null,[s("li",null,"这里的 hash 表是指 hashset 和 hashmap 等通过 hash 增删改查的数据结构"),s("li",null,[i("操作的耗时为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1),Vi=a('<p>hashset</p><ul><li>无序</li><li>仅存 value 的集合</li></ul><p>hashmap</p><ul><li>无序</li><li>存储的 key:value 的集合</li><li>对于基本数据类型的 key，hashmap 在存 key 时，是拷贝这个基本数据类型作为 key</li><li>对于引用数据类型的 key，hashmap 在存 key 时，是拷贝这个引用数据类型的地址作为 key，占 8 字节 32 比特</li></ul><h3 id="有序表" tabindex="-1"><a class="header-anchor" href="#有序表"><span>有序表</span></a></h3>',5),Hi=s("ul",null,[s("li",null,"红黑树、AVL 树、size-balance-tree、跳表都是有序表，只是底层的具体实现不同"),s("li",null,[i("操作的耗时为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(logN)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])])]),s("li",null,"对于基础类型，内部按值传递"),s("li",null,"对于引用数据类型，必须提供比较器，或实现 comparable 接口")],-1),Pi=a('<p>treeset</p><ul><li>有序</li><li>需要实现 compareable 接口</li></ul><p>treemap</p><ul><li>根据 key 来有序组织的表</li><li>由于是有序的，有一些新的接口 <ul><li>containsKey(?)</li><li>firstKey()</li><li>lastKey()</li><li>floorKey(?)</li><li>ceilingKey(?)</li></ul></li></ul><p>无论是这里的有序表还是无序表，大量刷题的过程中，中等难度的题都不会涉及到实现原理的问题，只需要会用就行，只有很难的题才需要理解这些数据结构的原理</p><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3><p><strong>反转单链表和双链表（水题）</strong></p><ul><li>head=f(head)</li><li><img src="'+C+'" alt=""></li></ul><p><strong>打印两个有序链表的公共部分（水题）</strong></p><ul><li>类似于快速排序的 merge 过程，在元素值相等时打印输出</li><li><img src="'+c+'" alt=""></li></ul><h3 id="面试时链表解题方法论" tabindex="-1"><a class="header-anchor" href="#面试时链表解题方法论"><span>面试时链表解题方法论</span></a></h3><ul><li>笔试时，不用太在乎空间复杂度，主要考虑时间复杂度</li><li>面试时，主要考虑时间复杂度，但要找到最省空间的方法 <ul><li>否则无法达到面试官的考点，无法留下深刻印象</li></ul></li><li><strong>重要技巧</strong><ul><li>使用额外数据结构的方式（哈希表等）</li><li>快慢指针</li></ul></li></ul><p><strong>例题 1</strong><br><img src="'+m+'" alt=""></p><p><strong>笔试解题思路</strong></p><ul><li>方法 1：遍历所有元素，全部入栈，然后再遍历一遍，依次出栈，然后判断是否相等，全部相等则是回文 <ul><li><img src="'+u+'" alt=""></li></ul></li><li>方法 2：遍历前一半的元素，依次入栈，遍历后一半的元素，依次弹出，然后判断是否相等，若全部相等则是，若中途不相等则不是 <ul><li>但是由于是链表，无法知道何时到达一半的位置，需要使用快慢指针</li><li><img src="'+A+'" alt=""></li></ul></li></ul><p><strong>快慢指针</strong></p><ul><li>满指针走一步，快指针走两步</li><li>快指针走完，慢指针走到一半的位置</li><li>需要注意的问题 <ul><li>但需要考虑链表长度为奇偶数时的问题，</li><li>还有就是有时候需要在快指针走到头时，</li><li>要求链表长度为偶数时</li><li>慢指针停在中间位置的下一个位置或上一个位置的问题</li><li>要能处理数据量非常小的时候的问题，链表长度为 1、2、3 时，中点位置如何计算</li><li>对于这些问题，只能多写多练</li></ul></li></ul><p><strong>面试解题思路</strong></p>',18),Ri=s("ul",null,[s("li",null,[i("由于要求空间复杂度为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),i(",所以说不能使用栈")]),s("li",null,"方法是，先使用快慢指针找到中间的位置，"),s("li",null,"然后从中间的位置开始反转后续单链表的指向，即 mid = reverse(mid)"),s("li",null,[s("img",{src:v,alt:""})]),s("li",null,"然后分别从头遍历和从末尾遍历，比较是否完全一致，以此觉得返回 true、false"),s("li",null,"返回前，要恢复链表的指向"),s("li",null,[s("img",{src:o,alt:""})]),s("li",null,[s("img",{src:b,alt:""})]),s("li",null,"这种写法就是考察编程能力"),s("li",null,"刷题要分别按笔试和面试的做题思路侧重点来同时练习")],-1),Qi=a('<p><strong>单链表荷兰国旗问题</strong> <img src="'+F+'" alt=""></p><p><strong>笔试写法</strong>，<br> 把单链表的每个节点放入数组，然后用快速排序的 partition 算法（无法做到稳定性），然后遍历数组中的节点，修改指针指向。</p><p><strong>面试写法</strong>，</p><ul><li>需要 6 个变量 构成三个循环单链表 <ul><li>小于 num 的头指针</li><li>小于 num 的尾指针</li><li>等于 num 的头指针</li><li>等于 num 的尾指针</li><li>大于 num 的头指针</li><li>大于 num 的尾指针</li></ul></li><li>遍历链表，依次判断应当插入到哪一个循环单链表中，</li><li>遍历完毕后，依次将三个循环单链表，首尾相连，返回。</li><li><strong>但是</strong>，需要考虑极端情况的处理，</li><li>如没有等于 5 的元素，则会出现空指针。</li><li><img src="'+B+'" alt=""></li><li><img src="'+f+'" alt=""></li><li><img src="'+x+'" alt=""></li></ul><p><strong>复杂链表的拷贝</strong></p><p><img src="'+w+`" alt=""></p><p><strong>空间复杂度为 O(n)的解法</strong></p><ul><li>遍历链表 为每个节点创建新节点，存入 hashmap&lt;老节点地址,新节点的地址&gt;</li><li>再次遍历链表，map.get(老节点地址).next = map.get(老节点.next)</li><li>新链表的头节点 = map.get(老链表的头节点)</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> linkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">random</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空间复杂度为 O(1)的解法</strong></p><ul><li>原链表 <ul><li><img src="`+_+'" alt=""></li></ul></li><li>遍历链表，为每个节点创建新节点，然后就插入在当前节点和下一个节点之间。 <ul><li><img src="'+N+'" alt=""></li></ul></li><li>再次遍历链表, <ul><li>一次获得两个节点，分别获得老链表节点和新链表节点</li><li>老链表节点.random = 新链表节点.random.next</li><li><img src="'+M+`" alt=""></li></ul></li><li>再次遍历链表，分离新链表和老链表</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> linkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 拷贝节点，并在当前位置插入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 调整新节点的random指针的指向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> oldNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">random</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> oldNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 分离新旧节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resultList</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> copyNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resultList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表最难的题：两个链表的相交的节点</strong><br><img src="`+j+'" alt=""></p><p><strong>前置问题：一个链表的入环节点</strong></p><ul><li>leetcode142 题</li><li>实现函数：获取有环单链表的入环节点</li><li><strong>空间复杂度为 O(N)的方法：</strong><ul><li>用 hash 表，遍历链表，每获取一个节点就查表是否存在，存在就返回，否则把当前节点放入表中，继续遍历下一个节点</li><li><img src="'+O+'" alt=""></li></ul></li><li><strong>不用 hash 表找到入环节点的方法</strong><ul><li>用快慢指针，快慢指针的初始位置任意</li><li>慢指针走一步，快指针走两步</li><li>如果快指针走到 null，则链表无环</li><li>否则链表有环，且快慢指针一定会在环上相遇</li><li>当快指针=慢指针时，让快指针回到开始位置</li><li>然后让块指针走一步，慢指针也走一步</li><li>最终快慢指针一定会相遇在入环节点上</li><li><img src="'+S+'" alt=""></li></ul></li></ul><p><strong>言归正传</strong></p><p>回到原题，该题需要分类讨论</p><ul><li>先分别对两个链表执行上述操作，找出各自链表的入环节点</li><li>如果链表 1 的入环节点<mark>null &amp;&amp; 链表 2 的入环节点</mark>null <ul><li>则说明两链表要么是两个独立的链表 要么是最后有公共部分</li><li><img src="'+L+'" alt=""></li><li>所以遍历两链表，分别找出链表 1 的尾节点 链表 2 的尾节点</li><li>如果链表 1 的尾节点!=链表 2 的尾节点 则属于第一种情况 否则属于第二种情况</li><li>对于第一种情况 返回 null</li><li><img src="'+T+'" alt=""></li><li>对于第二种情况 需要找到相交的节点</li><li><img src="'+z+'" alt=""></li><li>需要知道两链表各自的长度，较长的链表从位置： （长链表长度-短链表长度） 处出发</li><li>较短的链表从起始位置处出发，同时遍历两链表，当两指针相等时，就是相交节点</li></ul></li><li>如果链表 1 的入环节点==null &amp;&amp; 链表 2 的入环节点!=null <ul><li>则两个链表不可能相交，返回 null</li></ul></li><li>如果链表 1 的入环节点!=null &amp;&amp; 链表 2 的入环节点!=null <ul><li>则有三种情况</li><li><img src="'+I+'" alt=""></li><li>只需要分别对两链表执行获取入环节点操作，如果两个入环节点相等，则就是第二种情况，直接返回该位置地址即可</li><li>对于第一和第三种情况，只需要继续从链表 1 的入环节点继续遍历，如果能遍历到入环节点 2 则就是第三种情况，返回任意一个节点的地址即可，否则就是第一种情况，返回 null</li><li><img src="'+q+'" alt=""></li><li><img src="'+V+'" alt=""></li></ul></li><li><img src="'+H+'" alt=""></li></ul><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h2><h3 id="什么是二叉树递归遍历" tabindex="-1"><a class="header-anchor" href="#什么是二叉树递归遍历"><span>什么是二叉树递归遍历</span></a></h3><blockquote><p>直接画几张图吧：</p></blockquote><p><strong>递归序</strong></p><p><img src="'+P+`" alt=""></p><p>二叉树的递归变量，会访问一个节点三次，进入节点一次，回到节点两次</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻1--------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // | 第1次来到【函数A】 : 可以打印输出，可以做递归的结束条件判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> //   do something</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻1--------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 递归调用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻2--------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // | 第2次来到【函数A】： 第一次递归调用结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻2--------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 递归调用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻3--------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // | 第3次来到【函数A】： 第一次递归调用结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // -------时刻3--------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>先序遍历</strong></p><p><img src="`+R+`" alt=""></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> firstRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> firstRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> firstRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>中序遍历</strong></p><p><img src="`+Q+`" alt=""></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> middleRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> middleRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> middleRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后序遍历</strong></p><p><img src="`+K+`" alt=""></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> afterRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> afterRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> afterRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树的非递归遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的非递归遍历"><span>二叉树的非递归遍历</span></a></h3><blockquote><p>任何递归函数 都可以改成非递归函数！<br> 递归就是操作系统来管理栈，非递归就是自己来管理栈。<br> 非递归遍历在面试中经常出现，考察是否理解递归过程</p></blockquote><h4 id="先序遍历" tabindex="-1"><a class="header-anchor" href="#先序遍历"><span>先序遍历</span></a></h4><p><strong>先序遍历 1:根 左 右</strong></p><ul><li><p>先将根节点入栈</p></li><li><p>然后进入循环</p><ul><li>弹出栈顶元素 处理他</li><li>依次入栈右节点和左节点 【为了使弹出时先弹出左节点】</li><li>循环结束条件：栈空</li></ul></li><li><p>然后函数返回</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> preOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><img src="`+U+`" alt=""></p></li></ul><p><strong>先序遍历 2：根 右 左</strong></p><ul><li>只需要将先序遍历 1 中的 压子树的顺序调换即可</li></ul><h4 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历"><span>后序遍历</span></a></h4><p><strong>后序遍历 1：左 右 根</strong></p><ul><li><p>在先序遍历 2【根 右 左】的基础上</p></li><li><p>额外分配一个栈，称收集栈</p></li><li><p>每次把遍历到的节点放入收集栈</p></li><li><p>遍历完毕后，弹出收集栈的顺序，就是后序遍历</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> posOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  stack2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><img src="`+G+'" alt=""></p></li></ul><p><strong>后序遍历 2：右 左 根</strong></p><ul><li>同后序遍历 1 一样，但要</li><li>在先序遍历 1【根 左 右】的基础上</li><li><img src="'+Z+`" alt=""></li></ul><h4 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历"><span>中序遍历</span></a></h4><ul><li>对于每颗子树，都先从根节点开始将其左边界入栈</li><li>然后弹出打印</li><li>然后将该节点的右树重复该过程</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> minRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 左边界全部入栈</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 弹出栈顶</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 指向右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+J+`" alt=""></p><h4 id="二叉树的深度优先遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的深度优先遍历"><span>二叉树的深度优先遍历</span></a></h4><ul><li>二叉树的深度优先遍历就是其先序（后序？）遍历</li></ul><h4 id="二叉树的宽度优先遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的宽度优先遍历"><span>二叉树的宽度优先遍历</span></a></h4><ul><li>就是层序遍历</li><li>先将根节点放入队列</li><li>然后进入循环 <ul><li>弹出节点，打印</li><li>将弹出节点的左右子树的根节点依次放入队列</li><li>循环结束条件：栈空</li></ul></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> deepFirstOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1"><span>题目 1</span></a></h3><h4 id="求一颗二叉树的宽度【使用-hash-表的方法】" tabindex="-1"><a class="header-anchor" href="#求一颗二叉树的宽度【使用-hash-表的方法】"><span>求一颗二叉树的宽度【使用 hash 表的方法】</span></a></h4><ul><li>示例：宽度为 3 的二叉树</li><li><img src="`+Y+`" alt=""></li><li>关键在于要能知道当前在第几层，还要能统计该层的节点数，</li><li>节点数最多的层的节点数就是二叉树的宽度</li><li>用 hash 表，</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> deepFirstOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> levelMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4EC9B0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentLevel</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 当前所在层</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 当前层的节点数统计</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 先将根节点入队</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  levelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 用hashmap记录根节点的层号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 查hash表，该节点是第几层的节点，如果是当前层的节点，计数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">currentLevel</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">levelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  currentCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 如果不是当前层的节点，说明进入了下一层，则对上一层结算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">currentCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 归零，但由于当前节点也需要统计，所以设置为1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  currentCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 如果左节点存在，记录其所在的层为当前层的下一层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  levelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">currentLevel</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 如果右节点存在，记录其所在的层为当前层的下一层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  levelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">currentLevel</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 由于结算仅发生在进入下一层的时候，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 遍历到最后一层的时候不会触发到切换层的else分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 所以这里是在对最后一层的节点数进行结算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">currentCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="求一颗二叉树的宽度【不使用-hash-表-节省空间的方法】" tabindex="-1"><a class="header-anchor" href="#求一颗二叉树的宽度【不使用-hash-表-节省空间的方法】"><span>求一颗二叉树的宽度【不使用 hash 表，节省空间的方法】</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getTreeWide</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 根节点入队</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 当前层的最后一个节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nextLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 下一层的最后一个节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 统计当前层的节点数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">Dequeue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   nextLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   nextLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 更新为下一层的最后一个节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 判断本层是否遍历完毕</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> currentLayerEndNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   currentLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nextLayerEndNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 因为要遍历下一层了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   nextLayerEndNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 结算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2"><span>题目 2</span></a></h3><h4 id="如何判断一个树是否是搜索二叉树" tabindex="-1"><a class="header-anchor" href="#如何判断一个树是否是搜索二叉树"><span>如何判断一个树是否是搜索二叉树</span></a></h4><blockquote><p>tips:经典的二叉树中的节点，可以认为是没有重复值的</p></blockquote><p>思路：</p><ul><li>搜索二叉树的左节点比根节点小，右节点比根节点大</li><li>搜索二叉树的中序遍历，一定是升序排序</li><li>所以用中序遍历，遍历过程中，遍历到的数打破了升序顺序则不是搜索二叉树</li></ul><p><strong>在递归过程中检查是否是搜索二叉树</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> previousVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.MIN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 左树如果不是搜索二叉树，则整颗树也不是</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">previousVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">previousVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 前一个节点的值应当比当前节点的值小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 否则就不是搜索二叉树</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 判断右树是否是搜索二叉树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>另一种更直观的方法</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> midOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> midOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> midOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> midOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>非递归方式实现</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 可以之间在中序遍历的基础上修改：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> minRootOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> previous</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 新增代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 左边界全部入栈</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 弹出栈顶</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -------------------开始:非递归方式的打印时机-------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // console.log(current);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">previous</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> previous</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   previous</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -------------------结束:非递归方式的打印时机-------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 指向右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 新增代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何判断一颗二叉树是完全二叉树" tabindex="-1"><a class="header-anchor" href="#如何判断一颗二叉树是完全二叉树"><span>如何判断一颗二叉树是完全二叉树</span></a></h4><p><strong>思路：</strong></p><ul><li>按宽度遍历，也就是深度优先遍历</li><li>1.任意节点，如果没有左孩子，但有右孩子。违反了完全二叉树的定义，直接 return false</li><li>2.在不违反 1 的情况下，如果遇到了一个节点，左右子树双全，或者说不满，或者简单来说，它有左无右，或无左无右 <ul><li>则后续遇到的节点必须全部是页节点。</li></ul></li><li><img src="`+W+`" alt=""></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isCBT</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // ----</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> toFindLeaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录是否发生了情况2,表示是否去找叶节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // ----</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">EnQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">DeQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 处理遍历到的节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 情况1 有右无左</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 情况2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">toFindLeaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 如果有一个节点，左右子树不双全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    toFindLeaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 则后续的节点需要全是叶节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 如果不是叶节点则返回false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // -----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">EnQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">EnQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树的递归套路【重要】【动态规划】" tabindex="-1"><a class="header-anchor" href="#二叉树的递归套路【重要】【动态规划】"><span>二叉树的递归套路【重要】【动态规划】</span></a></h3><blockquote><p>假设可以问左右子树分别获取信息，然后罗列判断条件，判断需要从左右子树获取哪些信息<br> 这种递归套路<strong>可以解决一切树型动态规划问题(面试二叉树最难题目)</strong> DP</p></blockquote><h4 id="判断一颗树是否是-avl-平衡二叉树" tabindex="-1"><a class="header-anchor" href="#判断一颗树是否是-avl-平衡二叉树"><span>判断一颗树是否是 AVL 平衡二叉树</span></a></h4><p><strong>平衡二叉树</strong>：</p><ul><li>左子树平衡</li><li>右子树平衡</li><li>左右子树的高度差不超过 1 （&lt;=1）</li><li>所以需要知道左右子树的高度信息，和其是否平衡</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> isBalanced</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isBalanced</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBalanced</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 基准情况,空节点的高度为0 且平衡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 当前树的高度为左右子树的最高高度 + 本层的高度1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 当前树平衡，要求左子树平衡，右子树平衡，左右子树高度差不超过1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> isBalanced</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBalanced</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBalanced</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> AVLTreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBalanced</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断一颗树是否是满二叉树" tabindex="-1"><a class="header-anchor" href="#判断一颗树是否是满二叉树"><span>判断一颗树是否是满二叉树</span></a></h4>`,83),Ki=s("p",null,[i("笨办法 1，遍历，先求树的最大深度 L，再求数的节点数 N，如果满足"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mi",null,"L")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"N=2^L-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9247em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"L")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),i(" 则是")],-1),Ui=a(`<p>套路法 1：</p><ul><li>需要知道左右子树是否是满树</li><li>需要知道左右子树的深度</li><li>左右子树是满树 且 左右子树的深度相同，则是满二叉树</li><li>对于空节点，认为是满是，深度为 0</li><li>如果一棵树有左无右，则左子树深度为 1，右子树深度为 0，这个树就不是</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isFullTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isFull</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> depth</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> isFull</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isFull</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isFull</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>套路法 2：</p>`,4),Gi=s("ul",null,[s("li",null,"收集左右子树的节点数和高度信息"),s("li",null,[i("如果满足"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mi",null,"L")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"N=2^L-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9247em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"L")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),i(" 则是")])],-1),Zi=a(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isFullTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 认为空树是满树</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> treeInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">treeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> treeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> depth</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> TreeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断一颗树是否是搜索二叉树" tabindex="-1"><a class="header-anchor" href="#判断一颗树是否是搜索二叉树"><span>判断一颗树是否是搜索二叉树</span></a></h4><p>搜索二叉树</p><ul><li>左树是搜索二叉树</li><li>右树是搜索二叉树</li><li>左树的最大值&lt; 根的值 &lt; 右树的最小值</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> BSTinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> contractor</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> BSTinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> BSTinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> minVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> maxVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  minVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  maxVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  minVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  maxVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBST</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> BSTinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">isBST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">minVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">maxVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="题目-2-1" tabindex="-1"><a class="header-anchor" href="#题目-2-1"><span>题目 2</span></a></h3><h3 id="找最低公共祖先" tabindex="-1"><a class="header-anchor" href="#找最低公共祖先"><span>找最低公共祖先</span></a></h3><p><img src="`+X+'" alt=""></p><blockquote><p><img src="'+$+`" alt=""><br> DE 的最低公共祖先是 B<br> EF 的最低公共祖先是 E</p></blockquote><p>我的思路：</p><ul><li>先用之前的动态规划的方式，将节点所在的路径上的节点串成链</li><li>如果 A 在 B 的链上，则 A 是公共祖先节点，反之亦然</li><li>否则遍历(其实可以直接遍历)长链上的节点，如果该节点能在短链上能找到，则该节点就是要找的节点</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findCommonFather</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">nodeA</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">nodeB</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> listA</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodeA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 假设能找到这条链</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> listB</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodeB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 假设能找到这条链</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> tempA</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listB</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> tempB</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">listA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 从最长的链上找</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">tempA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">tempB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">tempA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">tempB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> tempA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Info</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> isFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 动态规划，找到这条链</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4EC9B0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> leftInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> rightInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路 2</p><ul><li>依然是动态规划，问左右子树要答案</li><li>当前节点是要找的节点就返回当前节点</li><li>左右两边都没有找到就返回 null</li><li>左右两边任意一边找到了就返回这一边</li><li>左右两边都找到了就返回当前节点</li><li><img src="`+ss+'" alt=""></li><li><img src="'+is+`" alt=""></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findCommonFather</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">targetA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">targetB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> targetA</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> targetB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 自己就是要找的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findCommonFather</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">targetA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">targetB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resRight</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findCommonFather</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">targetA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">targetB</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">resLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resRight</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左边右边都没有找到</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">resLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左边右边都找到了，则自己就是公共节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> resRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 左边找到就返回左边，右边找到就返回右边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何找二叉树中某节点的后继节点" tabindex="-1"><a class="header-anchor" href="#如何找二叉树中某节点的后继节点"><span>如何找二叉树中某节点的后继节点</span></a></h3><p>根据定义来说，某个节点的后继就是中序遍历时该节点的下一个节点</p><p>从结构上来说，一个节点的后继就是</p><ul><li>如果这个节点有右子树，则后继就是右树上的最左节点</li><li>如果这个节点没有右子树，则其后继就要从其父节点找 <ul><li>如果这个节点是父节点的右子树，则一直往上找，</li><li>直到这个节点在父节点中是左子树，那么该节点的父节点就是后继</li><li><img src="`+as+`" alt=""></li></ul></li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> findNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> father</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">father</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  father</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> father</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉树的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#二叉树的序列化和反序列化"><span>二叉树的序列化和反序列化</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> EnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4EC9B0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> EnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> EnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> visiter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> DnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> head</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> TreeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> head</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> EnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> head</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">right</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> EnCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">visiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> head</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="纸条折痕问题-微软面试题" tabindex="-1"><a class="header-anchor" href="#纸条折痕问题-微软面试题"><span>纸条折痕问题，微软面试题</span></a></h4><p>将纸条反复对折 n 次，输出其折痕顺序</p><p><img src="`+ns+'" alt=""></p><p><img src="'+ls+`" alt=""></p><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><blockquote><p>表达图的数据结构的方式比较多，但算法都是一样的<br> 可以选一种擅长的数据结构，把算法写熟练，碰到不同的数据结构，就写一个接口，把两种数据结构对应起来，这样就可以用旧的算法解新的题</p></blockquote><h3 id="图的模板代码" tabindex="-1"><a class="header-anchor" href="#图的模板代码"><span>图的模板代码</span></a></h3><blockquote><p>图的存储方式，邻接表 邻接矩阵</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._13_图的通用模板</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 点集 其中键可以是任何数据结构，表示节点的值，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 但如果刷题，值一般是不重复的value，可以用数组来实现，会更快</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 边集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._13_图的通用模板</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 数据项，可以是int 可以是一个复杂的数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 入度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 出度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 节点的下一跳（从自己所在位置出发的目的地）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 节点的边（发出的）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> value;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._13_图的通用模板</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 权重</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> from;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> to;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> weight;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从矩阵图结构转换到模板图结构" tabindex="-1"><a class="header-anchor" href="#从矩阵图结构转换到模板图结构"><span>从矩阵图结构转换到模板图结构</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._13_图的通用模板</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> GraphCreater</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  * 将矩阵转换成Graph</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  * matrix: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  * * [fromNodeValue,toNodeValue,Weight],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  * * [fromNodeValue,toNodeValue,Weight]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  * ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Graph</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> createGraphUseMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[][]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> fromValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> matrix[i][</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> toValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> matrix[i][</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> weightVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> matrix[i][</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(fromValue)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(fromValue, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(fromValue));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toValue)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toValue, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toValue));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> fromNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(fromValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> toNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(fromNode, toNode, weightVal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   fromNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   toNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   fromNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(edge);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(edge);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> graph;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图的宽度优先遍历和宽度优先遍历" tabindex="-1"><a class="header-anchor" href="#图的宽度优先遍历和宽度优先遍历"><span>图的宽度优先遍历和宽度优先遍历</span></a></h3><blockquote><p>和二叉树的宽度有限遍历不同，二叉树没有回路，图可能有回路，算法要避免在回路中形成死循环</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._13_图的通用模板</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.LinkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> java.util.Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 从一个点出发，做宽度优先遍历</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> wideFirstOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (node </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> LinkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 深度优先，使用队列实现先进先出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 集合，遍历过的点的集合，防止重复遍历</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> next</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 依次将当前节点的下一跳加入到队列，等待遍历</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 如果没有遍历过才添加到队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 从一个点出发 深度优先遍历</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> deepFirstOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (node </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 先处理这个节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> next</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 找到一个没有遍历的节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 注册当前节点防止后续重复处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(current);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 入栈父节点，因为后续还要来遍历他的next节点，找到另一条没走过的路</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     System</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 处理当前节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">     break</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 跳出当前循环，开始处理找到的这个没有遍历过的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拓扑排序" tabindex="-1"><a class="header-anchor" href="#拓扑排序"><span>拓扑排序</span></a></h3><blockquote><p>应用：编译流程的确定,编译文件的依赖关系的图是有向图，且应当没有循环依赖，也就是没有环<br><img src="`+hs+`" alt=""></p></blockquote><p><strong>原理</strong></p><ul><li>先找到一个入度为 0 的节点 <code>{应该说，先找到所有的}</code></li><li>处理这个节点 <code>｛处理所有的节点｝</code></li><li>在图中删除这个节点，更新图中其他节点的入度</li><li>于是图中就会出现另一个入度为零的节点</li><li>循环</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> topologyOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> graph) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">inValMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录所有节点入度的hash表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">zeroinVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> LinkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;&gt;(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 入度为零的队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  List</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> LinkedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 排序结果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 先把图中所有节点遍历，添加到表中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   inValMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录所有节点的入度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    zeroinVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录入度为0的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">zeroinVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> zeroinVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 拿出队列中入度为0的节点，放入排序结果中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(current);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> next</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    inValMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">inValMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 由于一个节点的出度就是另一个节点的入度,所以更新其他节点的入度就是在原来的基础上-1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">inValMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     zeroinVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(next); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 如果更新后，入度为零，则添加到队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无向图拓扑排序" tabindex="-1"><a class="header-anchor" href="#无向图拓扑排序"><span>无向图拓扑排序</span></a></h3><p>用于生成最小生成树的算法，</p><p>最小生成树，就是保证图中的所有的点都可以<strong>直接或间接</strong>的联通 但是联通后，边的<strong>权重</strong>是最小的</p><p><img src="`+ks+`" alt=""></p><h4 id="kruskal-算法" tabindex="-1"><a class="header-anchor" href="#kruskal-算法"><span>kruskal 算法</span></a></h4><p><strong>过程</strong></p><ul><li>有一个待排序图，另创建一个空图</li><li><strong>从边的角度考虑</strong></li><li>按权重从小到大遍历所有的边</li><li>把这条边添加到空图中，但要检查并防止产生环 <ul><li>（因为形成环则表示添加的这条边后所连接的节点原先就已经能够间接的和其他部分联通了，图中的节点只需要保证间接连接）</li></ul></li></ul><p>实际上，就是根据权重从小到大依次用边来构建局部的图，新的边可能会连接两个局部的图，从而形成一个更大的图，也可能新边只是一条连接一个局部的图的内部两个节点的一条边</p><p><strong>如何判断添加边后是否形成环？</strong></p><ul><li>需要使用并查集</li><li>先将图中所有的节点各自放入单独的集合中,并最后存进 hash 表，如： [A:{A} B:{B} C:{C} D:{D}]</li><li>如果添加的一条边是[from:A,to:B] 则先检测 A:{A}中是否有 B B:{B}中是否有 A,也就是判断 AB 是否在同一个集合中</li><li>如果不在，就合并两个集合，得到：[A:{A,B} B:{A,B} C:{C} D:{D}]</li><li>如果又添加一条边[from:B,to:C] 则可得到 [A:{A,B,C} B:{A,B,C} C:{A,B,C} D:{D}]</li><li>如果又添加一条边[from:C,to:D] 则可得到 [A:{A,B,C,D} B:{A,B,C,D} C:{A,B,C,D} D:{A,B,C,D}]</li><li>但如果又添加一条边：[from:C,to:A] 则会发现，C、A 所在的集合是{A,B,C},这意味着添加这条边就会形成环，所以不能添加</li><li>至此所有的节点都联通，且没有形成环</li></ul><h4 id="简易并查集的实现" tabindex="-1"><a class="header-anchor" href="#简易并查集的实现"><span>简易并查集的实现</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> SimpleUnionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">ndoes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> ndoes) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">    Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node, set);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node, set);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> isSameSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 判断两个节点是否在同一个集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(n1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(n2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> union</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 合并两个节点所在的集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">setA</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(n1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">setB</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(n2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> setB) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    setA</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 将集合B中的节点放入集合A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node, setA);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 节点现在在集合A中，所以从新调成其指向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="k-算法的具体实现" tabindex="-1"><a class="header-anchor" href="#k-算法的具体实现"><span>K 算法的具体实现</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // KruskalMST算法实际就是在计算一个无向图要保证全联通，实际需要保留哪些边，所以返回值是边的集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> KruskalMST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> graph) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 边的集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  SimpleUnionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> unionFind</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> SimpleUnionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 简易并查集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">   // 优先级队列就是堆，这里要传递一个比较器。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> o1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> o2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> o1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> o2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// o1-o2 就是降序排序，按照权重排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  unionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 初始化简易并查集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 把所有边添加到堆中，这样堆顶就是权重最小的边</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">peek</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">unionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isSameSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 不在同一个集合中则说明添加这条边不会产生回路</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    unionFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 合并两个集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(edge);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 添加这条边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prim-算法" tabindex="-1"><a class="header-anchor" href="#prim-算法"><span>prim 算法</span></a></h4><p><img src="`+ts+`" alt=""></p><p><strong>流程</strong></p><ul><li>随便选一个节点，如 A</li><li>标记 A 为已经处理，将 A 的所有边放入堆中，然后拿出权重最低的边也就是 1</li><li>1 是链接 AC 的，A 已经处理，C 未处理，所以将 C 标记为处理，然后将 C 的所有边放入堆中，再次拿出权重最低的边，将拿到 1，但是 1 是连接 AC 的，而 AC 已经标记为处理过了，所以再次拿出一条边，这将是 4，4 连接 CF,C 处理过了，F 未处理，标记 F 为已处理，然后将 F 的边入堆，然后再次拿出权重最小的边，这将是 2</li><li>循环往复。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // prim算法是站在节点的角度考虑，返回的值是这个图生成最小生成树所需的边的集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> PrimMST</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> graph) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodeSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 用于判断是否是已经联通过的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> PriorityQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> o1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> o2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> o1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> o2</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // for循环是为了防止出现森林的情况，就是说图中存在两片独立而不联通的区域</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    nodeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 添加节点到集合中表示处理过了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 添加所有发出的边</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">     for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> heap) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 从堆中拿出权重最低的边</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nodeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 仅当目的节点未被处理时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">       nodeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">       result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(edge);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 记录这条边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">       heap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 添加该节点发出的所有边。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迪杰斯特拉算法" tabindex="-1"><a class="header-anchor" href="#迪杰斯特拉算法"><span>迪杰斯特拉算法</span></a></h3><p><img src="`+ps+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 求一个节点到图中其他节点的最短距离，</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Node, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> dijkstra</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> node) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 记录图中其他节点到node的最短距离</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">distanceMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 更新完毕的节点,已经使用最短路径到达的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">arrivedNodeSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // node 到 node 的距离是0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node, </span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 找到到node距离最小路径的节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> minNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinDistanceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(distanceMap, arrivedNodeSet);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (minNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(minNode);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 当前节点到node的距离</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> minNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 遍历该节点的边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">    Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> toNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 获取边的目的节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">     // 如果是一个新的节点，则在distanceMap中添加一条记录，距离就是distance+边的权重</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toNode, distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 更新距离，如果从node到这些节点的路径变得更短了就更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toNode, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(toNode), distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   arrivedNodeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(minNode);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 处理完毕，让下次不会被选中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   minNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinDistanceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(distanceMap, arrivedNodeSet);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> distanceMap;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 获取最短路径的节点，但排除excldeSet集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> getMinDistanceNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">HashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Node, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> distanceMap, </span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> excludeSet) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> min_distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">MAX_VALUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> min_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> distanceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">excludeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(node) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> min_distance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    min_node </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    min_distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> distance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> min_node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前缀树" tabindex="-1"><a class="header-anchor" href="#前缀树"><span>前缀树</span></a></h2><p>可以很方便的根据字符串前缀查询。</p><p><img src="`+es+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;"> 左程云算法课初级班基础知识学习笔记._14_前缀树</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> TrieTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 路径上经过该节点几次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 以该节点结尾几次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 经典写法，可以认为是26个字母26个方向、路径，子节点的指针，初始为空</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // HashMap&lt;Character,Node&gt; nexts = new HashMap&lt;Character,Node&gt;(); //</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">  // 如果字符不止26个可以用hashMap、HashSet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 根节点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 插入一个字符串记录，即使是空串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> chars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 如果路径不存在则新建</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction].</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 经过此节点的串的个数++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   current </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 跳到下一个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 结尾</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 删除字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(string) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">   Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> chars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">    current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction].</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction].</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">     current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 直接丢弃后续的节点引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">    current </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 跳到下一个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 字符串结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 查询一个字符串插入了几次，包括空串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> root;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> chars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 查到一半路没了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   current </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 以此节点为截止的字符串个数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;"> // 查询以【perfix】开头的字符串的个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> searchPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#4EC9B0;">  Node</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> root;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4EC9B0;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> chars[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction] </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">    // 查到一半路没了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">   current </span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">nexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[direction];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pass</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 经过此节点的串的个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><p><img src="`+Es+'" alt=""></p><h3 id="解题套路" tabindex="-1"><a class="header-anchor" href="#解题套路"><span>解题套路</span></a></h3><p><img src="'+rs+'" alt=""></p><p><img src="'+ds+'" alt=""></p><h3 id="题目-1-1" tabindex="-1"><a class="header-anchor" href="#题目-1-1"><span>题目 1</span></a></h3><p><img src="'+gs+'" alt=""></p><blockquote><p><strong>思路</strong></p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 按会议开始时间排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 按会议时间长短排序</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 按会议结束时间排序</label><ul><li>【因为实际上会议结束时间早的，开始时间也早，会议持续时间也短。】</li></ul></li></ul></blockquote><p><img src="'+ys+'" alt=""> <img src="'+Ds+'" alt=""></p><h3 id="题目-2-2" tabindex="-1"><a class="header-anchor" href="#题目-2-2"><span>题目 2</span></a></h3><p><img src="'+Cs+'" alt=""> <img src="'+cs+'" alt=""></p><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3"><span>题目 3</span></a></h3><p><img src="'+ms+'" alt=""></p><p><strong>思路</strong></p><ul><li>先将所有项目根据成本放入小根堆，</li><li>在小根堆中弹出所有当前能够投资的项目，根据利润放入另一大根堆。</li><li>大根堆堆顶，就是当前能够投资且利润最高的项目。</li><li>说白了，就是打怪升级的思路，先找出能打得过的怪物</li><li>再从能打的过的怪物中找出经验值（回报）最高的怪物</li></ul><p><img src="'+us+'" alt=""></p><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4"><span>题目 4</span></a></h3><p><img src="'+As+'" alt=""></p><blockquote><p><strong>思路</strong></p><ul><li>用暴力递归，按行落子，每次落一个子，落子前检查落子是否合法，如是否共列，共斜线</li></ul></blockquote><p><img src="'+vs+'" alt=""></p><p><img src="'+os+'" alt=""></p><p><img src="'+bs+'" alt=""></p><p><img src="'+Fs+'" alt=""></p><p><strong>使用位运算优化版本</strong></p><p><img src="'+Bs+'" alt=""></p><p><img src="'+fs+'" alt=""></p><h2 id="暴力递归【动态规划的基础】" tabindex="-1"><a class="header-anchor" href="#暴力递归【动态规划的基础】"><span>暴力递归【动态规划的基础】</span></a></h2><p><img src="'+xs+'" alt=""></p><h3 id="汉诺塔问题" tabindex="-1"><a class="header-anchor" href="#汉诺塔问题"><span>汉诺塔问题</span></a></h3><p><img src="'+ws+'" alt=""></p><p>要把一堆圆盘从 from 移动到 to,首先要把最上面的 n-1 个圆盘移动到 other,然后才能把最底下的圆盘移动到 to,然后就可以把 other 上的圆盘移到 to 上。 在这个过程中，把 n-1 个圆盘移动到 other 也是相同的操作，但是对于 n-1 个圆盘来说，他的 from、to、other 便不一定是原来的了，而是：from&#39; = 原 from;to&#39; = 原 other;other = 原 to,</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> hannuota</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">other</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">`move </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> from </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  hannuota</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">other</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 先把之上的圆盘全部移到other</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">`move </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> from </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#569CD6;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 再把最底下的最大的圆盘移到目标位置to上</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">  hannuota</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">other</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 再把暂时放在other上的圆盘放到to上</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打印输出字符串所有子串" tabindex="-1"><a class="header-anchor" href="#打印输出字符串所有子串"><span>打印输出字符串所有子串</span></a></h3><p><strong>思路</strong></p><ul><li>遍历字符串的所有字符</li><li>对于任何一个字符，都给出包含和不包含的两条路径</li><li>最终会形成一个完全二叉树</li></ul><p><img src="'+_s+'" alt=""></p><p>更省空间的算法</p><p><img src="'+Ns+'" alt=""></p><h3 id="打印字符串的全排列" tabindex="-1"><a class="header-anchor" href="#打印字符串的全排列"><span>打印字符串的全排列</span></a></h3><p><img src="'+Ms+`" alt=""></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;"> pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pos</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">  result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> doneSet</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#4EC9B0;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#9CDCFE;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C586C0;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">doneSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">])){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">   doneSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">]);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">// 防止重复</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pos</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">   exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">chars</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#9CDCFE;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纸牌游戏" tabindex="-1"><a class="header-anchor" href="#纸牌游戏"><span>纸牌游戏</span></a></h3><p><img src="`+js+'" alt=""></p><p><img src="'+Os+'" alt=""></p><h3 id="逆序栈" tabindex="-1"><a class="header-anchor" href="#逆序栈"><span>逆序栈</span></a></h3><p><img src="'+Ss+'" alt=""></p><p><img src="'+Ls+'" alt=""></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#E6E6E6;--shiki-light-bg:#fff;--shiki-dark-bg:#222222;"><pre class="shiki shiki-themes github-light slack-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> reverseStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">targetPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#9CDCFE;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E6E6E6;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="字符串转换问题" tabindex="-1"><a class="header-anchor" href="#字符串转换问题"><span>字符串转换问题</span></a></h3><p><img src="'+Ts+'" alt=""></p><p><img src="'+zs+'" alt=""></p><h3 id="背包问题" tabindex="-1"><a class="header-anchor" href="#背包问题"><span>背包问题</span></a></h3><p><img src="'+Is+'" alt=""></p><p><img src="'+qs+'" alt=""></p>',123),Ji=[Hs,Ps,Rs,Qs,Ks,Us,Gs,Zs,Js,Ys,Ws,Xs,$s,si,ii,ai,ni,li,hi,ki,ti,pi,ei,Ei,ri,di,gi,yi,Di,Ci,ci,mi,ui,Ai,vi,oi,bi,Fi,Bi,fi,xi,wi,_i,Ni,Mi,ji,Oi,Si,Li,Ti,zi,Ii,qi,Vi,Hi,Pi,Ri,Qi,Ki,Ui,Gi,Zi];function Yi(Wi,Xi){return h(),l("div",null,Ji)}const sa=n(Vs,[["render",Yi],["__file","左程云算法课【初级班】学习笔记.html.vue"]]),ia=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"左程云算法课【初级班】学习笔记","lang":"zh-CN","frontmatter":{"date":"2023-01-24T00:00:00.000Z","title":"左程云算法课【初级班】学习笔记","cover":"./cover/default_cover.jpg","tag":["JAVA","算法","学习笔记"],"category":"算法","star":true,"description":"左程云算法课【初级班】学习笔记 目录 左程云算法课【初级班】学习笔记 目录 [0]算法好坏的度量 [1]选择排序 [2]冒泡排序 [3]异或 概念 性质 作用 案例 存在问题 例题 [4]插入排序 [5]二分查找 查找某个数 查找>=num 的第一个数 局部最小值 [6]对数器 [7]递归 递归概念 [9]归并排序 小和问题 逆序对问题 [10]快速排...","head":[["meta",{"property":"og:url","content":"https://dingdingdang.online/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E3%80%90%E5%88%9D%E7%BA%A7%E7%8F%AD%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"YiguiDing的Blog小站"}],["meta",{"property":"og:title","content":"左程云算法课【初级班】学习笔记"}],["meta",{"property":"og:description","content":"左程云算法课【初级班】学习笔记 目录 左程云算法课【初级班】学习笔记 目录 [0]算法好坏的度量 [1]选择排序 [2]冒泡排序 [3]异或 概念 性质 作用 案例 存在问题 例题 [4]插入排序 [5]二分查找 查找某个数 查找>=num 的第一个数 局部最小值 [6]对数器 [7]递归 递归概念 [9]归并排序 小和问题 逆序对问题 [10]快速排..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T22:25:18.000Z"}],["meta",{"property":"article:author","content":"丁毅桂"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T22:25:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"左程云算法课【初级班】学习笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T22:25:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"丁毅桂\\",\\"email\\":\\"2449695354@qq.com\\"}]}"],["meta",{"name":"baidu-site-verification","content":"codeva-PwE9Ts6nMl"}]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"[0]算法好坏的度量","slug":"_0-算法好坏的度量","link":"#_0-算法好坏的度量","children":[]},{"level":2,"title":"[1]选择排序","slug":"_1-选择排序","link":"#_1-选择排序","children":[]},{"level":2,"title":"[2]冒泡排序","slug":"_2-冒泡排序","link":"#_2-冒泡排序","children":[]},{"level":2,"title":"[3]异或","slug":"_3-异或","link":"#_3-异或","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"性质","slug":"性质","link":"#性质","children":[]},{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"存在问题","slug":"存在问题","link":"#存在问题","children":[]},{"level":3,"title":"例题","slug":"例题","link":"#例题","children":[]}]},{"level":2,"title":"[4]插入排序","slug":"_4-插入排序","link":"#_4-插入排序","children":[]},{"level":2,"title":"[5]二分查找","slug":"_5-二分查找","link":"#_5-二分查找","children":[{"level":3,"title":"查找某个数","slug":"查找某个数","link":"#查找某个数","children":[]},{"level":3,"title":"查找>=num 的第一个数","slug":"查找-num-的第一个数","link":"#查找-num-的第一个数","children":[]},{"level":3,"title":"局部最小值","slug":"局部最小值","link":"#局部最小值","children":[]}]},{"level":2,"title":"[6]对数器","slug":"_6-对数器","link":"#_6-对数器","children":[]},{"level":2,"title":"[7]递归","slug":"_7-递归","link":"#_7-递归","children":[{"level":3,"title":"递归概念","slug":"递归概念","link":"#递归概念","children":[]},{"level":3,"title":"[9]归并排序","slug":"_9-归并排序","link":"#_9-归并排序","children":[]},{"level":3,"title":"[10]快速排序","slug":"_10-快速排序","link":"#_10-快速排序","children":[]}]},{"level":2,"title":"[11]堆","slug":"_11-堆","link":"#_11-堆","children":[{"level":3,"title":"[11.1]堆的数据结构","slug":"_11-1-堆的数据结构","link":"#_11-1-堆的数据结构","children":[]},{"level":3,"title":"[11.2]堆排序","slug":"_11-2-堆排序","link":"#_11-2-堆排序","children":[]},{"level":3,"title":"java 内置堆：优先级队列","slug":"java-内置堆-优先级队列","link":"#java-内置堆-优先级队列","children":[]},{"level":3,"title":"系统内置了现成的数据结构为什么还要自己手写实现？","slug":"系统内置了现成的数据结构为什么还要自己手写实现","link":"#系统内置了现成的数据结构为什么还要自己手写实现","children":[]},{"level":3,"title":"例题","slug":"例题-1","link":"#例题-1","children":[]}]},{"level":2,"title":"基于比较的排序总结","slug":"基于比较的排序总结","link":"#基于比较的排序总结","children":[]},{"level":2,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":2,"title":"基数排序","slug":"基数排序","link":"#基数排序","children":[]},{"level":2,"title":"排序算法稳定性","slug":"排序算法稳定性","link":"#排序算法稳定性","children":[]},{"level":2,"title":"排序总结","slug":"排序总结","link":"#排序总结","children":[]},{"level":2,"title":"hash 表和有序表概述","slug":"hash-表和有序表概述","link":"#hash-表和有序表概述","children":[{"level":3,"title":"hash 表","slug":"hash-表","link":"#hash-表","children":[]},{"level":3,"title":"有序表","slug":"有序表","link":"#有序表","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":3,"title":"面试时链表解题方法论","slug":"面试时链表解题方法论","link":"#面试时链表解题方法论","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"什么是二叉树递归遍历","slug":"什么是二叉树递归遍历","link":"#什么是二叉树递归遍历","children":[]},{"level":3,"title":"二叉树的非递归遍历","slug":"二叉树的非递归遍历","link":"#二叉树的非递归遍历","children":[]},{"level":3,"title":"题目 1","slug":"题目-1","link":"#题目-1","children":[]},{"level":3,"title":"题目 2","slug":"题目-2","link":"#题目-2","children":[]},{"level":3,"title":"二叉树的递归套路【重要】【动态规划】","slug":"二叉树的递归套路【重要】【动态规划】","link":"#二叉树的递归套路【重要】【动态规划】","children":[]},{"level":3,"title":"题目 2","slug":"题目-2-1","link":"#题目-2-1","children":[]},{"level":3,"title":"找最低公共祖先","slug":"找最低公共祖先","link":"#找最低公共祖先","children":[]},{"level":3,"title":"如何找二叉树中某节点的后继节点","slug":"如何找二叉树中某节点的后继节点","link":"#如何找二叉树中某节点的后继节点","children":[]}]},{"level":2,"title":"图","slug":"图","link":"#图","children":[{"level":3,"title":"图的模板代码","slug":"图的模板代码","link":"#图的模板代码","children":[]},{"level":3,"title":"从矩阵图结构转换到模板图结构","slug":"从矩阵图结构转换到模板图结构","link":"#从矩阵图结构转换到模板图结构","children":[]},{"level":3,"title":"图的宽度优先遍历和宽度优先遍历","slug":"图的宽度优先遍历和宽度优先遍历","link":"#图的宽度优先遍历和宽度优先遍历","children":[]},{"level":3,"title":"拓扑排序","slug":"拓扑排序","link":"#拓扑排序","children":[]},{"level":3,"title":"无向图拓扑排序","slug":"无向图拓扑排序","link":"#无向图拓扑排序","children":[]},{"level":3,"title":"迪杰斯特拉算法","slug":"迪杰斯特拉算法","link":"#迪杰斯特拉算法","children":[]}]},{"level":2,"title":"前缀树","slug":"前缀树","link":"#前缀树","children":[]},{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[{"level":3,"title":"解题套路","slug":"解题套路","link":"#解题套路","children":[]},{"level":3,"title":"题目 1","slug":"题目-1-1","link":"#题目-1-1","children":[]},{"level":3,"title":"题目 2","slug":"题目-2-2","link":"#题目-2-2","children":[]},{"level":3,"title":"题目 3","slug":"题目-3","link":"#题目-3","children":[]},{"level":3,"title":"题目 4","slug":"题目-4","link":"#题目-4","children":[]}]},{"level":2,"title":"暴力递归【动态规划的基础】","slug":"暴力递归【动态规划的基础】","link":"#暴力递归【动态规划的基础】","children":[{"level":3,"title":"汉诺塔问题","slug":"汉诺塔问题","link":"#汉诺塔问题","children":[]},{"level":3,"title":"打印输出字符串所有子串","slug":"打印输出字符串所有子串","link":"#打印输出字符串所有子串","children":[]},{"level":3,"title":"打印字符串的全排列","slug":"打印字符串的全排列","link":"#打印字符串的全排列","children":[]},{"level":3,"title":"纸牌游戏","slug":"纸牌游戏","link":"#纸牌游戏","children":[]},{"level":3,"title":"逆序栈","slug":"逆序栈","link":"#逆序栈","children":[]},{"level":3,"title":"字符串转换问题","slug":"字符串转换问题","link":"#字符串转换问题","children":[]},{"level":3,"title":"背包问题","slug":"背包问题","link":"#背包问题","children":[]}]}],"git":{"createdTime":1700226391000,"updatedTime":1721773518000,"contributors":[{"name":"YiguiDing","email":"2449695354@qq.com","commits":3}]},"readingTime":{"minutes":74.44,"words":22332},"filePathRelative":"算法/左程云算法课【初级班】学习笔记/左程云算法课【初级班】学习笔记.md","localizedDate":"2023年1月24日","excerpt":"","autoDesc":true}');export{sa as comp,ia as data};
