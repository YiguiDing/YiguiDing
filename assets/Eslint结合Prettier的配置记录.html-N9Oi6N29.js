import{_ as n,o as s,c as a,e as t}from"./app-wP8tXOXN.js";const e={},p=t(`<h1 id="eslint-结合-prettier-的配置记录" tabindex="-1"><a class="header-anchor" href="#eslint-结合-prettier-的配置记录" aria-hidden="true">#</a> Eslint 结合 Prettier 的配置记录</h1><p>这篇笔记是在学习解决 ESLint 与 Prettier 的冲突的过程中，边学边总结写成的，笔记简要回顾了下 Prettier 和 ESLint 的安装和配置，重点记录了两个工具的冲突解决原理和配置方法。</p><h2 id="prettier-和-eslint-简介" tabindex="-1"><a class="header-anchor" href="#prettier-和-eslint-简介" aria-hidden="true">#</a> Prettier 和 ESLint 简介</h2><blockquote><p><strong>精简版</strong><br> Prettier: 代码格式化的工具，美化代码，好看<br> ESLint：代码质量检测、编码风格约束，好用</p></blockquote><p><strong>废话版</strong><br> Prettier 只关注格式化，并不具有 ESLint 检查语法等能力。它通过解析代码并匹配自己的一套规则，来强制执行一致的代码展示格式。</p><p>ESLint 是一个在 JavaScript 代码中通过规则模式匹配作代码识别和报告的插件化的检测工具，它的目的是保证代码规范的一致性和及时发现代码问题、提前避免错误发生。<br> ESLint 的关注点是代码质量，检查代码风格并且会提示不符合风格规范的代码。除此之外 ESLint 也具有一部分代码格式化的功能。</p><h2 id="prettier-安装和配置" tabindex="-1"><a class="header-anchor" href="#prettier-安装和配置" aria-hidden="true">#</a> Prettier 安装和配置</h2><p><strong>安装</strong><br> 这个东西其实没啥好讲的，以 VSCode 为例，总结起来就是，首先安装 prettier-vscode 插件 然后在 setting.json 中配置使得 prettier-vscode 插件为默认的代码格式化工具，这样在按下快捷键后，代码将自动格式化。</p><p><code>值得注意的是</code>，根据插件的 readme 文件，尽管 prettier-vscode 插件捆绑了 prettier，但 prettier-vscode 插件推荐在项目使用 npm 安装 prettier 为项目的本地依赖，可能是考虑到 prettier 版本差异的会导致不同的格式化结果的原因。</p><blockquote><p>npm install prettier -D</p></blockquote><p>当然插件也能使用安装在全局的 prettier,但需要配置，详细看该插件的 readme。</p><blockquote><p>This extension will use prettier from your project&#39;s local dependencies (recommended). When the prettier.resolveGlobalModules is set to true the extension can also attempt to resolve global modules. Should prettier not be installed locally with your project&#39;s dependencies or globally on the machine, the version of prettier that is bundled with the extension will be used.</p></blockquote><p><strong>配置</strong><br> 首先要理清 prettier-vscode 和 prettier 的关系，prettier-vscode 是 vscode 的插件，在将 prettier-vscode 配置为 vscode 的默认的代码格式化工具后， 当在 vscode 中按下代码格式化的快捷键时，vscode 会找到 prettier-vscode 插件 使用该插件进行代码格式化 而 prettier-vscode 又会去找到 prettier , 让 prettier 来做代码格式化 而 prettier 在做代码格式化时，需要知道代码格式化的规则，项目根目录下的 .prettierrc 文件就是记录这个规则的文件。</p><p><strong>画了个图</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>vscode
 | =找插件=&gt; prettier-vscode
 |    | =找处理程序=&gt; prettier
 |    |     | =找配置文件=&gt; .prettierrc
 |    |     | =&gt; 处理程序得到格式化后的代码
 |    | =&gt; 插件得到格式化后的代码
 | =&gt; vscode得到格式化后的代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vscode 的插件 prettier-vscode 的加持下，以下配置文件按优先级作用</p><ol><li>Prettier 的配置文件</li><li>.editorconfig</li><li>vscode 的配置文件 (前两个文件存在，则忽略该文件)</li></ol><p><strong>Prettier 配置文件</strong><br> 其配置文件名称为.prettierrc.js 后缀名可不同</p><p>示例及说明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//.prettierrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 使用 2 个缩进</span>
  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用Tab缩进符</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token comment">// 一行最多字符</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 行尾需要分号</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 使用双引号</span>
  <span class="token literal-property property">quoteProps</span><span class="token operator">:</span> <span class="token string">&quot;as-needed&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 对象的 key 仅在必要时用引号</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 末尾不需要逗号</span>
  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 大括号内的首尾需要空格</span>
  <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">&quot;crlf&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 换行使用windows的换行符号</span>
  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">&quot;avoid&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 箭头函数，只有一个参数的时候，不需要括号</span>
  <span class="token literal-property property">rangeStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 每个文件格式化的范围是文件的全部内容</span>
  <span class="token literal-property property">rangeEnd</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token comment">// 每个文件格式化的范围是文件的全部内容</span>
  <span class="token literal-property property">proseWrap</span><span class="token operator">:</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 使用默认的折行标准</span>
  <span class="token comment">// requirePragma: false, // 不需要写文件开头的 @prettier</span>
  <span class="token comment">// insertPragma: false, // 不需要自动在文件开头插入 @prettier</span>
  <span class="token comment">// jsxSingleQuote: false,// jsx 不使用单引号，而使用双引号</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eslint-安装和配置" tabindex="-1"><a class="header-anchor" href="#eslint-安装和配置" aria-hidden="true">#</a> ESLint 安装和配置</h2><p><strong>安装</strong><br> 也是首先在 vscode 中安装 vscode-ESLint 插件,但与 prettier-vscode 插件不同的是， vscode-ESLint 插件自身不携带 ESLint 这个库,需要在项目中安装 eslint 依赖或是将其安装在全局</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> eslint <span class="token parameter variable">-D</span>
<span class="token function">npm</span> <span class="token function">install</span> eslint <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn&#39;t provide one the extension looks for a global install version. If you haven&#39;t installed ESLint either locally or globally do so by running npm install eslint in the workspace folder for a local install or npm install -g eslint for a global install.</p></blockquote><p><strong>配置</strong></p><p>可以使用命令行工具通过回答问题的方式生成配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>eslint <span class="token parameter variable">--init</span> <span class="token comment"># 全局安装eslint后执行该命令初始化</span>
./node_modules/.bin/eslint <span class="token parameter variable">--init</span> <span class="token comment"># 本地安装则执行这个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是生成好的，配置了支持 typescript，换行符，行尾是否有分号，没啥好讲的，傻瓜式生成。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;es2021&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;linebreak-style&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;quotes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="笔记重点-eslint-与-prettier-冲突的解决" tabindex="-1"><a class="header-anchor" href="#笔记重点-eslint-与-prettier-冲突的解决" aria-hidden="true">#</a> 笔记重点：ESLint 与 Prettier 冲突的解决</h2><p>在代码格式化时采用 Perttier 规则，而我们代码校验使用的是 ESLint，如果同一个规则配置不一致，往往就会出现冲突问题；</p><p>比如：字符串单、双引号的配置，eslint fix 后把字符串变成单引号，再次编辑文件后，保存（Prettier）自动格式化后却又变成双引号，导致代码校验异常。</p><p>解决方式一：要么修改 eslintrc，要么修改 prettierrc 配置，让它们配置保持一致；</p><p>解决方式二：</p><ul><li><ol><li>使用 Prettier 格式化代码后 ESLint 报错，那么就禁用 ESLint 中所有与格式化相关的规则</li></ol><ul><li>(使用库：eslint-config-prettier)</li></ul></li><li><ol start="2"><li>把 Prettier 的代码格式化配置 注册到 ESLint 中，这样 ESLint 就会识别报告代码中与 Prettier 配置格式不一致的错误，同时也能修复它</li></ol><ul><li>(使用库：eslint-plugin-prettier)</li><li>该库的 readme 自述：<code>将 Prettier 作为 ESLint 规则运行，并将差异报告为单个 ESLint 问题。</code></li></ul></li></ul><h3 id="安装、注册、配置插件-eslint-plugin-prettier" tabindex="-1"><a class="header-anchor" href="#安装、注册、配置插件-eslint-plugin-prettier" aria-hidden="true">#</a> 安装、注册、配置插件：eslint-plugin-prettier</h3><p>该插件用于将 Prettier 中配置的规则添加到 ESLint 中，这样不符合 Prettier 格式的代码 ESLint 就能识别报错和纠正</p><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-plugin-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注册和配置插件</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ESLint的配置文件</span>
<span class="token comment">// .eslintrc.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 注册插件： eslint-plugin-prettier 这样Prettier中的规则就注册到了ESLint中</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span> <span class="token comment">// 配置插件：报告代码中和Prettier规则不一致的错误</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装、注册、配置插件-eslint-config-prettier" tabindex="-1"><a class="header-anchor" href="#安装、注册、配置插件-eslint-config-prettier" aria-hidden="true">#</a> 安装、注册、配置插件：eslint-config-prettier</h3><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-config-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// .eslintrc.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;...其他配置放在之前&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:prettier/recommended&quot;</span> <span class="token comment">// 这一行代码实际等效于下面的几行代码</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上面代码等效下列代码</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 启用来自 eslint-config-prettier 的配置文件，这将关闭一些导致冲突的规则</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 注册来自 eslint-plugin-prettier 的插件 这将把prettier的配置添加到eslint中</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 提示插件检测出的错误</span>
    <span class="token property">&quot;arrow-body-style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 关闭箭头函数的规则</span>
    <span class="token property">&quot;prefer-arrow-callback&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span> <span class="token comment">// 关闭箭头函数的规则</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>第二个库的配置项包含了如何配置第一个库，所以只需要安装上述两个库，然后配置一行代码，或者直接使用上面的等效代码</p><p><strong>配置</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// .eslintrc.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;...其他配置放在之前&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="当前使用的配置文件和依赖" tabindex="-1"><a class="header-anchor" href="#当前使用的配置文件和依赖" aria-hidden="true">#</a> 当前使用的配置文件和依赖</h2><p><strong>当前使用的配置文件</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;es2021&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;linebreak-style&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;quotes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;warn&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>依赖</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.9.4&quot;</span><span class="token punctuation">,</span> <span class="token comment">//ts</span>
    <span class="token property">&quot;@typescript-eslint/eslint-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.48.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">//插件</span>
    <span class="token property">&quot;@typescript-eslint/parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.48.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">//语法分析器</span>
    <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.31.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">// eslint</span>
    <span class="token property">&quot;eslint-config-prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.6.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置，用于关闭eslint中和prettier的配置</span>
    <span class="token property">&quot;eslint-plugin-prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.2.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件，用于将prettier的配置附加到eslint中</span>
    <span class="token property">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.8.1&quot;</span> <span class="token comment">// 代码格式化</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>缺点很明显，因为始终是在使用 prettier 来做代码格式化，修改 ESLint 的配置文件并不能改变 prettier 的格式化规则，这是在让 ESLint 去迎合 prettier 的配置规则，这就导致在某些配置上，你可能需要让 ESLint 来检测某些错误，并自动修复它，但是当你按下保存时，prettier 又去自动格式化代码，格式化后的代码导致了 ESLint 报错，除非修改 prettier 的代码格式化规则，否则这是不可避免的。</p>`,59),o=[p];function i(r,l){return s(),a("div",null,o)}const u=n(e,[["render",i],["__file","Eslint结合Prettier的配置记录.html.vue"]]);export{u as default};
