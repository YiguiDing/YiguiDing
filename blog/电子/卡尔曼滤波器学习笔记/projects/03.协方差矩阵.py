import numpy as np
print(np.__version__) # 2.1.3

#####################################################################################
####################################### 方法1 #######################################
#####################################################################################
# 协方差
def covariance(x, y):
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    return np.sum((x-x_mean)*(y-y_mean))/(len(x))

# 协方差矩阵
def covariance_matrix1(x, y, z):
    return np.matrix([[covariance(x, x), covariance(x, y), covariance(x, z)],
                      [covariance(y, x), covariance(y, y), covariance(y, z)],
                      [covariance(z, x), covariance(z, y), covariance(z, z)]])


height = [179,187,175,170,185,177,178,187,190,178,170,183,184,180,180]
weight = [74,80,71,72,81,75,71,83,94,73,68,73,78,75,76]
age = [33,31,28,33,32,28,30,35,27,21,29,23,31,24,20]

print(covariance_matrix1(height, weight, age))
"""
输出:
[[32.69333333 29.74666667  1.4       ]
 [29.74666667 38.06222222  3.97777778]
 [ 1.4         3.97777778 19.42222222]]
"""

#####################################################################################
####################################### 方法2 #######################################
#####################################################################################
# 计算过渡矩阵
def A(x,y,z):
    m = np.matrix([x,y,z]).T
    return m - np.mean(m, axis=0) # axis=0 表示沿着矩阵的列方向计算均值，即对每一列的所有元素求平均值。

# 利用过渡矩阵计算协方差矩阵
def covariance_matrix2(x, y, z):
    a = A(x,y,z)
    return np.dot(a.T, a)/len(x)

print(covariance_matrix2(height, weight, age))
"""
输出:
[[32.69333333 29.74666667  1.4       ]
 [29.74666667 38.06222222  3.97777778]
 [ 1.4         3.97777778 19.42222222]]
"""