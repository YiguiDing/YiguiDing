{"shortInfo":{"title":"jsWebApis学习笔记之BOM","date":"2022-07-03T16:19:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["JavaScript","WebApis","BOM","DOM","前端"],"hideAtIndex":true,"categories":"笔记","id":24,"countWords":2629,"readSeconds":262.9,"assetsbaseUrl":"/self_server/assets/"},"content":"# jsWebApis学习笔记之BOM\r\n\r\n## 目录\r\n- [jsWebApis学习笔记之BOM](#jswebapis学习笔记之bom)\r\n  - [目录](#目录)\r\n  - [概述](#概述)\r\n  - [window对象构成：](#window对象构成)\r\n  - [window对象事件](#window对象事件)\r\n  - [定时器](#定时器)\r\n    - [倒计时案例](#倒计时案例)\r\n    - [发送短信按钮案例](#发送短信按钮案例)\r\n  - [this指向问题](#this指向问题)\r\n  - [js执行机制](#js执行机制)\r\n    - [原来存在的问题](#原来存在的问题)\r\n    - [新标准](#新标准)\r\n  - [window的location对象](#window的location对象)\r\n    - [URL](#url)\r\n  - [window.navigator对象](#windownavigator对象)\r\n  - [window.history对象](#windowhistory对象)\r\n\r\n## 概述\r\n* BOM(Browser Object Model浏览器对象模型)\r\n* 提供了**与浏览器窗口进行交互的对象**，\r\n* 核心对象是`window`\r\n* **BOM最初是Netscape浏览器标准的一部分**\r\n* BOM是浏览器厂商在各自浏览器上定义的，兼容性差\r\n    * alert() 在不同的浏览器有不同的外观\r\n\r\n## window对象构成：\r\n* **DOM是BOM的一部分**\r\n![](./images/jsWebApis学习笔记之BOM/2022-07-07-07-45-10.png)\r\n\r\n* window对象是浏览器**顶级对象**，有双重角色\r\n    * 它是**js访问浏览器窗口的API**\r\n    * 它是全局对象，**定义在全局作用域的变量函数都会变成window对象的属性和方法**\r\n    * **在调用时可以省略`window.`**\r\n        * `window.alert()`  和  `alert()` \r\n        * `window.prompt()`  和  `prompt()`\r\n\r\n## window对象事件\r\n* `window.onload`是窗口（页面）加载事件，**当文档内容（图像，脚本，CSS等）完全加载完毕后触发**\r\n    <script>\r\n    //通过window.onload事件，可以把js代码写在元素代码之前\r\n    window.addEventListener(\"load\",function(){\r\n        var demoButtonwoefjwe93 = document.querySelector(\"#demoButtonwoefjwe93\")\r\n        demoButtonwoefjwe93.addEventListener(\"click\",function(){\r\n        window.alert(\"页面加载完毕：点击了按钮\")\r\n        })\r\n    })\r\n    </script>\r\n    <button id=\"demoButtonwoefjwe93\">测试</button>\r\n\r\n    ```html\r\n    <script>\r\n    //通过window.onload事件，可以把js代码写在元素代码之前\r\n    window.addEventListener(\"load\",function(){\r\n        var demoButtonwoefjwe93 = document.querySelector(\"#demoButtonwoefjwe93\")\r\n        demoButtonwoefjwe93.addEventListener(\"click\",function(){\r\n        window.alert(\"页面加载完毕：点击了按钮\")\r\n        })\r\n    })\r\n    </script>\r\n    <button id=\"demoButtonwoefjwe93\">测试</button>\r\n    ```\r\n\r\n* `window.onDOMContentLiaded` **DOM内容（html元素）加载完毕后触发的事件**，在CSS、图片 flash加载前触发，如果页面中图片很多，那么onload事件触发就要等很久，而该事件就不用\r\n\r\n* `window.onresize` 浏览器窗口调整后触发的事件，常配合`window.innerWidth`属性来做响应式布局\r\n\r\n\r\n\r\n## 定时器\r\n* `window.setTimeout(回调函数,[延迟毫秒数])` 用来延迟执行某个函数 **先延迟后执行**\r\n    * 回调函数的几种写法\r\n        * 匿名函数\r\n        * 函数名\r\n        * '函数名()'\r\n    * 延迟毫秒数不填默认为0\r\n    * 返回值，定时器ID\r\n    * `window.clearTimeout(定时器ID)`清除定时器\r\n* `window.setInterval(回调函数,[延迟毫秒数])` 用来**循环**延迟执行某个函数 **先延迟后执行**\r\n    * `window.clearInterval(定时器ID)`清除定时器\r\n\r\n### 倒计时案例\r\n\r\n<div id=\"demoJOIJE123\">\r\n    <span id=\"hh\">00</span>\r\n    <span id=\"mm\">00</span>\r\n    <span id=\"ss\">00</span>\r\n</div>\r\n<style>\r\n    #demoJOIJE123 span{\r\n        display: inline-block;\r\n        margin: 0 5px;\r\n        width: 50px;\r\n        height: 50px;\r\n        background-color: black;\r\n        color: white;\r\n        font-size: 40px;\r\n        line-height: 50px;        \r\n        text-align: center;\r\n    }\r\n</style>\r\n<script>\r\n    var hh=document.querySelector(\"#hh\")\r\n    var mm=document.querySelector(\"#mm\")\r\n    var ss=document.querySelector(\"#ss\")\r\n    var targetTime =+new Date(\"9922-07-04T04:45:00\")//设置目标时间\r\n    updateTime()//防止刷新页面后要等1秒才更新倒计时\r\n    var timeDown = setInterval(updateTime,1000)\r\n    function updateTime(){\r\n        var now =+new Date();\r\n        var gap = targetTime - now;\r\n        if(gap<0)\r\n        {\r\n            gap = 0;//防止出现负号\r\n            clearInterval(timeDown)\r\n        }\r\n        var h = parseInt(gap/1000/60/60%24)\r\n        var m = parseInt(gap/1000/60%60)\r\n        var s = parseInt(gap/1000%60)\r\n        h = h<10? \"0\"+h:h\r\n        m = m<10? \"0\"+m:m\r\n        s = s<10? \"0\"+s:s\r\n        hh.innerText=h\r\n        mm.innerText=m\r\n        ss.innerText=s\r\n    }\r\n</script>\r\n\r\n\r\n```html\r\n<div id=\"demoJOIJE123\">\r\n    <span id=\"hh\">00</span>\r\n    <span id=\"mm\">00</span>\r\n    <span id=\"ss\">00</span>\r\n</div>\r\n<style>\r\n    #demoJOIJE123 span{\r\n        display: inline-block;\r\n        margin: 0 5px;\r\n        width: 50px;\r\n        height: 50px;\r\n        background-color: black;\r\n        color: white;\r\n        font-size: 40px;\r\n        line-height: 50px;        \r\n        text-align: center;\r\n    }\r\n</style>\r\n<script>\r\n    var hh=document.querySelector(\"#hh\")\r\n    var mm=document.querySelector(\"#mm\")\r\n    var ss=document.querySelector(\"#ss\")\r\n    var targetTime =+new Date(\"9922-07-04T04:45:00\")//设置目标时间\r\n    updateTime()//防止刷新页面后要等1秒才更新倒计时\r\n    var timeDown = setInterval(updateTime,1000)\r\n    function updateTime(){\r\n        var now =+new Date();\r\n        var gap = targetTime - now;\r\n        if(gap<0)\r\n        {\r\n            gap = 0;//防止出现负号\r\n            clearInterval(timeDown)\r\n        }\r\n        var h = parseInt(gap/1000/60/60%24)\r\n        var m = parseInt(gap/1000/60%60)\r\n        var s = parseInt(gap/1000%60)\r\n        h = h<10? \"0\"+h:h\r\n        m = m<10? \"0\"+m:m\r\n        s = s<10? \"0\"+s:s\r\n        hh.innerText=h\r\n        mm.innerText=m\r\n        ss.innerText=s\r\n    }\r\n</script>\r\n```\r\n\r\n### 发送短信按钮案例\r\n\r\n<div id=\"demoInput12381039\">\r\n    <input type=\"text\" name=\"\" id=\"\"><button>发送</button>\r\n</div>\r\n<style>\r\n    #demoInput12381039 * {\r\n        box-sizing: border-box;\r\n        padding: 0;\r\n        margin: 0;\r\n        height: 25px;\r\n        padding: 0 5px;\r\n        vertical-align: middle;\r\n    }\r\n</style>\r\n<script>\r\n    var btn=document.querySelector(\"#demoInput12381039>button\")\r\n    var ipt=document.querySelector(\"#demoInput12381039>input\")\r\n    btn.addEventListener(\"click\",function(){\r\n        if(ipt.value){//检查输入框是否满足要求\r\n            btn.disabled=true; //禁用\r\n            var ss = 5; //倒计时\r\n            callback(); //先显示一次\r\n            var timmer = setInterval(callback,1000);\r\n            function callback(){//回调函数\r\n                btn.innerText = \"再次发送需等待\" + ss + \"秒\";\r\n                if(ss--<0){\r\n                    clearInterval(timmer);\r\n                    btn.innerText = \"发送\";\r\n                    btn.disabled = false;\r\n                }\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n\r\n```html\r\n<div id=\"demoInput12381039\">\r\n    <input type=\"text\" name=\"\" id=\"\"><button>发送</button>\r\n</div>\r\n<style>\r\n    #demoInput12381039 * {\r\n        box-sizing: border-box;\r\n        padding: 0;\r\n        margin: 0;\r\n        height: 25px;\r\n        padding: 0 5px;\r\n        vertical-align: middle;\r\n    }\r\n</style>\r\n<script>\r\n    var btn=document.querySelector(\"#demoInput12381039>button\")\r\n    var ipt=document.querySelector(\"#demoInput12381039>input\")\r\n    btn.addEventListener(\"click\",function(){\r\n        if(ipt.value){//检查输入框是否满足要求\r\n            btn.disabled=true; //禁用\r\n            var ss = 5; //倒计时\r\n            callback(); //先显示一次\r\n            var timmer = setInterval(callback,1000);\r\n            function callback(){//回调函数\r\n                btn.innerText = \"再次发送需等待\" + ss + \"秒\";\r\n                if(ss--<0){\r\n                    clearInterval(timmer);\r\n                    btn.innerText = \"发送\";\r\n                    btn.disabled = false;\r\n                }\r\n            }\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n## this指向问题\r\n\r\n全局作用域或普通函数中的this指向window对象\r\n```js\r\nconsole.log(this)//输出window \r\n//----------------------------------------------------//\r\nfunction test1(){\r\n    console.log(this)//输出window \r\n}\r\ntest1(); //相当于是window.test1();\r\n//----------------------------------------------------//\r\nwindow.setInterval(function(){\r\n    console.log(this) //输出window\r\n},1000)\r\n```\r\n\r\n对象的方法中的this指向调用者，也就是这个对象本身\r\n```js\r\nvar obj={\r\n    test2:function(){\r\n        console.log(this)//输出obj\r\n    }\r\n}\r\nobj.test2();\r\n//----------------------------------------------------//\r\nvar btn = document.querySelector(\"bhtton\");\r\nbtn.onclick = function(){\r\n    console.log(this);//输出btn对象 ,相当于在触发click事件后会自动调用btn.onclick();函数\r\n};\r\nbtn.addEventListener(\"click\",function(){\r\n    console.log(this);//输出btn对象\r\n});\r\n//----------------------------------------------------//\r\n```\r\n\r\n构造函数中的this指向返回的实例化后的对象\r\n```js\r\nfunction Obj(){\r\n    console.log(this);\r\n}\r\nvar obj1 = new Obj(); //控制台打印输出obj1\r\nvar obj2 = new Obj(); //控制台打印输出obj2\r\n```\r\n\r\nthis的指向是可以更改的\r\n\r\n\r\n## js执行机制\r\n### 原来存在的问题\r\n* js语言的特点是单线程，同时只能做一件事\r\n* 单线程的特点由js诞生的使命造成，js是为了处理页面交互，DOM的增删改。\r\n* 单线程意味着所有任务需要排队，前一个执行完毕才能执行下一个\r\n* 单线程的问题是，当单个任务耗费时间较长时会造成任务队列的堵塞\r\n\r\n### 新标准\r\n为了解决这样的问题，HTML5提出了Web Worker标准，允许js创建多个线程，利用多核cpu的计算能力，于是js中出现了同步和异步的概念\r\n\r\n* 同步任务: 同步任务都在主线程上执行，形成一个**执行栈**\r\n\r\n* 异步任务  \r\n    * js异步是通过回调函数实现  \r\n    * 回调函数会被添加到**任务队列**（消息队列）\r\n    * 异步任务一般分三类\r\n        * 普通事件：click resize 等\r\n        * 资源加载：load error 等\r\n        * 定时器： setInterval() setTimeout() 等\r\n\r\n* 执行机制\r\n    * 0.先执行**执行栈**中的同步任务\r\n    * 1.碰到异步任务则将其提交给对应的**异步进程处理程序**\r\n        * **异步进程处理程序**在事件触发、定时器等到、ajax返回后，将相应的异步任务放入**任务队列**中\r\n    * 3.等到同步任务执行完毕后，再到**任务队列**中查询是否有任务，如果有，就取出一个放入**执行栈**处理\r\n    * 1->2->3 称之为**事件循环**\r\n![](./images/jsWebApis学习笔记之BOM/2022-07-07-08-15-13.png)\r\n\r\n案例\r\n* 输出顺序为`1`->`2` 但`3`和`click`的顺序不定，主要看回调函数被添加到任务队列的顺序，该顺序由延迟时间，click时间发生的时间共同觉得\r\n* ![](./images/jsWebApis学习笔记之BOM/2022-07-07-08-30-54.png)\r\n\r\n## window的location对象\r\nlocation对象**属性**\r\n* `location.href` **获取或设置整个url**\r\n* `location.host` 返回域名 `www.baidu.com`\r\n* `location.hostname` 返回域名 `www.baidu.com`\r\n* `location.port` 返回端口号，默认为空字符串 `\"\"` \r\n* `location.pathname` 路径 `/index.html`\r\n* `location.search` **参数**  `?name=andy&age=18`\r\n* `location.hash` #片段 `#锚点名`\r\n\r\nlocation对象**方法**\r\n* location.assign() 和herf一样可以跳转页面，也称重定向页面 ，记录历史记录\r\n* location.replace() 替换当前页面，不记录历史记录，不能后退页面\r\n* location.reload() 重新加载页面，\r\n    * 参数为空或false时，相当于刷新或f5（使用缓存）  \r\n    * 参数为true则相当于ctrl+f5强制刷新页面（不使用缓存，而直接从服务器重新获取数据）\r\n\r\n\r\n### URL\r\n* 格式：`传输协议://域名或ip[:端口][/地址][?查询键值对][#片段]`\r\n* 示例：`https://www.baidu.com:80/index.html?wd=搜索内容`\r\n    * protocol 通信协议，http ftp maito\r\n    * host 主机，域名或ip地址\r\n    * port 端口，省略时使用协议的默认端口，如http是80端口\r\n    * path 路径，表示一个目录或文件\r\n    * query 参数,以键值对形式，通过&符号分隔，如`?name=andy&age=18`\r\n    * fragment 片段 `#锚点名` 常见于链接、锚点\r\n\r\n\r\n\r\n\r\n<button id=\"demoOHf9we8\">点击跳转到百度</button>\r\n<script>\r\n    var demoOHf9we8 = document.querySelector(\"#demoOHf9we8\")\r\n    demoOHf9we8.addEventListener(\"click\",function(){\r\n        var ss = 5;\r\n        reflash();\r\n        var timer = setInterval(reflash,1000)\r\n        function reflash(){\r\n            demoOHf9we8.innerText=\"即将在\"+ ss +\"秒后跳转到百度\";\r\n            if(ss--<=0)\r\n            {\r\n                clearInterval(timer)\r\n                location.href=\"https://baidu.com\"\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n```html\r\n<button id=\"demoOHf9we8\">点击跳转到百度</button>\r\n<script>\r\n    var demoOHf9we8 = document.querySelector(\"#demoOHf9we8\")\r\n    demoOHf9we8.addEventListener(\"click\",function(){\r\n        var ss = 5;\r\n        reflash();\r\n        var timer = setInterval(reflash,1000)\r\n        function reflash(){\r\n            if(ss>0)\r\n            {\r\n                demoOHf9we8.innerText=\"即将在\"+ ss +\"秒后跳转到百度\";\r\n                ss--;\r\n            }\r\n            else\r\n            {\r\n                clearInterval(timer)\r\n                location.href=\"https://baidu.com\";\r\n            }\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n将一个页面的数据送到另一个页面\r\n\r\n```html\r\n//login.html\r\n\r\n//form默认get\r\n<form action=\"index.html\">\r\n    用户名：<input type=\"text\" name=\"username\" ><input type=\"submit\" value=\"登录\">\r\n</form>\r\n```\r\n\r\n```html\r\n//index.html\r\n\r\n<p id=\"demowenwfj9230\"></p>\r\n<script>\r\n    var demowenwfj9230 = document.querySelector(\"#demowenwfj9230\") \r\n    var list = location.search.substr(1).split(\"=\")//去除？后再根据=分隔为数组\r\n    var uname = list[1]\r\n    demowenwfj9230.innerHTML=\"欢迎你，\" + uname\r\n</script>\r\n```\r\n\r\n## window.navigator对象\r\n常用属性\r\n* `navigator.userAgent` 可获取客户端发送给服务端的user-agent头部值，用来判断是移动端还是pc端\r\n\r\n**判断是移动端还是pc端**\r\n```js\r\nfunction isPhone(){\r\n    if(window.navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n## window.history对象\r\n* 该对象允许用户于浏览器历史记录进行交互\r\n* 该对象包含用户（在浏览器窗口中）访问过的URL\r\n\r\n常用方法\r\n* history.back() 后退一个页面\r\n* history.forward() 前进一个页面\r\n* history.go(参数) 参数是1前进一个页面，-1后退一个页面\r\n\r\n使用场景：\r\n![](./images/jsWebApis学习笔记之BOM/2022-07-07-08-31-52.png)\r\n"}