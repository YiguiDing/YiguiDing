{"shortInfo":{"title":"CSS3重学笔记","cover":"/self_server/assets/images/CSS3重学笔记/cover.png","coverWidth":1920,"coverHeight":1080,"date":"2022-06-04T22:00:00.000Z","date_end":"2022-06-08T14:47:00.000Z","tags":["CSS","前端"],"hideAtIndex":true,"categories":"笔记","id":6,"countWords":13820,"readSeconds":1382,"assetsbaseUrl":"/self_server/assets/"},"content":"# css3重学笔记\r\n\r\n## 更新日志\r\n* **2022-06-05**: 因为感觉原先学CSS的时候没有学透彻，一直想重新系统性的学一遍，查缺补漏。最近几天有时间就开始学了，顺便记个笔记，加深印象、方便复习和查阅。\r\n* **2022.06.11**：终于把基础部分的知识点归纳总结完了，崩溃了，为什么这么多......\r\n* **2022.06.12**: 【增添】`background-size`、`text-shadow`、`box-shadow` `transition`属性笔记\r\n\r\n## 目录\r\n- [css3重学笔记](#css3重学笔记)\r\n  - [更新日志](#更新日志)\r\n  - [目录](#目录)\r\n  - [css简介](#css简介)\r\n  - [引入方式](#引入方式)\r\n    - [内嵌式](#内嵌式)\r\n    - [外联式](#外联式)\r\n    - [行内式](#行内式)\r\n  - [选择器](#选择器)\r\n    - [标签选择器](#标签选择器)\r\n    - [类选择器](#类选择器)\r\n    - [id选择器](#id选择器)\r\n    - [通配符选择器](#通配符选择器)\r\n    - [后代选择器](#后代选择器)\r\n    - [子代选择器](#子代选择器)\r\n    - [并集选择器](#并集选择器)\r\n    - [交集选择器](#交集选择器)\r\n    - [伪类选择器](#伪类选择器)\r\n    - [结构伪类选择器](#结构伪类选择器)\r\n    - [伪html元素选择器](#伪html元素选择器)\r\n  - [字体样式](#字体样式)\r\n    - [字体的大小属性](#字体的大小属性)\r\n    - [字体的粗细属性](#字体的粗细属性)\r\n    - [字体的倾斜属性](#字体的倾斜属性)\r\n    - [字体的family字体属性](#字体的family字体属性)\r\n    - [字体的复合属性](#字体的复合属性)\r\n  - [文本样式](#文本样式)\r\n    - [文本缩进属性](#文本缩进属性)\r\n    - [文本水平对齐方式属性](#文本水平对齐方式属性)\r\n    - [文本修饰线属性](#文本修饰线属性)\r\n    - [文本行高属性](#文本行高属性)\r\n    - [文字阴影属性](#文字阴影属性)\r\n    - [文字外边框](#文字外边框)\r\n  - [盒子模型](#盒子模型)\r\n    - [简介](#简介)\r\n    - [盒子模型各组成部分的设置](#盒子模型各组成部分的设置)\r\n      - [内容区域content](#内容区域content)\r\n      - [内边距区域padding](#内边距区域padding)\r\n      - [边框区域border](#边框区域border)\r\n      - [外边距区域margin](#外边距区域margin)\r\n    - [盒子模型的外边距margin的合并问题](#盒子模型的外边距margin的合并问题)\r\n    - [盒子模型的外边距margin的塌陷问题](#盒子模型的外边距margin的塌陷问题)\r\n    - [盒子模型行内元素的padding和margin问题](#盒子模型行内元素的padding和margin问题)\r\n    - [盒子模型实现指定尺寸的方法](#盒子模型实现指定尺寸的方法)\r\n    - [清除默认内外边距](#清除默认内外边距)\r\n    - [margin和text-align实现水平居中的区别](#margin和text-align实现水平居中的区别)\r\n    - [案例实现](#案例实现)\r\n      - [新浪首页导航条实例编写](#新浪首页导航条实例编写)\r\n      - [新闻列表案例实现](#新闻列表案例实现)\r\n  - [盒子阴影属性](#盒子阴影属性)\r\n  - [背景](#背景)\r\n    - [颜色的几种表示方式](#颜色的几种表示方式)\r\n    - [背景颜色属性](#背景颜色属性)\r\n    - [背景图片](#背景图片)\r\n    - [背景图片重复方式](#背景图片重复方式)\r\n    - [背景图片位置](#背景图片位置)\r\n    - [背景复合属性](#背景复合属性)\r\n    - [背景图大小](#背景图大小)\r\n    - [img标签和背景图片区别](#img标签和背景图片区别)\r\n  - [元素(html标签)显示模式](#元素html标签显示模式)\r\n    - [块级元素](#块级元素)\r\n    - [行内元素](#行内元素)\r\n    - [行内块元素](#行内块元素)\r\n    - [css元素属性控制显示模式的相互转换](#css元素属性控制显示模式的相互转换)\r\n  - [css三大特性](#css三大特性)\r\n    - [继承性](#继承性)\r\n    - [层叠性](#层叠性)\r\n    - [优先级](#优先级)\r\n      - [多个基本选择器之间的的优先级](#多个基本选择器之间的的优先级)\r\n      - [多个复合选择器之间的优先级的权重的计算](#多个复合选择器之间的优先级的权重的计算)\r\n  - [标准流](#标准流)\r\n    - [标准流的概念](#标准流的概念)\r\n    - [标准流的局限性](#标准流的局限性)\r\n  - [浮动](#浮动)\r\n    - [浮动的作用](#浮动的作用)\r\n    - [浮动的特点](#浮动的特点)\r\n    - [浮动布局案例1实现](#浮动布局案例1实现)\r\n    - [浮动布局案例2实现(小米产品页)](#浮动布局案例2实现小米产品页)\r\n    - [浮动布局案例3实现(网页导航条)](#浮动布局案例3实现网页导航条)\r\n    - [清除浮动](#清除浮动)\r\n      - [设置行高法](#设置行高法)\r\n      - [添加额外标签清除法；](#添加额外标签清除法)\r\n      - [单伪元素清除法](#单伪元素清除法)\r\n      - [双伪元素清除法](#双伪元素清除法)\r\n      - [overflow属性清除](#overflow属性清除)\r\n  - [去除列表默认符号](#去除列表默认符号)\r\n  - [定位](#定位)\r\n    - [网页常见布局方式](#网页常见布局方式)\r\n    - [定位的使用步骤](#定位的使用步骤)\r\n    - [相对定位](#相对定位)\r\n    - [绝对定位](#绝对定位)\r\n      - [绝对定位的居中](#绝对定位的居中)\r\n    - [绝对定位fixed](#绝对定位fixed)\r\n    - [修改定位元素的层级关系](#修改定位元素的层级关系)\r\n      - [元素的层级关系](#元素的层级关系)\r\n      - [z-index](#z-index)\r\n  - [文字的垂直对齐](#文字的垂直对齐)\r\n    - [概念](#概念)\r\n    - [行内块元素的基线、底线、顶线、中线的概念](#行内块元素的基线底线顶线中线的概念)\r\n    - [实测效果](#实测效果)\r\n    - [文本框和按钮的中线对齐](#文本框和按钮的中线对齐)\r\n    - [图片和按钮框的中线对齐](#图片和按钮框的中线对齐)\r\n    - [嵌套关系的div和文本框的顶对齐](#嵌套关系的div和文本框的顶对齐)\r\n    - [嵌套关系的div和img的中线对齐](#嵌套关系的div和img的中线对齐)\r\n      - [情形1](#情形1)\r\n      - [情形2](#情形2)\r\n    - [该属性的其他属性值](#该属性的其他属性值)\r\n  - [鼠标光标类型](#鼠标光标类型)\r\n  - [圆角边框](#圆角边框)\r\n  - [溢出内容显示效果](#溢出内容显示效果)\r\n  - [元素的隐藏](#元素的隐藏)\r\n  - [透明属性](#透明属性)\r\n  - [过渡](#过渡)\r\n  - [去除鼠标选中input-text后显示的默认边框](#去除鼠标选中input-text后显示的默认边框)\r\n  - [css3的书写顺序](#css3的书写顺序)\r\n    - [编写思路](#编写思路)\r\n    - [使浏览器加载更快的书写顺序](#使浏览器加载更快的书写顺序)\r\n    - [正确书写顺序使浏览器加载更快的原因](#正确书写顺序使浏览器加载更快的原因)\r\n  - [html嵌套原则](#html嵌套原则)\r\n  - [vscode的emment插件语法（自带插件）](#vscode的emment插件语法自带插件)\r\n  - [pxcook像素大厨的基本使用](#pxcook像素大厨的基本使用)\r\n\r\n\r\n## css简介\r\n* CSS: **Cascading Style sheets 层叠样式表**\r\n* 注释格式: `/* css的唯一注释格式 */`\r\n* 语法格式: `选择器{属性:属性值;}`\r\n\r\n## 引入方式\r\n- [内嵌式](#内嵌式)\r\n- [外联式](#外联式)\r\n- [行内式](#行内式)\r\n\r\n### 内嵌式\r\n* 写在style标签中\r\n* 虽然style标签可以写在任意位置，但**一般约定style标签写在head标签中的title标签下**\r\n    ```html\r\n    <head>\r\n        <title>Document</title>\r\n        <style>\r\n            p{  \r\n                color: red;\r\n                background-color: green;\r\n                font-size: 30px;\r\n                width: 500px;\r\n                height: 500px;\r\n            }\r\n        </style>\r\n        <link rel=\"stylesheet\" href=\"path/to/file.css\">\r\n    </head>\r\n    ```\r\n* 使用场景：小案例\r\n* 作用范围：**当前页面**\r\n    \r\n### 外联式\r\n* 写在一个单独的.css文件中\r\n* 需要用link标签引入\r\n    ```html\r\n    <!-- rel=>relation关系 stylesheet指定是css-->\r\n    <!-- href=>路径 -->\r\n        <link rel=\"stylesheet\" href=\"path/to/file.css\">\r\n    ```\r\n* 使用场景：大项目\r\n* 作用范围：**多个页面**\r\n    \r\n### 行内式\r\n* 直接写到标签的style属性中\r\n    ```html\r\n        <p style=\"color: white;\">qqq</p>\r\n    ```\r\n* 使用场景：一般配合js使用\r\n* 作用范围：**仅单个标签**\r\n\r\n## 选择器\r\n- [标签选择器](#标签选择器)\r\n- [类选择器](#类选择器)\r\n- [id选择器](#id选择器)\r\n- [通配符选择器](#通配符选择器)\r\n- [后代选择器](#后代选择器)\r\n- [子代选择器](#子代选择器)\r\n- [并集选择器](#并集选择器)\r\n- [交集选择器](#交集选择器)\r\n- [伪类选择器](#伪类选择器)\r\n- [结构伪类选择器](#结构伪类选择器)\r\n- [伪html元素选择器](#伪html元素选择器)\r\n\r\n\r\n### 标签选择器\r\n* 语法：`标签名{css属性名:属性值;}`\r\n* 特点：匹配到所有标签，无论嵌套关系多深\r\n\r\n\r\n### 类选择器\r\n* 语法：`.类名值{css属性名:属性值;}`\r\n* 特点：只作用于标签属性中`class=\"指定类名\"`的所有标签\r\n* 注意：\r\n    * 所有标签都可以有class属性\r\n    * **类名只能以数字字母下划线中划线组成且不能以数字或中划线开头。**\r\n    * 一个标签可有有多个类名`<div class=\"c1 c2\"></div>`\r\n    * 一个类选择器也可以选中多个类`.类名1 .类名2{css属性名:属性值;}`\r\n\r\n\r\n### id选择器\r\n* 语法：`#id属性值{css属性名:属性值;}`\r\n* 特点：只唯一作用于id属性为指定值的标签\r\n* 注意：\r\n    * 所有HTML标签都可以有id属性\r\n    * **id属性值只能以数字字母下划线中划线组成且不能以数字或中划线开头。**\r\n    * 按规定id属性值在单个页面中是唯一的\r\n    * 一个标签只能有一个id属性值\r\n    * 一个id选择器只能选中一个标签\r\n    * id选择器一般配合js使用\r\n\r\n\r\n### 通配符选择器\r\n* 语法：`*{css属性名:属性值;}`\r\n* 特点：作用于所有标签\r\n* 用法：清除标签的默认样式\r\n    * margin外边距 如h1标签就有默认外边距\r\n    * padding内边距\r\n    ```css\r\n    *{\r\n        margin:0;\r\n        padding:0;\r\n    }\r\n    ```\r\n\r\n### 后代选择器\r\n* 语法: `选择器1 选择器2{css属性名:属性值;}`\r\n* 特点：选择器之间用**空格**隔开\r\n* 注意：\r\n    * **后代包括 子代 孙代 重孙代**\r\n    * 单个选择器可以是上面四种基本选择器\r\n    * 可以跨代选择\r\n\r\n### 子代选择器\r\n* 语法：`选择器1>选择器2{css属性名:属性值;}`\r\n* 特点：选择器之间用 **>** 隔开\r\n* 注意：\r\n    * **子代选择器只能选择子代 不能选择孙代**\r\n\r\n### 并集选择器\r\n* 语法：`选择器1,选择器2{css属性名:属性值;}`\r\n* 特点：选择器之间用**逗号**隔开\r\n* 注意：\r\n    * **并集选择器中的单个选择器可以是上面两种复合选择器**\r\n    * **单个选择器可以一行写一个提高代码可读性**\r\n\r\n### 交集选择器\r\n* 语法 `选择器1选择器2{}`\r\n* 特点：交集选择器选择的是满足要求的一类标签 交集可能是空 可能有一个 可能有多个\r\n* 4种基本选择器两两排列组合的示例：\r\n    * 标签和类名的交集：`p.class1{}`\r\n    * 标签和id的交集`p#id1{}`\r\n    * 标签和通配符的交集：`p*{}` `*p{} `\r\n        * 似乎没有什么应用场景 *和p的交集就是p\r\n    * 类名和id的交集： `.class1#id1{}` `#id1.class1{}`\r\n    * 类和通配符的交集：`.class1*{}` `*.class1{}`\r\n        * 似乎没有什么应用场景 *和class1的交集就是class1\r\n    * id和通配符的交集：`#id1*{}` `*#id1{}`\r\n        * 同上；*和#id1的交集就是#id1\r\n* 注意：\r\n    * **交集选择器能且只能交两个基本选择器**\r\n    * 交集选择器的两个选择器一定是对两个不同HTML的标签选择器做交集 所以不要问h1和p的交集怎么写 不要问`h1p{}`这种写法浏览器能不能识别（你说你没问？好吧我问的...），这两个标签不可能有交集 但是类和类可以有交集`.class1.class2{}`这种写法浏览器能识别 `#id1#id2{}`这种写法浏览器也能识别\r\n    * 因为统配符选择器和任何选择器的交集都是这个选择器本身，所以实际中应该用不到\r\n\r\n### 伪类选择器\r\n* hover\r\n    * 语法：`选择器:hover{}`\r\n    * 作用：设置鼠标悬停在标签上时显示的样式\r\n    * 注意：任何标签都有伪类hover\r\n\r\n### 结构伪类选择器\r\n* 作用：根据HTML的元素结构关系查找元素\r\n* 优势：减少对HTML中类的依赖，利于代码整洁\r\n* 场景：常用于查找某父级选择器中的子元素\r\n* 语法：\r\n    * `选择器:first-child{}` 第一个元素\r\n    * `选择器:last-child{}` 最后一个元素\r\n    * `选择器:nth-child(n){}` 第n个的元素\r\n    * `选择器:nth-last-child(n){}` 最后第n个元素\r\n    * n的取值\r\n        * 数字：0、1、2、3.... (0会选不中任何元素)\r\n        * 公式：\r\n            * 偶数 `2n`  `even`\r\n            * 奇数 `2n+1` `2n-1` `odd`\r\n            * 前3个 `3-n`\r\n                * （n取0时得3 取1时得2 取2时得1 取3时的0 取4时得-1 以此类推 感觉可理解为是在一个for循环中n从0开始取值，公式就是元素下标要填写的内容）\r\n            * 后3个 `3+n`\r\n* 注意：\r\n    * 对于左浮动，要用last-child选中最后(右)一个元素\r\n    * 对于右浮动，要用first-child选中最后(左)一个元素\r\n```html\r\n<style>\r\n    li:first-child{\r\n        background-color: gold;\r\n    }\r\n    li:nth-child(2){\r\n        background-color: darkgrey;\r\n    }\r\n    .li-example:nth-child(3){\r\n        background-color: chocolate;\r\n    }\r\n</style>\r\n<ul>\r\n    <li class=\"li-example\">这是第1个li</li>\r\n    <li class=\"li-example\">这是第2个li</li>\r\n    <li class=\"li-example\">这是第3个li</li>\r\n    <li class=\"li-example\">这是第4个li</li>\r\n    <li class=\"li-example\">这是第5个li</li>\r\n</ul>\r\n\r\n```\r\n效果：![](./images/CSS3重学笔记/2022-06-08-10-37-10.png)\r\n\r\n\r\n### 伪html元素选择器\r\n* 伪元素是`CSS3`模拟出的HTML标签效果\r\n* 伪元素的`CSS`样式必须要有`content`属性,属性值可以为空(`content:\"\";`)\r\n* 伪元素默认是**行内元素(inline-block)**\r\n* 语法：\r\n    * `选择器::before{}` 在选中元素的内容的最开头添加的伪元素\r\n    * `选择器::after{}` 在选中元素的内容的最后添加的伪元素\r\n\r\n\r\n\r\n## 字体样式\r\n- [字体样式](#字体样式)\r\n    - [字体的大小属性](#字体的大小属性)\r\n    - [字体的粗细属性](#字体的粗细属性)\r\n    - [字体的倾斜属性](#字体的倾斜属性)\r\n    - [字体的family字体属性](#字体的family字体属性)\r\n    - [字体的复合属性](#字体的复合属性)\r\n    - [文字阴影属性](#文字阴影属性)\r\n\r\n### 字体的大小属性\r\n* 属性名：`font-size`\r\n* 取值：`数字+px`\r\n* 注意：\r\n    * 谷歌浏览器默认文字大小16px\r\n    * 必须加单位否则没有效果\r\n\r\n### 字体的粗细属性\r\n* 属性名：`font-weight`\r\n* 取值：\r\n    * 取关键字：\r\n        * `normal` 正常不加粗（默认）\r\n        * `bold`  加粗\r\n    * 取数字：\r\n        * 取`100~900`的整百数 *共九种取值*\r\n        * `400` 效果对应 `normal`\r\n        * `700` 效果对应 `bold`\r\n    * 注意：\r\n        * 并不是所有`字体`都有九种粗细\r\n        * 实际开发中主要用 `正常` 和 `加粗` 两种取值\r\n\r\n### 字体的倾斜属性\r\n* 属性名：font-style\r\n* 取值：\r\n    * normal 正常不倾斜（默认）\r\n    * italic 倾斜\r\n        * italic作形容词时译为“斜体的；仿意大利古书写体的”，作名词时译为“斜体字”\r\n* 所以可以用该属性把斜体标签变不倾斜`<em style=\"font-style:normal\">ggg</em>`\r\n\r\n### 字体的family字体属性\r\n* 属性名：`font-family`\r\n* 取值格式：`font-family:字体名1,字体名2,字体名3,字体系列名;`\r\n* 取值：\r\n    * `微软雅黑` windows默认\r\n    * `苹方` macOS默认\r\n    * 等...\r\n* 扩展：网页中一般采用**无衬线字体(sans-serif)**\r\n    * ![](./images/CSS3重学笔记/2022-06-05-08-41-07.png)\r\n* 示例：\r\n    ```css\r\n    div{\r\n        /* 按优先级选择可用的字体，如果没有两种字体都没有则使用任意一种无衬线字体(sans-serif) */ \r\n        font-family:微软雅黑,黑体,sans-serif;\r\n    }\r\n    ```\r\n\r\n### 字体的复合属性\r\n* 属性名：`font`\r\n* 取值格式：font:style weight size family;\r\n    * 示例：`font: italic bold 16px 微软雅黑;`\r\n* 这个属性只能省略前两个值，省略表示设置为默认值\r\n* 这种一个属性后有多个值的称为复合属性\r\n\r\n## 文本样式\r\n- [文本样式](#文本样式)\r\n    - [文本缩进属性](#文本缩进属性)\r\n    - [文本水平对齐方式属性](#文本水平对齐方式属性)\r\n    - [文本修饰线属性](#文本修饰线属性)\r\n    - [文本行高属性](#文本行高属性)\r\n    - [文字阴影属性](#文字阴影属性)\r\n\r\n### 文本缩进属性\r\n* 属性名`text-indent`\r\n* 取值：\r\n    * `数字+px`\r\n    * `数字+em` (推荐)\r\n        * `1em`=当前标签的`font-size`大小\r\n\r\n### 文本水平对齐方式属性\r\n* 属性名`text-align`\r\n* 取值\r\n    * `left`\r\n    * `center`\r\n    * `right`\r\n* 注意\r\n    * 可以作用于该标签的内容 不光是作用于文字\r\n    * 要让`img`这种单标签居中 需要设置其父元素的`text-indent`属性\r\n\r\n### 文本修饰线属性\r\n* 属性名：`text-decoration`\r\n* 取值：\r\n    * `underline` 下划线\r\n    * `line-through` 删除线\r\n    * `overline` 上划线\r\n    * `none` 无装饰线\r\n* 注意：\r\n    * 开发中会用`text-decoration:none`清除超链接的下划线\r\n\r\n\r\n### 文本行高属性\r\n* 属性名：`line-height`\r\n* 取值：\r\n    * 数字+px\r\n    * 倍数可以是小数 （当前标签的font-size的倍数）\r\n* 可以写到font中\r\n    * 格式：`font: [style weight] size[/line-height] family;`\r\n    * 示例：`font: italic 700 66px/2 微软雅黑;`\r\n* 行高![](./images/CSS3重学笔记/2022-06-05-12-38-53.png)\r\n\r\n### 文字阴影属性\r\n* 属性名：`text-shadow`\r\n* 语法 `text-shadow: 水平偏移px 垂直偏移px 模糊程度px 颜色;`\r\n* 取值：\r\n    * 水平偏移h-shadow 必须\r\n    * 垂直偏移x-shadow 必须\r\n    * 模糊程度blur 模糊的程度 可选\r\n    * 颜色color 阴影颜色 可选\r\n* 示例效果：\r\n    * ![](./images/CSS3重学笔记/2022-06-12-15-25-18.png)\r\n    * ![](./images/CSS3重学笔记/2022-06-12-15-38-06.png)\r\n    * ![](./images/CSS3重学笔记/2022-06-12-15-38-14.png)\r\n* js语法:`object.style.textShadow=\"2px 2px #ff0000\"`\r\n\r\n\r\n### 文字外边框\r\n语法: `text-stroke：[ text-stroke-width ] || [ text-stroke-color ]`\r\n\r\n## 盒子模型\r\n- [简介](#简介)\r\n- [盒子模型各组成部分的设置](#盒子模型各组成部分的设置)\r\n    - [内容区域content](#内容区域content)\r\n    - [内边距区域padding](#内边距区域padding)\r\n    - [边框区域border](#边框区域border)\r\n    - [外边距区域margin](#外边距区域margin)\r\n- [盒子模型的外边距margin的合并问题](#盒子模型的外边距margin的合并问题)\r\n- [盒子模型的外边距margin的塌陷问题](#盒子模型的外边距margin的塌陷问题)\r\n- [盒子模型行内元素的padding和margin问题](#盒子模型行内元素的padding和margin问题)\r\n- [盒子模型实现指定尺寸的方法](#盒子模型实现指定尺寸的方法)\r\n- [清除默认内外边距](#清除默认内外边距)\r\n- [margin和text-align实现水平居中的区别](#margin和text-align实现水平居中的区别)\r\n- [案例实现](#案例实现)\r\n    - [新浪首页导航条实例编写](#新浪首页导航条实例编写)\r\n    - [新闻列表案例实现](#新闻列表案例实现)\r\n\r\n### 简介\r\n* css中规定每个盒子分别由\r\n    * **内容区域content**，\r\n    * **内边距区域padding**，\r\n    * **边框区域border**，\r\n    * **外边距区域margin**构成 这就是**盒子模型**\r\n* 页面中每一个标签都可看作是一个盒子，方便布局\r\n* 浏览器渲染时将网页中元素看成矩形区域，我们形象的称为盒子\r\n![](./images/CSS3重学笔记/2022-06-07-12-11-21.png)\r\n![](./images/CSS3重学笔记/2022-06-07-13-30-00.png)\r\n![](./images/CSS3重学笔记/2022-06-07-13-39-11.png)\r\n\r\n### 盒子模型各组成部分的设置\r\n#### 内容区域content\r\n* 通过width height属性控制，单位px\r\n\r\n#### 内边距区域padding\r\n* 通过padding属性控制\r\n* 语法格式：\r\n    * `padding: 上 右 下 左;`\r\n    * `padding: 上 左右 下;`\r\n    * `padding: 上下 左右;`\r\n    * `padding: 上下左右边距;`\r\n    * 上述四种写法的规律就是，从上开始顺时针依次赋值，没有赋到值的就看其对面的值\r\n\r\n#### 边框区域border\r\n* 通过border属性控制\r\n    * 这是一个复合属性\r\n    * 属性值**不分先后顺序**，**任意一个都不能省略**\r\n    * 语法1：`border:宽度 线条种类 颜色;`\r\n        * 宽度：数字+px\r\n        * 线条种类 solid实线 dashed虚线 dotted点线\r\n    * 语法2：`border-方位名词:宽度 线条种类 颜色;`\r\n        * 方位名词： \r\n            * `top`\r\n            * `bottom` \r\n            * `left` \r\n            * `right`\r\n    * 语法3(不常用)：\r\n        * `border-width:宽度;` \r\n        * `border-style:线条种类;` \r\n        * `border-color:颜色;`\r\n    * 语法4(不常用)：\r\n        * `border-width:上宽度 右宽度 下宽度 左宽度;` \r\n        * `border-style:上线条种类 右线条种类 下线条种类 左线条种类;`\r\n        *  `border-color:上颜色 右颜色 下颜色 左颜色;`\r\n\r\n#### 外边距区域margin\r\n* 通过`margin`属性控制\r\n* 语法格式同padding\r\n*版心居中：`margin:0 auto; `\r\n    版心：网页中的有效内容\r\n\r\n### 盒子模型的外边距margin的合并问题\r\n* **垂直布局**和**块级元素**，上盒子的下外边距会和下盒子的上外边距外边距同时设置，浏览器会自动取最大值。\r\n![](./images/CSS3重学笔记/2022-06-08-09-28-53.png)\r\n* 解决方法：只设置其中一个\r\n\r\n### 盒子模型的外边距margin的塌陷问题\r\n* **嵌套**的**块级元素**，子元素的margin-top会作用在父元素上\r\n![](./images/CSS3重学笔记/2022-06-08-09-56-12.png)\r\n* 解决方法\r\n    * 给父元素设置`border-top` 或 `padding-top` 可以达到预期效果\r\n    * 给父元素设置`overflow:hidden;` (应该是最优解)\r\n    * 转换成行内块元素`inline-block`\r\n    * 设置浮动\r\n    * 等...\r\n\r\n### 盒子模型行内元素的padding和margin问题\r\n* 对行内元素应用margin属性时，只有设置的左右外边距会起作用\r\n* 对行内元素应用padding属性时，只有设置的左右内边距会起作用\r\n* 解决方法：使用`line-height`属性设置\r\n* 总结：行内元素无法设置上下外边距和内边距，可以通过`line-height`设置\r\n\r\n\r\n### 盒子模型实现指定尺寸的方法\r\n* 一般情况下盒子整体尺寸会因border、padding的设置而被撑大，如设置width500px;border10px;padding10px;则整个盒子的宽度会从500px变成540px。\r\n* 解决方法1手动计算content的宽高\r\n    * 如果想要设置整体宽度width500px，border10px，padding10px，则应该设置width为500-10\\*2-10\\*2=460px\r\n* 解决方法2自动计算content的宽高\r\n    * 给盒子设置`box-sizing:border-box;`(**内减模式**)\r\n    * 浏览器会自动计算多出的大小，自动从content的width，height属性中减去\r\n\r\n\r\n### 清除默认内外边距\r\n* body标签默认有margin8px\r\n* p标签默认有上下margin\r\n* ul标签默认有margin和padding-left\r\n```css\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n```\r\n\r\n### margin和text-align实现水平居中的区别\r\n* `text-align` 指当前元素中内容的对其方式。\r\n    * 写法：`text-align:center;`\r\n    * 应用于**块级元素**\r\n* `margin` 是指当前元素的外边距 而当指定其上下外边距为0 左右外边距为自动时 表现为相对于父标签居中，**不会影响自身的内容**\r\n    * 写法：`margin:0px auto;`\r\n    * 应用于**块级元素**\r\n    * * 当元素设置为浮动时，左右`margin`设置为`auto`来居中元素的方式会失效\r\n\r\n### 案例实现\r\n#### 新浪首页导航条实例编写\r\n```html\r\n<style>\r\n    .nav{\r\n        width: 100%;\r\n        height: 40px;\r\n        border-top: 3px solid #ff8500;\r\n        border-bottom: 1px solid #edeef0;\r\n        background-color: white;\r\n    }\r\n    .nav-item{\r\n        width:auto;\r\n        height: 40px;\r\n        background-color: white;\r\n        display: inline-block;\r\n        text-decoration: none;\r\n        text-align: center;\r\n        color: #4c4c4c;\r\n        font-size: 12px;\r\n        line-height: 40px;\r\n        padding: 0 5px 0 5px;\r\n    }\r\n    .nav-item:hover{\r\n        background-color: #edeef0;\r\n        color: #ff8400;\r\n    }\r\n</style>\r\n<div class=\"nav\">\r\n    <a href=\"#\" class=\"nav-item\">首页</a>\r\n    <a href=\"#\" class=\"nav-item\">文字个数不应影响效果</a>\r\n    <a href=\"#\" class=\"nav-item\">新浪导航</a>\r\n    <a href=\"#\" class=\"nav-item\">新浪导航</a>\r\n</div>\r\n```\r\n**效果：**\r\n![](./images/CSS3重学笔记/2022-06-08-18-46-27.png)\r\n\r\n\r\n#### 新闻列表案例实现\r\n```html\r\n<style>\r\n    .news-Box *{\r\n        margin: 0;\r\n        padding: 0;\r\n        /* 所有标签自动内减内边距和border */\r\n        box-sizing: border-box;\r\n    }\r\n    .news-Box{\r\n        width: 500px;\r\n        height: 400px;\r\n        background-color: white;\r\n        border:1px solid #ccc;\r\n        padding: 20px 30px 0px;\r\n        margin: 50px auto;\r\n    }\r\n    .news-title{\r\n        border-bottom: 1px solid #ccc;\r\n        font-size: 30px;\r\n        line-height: 1;/*1倍字的大小，这样可以去除字的上下边距*/\r\n        padding: 10px 0;\r\n        color: black;\r\n    }\r\n    .news-items{\r\n        list-style: none;\r\n    }\r\n    .news-item{\r\n        height: 50px;\r\n        border-bottom: 1px dashed #ccc;\r\n        font-size: 20px;\r\n        line-height: 50px;\r\n        padding: 0 25px;\r\n    }\r\n    .news-item-link{\r\n        text-decoration: none;\r\n        color: #666;\r\n    }\r\n</style>\r\n<body>\r\n    <div class=\"news-Box\">\r\n        <h2 class=\"news-title\">最新文章/News</h2>\r\n        <ul class=\"news-items\">\r\n            <li class=\"news-item\"><a class=\"news-item-link\" href=\"#\">北京招聘网页设计，平面设计，php开发</a></li>\r\n            <li class=\"news-item\"><a class=\"news-item-link\" href=\"#\">北京招聘网页设计，平面设计，php开发</a></li>\r\n            <li class=\"news-item\"><a class=\"news-item-link\" href=\"#\">北京招聘网页设计，平面设计，php开发</a></li>\r\n            <li class=\"news-item\"><a class=\"news-item-link\" href=\"#\">北京招聘网页设计，平面设计，php开发</a></li>\r\n            <li class=\"news-item\"><a class=\"news-item-link\" href=\"#\">北京招聘网页设计，平面设计，php开发</a></li>\r\n        </ul>\r\n    </div>\r\n</body>\r\n\r\n```\r\n效果：\r\n![](./images/CSS3重学笔记/2022-06-08-18-46-54.png)\r\n\r\n## 盒子阴影属性\r\n* 语法格式：`box-shadow:水平偏移px 垂直偏移px 模糊度px 阴影尺寸px inset(内阴影); `\r\n![](./images/CSS3重学笔记/2022-06-12-16-03-13.png)\r\n\r\n## 背景\r\n- [背景](#背景)\r\n    - [颜色的几种表示方式](#颜色的几种表示方式)\r\n    - [背景颜色属性](#背景颜色属性)\r\n    - [背景图片](#背景图片)\r\n    - [背景图片重复方式](#背景图片重复方式)\r\n    - [背景图片位置](#背景图片位置)\r\n    - [背景复合属性](#背景复合属性)\r\n    - [背景图大小](#背景图大小)\r\n    - [img标签和背景图片区别](#img标签和背景图片区别)\r\n\r\n\r\n### 颜色的几种表示方式\r\n* **关键字** `red` `green` `blue` `yellow` ...\r\n* **rgb表示法**\r\n    * 示例`rgb(255,255,255)`\r\n* **rgba表示法**\r\n    * `rgb`的取值范围0~255 \r\n    * a表示透明度;取值范围0~1 小数表示法 可以省略整数部分0.5写.5\r\n    * 示例`rgba(255,255,255,0.5)`\r\n* **十六进制表示法**\r\n    * `#ffffff`\r\n    * `#fff` 简写\r\n        * 注意是两位一组 其中一组中数字相同的才能简写 于是`#ff0066`可以写成`#f06`\r\n\r\n\r\n\r\n### 背景颜色属性\r\n* 属性名：`background-color`\r\n* 取值：`颜色名关键字` 、 `rgb` `rgba` `#十六进制`\r\n* 注意\r\n    * 背景色默认为透明\r\n        * `transparent`\r\n        * `rgba(XX,XX,XX,0)`\r\n    * 开发时可以设置背景色 辅助观察和理解元素间的尺寸和层叠关系\r\n\r\n### 背景图片\r\n* 属性名：`background-image`\r\n* 取值：`url(\"\")`\r\n* 示例：`background-image:url(\"./path/to/your/file.img\")`\r\n* 注意：\r\n    * `url`中可以用单引号 双引号 也可以都不用\r\n    * 图片为默认重复方式为水平和垂直方向重复（由如下属性控制）\r\n\r\n### 背景图片重复方式\r\n* 属性名：`background-repeat`\r\n* 取值：\r\n    * `repeat`  水平和垂直方向重复 （默认）\r\n    * `no-repeat` 不重复\r\n    * `repeat-x` 仅沿x轴重复\r\n    * `repeat-y` 仅沿y轴重复\r\n\r\n### 背景图片位置\r\n* 属性名：`background-position`\r\n* 使用格式：`background-position:水平方向 垂直方向;`\r\n* 取值：\r\n    * 取方位名词关键字 \r\n        * 水平： `right` `center` `left`\r\n        * 垂直： `top` `center` `bottom`\r\n    * 取坐标：\r\n        * 左上角为原点\r\n        * 水平方向坐标轴的增长方向为朝右\r\n        * 垂直方向坐标轴的增长方向为朝下\r\n        * 取具体数值+px 可以取负数表示反方向\r\n* 注意：\r\n    * 两种取值方式 可以混合使用\r\n    * `background-position:center center;`可以简写成`background-position:center;`\r\n\r\n### 背景复合属性\r\n* 属性名： `background`\r\n* 标准书写格式：`background:color image repeat position`\r\n* 注意：\r\n    * 四个取值不分先后顺序、随意省略\r\n    * 最后一个取值`position`其实由两个值组成，分为水平方向和垂直方向，当取关键字时可以颠倒顺序，当取数值时不能颠倒顺序\r\n    * 所以当盒子大小和背景图片一致时可直接简写为`background: url();`\r\n\r\n### 背景图大小\r\n* 语法: `background-size:宽度 高度;`\r\n* 取值：\r\n    * 像素，数字+px\r\n    * 百分比，相对于当前盒子的宽高\r\n    * 包含 `contain` ，将背景图**等比例缩放**，直到某条边或框和盒子一致\r\n    * 覆盖 `cover` 将图片**等比例缩放**，直到刚好填满整个盒子\r\n* 可以连写到`background`属性中，语法为`background:color image repeat position/size;`\r\n* 效果示例\r\n    * ![](./images/CSS3重学笔记/2022-06-12-14-45-00.png)\r\n    * ![](./images/CSS3重学笔记/2022-06-12-14-45-55.png)\r\n\r\n\r\n### img标签和背景图片区别\r\n* `img`是一个HTML标签。不设置宽高以原尺寸显示；设置单个宽高图片以等比例缩放显示；同时设置宽高图片以不等比例缩放显示。\r\n* `background-img`是CSS样式。可以设置给div标签，但div必须设置宽高，如果不设置什么都不显示\r\n* 选用原则：**重要的用img 不重要的装饰性的用背景图**\r\n\r\n\r\n\r\n## 元素(html标签)显示模式\r\n- [块级元素](#块级元素)\r\n- [行内元素](#行内元素)\r\n- [行内块元素](#行内块元素)\r\n- [css元素属性控制显示模式的相互转换](#css元素属性控制显示模式的相互转换)\r\n\r\n### 块级元素\r\n* 特点\r\n    * **独占一行**\r\n    * **可以**设置宽高\r\n    * 宽度默认继承自父级元素\r\n* 代表元素： **div** **h系列** **p**  ul li dl dt dd form header nav footer\r\n\r\n### 行内元素\r\n* 特点\r\n    * **一行显示多个**\r\n    * **不可以**设置宽高(不生效)\r\n    * 宽度和高度默认由内容撑开\r\n* 代表元素\r\n    * **span** **a** b u i s strong ins em del\r\n\r\n### 行内块元素\r\n* 特点\r\n    * **一行可以显示多个**\r\n    * **可以**设置宽高\r\n* 代表标签\r\n    * **img** **input** textarea button select ...\r\n* 注意 img标签有行内块特点 但在Chrome调试工具中显示是inline\r\n\r\n### css元素属性控制显示模式的相互转换\r\n* 属性名：display\r\n* 可选值：\r\n    * **block** 块级元素 块元素**可以设置宽高** 使用频率**多**\r\n    * **inline** 行内元素 行内元素不可以设置宽高 使用频率少\r\n    * **inline-block** 行内块元素 行内块**可以设置宽高** 使用频率**多**\r\n\r\n## css三大特性\r\n- [继承性](#继承性)\r\n- [层叠性](#层叠性)\r\n- [优先级](#优先级)\r\n    - [多个基本选择器之间的的优先级](#多个基本选择器之间的的优先级)\r\n    - [多个复合选择器之间的优先级的权重的计算](#多个复合选择器之间的优先级的权重的计算)\r\n\r\n### 继承性\r\n* 子元素默认继承父元素\r\n* 自己有相关属性的不再从父元素继承\r\n    * a标签的文字颜色和下划线是浏览器给的默认颜色，不再从父元素继承。\r\n    * h标签的大小是默认属性，不再从父元素继承。\r\n* **只有文字控制属性才存在继承**\r\n* 如：\r\n    * color文字颜色 \r\n    * font系列（font-style font-weight font-size font-family）\r\n    * text系列（text-indent text-align）\r\n    * line-height行高\r\n    * 等\r\n\r\n### 层叠性\r\n* 给标签设置不同的属性，样式会**叠加**\r\n    * 样式叠加：`div{color:red;font-size:10px;}`\r\n* 给标签设置相同的属性，样式会**覆盖**，覆盖的原则为先写的被后写的覆盖\r\n    * 最终为绿色：`div{color:red;color:green;}`\r\n* 样式冲突时，只有当选择器**优先级相同**时才能通过层叠性判断结果\r\n    * 大概解释成，单个选择器内的样式冲突时，可以根据层叠性判断，多个选择器之间样式冲突时，必须要优先级相同才能根据层叠性判断。\r\n\r\n### 优先级\r\n#### 多个基本选择器之间的的优先级\r\n* 不同的选择器有不同的优先级\r\n* 优先级高的选择器样式**覆盖**优先级低的选择器样式\r\n* 优先级关系\r\n    * `继承<标签选择器<通配符选择器<类选择器<id选择器<行内样式<!important`\r\n    * 作用范围广的选择器优先级低\r\n    * 作用范围精确的选择器优先级高\r\n* 注意：\r\n    * `!important`写在属性值之后分号之前\r\n    * `!important`无法被继承\r\n    * 实际开发中不建议使用`!important`\r\n* 示例：最终颜色为pink![](./images/CSS3重学笔记/2022-06-07-10-52-21.png)\r\n\r\n#### 多个复合选择器之间的优先级的权重的计算\r\n* 如果使用复合选择器，需通过叠加计算方法，判断最终哪个选择器的优先级最高,优先级高的覆盖优先级低的。\r\n* 叠加公式：![](./images/CSS3重学笔记/2022-06-07-08-17-55.png)\r\n* 先比较各复合选择器优先级的第一级，值最大的选择器的优先级最高，如果无法得出最大值\r\n* 再比较各复合选择器优先级的第二级，值最大的选择器的优先级最高，如果无法得出最大值，以此类推\r\n* **如果都比较不出来，再根据层叠性确定**\r\n* **!inportant**优先级依然是最高\r\n+ 计算权重优先复合选择器的优先级的权重计算**示例**：\r\n    + 最终字的颜色为red![](./images/CSS3重学笔记/2022-06-07-10-25-40.png)\r\n    + 最终显示为天蓝色skyblue![](./images/CSS3重学笔记/2022-06-07-10-26-52.png)\r\n    + 最终为blue蓝色 ![](./images/CSS3重学笔记/2022-06-07-11-15-01.png)![](./images/CSS3重学笔记/2022-06-07-11-13-20.png)\r\n    + 最终为天蓝色![](./images/CSS3重学笔记/2022-06-07-11-11-50.png)\r\n    + 最终为pink![](./images/CSS3重学笔记/2022-06-07-11-17-43.png)![](./images/CSS3重学笔记/2022-06-07-11-18-07.png)\r\n    + 最终为黄色![](./images/CSS3重学笔记/2022-06-07-11-28-54.png)\r\n    + 最终为红色![](./images/CSS3重学笔记/2022-06-07-11-30-41.png)\r\n\r\n\r\n\r\n## 标准流\r\n- [标准流的概念](#标准流的概念)\r\n- [标准流的局限性](#标准流的局限性)\r\n\r\n### 标准流的概念\r\n* **标准流**也称**文档流**，是浏览器**渲染排版**网页的**默认规则**，规定了元素的**排列方式**\r\n* 常见**标准**排版规则\r\n    * `块级block` \r\n        * 独占一行，从上往下，**垂直布局**\r\n    * `行内inline`或`行内块inline-block` \r\n        * 空间不够换行，从左往右，**水平布局**\r\n\r\n### 标准流的局限性\r\n* 无法让多个块级元素显示在一行，\r\n* 无法让行内块元素完美显示在一行（会因为代码的换行而导致显示效果中产生间距）\r\n```html\r\n<style>\r\n    div{\r\n        display: inline-block;\r\n        width: 100px;\r\n        height: 100px;\r\n    }\r\n    .one{\r\n        background-color: pink;\r\n    }\r\n    .two{\r\n        background-color: green;\r\n    }\r\n</style>\r\n<body>\r\n    <div class=\"one\">div1</div>\r\n    <div class=\"two\">div2</div>\r\n</body>\r\n```\r\n* 显示效果：\r\n* ![](./images/CSS3重学笔记/2022-06-08-14-04-59.png)\r\n\r\n## 浮动\r\n- [浮动的作用](#浮动的作用)\r\n- [浮动的特点](#浮动的特点)\r\n- [浮动布局案例1实现](#浮动布局案例1实现)\r\n- [浮动布局案例2实现(小米产品页)](#浮动布局案例2实现小米产品页)\r\n- [浮动布局案例3实现(网页导航条)](#浮动布局案例3实现网页导航条)\r\n- [清除浮动](#清除浮动)\r\n    - [设置行高法](#设置行高法)\r\n    - [添加额外标签清除法；](#添加额外标签清除法)\r\n    - [单伪元素清除法](#单伪元素清除法)\r\n    - [双伪元素清除法](#双伪元素清除法)\r\n    - [overflow属性清除](#overflow属性清除)\r\n\r\n### 浮动的作用\r\n* **早期**用来做图文环绕\r\n    * 在文字中插入图片，然后给图片设置浮动属性\r\n* **现在**用来做网页布局\r\n    * 让多个标准流的块级元素渲染在一行\r\n        ```html\r\n        <style>\r\n            div{\r\n                display: inline-block;\r\n                width: 100px;\r\n                height: 100px;\r\n                float: left;\r\n            }\r\n            .one{\r\n                background-color: pink;\r\n            }\r\n            .two{\r\n                background-color: green;\r\n            }\r\n        </style>\r\n        <body>\r\n            <div class=\"one\">div1</div>\r\n            <div class=\"two\">div2</div>\r\n        </body>\r\n        ```\r\n    * 效果：![](./images/CSS3重学笔记/2022-06-08-14-22-31.png) \r\n\r\n### 浮动的特点\r\n* 浮动元素会**脱离标准流的控制**，简称脱标，在标准流中**不占位置**，其他非浮动元素会占领空出的位置\r\n* 浮动元素比标准流高半个等级，会覆盖标签不会覆盖内容\r\n    ![](./images/CSS3重学笔记/2022-06-08-14-55-38.png)\r\n* 浮动会顶对齐\r\n* 浮动找浮动，下一个浮动元素会在上一个浮动元素左右排列\r\n    ![](./images/CSS3重学笔记/2022-06-08-14-58-44.png)\r\n* 可以用margin控制布局\r\n  ![](./images/CSS3重学笔记/2022-06-08-15-09-04.png)\r\n\r\n\r\n* 浮动后的元素可以设置宽高，能在一行显示，具备行内块特点\r\n\r\n* 浮动后的元素不能通过margin:0 auto;方式居中，\r\n    * 可能是因为这种方式居中的原理是设置上下外边距为0，然后让浏览器根据当前标签的父标签的宽来自动auto计算当前标签的左右外边距实现居中，而当设置为浮动后，元素脱离了标准流，相当于没有父标签了，就没办法自动计算左右外边距了\r\n\r\n\r\n### 浮动布局案例1实现\r\n* 要求使用浮动\r\n    ![](./images/CSS3重学笔记/2022-06-08-15-41-03.png)\r\n* 写bug记录......\r\n    * 设置一个div版心居中时，记住要先给他加宽度，否则默认占父元素宽度的100%\r\n```html\r\n<style>\r\n    .nav{\r\n        height: 40px;\r\n        background-color: #333;\r\n    }\r\n    .head,\r\n    .content{\r\n        margin: 0 auto;\r\n    }\r\n    .head{\r\n        height: 100px;\r\n        width: 1226px;\r\n        background-color: #ffc0cd;\r\n    }\r\n    .content{\r\n        width: 1226px;\r\n        height: 460px;\r\n        background-color: red;\r\n    }\r\n    .left{\r\n        width: 234px;\r\n        height: 460px;\r\n        background-color: #ffa500;\r\n        float: left;\r\n    }\r\n    .right{\r\n        width: 992px;\r\n        height: 460px;\r\n        background-color: #87ceeb;\r\n        float: left;\r\n    }\r\n</style>\r\n<body>\r\n    <div class=\"nav\"></div>\r\n    <div class=\"head\"></div>\r\n    <div class=\"content\">\r\n        <div class=\"left\"></div>\r\n        <div class=\"right\"></div>\r\n    </div>\r\n</body>\r\n```\r\n效果：\r\n![](./images/CSS3重学笔记/2022-06-08-15-40-06.png)\r\n\r\n### 浮动布局案例2实现(小米产品页)\r\n![](./images/CSS3重学笔记/2022-06-08-16-51-05.png)\r\n```html\r\n<style>\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    .box{\r\n        margin: 0 auto;\r\n        width: 1226px;\r\n        height: 614px;\r\n        background-color: red;\r\n    }\r\n    .left{\r\n        float: left;\r\n        width: 234px;\r\n        height: 614px;\r\n        background-color: #800080;\r\n    }\r\n    .right{\r\n        float: left;\r\n        width: 992px;\r\n        height: 614px;\r\n        background-color: white;\r\n    }\r\n    .item{\r\n        float: left;\r\n        margin: 0 0 14px 14px;\r\n        width: 234px;\r\n        height: 300px;\r\n        background-color: #87ceeb;\r\n    }\r\n    ul{\r\n        list-style: none;\r\n    }\r\n</style>\r\n<div class=\"box\">\r\n    <div class=\"left\"></div>\r\n    <div class=\"right\">\r\n        <ul>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n            <li class=\"item\"></li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n```\r\n效果：\r\n![](./images/CSS3重学笔记/2022-06-08-16-51-39.png)\r\n\r\n\r\n### 浮动布局案例3实现(网页导航条)\r\n![](./images/CSS3重学笔记/2022-06-08-19-37-18.png)\r\n```html\r\n<style>\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    .nav{\r\n        width: 640px;\r\n        height: 50px;\r\n        background-color: #ffc0cb;\r\n    }\r\n    .nav li{\r\n        /* 网站的导航条应该用li */\r\n        /* 根据li独占一行的特性判断其为block元素 */\r\n        float: left;\r\n    }\r\n    .nav .item{\r\n        display: block;\r\n        width: 80px;\r\n        height: 50px;\r\n        text-align: center;\r\n        font-size: 16px;\r\n        line-height: 50px;\r\n        color: white;\r\n        text-decoration: none;\r\n    }\r\n    .nav li:hover{\r\n        background-color: #008000;\r\n    }\r\n    ul{\r\n        list-style: none;\r\n    }\r\n</style>\r\n<div class=\"nav\">\r\n    <ul>\r\n        <li><a href=\"#\" class=\"item\">新闻1</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻2</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻3</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻4</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻5</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻6</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻7</a></li>\r\n        <li><a href=\"#\" class=\"item\">新闻8</a></li>\r\n    </ul>\r\n</div>\r\n```\r\n效果:\r\n![](./images/CSS3重学笔记/2022-06-08-20-14-11.png)\r\n\r\n### 清除浮动\r\n* 含义：清除浮动属性给其他标签带来的影响；\r\n* 当子元素浮动，子元素就不在标准流中，于是就不能撑开标准流的块级父元素，**如果父元素没有设置高度，子元素浮动后父元素的高度为0**，因为子元素浮动后不占位置；\r\n\r\n#### 设置行高法\r\n* 如果内容允许给父元素设置固定的高 就设置固定的高\r\n\r\n####  添加额外标签清除法；\r\n* 在父元素内容**最后**添加**块级元素**(一般类名为`clearfix`的div)，给添加的元素设置`clear:both;`\r\n* `clear属性`：专为解决此问题打造，取值为`left`时清除左浮动影响，取值为`right`时清除右浮动影响，取值为`both`时清除全部的影响。\r\n* 缺点：额外添加了标签，复杂化了HTML结构\r\n    ```html\r\n    <style>\r\n        .clearfix{\r\n            clear:both;\r\n        }\r\n    </style>\r\n    <div>\r\n        <div>浮动1</div>\r\n        <div>浮动2</div>\r\n        <div class=\"clearfix\"></div>\r\n    </div>\r\n    ```\r\n\r\n#### 单伪元素清除法\r\n* 先给父标签附加类名(clearfix),然后利用after伪元素\r\n* 优点；\r\n* 基本写法\r\n    ```css\r\n        .clearfix::after{\r\n            content:'';\r\n            display:block;\r\n            clear:both;\r\n        }\r\n    ```\r\n* 补充写法\r\n    ```css\r\n        .clearfix::after{\r\n            content:'';\r\n            display:block;\r\n            clear:both;\r\n            /* 多出的两行是为了解决低版本浏览器兼容性问题，某些浏览器(ie6、7、8)会认为伪元素有高度 */\r\n            height:0;\r\n            visibility:hidden;\r\n        }\r\n    ```\r\n\r\n#### 双伪元素清除法\r\n```css\r\n/* .clearfix::before,出现的目的在于解决外边距塌陷问题 */\r\n/* 塌陷问题的产生的情形是，嵌套的块级元素，这里把两个伪元素转换成table元素，就避免了这个问题 */\r\n.clearfix::before,\r\n.clearfix::after{\r\n    content:\"\";\r\n    display:table;\r\n}\r\n.clearfix::after{\r\n    clear:both;\r\n}\r\n```\r\n\r\n#### overflow属性清除\r\n* 直接给父元素设置属性`overflow:hidden;`\r\n* 优点：方便\r\n\r\n## 去除列表默认符号\r\n```css\r\nul{\r\n    list-style: none;\r\n}\r\n```\r\n效果对比：![](./images/CSS3重学笔记/2022-06-08-08-51-33.png)\r\n\r\n\r\n## 定位\r\n- [定位](#定位)\r\n    - [网页常见布局方式](#网页常见布局方式)\r\n    - [定位的使用步骤](#定位的使用步骤)\r\n    - [相对定位](#相对定位)\r\n    - [绝对定位](#绝对定位)\r\n        - [绝对定位的居中](#绝对定位的居中)\r\n    - [绝对定位fixed](#绝对定位fixed)\r\n    - [修改定位元素的层级关系](#修改定位元素的层级关系)\r\n        - [元素的层级关系](#元素的层级关系)\r\n        - [z-index](#z-index)\r\n    \r\n\r\n### 网页常见布局方式\r\n* 标准流： 块级元素垂直布局；行内/行内块元素水平布局\r\n* 浮动： 让块级元素水平布局\r\n* 定位\r\n    * 可以自由的让元素摆放在网页中任意位置\r\n    * 应用于盒子的层叠情况\r\n\r\n### 定位的使用步骤\r\n1. 设置定位方式\r\n    * 属性名 `position`\r\n    * 属性值 \r\n        * `static` 静态定位(默认，不定位)\r\n        * `relative` 相对定位\r\n        * `absolute` 绝对定位\r\n        * `fixed` 固定定位\r\n2. 设置偏移量\r\n    * 属性名 `top` `bottom` `left` `right` 水平和垂直方向各选其一\r\n    * 属性值 **像素** **百分比**\r\n\r\n### 相对定位\r\n* 相对于 **自己** 原先的位置移动\r\n* 不会改变元素显示模式\r\n* 仍然占有原先的位置(没有脱标)，空出的位置不会被其他元素占用\r\n* 不写偏移属性不改变位置\r\n* 同时写 left right 只有 left 会生效，无论顺序\r\n* 同时写 top bottom 只有 top 会生效，无论顺序\r\n```css\r\n.box{\r\n    /* 相对于自己原先位置移动10px */\r\n    position: relative;\r\n    top:10px;\r\n    left:10px;\r\n}\r\n```\r\n\r\n### 绝对定位\r\n* 相对于 **非静态定位** 的第一个 **父(祖宗)元素** 进行定位\r\n    * 如果其父元素有定位就相对于**父元素**定位\r\n    * 如果其父元素没有定位则相对浏览器窗口定位\r\n    * 父级可以是相对定位也可以是绝对定位，一般用相对定位;(**子绝父相**)\r\n* 会改变元素的显示模式，块元素会变行内元素\r\n* 不再占有原先位置(脱标),其他元素会填充该元素原先所在的位置![](./images/CSS3重学笔记/2022-06-10-17-19-54.png)\r\n* 当设置 `position: absolute;` 却不指定偏移时，元素保持原先位置(无论其父元素是不是静态定位)\r\n\r\n#### 绝对定位的居中\r\n* 设置绝对定位后不能使用`margin 0 auto;`方式居中\r\n* 解决办法1(手动计算)\r\n```css\r\n.box{\r\n    /* 绝对定位到父元素50%的位置，然后反方向移动宽高的一半 */\r\n    position: absolute;\r\n    left:50%;\r\n    top:50%;\r\n    margin-left: -250px;\r\n    margin-top: -150px;\r\n    width: 500px;\r\n    height: 300px;\r\n}\r\n```\r\n* 解决办法2(自动计算)\r\n```css\r\n.box{\r\n    /* 使用transform属性移动自身宽高的一半 */\r\n    position: absolute;\r\n    left:50%;\r\n    top:50%;\r\n    transform: translate(-50%,-50%);\r\n    width: 500px;\r\n    height: 300px;\r\n}\r\n```\r\n\r\n### 绝对定位fixed\r\n* 相对于**浏览器窗口**定位，不随滚动而位移\r\n* 会改变元素的显示模式，块元素变为行内块元素\r\n* 不再占有原先位置(脱标),其他元素会填充该元素原先所在的位置\r\n\r\n\r\n### 修改定位元素的层级关系\r\n\r\n#### 元素的层级关系\r\n* 不同**布局方式**元素的层级关系\r\n    + `标准流 < 浮动 < 定位`\r\n+ 不同**定位**之间的层级关系\r\n    + 相对、绝对、固定默认层级**相同**，会根据html标签代码的书写顺序（而不是css代码的书写顺序）来渲染，先渲染的会被后渲染的覆盖\r\n\r\n#### z-index\r\n+ 对于有定位属性的元素，想要要修改其渲染后的覆盖顺序，只需要调整html标签的顺序\r\n+ 如果不想修改html标签的顺序，可以使用`z-index:整数;`属性来控制，相当于指定其在第几图层。\r\n+ z-index只对有定位属性的元素生效\r\n+ 定位的默认层级是0\r\n\r\n\r\n\r\n## 文字的垂直对齐\r\n- [文字的垂直对齐](#文字的垂直对齐)\r\n    - [概念](#概念)\r\n    - [行内块元素的基线、底线、顶线、中线的概念](#行内块元素的基线底线顶线中线的概念)\r\n    - [实测效果](#实测效果)\r\n    - [文本框和按钮的中线对齐](#文本框和按钮的中线对齐)\r\n    - [图片和按钮框的中线对齐](#图片和按钮框的中线对齐)\r\n    - [嵌套关系的div和文本框的顶对齐](#嵌套关系的div和文本框的顶对齐)\r\n    - [嵌套关系的div和img的中线对齐](#嵌套关系的div和img的中线对齐)\r\n        - [情形1](#情形1)\r\n        - [情形2](#情形2)\r\n    - [该属性的其他属性值](#该属性的其他属性值)\r\n\r\n### 概念\r\n* 浏览器会将`行内元素`和`行内块元素`当成文字处理，默认的对齐方式是`基线对齐`\r\n* `块元素不会被当成文字处理。`\r\n\r\n### 行内块元素的基线、底线、顶线、中线的概念\r\n1. 顶线：**中文汉字**的的上端沿\r\n2. 中线：顶线和底线的中间线\r\n3. 基线:（base line）英文字母“x”的下端沿；\r\n4. 底线：**中文汉字**的下端沿\r\n![](./images/CSS3重学笔记/2022-06-11-17-24-43.png)\r\n\r\n### 实测效果\r\n* 没有文字时，按钮默认基线为下边缘，文本框的基线为文字输入区域下边缘\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-18-05.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-19-08.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-19-39.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-20-27.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-21-43.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-26-25.png)\r\n* 基线对齐不能实现完美对齐\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-28-18.png)\r\n\r\n### 文本框和按钮的中线对齐\r\n* `vertical-align: middle;`\r\n    ![](./images/CSS3重学笔记/2022-06-11-16-51-09.png)\r\n\r\n\r\n### 图片和按钮框的中线对齐\r\n* 默认基线对齐\r\n    ![](./images/CSS3重学笔记/2022-06-11-17-39-33.png)\r\n\r\n* 修改后\r\n    ![](./images/CSS3重学笔记/2022-06-11-17-40-16.png)\r\n\r\n### 嵌套关系的div和文本框的顶对齐\r\n* 修改前\r\n![](./images/CSS3重学笔记/2022-06-11-17-41-16.png)\r\n* 修改为顶对齐后\r\n    ![](./images/CSS3重学笔记/2022-06-11-17-43-01.png)\r\n\r\n### 嵌套关系的div和img的中线对齐\r\n\r\n#### 情形1\r\n* 修改前:div高度为默认，img高度设置为400px,但由于浏览器默认是基线对齐，底部会被撑开一条线\r\n    ![](./images/CSS3重学笔记/2022-06-11-17-56-38.png)\r\n* 解决办法\r\n    * 修改为中线对齐 \r\n    * **另一种解决方法是把img转换成块元素**\r\n* 效果：\r\n    ![](./images/CSS3重学笔记/2022-06-11-17-57-10.png)\r\n\r\n#### 情形2\r\n* 修改前：div拥有固定行高\r\n    ![](./images/CSS3重学笔记/2022-06-11-18-17-48.png)\r\n\r\n* 修改图片为中线对齐，同时在div中设置文字行高`line-height`为自身的高度，便可实现居中\r\n    ![](./images/CSS3重学笔记/2022-06-11-18-23-53.png)\r\n    ![](./images/CSS3重学笔记/2022-06-12-23-02-58.png)\r\n\r\n* 更进一步的，因为图片是行内块，所以要使图片水平方向居中，只需给父级元素添加text-aline:center\r\n    ![](./images/CSS3重学笔记/2022-06-11-18-25-34.png)\r\n    ![](./images/CSS3重学笔记/2022-06-11-18-25-45.png)\r\n\r\n### 该属性的其他属性值\r\n1. 基线对齐（vertical-align : baseline）使元素的基线同基准元素（取行高最高的作为基准）的基线对齐\r\n2. 顶端对齐（vertical-align : top）是将元素的行内框的顶端与行框的顶端对齐\r\n3. 底端对齐（vertical-align : bottom）与顶端对齐（vertical-align : top）相反\r\n4. 中间对齐（vertical-align : middle）通常使用在图片上，将图片的垂直方向的中线与文本行的中线（文字元素的行内框中线）对齐。\r\n5. 文本顶端对齐（vertical-align : text-top）是将元素行内框的顶端同行框的顶线对齐\r\n6. 文本底端对齐（vertical-align : text-bottom）是将元素行内框的底端同行框的底线对齐\r\n7. 上标（vertical-align:super）使元素的基线相对于基准元素的基线升高；\r\n8. 下标（vertical-align:sub）使元素的基线降低，移动的幅度CSS规范中没有规定，由浏览器来决定。\r\n\r\n\r\n## 鼠标光标类型\r\n* 属性名cursor\r\n* 属性值\r\n    * default 默认鼠标箭头\r\n    * pointer 小手\r\n    * text 工字形光标\r\n    * move 十字光标\r\n\r\n## 圆角边框\r\n* 属性名 border-radius\r\n* 属性值\r\n    * 数字+px\r\n    * 百分比\r\n* 书写格式 \r\n    * `border-radius: 左上 右上 右下 左下;` ;\r\n    * 可以像padding一样的格式省略为只写一个值、两个值、三个值或写全四个值；\r\n* 取值含义\r\n    * ![](./images/CSS3重学笔记/2022-06-11-20-25-46.png)\r\n* 画正圆\r\n    * 对正方形设置该属性\r\n    * `border-radius:50%;` \r\n    * 该属性的值最大取50%\r\n    * 应用：头像![](./images/CSS3重学笔记/2022-06-11-20-43-03.png)\r\n* 画胶囊\r\n    * 对长方形设置该属性\r\n    * `border-radius:高度的一半;`\r\n    * 应用 ![](./images/CSS3重学笔记/2022-06-11-20-42-30.png)\r\n\r\n## 溢出内容显示效果\r\n* 属性名：overflow\r\n* 属性值：\r\n    * visible 溢出部分可见（默认）\r\n    * hidden 溢出部分隐藏\r\n    * scroll 无论是否溢出，显示滚动条\r\n    * auto 自动根据内容是否溢出而显示滚动条\r\n* 测试效果\r\n    * visible ![](./images/CSS3重学笔记/2022-06-11-20-55-39.png)\r\n    * hidden ![](./images/CSS3重学笔记/2022-06-11-20-56-48.png)\r\n    * scroll ![](./images/CSS3重学笔记/2022-06-11-20-57-48.png)\r\n    * auto ![](./images/CSS3重学笔记/2022-06-11-20-58-44.png)\r\n\r\n## 元素的隐藏\r\n* `visibility:hidden;`\r\n    * 不常用，\r\n    * 只是单纯隐藏，仍然**占用标准流**\r\n* `display:none;`\r\n    * 常用\r\n    * 隐藏后**不占**用标准流\r\n* 应用：子菜单：![](./images/CSS3重学笔记/2022-06-11-21-05-06.png)\r\n* 案例：\r\n    * 先设置其默认情况隐藏![](./images/CSS3重学笔记/2022-06-11-21-21-57.png)\r\n    * 再设置其鼠标悬停时的显示模式为块![](./images/CSS3重学笔记/2022-06-11-21-21-15.png)\r\n    * 效果![](./images/CSS3重学笔记/2022-06-11-21-22-18.png)\r\n\r\n## 透明属性\r\n属性名：opacity\r\n取值：0~1之间的数字；0表示完全透明，1表示完全不透明\r\n作用：控制元素的整体透明度（包括其文字、图片的内容）\r\n\r\n## 过渡\r\n* 让元素的样式慢慢变化，常配合hover使用\r\n* 语法:\r\n    * `transition: 属性名 时间s;`\r\n    * `transition: 属性名 时间s,属性名 时间s,属性名 时间s,属性名 时间s;`\r\n    * `transition: all 时间s;`\r\n* 注意点\r\n    *  默认状态 和 `hover` 状态**样式不同**，才能有过渡效果 \r\n    * `transition`属性给需要过渡的**元素本身**加 \r\n    * `transition`属性设置在不同状态中，效果不同的\r\n        1. 给默认状态设置，鼠标**移入移出都有过渡效果**\r\n        2.  给hover状态设置，鼠标**移入有过渡效果，移出没有过渡效果**\r\n* 示例\r\n```html\r\n    <style>\r\n    .test{\r\n            width: 100px;\r\n            height: 100px;\r\n            background-color: green;\r\n            /* transition: width 1s; */\r\n            /* transition: width 1s,background-color 1s; */\r\n            transition: all 1s;\r\n        }\r\n        .test:hover{\r\n            width: 200px;\r\n            background-color: red;\r\n        }\r\n    </style>\r\n    <div class=\"test\"></div>\r\n```\r\n效果：\r\n<style>\r\n.test{\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: green;\r\n        /* transition: width 1s; */\r\n        /* transition: width 1s,background-color 1s; */\r\n        font-size:10px;\r\n        transition: all 1s;\r\n    }\r\n    .test:hover{\r\n        width: 200px;\r\n        background-color: red;\r\n        font-size:50px;\r\n    }\r\n</style>\r\n<div class=\"test\">文字</div>\r\n\r\n## 去除鼠标选中input-text后显示的默认边框\r\n* 设置属性：`outline:none;`\r\n* 去除前\r\n![](./images/CSS3重学笔记/2022-06-13-02-06-27.png)\r\n* 取出后\r\n![](./images/CSS3重学笔记/2022-06-13-02-05-32.png)\r\n\r\n## css3的书写顺序\r\n可以先按编写思略写，再按能使浏览器加载更快的书写顺序修改\r\n\r\n### 编写思路\r\n* 从外到内\r\n* 先宽高背景色\r\n* 再调节内容位置\r\n* 最后控制文字细节\r\n\r\n### 使浏览器加载更快的书写顺序\r\n1. （定位）\r\n2. 浮动 或 display\r\n3. 盒子模型相关属性\r\n    * width height \r\n    * background-color\r\n    * margin border padding \r\n4. 文字样式 font系列\r\n\r\n### 正确书写顺序使浏览器加载更快的原因\r\n* 该部分复制自CSDN\r\n* 正确的书写顺序\r\n    1. 定位属性：position display float left top right bottom overflow clear z-index\r\n    2. 自身属性：width height padding border margin background\r\n    3. 文字样式：font-family font-size font-style font-weight font-varient color\r\n    4. 文本属性：text-align vertical-align text-wrap text-transform text-indent text-decoration letter-spacing word-spacing white-space text-overflow\r\n    5. css3中新增属性：content box-shadow border-radius transform……\r\n\r\n* 目的：减少浏览器reflow（回流），提升浏览器渲染dom的性能\r\n\r\n* 原理：浏览器的渲染流程为——\r\n    1. 解析html构建dom树，解析css构建css树：将html解析成树形的数据结构，将css解析成树形的数据结构\r\n    2. 构建render树：DOM树和CSS树合并之后形成的render树。\r\n    3. 布局render树：有了render树，浏览器已经知道那些网页中有哪些节点，各个节点的css定义和以及它们的从属关系，从而计算出每个节点在屏幕中的位置。\r\n    4. 绘制render树：按照计算出来的规则，通过显卡把内容画在屏幕上。\r\n    * css样式解析到显示至浏览器屏幕上就发生在②③④步骤，可见浏览器并不是一获取到css样式就立马开始解析而是根据css样式的书写顺序将之按照dom树的结构分布render样式，完成第②步，然后开始遍历每个树结点的css样式进行解析，此时的css样式的遍历顺序完全是按照之前的书写顺序。在解析过程中，**一旦浏览器发现某个元素的定位变化影响布局，则需要倒回去重新渲染**，正如按照这样的书写书序：\r\n        ```css\r\n            width: 100px;\r\n            height: 100px;\r\n            background-color: red;\r\n            position: absolute;\r\n        ```\r\n    * 当浏览器解析到position的时候突然发现该元素是绝对定位元素需要脱离文档流，而之前却是按照普通元素进行解析的，所以不得不重新渲染，解除该元素在文档中所占位置，然而由于该元素的占位发生变化，其他元素也可能会受到它回流的影响而重新排位。最终导致③步骤花费的时间太久而影响到④步骤的显示，影响了用户体验。\r\n    * 所以规范的的css书写顺序对于文档渲染来说一定是事半功倍的！ \r\n\r\n\r\n\r\n## html嵌套原则\r\n* ![](./images/CSS3重学笔记/2022-06-06-09-32-35.png)\r\n* 块级元素一般作为大容器，\r\n    * 可以嵌套：\r\n        * 块级元素\r\n        * 行内元素 行内块元素 （这两个只能嵌套行内和行内块元素）\r\n    * **但p标签禁止嵌套div p h等标签**\r\n    * **h和p禁止互相嵌套**\r\n* a标签可以嵌套任意标签\r\n    * 但不要a标签嵌套a标签\r\n\r\n\r\n\r\n## vscode的emment插件语法（自带插件）\r\n![](./images/CSS3重学笔记/2022-06-05-17-40-04.png)\r\n* div+类名 div.class1\r\n* p+id p#id\r\n* a+id+类名 a.id1#class1\r\n* 同级标签 a+p\r\n* 嵌套标签 ul>li\r\n* 多个 ul*3>li*3\r\n* 内容 ul*3>li{$}*3\r\n* css\r\n    * css提示规律\r\n        * 按首字母提示\r\n    w300+h200+bgc\r\n\r\n## pxcook像素大厨的基本使用\r\n* 写网页的测量工具\r\n"}