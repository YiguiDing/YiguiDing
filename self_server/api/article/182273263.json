{"shortInfo":{"title":"heart","date":"2022-11-10T12:05:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["笔记"],"categories":"笔记","id":182273263,"countWords":833,"readSeconds":83.3,"assetsbaseUrl":"/self_server/assets/"},"content":"<canvas id=\"pinkboard\" width=\"1159\" height=\"851\"></canvas>\r\n<script>\r\n        var settings = {\r\n            particles: {\r\n                length: 500, \r\n                duration: 2, \r\n                velocity: 100, \r\n                effect: -0.75, \r\n                size: 32, \r\n            },\r\n        };\r\n        (function () { var b = 0; var c = [\"ms\", \"moz\", \"webkit\", \"o\"]; for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) { window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"]; window.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"] } if (!window.requestAnimationFrame) { window.requestAnimationFrame = function (h, e) { var d = new Date().getTime(); var f = Math.max(0, 16 - (d - b)); var g = window.setTimeout(function () { h(d + f) }, f); b = d + f; return g } } if (!window.cancelAnimationFrame) { window.cancelAnimationFrame = function (d) { clearTimeout(d) } } }());\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                this.x = (typeof x !== 'undefined') ? x : 0;\r\n                this.y = (typeof y !== 'undefined') ? y : 0;\r\n            }\r\n            Point.prototype.clone = function () {\r\n                return new Point(this.x, this.y);\r\n            };\r\n            Point.prototype.length = function (length) {\r\n                if (typeof length == 'undefined')\r\n                    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n                this.normalize();\r\n                this.x *= length;\r\n                this.y *= length;\r\n                return this;\r\n            };\r\n            Point.prototype.normalize = function () {\r\n                var length = this.length();\r\n                this.x /= length;\r\n                this.y /= length;\r\n                return this;\r\n            };\r\n            return Point;\r\n        })();\r\n        var Particle = (function () {\r\n            function Particle() {\r\n                this.position = new Point();\r\n                this.velocity = new Point();\r\n                this.acceleration = new Point();\r\n                this.age = 0;\r\n            }\r\n            Particle.prototype.initialize = function (x, y, dx, dy) {\r\n                this.position.x = x;\r\n                this.position.y = y;\r\n                this.velocity.x = dx;\r\n                this.velocity.y = dy;\r\n                this.acceleration.x = dx * settings.particles.effect;\r\n                this.acceleration.y = dy * settings.particles.effect;\r\n                this.age = 0;\r\n            };\r\n            Particle.prototype.update = function (deltaTime) {\r\n                this.position.x += this.velocity.x * deltaTime;\r\n                this.position.y += this.velocity.y * deltaTime;\r\n                this.velocity.x += this.acceleration.x * deltaTime;\r\n                this.velocity.y += this.acceleration.y * deltaTime;\r\n                this.age += deltaTime;\r\n            };\r\n            Particle.prototype.draw = function (context, image) {\r\n                function ease(t) {\r\n                    return (--t) * t * t + 1;\r\n                }\r\n                var size = image.width * ease(this.age / settings.particles.duration);\r\n                context.globalAlpha = 1 - this.age / settings.particles.duration;\r\n                context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\r\n            };\r\n            return Particle;\r\n        })();\r\n        var ParticlePool = (function () {\r\n            var particles,\r\n                firstActive = 0,\r\n                firstFree = 0,\r\n                duration = settings.particles.duration;\r\n            function ParticlePool(length) {\r\n                // create and populate particle pool\r\n                particles = new Array(length);\r\n                for (var i = 0; i < particles.length; i++)\r\n                    particles[i] = new Particle();\r\n            }\r\n            ParticlePool.prototype.add = function (x, y, dx, dy) {\r\n                particles[firstFree].initialize(x, y, dx, dy);\r\n                // handle circular queue\r\n                firstFree++;\r\n                if (firstFree == particles.length) firstFree = 0;\r\n                if (firstActive == firstFree) firstActive++;\r\n                if (firstActive == particles.length) firstActive = 0;\r\n            };\r\n            ParticlePool.prototype.update = function (deltaTime) {\r\n                var i;\r\n                // update active particles\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].update(deltaTime);\r\n                }\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].update(deltaTime);\r\n                    for (i = 0; i < firstFree; i++)\r\n                        particles[i].update(deltaTime);\r\n                }\r\n                // remove inactive particles\r\n                while (particles[firstActive].age >= duration && firstActive != firstFree) {\r\n                    firstActive++;\r\n                    if (firstActive == particles.length) firstActive = 0;\r\n                }\r\n            };\r\n            ParticlePool.prototype.draw = function (context, image) {\r\n                // draw active particles\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].draw(context, image);\r\n                }\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].draw(context, image);\r\n                    for (i = 0; i < firstFree; i++)\r\n                        particles[i].draw(context, image);\r\n                }\r\n            };\r\n            return ParticlePool;\r\n        })();\r\n        (function (canvas) {\r\n            var context = canvas.getContext('2d'),\r\n                particles = new ParticlePool(settings.particles.length),\r\n                particleRate = settings.particles.length / settings.particles.duration, // particles/sec\r\n                time;\r\n            // get point on heart with -PI <= t <= PI\r\n            function pointOnHeart(t) {\r\n                return new Point(\r\n                    160 * Math.pow(Math.sin(t), 3),\r\n                    130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25\r\n                );\r\n            }\r\n            // creating the particle image using a dummy canvas\r\n            var image = (function () {\r\n                var canvas = document.createElement('canvas'),\r\n                    context = canvas.getContext('2d');\r\n                canvas.width = settings.particles.size;\r\n                canvas.height = settings.particles.size;\r\n                // helper function to create the path\r\n                function to(t) {\r\n                    var point = pointOnHeart(t);\r\n                    point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\r\n                    point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\r\n                    return point;\r\n                }\r\n                // create the path\r\n                context.beginPath();\r\n                var t = -Math.PI;\r\n                var point = to(t);\r\n                context.moveTo(point.x, point.y);\r\n                while (t < Math.PI) {\r\n                    t += 0.01; // baby steps!\r\n                    point = to(t);\r\n                    context.lineTo(point.x, point.y);\r\n                }\r\n                context.closePath();\r\n                // create the fill\r\n                context.fillStyle = '#ea80b0';\r\n                context.fill();\r\n                // create the image\r\n                var image = new Image();\r\n                image.src = canvas.toDataURL();\r\n                return image;\r\n            })();\r\n            // render that thing!\r\n            function render() {\r\n                // next animation frame\r\n                requestAnimationFrame(render);\r\n                // update time\r\n                var newTime = new Date().getTime() / 1000,\r\n                    deltaTime = newTime - (time || newTime);\r\n                time = newTime;\r\n                // clear canvas\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n                // create new particles\r\n                var amount = particleRate * deltaTime;\r\n                for (var i = 0; i < amount; i++) {\r\n                    var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\r\n                    var dir = pos.clone().length(settings.particles.velocity);\r\n                    particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\r\n                }\r\n                // update and draw particles\r\n                particles.update(deltaTime);\r\n                particles.draw(context, image);\r\n            }\r\n            // handle (re-)sizing of the canvas\r\n            function onResize() {\r\n                canvas.width = canvas.clientWidth;\r\n                canvas.height = canvas.clientHeight;\r\n            }\r\n            window.onresize = onResize;\r\n            // delay rendering bootstrap\r\n            setTimeout(function () {\r\n                onResize();\r\n                render();\r\n            }, 10);\r\n        })(document.getElementById('pinkboard'));\r\n        </script>"}