{"shortInfo":{"title":"使用原生js实现轮播图","date":"2022-07-05T21:55:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["轮播图","js"],"categories":"笔记","id":73,"countWords":6982,"readSeconds":698.2,"assetsbaseUrl":"/self_server/assets/"},"content":"# 使用原生js实现轮播图\r\n## 最终效果\r\n\r\n<div class=\"banner\">\r\n    <ul>\r\n        <li data-active=\"true\" style=\"background-color: skyblue;\">轮播图1<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: pink;\">轮播图2<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: green;\">轮播图3<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: yellowgreen;\">轮播图4<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: gold;\">轮播图5<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n    </ul>\r\n    <span class=\"left\">《</span>\r\n    <span class=\"right\">》</span>\r\n    <div class=\"bottom\">\r\n        <ul>\r\n            <!--\r\n            <li class=\"active\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            -->\r\n        </ul>\r\n    </div>\r\n</div>\r\n<style>\r\n    .banner *{\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    .banner *::before,\r\n    .banner *::after{\r\n        content: none !important;\r\n    }\r\n    .banner{\r\n        position: relative;\r\n        margin: 0 auto;\r\n        width: 100%;\r\n        height: 300px;\r\n        background-color: gray;\r\n        overflow: hidden;\r\n    }\r\n    .banner>ul{\r\n        position: relative;\r\n        top: 0;\r\n        /* 去除ul默认的左40px的内边距padding */\r\n        padding: 0;\r\n        /* 去除ul默认的上下外边距16px */\r\n        margin: 0;\r\n        height: 100%;\r\n        list-style: none;\r\n        white-space:nowrap;\r\n    }\r\n    .banner>ul>li{\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: pink;\r\n        vertical-align: top;\r\n        color: black;\r\n    }\r\n    .banner>.left,\r\n    .banner>.right\r\n    {\r\n        position: absolute;\r\n        display: inline-block;\r\n        width: 25px;\r\n        height: 25px;\r\n        /* background-color: gainsboro; */\r\n        cursor: pointer;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        font-size: 15px;\r\n        line-height: 25px;\r\n        color: white;\r\n    }\r\n    .banner>.left{\r\n        left: 0;\r\n        top: 50%;\r\n        transform: translate(0,-50%);\r\n    }\r\n    .banner>.right{\r\n        right: 0;\r\n        top: 50%;\r\n        transform: translate(0,-50%);\r\n    }\r\n    .banner>.bottom{\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        transform: translate(0,-100%);\r\n        width: 100%;\r\n        height: 10px;\r\n        /* background-color: white; */\r\n        text-align: center;\r\n    }\r\n    .banner>.bottom>ul{\r\n        display: inline-block;\r\n        height: 10px;\r\n        /* 去除ul默认的padding,margin */\r\n        padding: 0;\r\n        margin: 0;\r\n        list-style: none;\r\n        /* background-color: green; */\r\n        /* 防止li按文字的baseline对齐 */\r\n        vertical-align: top;\r\n    }\r\n    .banner>.bottom>ul>li{\r\n        float: left;\r\n        margin: 0 5px;\r\n        height: 10px;\r\n        width: 10px;\r\n        background-color: rgb(195, 195, 195);\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n    .banner>.bottom>ul>li.active{\r\n        background-color: white;\r\n    }\r\n</style>\r\n<script>\r\n    (function(){\r\n        var banner = document.querySelector(\".banner\") \r\n        var bannerUl = document.querySelector(\".banner>ul\") \r\n        var bottomUl = document.querySelector(\".banner>.bottom>ul\") \r\n        var leftBtn = document.querySelector(\".banner>.left\") \r\n        var rightBtn = document.querySelector(\".banner>.right\") \r\n        //为bannerUl添加index属性\r\n        for(var i=0;i<bannerUl.childElementCount;i++)\r\n        {\r\n            bannerUl.children[i].dataset[\"index\"]=i;\r\n        }\r\n        // 为bottom>UL创建li\r\n        for(var i=0;i<bannerUl.childElementCount;i++)\r\n        {\r\n            bottomUl.appendChild(document.createElement(\"li\"))\r\n        }\r\n        // 为bottomU>li[0]添加active类名\r\n        bottomUl.children[0].classList.add(\"active\")\r\n        // 为bottomU>li添加index属性\r\n        for(var i=0;i<bottomUl.childElementCount;i++)\r\n        {\r\n            bottomUl.children[i].dataset[\"index\"]=i;\r\n        }\r\n        //自动播放\r\n        var autoSwitch = null;\r\n        //开启自动播放\r\n        function startAutoSwitch(){\r\n            stopAutoSwitch();//先清除定时器\r\n            autoSwitch = setInterval(function(){\r\n                //循环获取下一个li\r\n                var nextLi = getNextActivedElement(bannerUl)\r\n                //将ul移动，偏移量为li的负offset\r\n                animate(bannerUl,-nextLi.offsetLeft)\r\n                //更新底部Ul状态\r\n                updataBottomUl(nextLi.dataset[\"index\"])\r\n            },5000);\r\n        }\r\n        //关闭自动播放\r\n        function stopAutoSwitch(){\r\n            clearInterval(autoSwitch)\r\n        }\r\n        //运行自动播放\r\n        startAutoSwitch();\r\n        //鼠标移入banner则暂停自动播放\r\n        banner.addEventListener(\"mouseenter\",function(){\r\n            stopAutoSwitch();\r\n        })\r\n        //鼠标离开banner则启动自动播放\r\n        banner.addEventListener(\"mouseleave\",function(){\r\n            startAutoSwitch();\r\n        })\r\n        // Pc端鼠标拖动banner>ul效果\r\n        bannerUl.addEventListener(\"mousedown\",function(e){\r\n            stopAutoSwitch();//暂停自动播放\r\n            bannerUl.mosedownStartPos = e.clientX ;//鼠标按下时的坐标\r\n            bannerUl.mosedownoffsetLeft = bannerUl.offsetLeft;//鼠标按下时，bannerUl的offsetleft\r\n            document.addEventListener(\"mousemove\",bannerUlMoveWithMouse)//添加事件监听鼠标移动，实现拖动效果\r\n            document.addEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos)//添加事件监听鼠标弹起，实现拖动归位效果\r\n            function bannerUlMoveWithMouse(e){\r\n                //鼠标移动的距离\r\n                bannerUl.mosedownMoveGap = e.clientX  - bannerUl.mosedownStartPos; \r\n                // 新偏移 = 原偏移 + 鼠标移动距离\r\n                bannerUl.style.left = bannerUl.mosedownoffsetLeft + bannerUl.mosedownMoveGap + \"px\"\r\n            }\r\n            function bannerUlMoveWithMouseToCorrectPos (e){//将ul移动到正确的位置上\r\n                if(bannerUl.mosedownMoveGap>50)//当鼠标移动距离超过一个阈值\r\n                {\r\n                    moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }\r\n                else if(bannerUl.mosedownMoveGap<-50)//当鼠标移动距离超过一个阈值\r\n                {\r\n                    moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }else//鼠标移动没有超过设定阈值\r\n                {   //归位\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                }\r\n                document.removeEventListener(\"mousemove\",bannerUlMoveWithMouse);//移除document的mousemove\r\n                document.removeEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos);//移除document的mouseup\r\n                startAutoSwitch();//恢复自动播放\r\n            }\r\n        })\r\n        // 移动端手指拖动bannerul效果\r\n        bannerUl.addEventListener(\"touchstart\",function(e){\r\n            stopAutoSwitch();//暂停自动播放\r\n            bannerUl.fingerDownStartPos = e.targetTouches[0].pageX ;//手指按下时的坐标\r\n            bannerUl.fingerDownoffsetLeft = bannerUl.offsetLeft;//手指按下时，bannerUl的offsetleft\r\n            document.addEventListener(\"touchmove\",bannerUlMoveWithFinger)//添加事件监听手指移动，实现拖动效果\r\n            document.addEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos)//添加事件监听手指离开，实现拖动归位效果\r\n            function bannerUlMoveWithFinger(e){\r\n                //手指移动的距离\r\n                bannerUl.fingerDownMoveGap = e.targetTouches[0].pageX  - bannerUl.fingerDownStartPos; \r\n                // 新偏移 = 原偏移 + 手指移动距离\r\n                bannerUl.style.left = bannerUl.fingerDownoffsetLeft + bannerUl.fingerDownMoveGap + \"px\"\r\n            }\r\n            function bannerUlMoveWithFingerToCorrectPos(e){\r\n                bannerUl.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);\r\n                if(bannerUl.fingerDownMoveGap>50)//当手指移动距离超过一个阈值\r\n                {\r\n                    moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }\r\n                if(bannerUl.fingerDownMoveGap<-50)//当手指移动距离超过一个阈值\r\n                {\r\n                    moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }else//手指移动没有超过设定阈值\r\n                {   //归位\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                }\r\n                document.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);//移除document的mousemove\r\n                document.removeEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos);//移除document的mouseup\r\n                startAutoSwitch();//恢复自动播放\r\n            }\r\n        })\r\n        //手指点击事件\r\n        leftBtn.addEventListener(\"click\",function(){\r\n            if(!leftBtn.flag)//节流阀：防止频繁触发事件\r\n            {\r\n                leftBtn.flag=true;//打开节流阀\r\n                moveToPrevious(function(){\r\n                    // 根据Index值更新底部li\r\n                    updataBottomUl(bannerUl.activedLiIndex)\r\n                    //播放动画\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                        //回调函数：\r\n                        rightBtn.flag=false;//关闭节流阀\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        rightBtn.addEventListener(\"click\",function(){\r\n            if(!rightBtn.flag)//节流阀：防止频繁触发事件\r\n            {\r\n                rightBtn.flag=true;//打开节流阀\r\n                moveToNext(function(){\r\n                    // 根据Index值更新底部li\r\n                    updataBottomUl(bannerUl.activedLiIndex)\r\n                    //播放动画\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                        //回调函数：\r\n                        rightBtn.flag=false;//关闭节流阀\r\n                    })\r\n                });\r\n            }\r\n        });\r\n        function moveToNext(callback){//如果能获取到下一个兄弟元素则修改Index否则保持不变\r\n            if(!bannerUl.activedLiIndex)\r\n            {   //第一次调用则初始化新属性\r\n                bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n            }\r\n            if(bannerUl.children[bannerUl.activedLiIndex].nextElementSibling)//如果该元素存在后一个兄弟元素\r\n            {\r\n                bannerUl.activedLiIndex+=1;//索引+1\r\n            }\r\n            callback && callback();\r\n        }\r\n        function moveToPrevious(callback){//如果能获取到上一个兄弟元素则修改Index否则保持不变\r\n            if(!bannerUl.activedLiIndex)\r\n            {   //第一次调用则初始化新属性\r\n                bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n            }\r\n            if(bannerUl.children[bannerUl.activedLiIndex].previousElementSibling)//如果该元素存在后一个兄弟元素\r\n            {\r\n                bannerUl.activedLiIndex-=1;//索引-1\r\n            }\r\n            callback && callback();\r\n        }\r\n        bottomUl.addEventListener(\"click\",function(event){\r\n            // 获取被点击li的index\r\n            var index = event.target.dataset[\"index\"]\r\n            //修改索引\r\n            bannerUl.activedLiIndex = parseInt(index)//此处需要注意数据类型\r\n            console.log(bannerUl.activedLiIndex);\r\n            //过渡动画\r\n            animate(bannerUl,-bannerUl.children[index].offsetLeft)//动画\r\n            //更新底部li\r\n            updataBottomUl(index)\r\n        })\r\n        function updataBottomUl(index){//更新底部ul状态\r\n            for(var i=0;i<bottomUl.childElementCount;i++)\r\n            {\r\n                bottomUl.children[i].classList.remove(\"active\")\r\n            }\r\n            bottomUl.children[index].classList.add(\"active\")\r\n        }\r\n        //动画函数\r\n        function animate(elementObj, target, callback) {\r\n            clearInterval(elementObj.timer)//clearInterval可以防止animate被反复调用时导致同时调用多个setInterval，致使timer被覆盖\r\n            elementObj.timer = setInterval(function () {//elementObj.timer可以避免反复申请内存\r\n                if (elementObj.offsetLeft == target) {\r\n                    clearInterval(elementObj.timer)\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n                var step = (target - elementObj.offsetLeft) / 10 //根据公式计算步长\r\n                step = step > 0 ? Math.ceil(step) : Math.floor(step)//如果步长是负数则向下取整，如果步长是正数则向上取整。\r\n                elementObj.style.left = elementObj.offsetLeft + step + \"px\"\r\n            }, 15)\r\n        }\r\n        //循环获取下一个子元素\r\n        function getNextActivedElement(elementObj){//如有子元素1，2，3，4 则该该函数返回的是 1->2->3->4->3->2->1->2->3->4->3->2->1....\r\n            if(!elementObj.activedLiIndex)//若activedLiIndex属性不存在则对其初始化\r\n            {\r\n                elementObj.activedLiIndex=0;//初始化索引为第一个元素\r\n            }\r\n            if(!elementObj.moveguide)//若moveguide属性不存在则对其初始化\r\n            {\r\n                elementObj.moveguide=\"forward\";//初始化移动方向为向右\r\n            }\r\n            if(elementObj.moveguide==\"forward\")//移动方向是向前\r\n            {   \r\n                if(elementObj.children[elementObj.activedLiIndex].nextElementSibling)//如果能够找到下一个元素\r\n                {\r\n                    elementObj.activedLiIndex+=1;//索引定位到下一个\r\n                }else{//如果找不到下一个元素\r\n                    elementObj.moveguide=\"backward\";//设置移动方向为往前\r\n                    elementObj.activedLiIndex-=1;//索引定位到前一个\r\n                }\r\n            }else{//移动方向是向后\r\n                if(elementObj.children[elementObj.activedLiIndex].previousElementSibling)//如果能够找到前一个元素\r\n                {\r\n                    elementObj.activedLiIndex-=1;//索引定位到前一个\r\n                }else{\r\n                    elementObj.moveguide=\"forward\";//设置移动方向为往后\r\n                    elementObj.activedLiIndex+=1;//索引定位到下一个\r\n                }\r\n            }\r\n            return elementObj.children[elementObj.activedLiIndex];\r\n        }\r\n    })();\r\n</script>\r\n\r\n## 实现的功能\r\n* **自动切换** ，当切换到最后一张时，切换方式将由 从前往后 切换自动改为 从后往前 切换\r\n* **自动暂停** ，当鼠标移动到banner图上时，暂停自动播放，鼠标离开时，恢复自动播放\r\n* **手动切换** ，\r\n    * 点击按钮`》`，实现切换到下一张，当切换到最后一张时，停止切换\r\n    * 点击按钮`《`，实现切换到上一张，当切换到第前一张时，停止切换\r\n    * 节流处理：频繁点击切换按钮时，仅允许切换一张，切换完毕后才允许切换下一张\r\n* **任意切换** ，点击底部圆点时，切换到相对应的图片\r\n* **PC端鼠标拖动切换**\r\n    * 鼠标左右拖动图片，移动到一定的阈值后松开鼠标，\r\n        * 允许鼠标移动到图片之外（通过嵌套，给document添加事件监听器和移除事件监听器实现）\r\n        * 允许鼠标松开时在图片之外（通过嵌套，给document添加事件监听器和移除事件监听器实现）\r\n    * 如达到指定阈值，且移动的方向有另一张图片，则切换到该图片\r\n    * 如未达到指定阈值，或移动的方向没有图片，则恢复原位\r\n* **移动端手指拖动切换**\r\n    * 功能及判断逻辑如上\r\n\r\n## 碰到的问题总结\r\n### 问题1：`ul>li`一行排列的问题\r\n* 在`.box>ul>li`的结构中，若想设置：\r\n    * `.box`有宽高\r\n    * `li`有宽高，一行排列\r\n* 有两种解决方案\r\n    1. 给`ul`设置一个很大的宽度，给li设置左浮动\r\n        * 优点是`li`之间没有任何间距\r\n        * 缺点是要设置宽度,如果设置的不好或`li`过多会造成`li`的换行排列\r\n    1. 给ul设置`white-space:nowrap;`，给li设置行内块，\r\n        * 优点是不用设置`ul`宽度\r\n        * 缺点是`li`之间会有由源代码中换行符造成的间隔\r\n\r\n### 问题2：确定下一个li的问题\r\n* 在ul>li的结构中，需要确定下一次需要展示的li是谁，\r\n* 同时需要考虑当展示最后一个li是，下一个待展示的li是谁\r\n\r\n**我的解决方案**  \r\n写一个函数，循环获取下一个子元素，  \r\n如：若一个元素中有子元素1，2，3，4；  \r\n则该函数每次调用将分别获取的元素为:1->2->3->4->3->2->1->2->3->4->3->2->1->2\r\n\r\n\r\n```js\r\n//循环获取下一个子元素\r\nfunction getNextActivedElement(elementObj){//如有子元素1，2，3，4 则该该函数返回的是 1->2->3->4->3->2->1->2->3->4->3->2->1....\r\n    if(!elementObj.activedLiIndex)//若activedLiIndex属性不存在则对其初始化\r\n    {\r\n        elementObj.activedLiIndex=0;//初始化索引为第一个元素\r\n    }\r\n    if(!elementObj.moveguide)//若moveguide属性不存在则对其初始化\r\n    {\r\n        elementObj.moveguide=\"forward\";//初始化移动方向为向右\r\n    }\r\n    if(elementObj.moveguide==\"forward\")//移动方向是向前\r\n    {\r\n        if(elementObj.children[elementObj.activedLiIndex].nextElementSibling)//如果能够找到下一个元素\r\n        {\r\n            elementObj.activedLiIndex+=1;//索引定位到下一个\r\n        }else{//如果找不到下一个元素\r\n            elementObj.moveguide=\"backward\";//设置移动方向为往前\r\n            elementObj.activedLiIndex-=1;//索引定位到前一个\r\n        }\r\n    }else{//移动方向是向后\r\n        if(elementObj.children[elementObj.activedLiIndex].previousElementSibling)//如果能够找到前一个元素\r\n        {\r\n            elementObj.activedLiIndex-=1;//索引定位到前一个\r\n        }else{\r\n            elementObj.moveguide=\"forward\";//设置移动方向为往后\r\n            elementObj.activedLiIndex+=1;//索引定位到下一个\r\n        }\r\n    }\r\n    return elementObj.children[elementObj.activedLiIndex];\r\n}\r\n```\r\n\r\n### 问题3：移动距离\r\n在`.banner>ul>li`的结构中，移动的是`ul`，移动距离应该是`-li[index].offsetLeft`\r\n\r\n### 问题4：无缝滚动的问题\r\n* 当前由于实现思路的问题暂时没有做无缝滚动的效果\r\n* 若要做无缝滚动效果，需要在最后一个li之后添加第一个li的拷贝，\r\n* 如图，当做完动画3->1的切换后，直接设置ul的偏移为0，使得显示第一张图片\r\n\r\n![](./images/js轮播图/2022-07-06-20-09-37.png)\r\n\r\n\r\n### 问题4：节流阀\r\n节流阀用于防止事件触发的过快，导致上一个事件还未处理完又去处理下一个事件\r\n```\r\nrightBtn.addEventListener(\"click\",function(){\r\n    if(!rightBtn.flag)//节流阀：防止频繁触发事件\r\n    {\r\n        rightBtn.flag=true;//打开节流阀\r\n        if(!bannerUl.activedLiIndex)\r\n        {   //第一次调用则初始化新属性\r\n            bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n        }\r\n        if(bannerUl.children[bannerUl.activedLiIndex].nextElementSibling)//如果该元素存在后一个兄弟元素\r\n        {\r\n            bannerUl.activedLiIndex+=1;//索引+1\r\n            //根据Index值更新底部li\r\n            updataBottomUl(bannerUl.activedLiIndex)\r\n            //动画\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                //回调函数：\r\n                rightBtn.flag=false;//关闭节流阀\r\n            })\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n### 问题5：鼠标移入banner效果\r\n* 鼠标移入banner则暂停自动播放  \r\n* 鼠标离开banner则启动自动播放\r\n\r\n**实现代码**\r\n```js\r\n//自动播放\r\nvar autoSwitch = null;\r\n//开启自动播放\r\nfunction startAutoSwitch(){\r\n    stopAutoSwitch();//先清除定时器\r\n    autoSwitch = setInterval(function(){\r\n        //循环获取下一个li\r\n        var nextLi = getNextActivedElement(bannerUl)\r\n        //将ul移动，偏移量为li的负offset\r\n        animate(bannerUl,-nextLi.offsetLeft)\r\n        //更新底部Ul状态\r\n        updataBottomUl(nextLi.dataset[\"index\"])\r\n    },5000);\r\n}\r\n//关闭自动播放\r\nfunction stopAutoSwitch(){\r\n    clearInterval(autoSwitch)\r\n}\r\n//运行自动播放\r\nstartAutoSwitch();\r\n//鼠标移入banner则暂停自动播放\r\nbanner.addEventListener(\"mouseenter\",function(){\r\n    stopAutoSwitch();\r\n})\r\n//鼠标离开banner则启动自动播放\r\nbanner.addEventListener(\"mouseleave\",function(){\r\n    startAutoSwitch();\r\n})\r\n```\r\n\r\n### 问题6：对前后切换轮播图功能的进一步封装\r\n\r\n该部分功能在切换轮播图的按钮功能及拖动轮播图的功能中都有使用，所以对其进行了封装\r\n\r\n**原代码**\r\n```js\r\n//鼠标点击事件\r\nleftBtn.addEventListener(\"click\",function(){\r\n    if(!leftBtn.flag)//节流阀：防止频繁触发事件\r\n    {\r\n        leftBtn.flag=true;//打开节流阀\r\n        if(!bannerUl.activedLiIndex)\r\n        {   //第一次调用则初始化新属性\r\n            bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n        }\r\n        if(bannerUl.children[bannerUl.activedLiIndex].previousElementSibling)//如果该元素存在前一个兄弟元素\r\n        {\r\n            bannerUl.activedLiIndex-=1;//索引-1\r\n            //根据Index值更新底部li\r\n            updataBottomUl(bannerUl.activedLiIndex)\r\n            //动画\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                //回调函数：\r\n                leftBtn.flag=false;//关闭节流阀\r\n            })\r\n        }\r\n    }\r\n})\r\nrightBtn.addEventListener(\"click\",function(){\r\n    if(!rightBtn.flag)//节流阀：防止频繁触发事件\r\n    {\r\n        rightBtn.flag=true;//打开节流阀\r\n        if(!bannerUl.activedLiIndex)\r\n        {   //第一次调用则初始化新属性\r\n            bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n        }\r\n        if(bannerUl.children[bannerUl.activedLiIndex].nextElementSibling)//如果该元素存在后一个兄弟元素\r\n        {\r\n            bannerUl.activedLiIndex+=1;//索引+1\r\n            //根据Index值更新底部li\r\n            updataBottomUl(bannerUl.activedLiIndex)\r\n            //动画\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                //回调函数：\r\n                rightBtn.flag=false;//关闭节流阀\r\n            })\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n\r\n**封装后**\r\n```js\r\n//鼠标点击事件\r\nleftBtn.addEventListener(\"click\",function(){\r\n    if(!leftBtn.flag)//节流阀：防止频繁触发事件\r\n    {\r\n        moveToPrevious(function(){\r\n            // 根据Index值更新底部li\r\n            updataBottomUl(bannerUl.activedLiIndex)\r\n            //播放动画\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                //回调函数：\r\n                rightBtn.flag=false;//关闭节流阀\r\n            })\r\n        });\r\n    }\r\n})\r\nrightBtn.addEventListener(\"click\",function(){\r\n    if(!rightBtn.flag)//节流阀：防止频繁触发事件\r\n    {\r\n        rightBtn.flag=true;//打开节流阀\r\n        moveToNext(function(){\r\n            // 根据Index值更新底部li\r\n            updataBottomUl(bannerUl.activedLiIndex)\r\n            //播放动画\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                //回调函数：\r\n                rightBtn.flag=false;//关闭节流阀\r\n            })\r\n        });\r\n    }\r\n});\r\nfunction moveToNext(callback){//如果能获取到下一个兄弟元素则修改Index否则保持不变\r\n    if(!bannerUl.activedLiIndex)\r\n    {   //第一次调用则初始化新属性\r\n        bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n    }\r\n    if(bannerUl.children[bannerUl.activedLiIndex].nextElementSibling)//如果该元素存在后一个兄弟元素\r\n    {\r\n        bannerUl.activedLiIndex+=1;//索引+1\r\n    }\r\n    callback && callback();\r\n}\r\nfunction moveToPrevious(callback){//如果能获取到上一个兄弟元素则修改Index否则保持不变\r\n    if(!bannerUl.activedLiIndex)\r\n    {   //第一次调用则初始化新属性\r\n        bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n    }\r\n    if(bannerUl.children[bannerUl.activedLiIndex].previousElementSibling)//如果该元素存在后一个兄弟元素\r\n    {\r\n        bannerUl.activedLiIndex-=1;//索引-1\r\n    }\r\n    callback && callback();\r\n}\r\n```\r\n\r\n\r\n\r\n### 问题7：鼠标拖动翻页功能实现\r\n实现思路：\r\n* 在鼠标点击时记录鼠标坐标`A`，同时记录轮播图在x轴的偏移offsetLeft(`C`)，\r\n* 在鼠标移动时再记录坐标B，  \r\n* 两个坐标差`(B-A)`就是轮播图需要在x轴上相对于原先位置C的偏移的距离，\r\n* 于是`轮播图.Left = C + (B-A) + \"px\"`\r\n* 鼠标弹起时，根据鼠标移动距离是否超过某阈值，最终决定是否移动\r\n\r\n注意点：\r\n* 鼠标按下时，记录相关坐标，同时添加下述两个监听器\r\n* 鼠标移动，应当允许鼠标离开轮播图界面，所以该监听器应当添加给document\r\n* 鼠标弹起，应当允许鼠标离开轮播图界面，所以该监听器应当添加给document\r\n    * 鼠标弹起后，移除这两个监听器\r\n* 上述两个添加给document的监听器应当在整个完整的效果结束时移除，否则在点击网页其他部分时，鼠标弹起是任然会触发该事件\r\n\r\n**核心代码**\r\n\r\n```js\r\n// Pc端鼠标拖动banner>ul效果\r\nbannerUl.addEventListener(\"mousedown\",function(e){\r\n    stopAutoSwitch();//暂停自动播放\r\n    bannerUl.mosedownStartPos = e.clientX ;//鼠标按下时的坐标\r\n    bannerUl.mosedownoffsetLeft = bannerUl.offsetLeft;//鼠标按下时，bannerUl的offsetleft\r\n    document.addEventListener(\"mousemove\",bannerUlMoveWithMouse)//添加事件监听鼠标移动，实现拖动效果\r\n    document.addEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos)//添加事件监听鼠标弹起，实现拖动归位效果\r\n    function bannerUlMoveWithMouse(e){\r\n        //鼠标移动的距离\r\n        bannerUl.mosedownMoveGap = e.clientX  - bannerUl.mosedownStartPos; \r\n        // 新偏移 = 原偏移 + 鼠标移动距离\r\n        bannerUl.style.left = bannerUl.mosedownoffsetLeft + bannerUl.mosedownMoveGap + \"px\"\r\n    }\r\n    function bannerUlMoveWithMouseToCorrectPos (e){//将ul移动到正确的位置上\r\n        if(bannerUl.mosedownMoveGap>50)//当鼠标移动距离超过一个阈值\r\n        {\r\n            moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                // 根据Index值更新底部li\r\n                updataBottomUl(bannerUl.activedLiIndex)\r\n                //播放动画\r\n                animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n            });\r\n        }\r\n        else if(bannerUl.mosedownMoveGap<-50)//当鼠标移动距离超过一个阈值\r\n        {\r\n            moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                // 根据Index值更新底部li\r\n                updataBottomUl(bannerUl.activedLiIndex)\r\n                //播放动画\r\n                animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n            });\r\n        }else//鼠标移动没有超过设定阈值\r\n        {   //归位\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n        }\r\n        document.removeEventListener(\"mousemove\",bannerUlMoveWithMouse);//移除document的mousemove\r\n        document.removeEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos);//移除document的mouseup\r\n        startAutoSwitch();//恢复自动播放\r\n    }\r\n})\r\n\r\n\r\n```\r\n\r\n### 移动端手指拖动bannerul效果 \r\n**相关事件**\r\n* `touchstart` 手指按下\r\n* `touchmove` 手指移动\r\n* `touchend` 手指离开\r\n\r\n**坐标获取**\r\n* `event.targetTouches[0].pageX` 第一个手指的坐标\r\n\r\n```js\r\n// 移动端手指拖动bannerul效果\r\nbannerUl.addEventListener(\"touchstart\",function(e){\r\n    stopAutoSwitch();//暂停自动播放\r\n    bannerUl.fingerDownStartPos = e.targetTouches[0].pageX ;//手指按下时的坐标\r\n    bannerUl.fingerDownoffsetLeft = bannerUl.offsetLeft;//手指按下时，bannerUl的offsetleft\r\n    document.addEventListener(\"touchmove\",bannerUlMoveWithFinger)//添加事件监听手指移动，实现拖动效果\r\n    document.addEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos)//添加事件监听手指离开，实现拖动归位效果\r\n    function bannerUlMoveWithFinger(e){\r\n        //手指移动的距离\r\n        bannerUl.fingerDownMoveGap = e.targetTouches[0].pageX  - bannerUl.fingerDownStartPos; \r\n        // 新偏移 = 原偏移 + 手指移动距离\r\n        bannerUl.style.left = bannerUl.fingerDownoffsetLeft + bannerUl.fingerDownMoveGap + \"px\"\r\n    }\r\n    function bannerUlMoveWithFingerToCorrectPos(e){\r\n        bannerUl.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);\r\n        if(bannerUl.fingerDownMoveGap>50)//当手指移动距离超过一个阈值\r\n        {\r\n            moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                // 根据Index值更新底部li\r\n                updataBottomUl(bannerUl.activedLiIndex)\r\n                //播放动画\r\n                animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n            });\r\n        }\r\n        if(bannerUl.fingerDownMoveGap<-50)//当手指移动距离超过一个阈值\r\n        {\r\n            moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                // 根据Index值更新底部li\r\n                updataBottomUl(bannerUl.activedLiIndex)\r\n                //播放动画\r\n                animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n            });\r\n        }else//手指移动没有超过设定阈值\r\n        {   //归位\r\n            animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n        }\r\n        document.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);//移除document的mousemove\r\n        document.removeEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos);//移除document的mouseup\r\n        startAutoSwitch();//恢复自动播放\r\n    }\r\n})\r\n```\r\n\r\n\r\n## 完整代码\r\n\r\n\r\n```html\r\n<div class=\"banner\">\r\n    <ul>\r\n        <li data-active=\"true\" style=\"background-color: skyblue;\">轮播图1<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: pink;\">轮播图2<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: green;\">轮播图3<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: yellowgreen;\">轮播图4<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n        <li style=\"background-color: gold;\">轮播图5<br>已实现同时允许pc端鼠标拖动和移动端触摸拖动切换</li>\r\n    </ul>\r\n    <span class=\"left\">《</span>\r\n    <span class=\"right\">》</span>\r\n    <div class=\"bottom\">\r\n        <ul>\r\n            <!--\r\n            <li class=\"active\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            -->\r\n        </ul>\r\n    </div>\r\n</div>\r\n<style>\r\n    .banner *{\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    .banner *::before,\r\n    .banner *::after{\r\n        content: none !important;\r\n    }\r\n    .banner{\r\n        position: relative;\r\n        margin: 0 auto;\r\n        width: 100%;\r\n        height: 300px;\r\n        background-color: gray;\r\n        overflow: hidden;\r\n    }\r\n    .banner>ul{\r\n        position: relative;\r\n        top: 0;\r\n        /* 去除ul默认的左40px的内边距padding */\r\n        padding: 0;\r\n        /* 去除ul默认的上下外边距16px */\r\n        margin: 0;\r\n        height: 100%;\r\n        list-style: none;\r\n        white-space:nowrap;\r\n    }\r\n    .banner>ul>li{\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: pink;\r\n        vertical-align: top;\r\n        color: black;\r\n    }\r\n    .banner>.left,\r\n    .banner>.right\r\n    {\r\n        position: absolute;\r\n        display: inline-block;\r\n        width: 25px;\r\n        height: 25px;\r\n        /* background-color: gainsboro; */\r\n        cursor: pointer;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        font-size: 15px;\r\n        line-height: 25px;\r\n        color: white;\r\n    }\r\n    .banner>.left{\r\n        left: 0;\r\n        top: 50%;\r\n        transform: translate(0,-50%);\r\n    }\r\n    .banner>.right{\r\n        right: 0;\r\n        top: 50%;\r\n        transform: translate(0,-50%);\r\n    }\r\n    .banner>.bottom{\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        transform: translate(0,-100%);\r\n        width: 100%;\r\n        height: 10px;\r\n        /* background-color: white; */\r\n        text-align: center;\r\n    }\r\n    .banner>.bottom>ul{\r\n        display: inline-block;\r\n        height: 10px;\r\n        /* 去除ul默认的padding,margin */\r\n        padding: 0;\r\n        margin: 0;\r\n        list-style: none;\r\n        /* background-color: green; */\r\n        /* 防止li按文字的baseline对齐 */\r\n        vertical-align: top;\r\n    }\r\n    .banner>.bottom>ul>li{\r\n        float: left;\r\n        margin: 0 5px;\r\n        height: 10px;\r\n        width: 10px;\r\n        background-color: rgb(195, 195, 195);\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n    .banner>.bottom>ul>li.active{\r\n        background-color: white;\r\n    }\r\n</style>\r\n<script>\r\n    (function(){\r\n        var banner = document.querySelector(\".banner\") \r\n        var bannerUl = document.querySelector(\".banner>ul\") \r\n        var bottomUl = document.querySelector(\".banner>.bottom>ul\") \r\n        var leftBtn = document.querySelector(\".banner>.left\") \r\n        var rightBtn = document.querySelector(\".banner>.right\") \r\n        //为bannerUl添加index属性\r\n        for(var i=0;i<bannerUl.childElementCount;i++)\r\n        {\r\n            bannerUl.children[i].dataset[\"index\"]=i;\r\n        }\r\n        // 为bottom>UL创建li\r\n        for(var i=0;i<bannerUl.childElementCount;i++)\r\n        {\r\n            bottomUl.appendChild(document.createElement(\"li\"))\r\n        }\r\n        // 为bottomU>li[0]添加active类名\r\n        bottomUl.children[0].classList.add(\"active\")\r\n        // 为bottomU>li添加index属性\r\n        for(var i=0;i<bottomUl.childElementCount;i++)\r\n        {\r\n            bottomUl.children[i].dataset[\"index\"]=i;\r\n        }\r\n        //自动播放\r\n        var autoSwitch = null;\r\n        //开启自动播放\r\n        function startAutoSwitch(){\r\n            stopAutoSwitch();//先清除定时器\r\n            autoSwitch = setInterval(function(){\r\n                //循环获取下一个li\r\n                var nextLi = getNextActivedElement(bannerUl)\r\n                //将ul移动，偏移量为li的负offset\r\n                animate(bannerUl,-nextLi.offsetLeft)\r\n                //更新底部Ul状态\r\n                updataBottomUl(nextLi.dataset[\"index\"])\r\n            },5000);\r\n        }\r\n        //关闭自动播放\r\n        function stopAutoSwitch(){\r\n            clearInterval(autoSwitch)\r\n        }\r\n        //运行自动播放\r\n        startAutoSwitch();\r\n        //鼠标移入banner则暂停自动播放\r\n        banner.addEventListener(\"mouseenter\",function(){\r\n            stopAutoSwitch();\r\n        })\r\n        //鼠标离开banner则启动自动播放\r\n        banner.addEventListener(\"mouseleave\",function(){\r\n            startAutoSwitch();\r\n        })\r\n        // Pc端鼠标拖动banner>ul效果\r\n        bannerUl.addEventListener(\"mousedown\",function(e){\r\n            stopAutoSwitch();//暂停自动播放\r\n            bannerUl.mosedownStartPos = e.clientX ;//鼠标按下时的坐标\r\n            bannerUl.mosedownoffsetLeft = bannerUl.offsetLeft;//鼠标按下时，bannerUl的offsetleft\r\n            document.addEventListener(\"mousemove\",bannerUlMoveWithMouse)//添加事件监听鼠标移动，实现拖动效果\r\n            document.addEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos)//添加事件监听鼠标弹起，实现拖动归位效果\r\n            function bannerUlMoveWithMouse(e){\r\n                //鼠标移动的距离\r\n                bannerUl.mosedownMoveGap = e.clientX  - bannerUl.mosedownStartPos; \r\n                // 新偏移 = 原偏移 + 鼠标移动距离\r\n                bannerUl.style.left = bannerUl.mosedownoffsetLeft + bannerUl.mosedownMoveGap + \"px\"\r\n            }\r\n            function bannerUlMoveWithMouseToCorrectPos (e){//将ul移动到正确的位置上\r\n                if(bannerUl.mosedownMoveGap>50)//当鼠标移动距离超过一个阈值\r\n                {\r\n                    moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }\r\n                else if(bannerUl.mosedownMoveGap<-50)//当鼠标移动距离超过一个阈值\r\n                {\r\n                    moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }else//鼠标移动没有超过设定阈值\r\n                {   //归位\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                }\r\n                document.removeEventListener(\"mousemove\",bannerUlMoveWithMouse);//移除document的mousemove\r\n                document.removeEventListener(\"mouseup\",bannerUlMoveWithMouseToCorrectPos);//移除document的mouseup\r\n                startAutoSwitch();//恢复自动播放\r\n            }\r\n        })\r\n        // 移动端手指拖动bannerul效果\r\n        bannerUl.addEventListener(\"touchstart\",function(e){\r\n            stopAutoSwitch();//暂停自动播放\r\n            bannerUl.fingerDownStartPos = e.targetTouches[0].pageX ;//手指按下时的坐标\r\n            bannerUl.fingerDownoffsetLeft = bannerUl.offsetLeft;//手指按下时，bannerUl的offsetleft\r\n            document.addEventListener(\"touchmove\",bannerUlMoveWithFinger)//添加事件监听手指移动，实现拖动效果\r\n            document.addEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos)//添加事件监听手指离开，实现拖动归位效果\r\n            function bannerUlMoveWithFinger(e){\r\n                //手指移动的距离\r\n                bannerUl.fingerDownMoveGap = e.targetTouches[0].pageX  - bannerUl.fingerDownStartPos; \r\n                // 新偏移 = 原偏移 + 手指移动距离\r\n                bannerUl.style.left = bannerUl.fingerDownoffsetLeft + bannerUl.fingerDownMoveGap + \"px\"\r\n            }\r\n            function bannerUlMoveWithFingerToCorrectPos(e){\r\n                bannerUl.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);\r\n                if(bannerUl.fingerDownMoveGap>50)//当手指移动距离超过一个阈值\r\n                {\r\n                    moveToPrevious(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }\r\n                if(bannerUl.fingerDownMoveGap<-50)//当手指移动距离超过一个阈值\r\n                {\r\n                    moveToNext(function(){//如果能获取到下一个兄弟元素则修改activedLiIndex否则保持不变\r\n                        // 根据Index值更新底部li\r\n                        updataBottomUl(bannerUl.activedLiIndex)\r\n                        //播放动画\r\n                        animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                    });\r\n                }else//手指移动没有超过设定阈值\r\n                {   //归位\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft)\r\n                }\r\n                document.removeEventListener(\"touchmove\",bannerUlMoveWithFinger);//移除document的mousemove\r\n                document.removeEventListener(\"touchend\",bannerUlMoveWithFingerToCorrectPos);//移除document的mouseup\r\n                startAutoSwitch();//恢复自动播放\r\n            }\r\n        })\r\n        //手指点击事件\r\n        leftBtn.addEventListener(\"click\",function(){\r\n            if(!leftBtn.flag)//节流阀：防止频繁触发事件\r\n            {\r\n                leftBtn.flag=true;//打开节流阀\r\n                moveToPrevious(function(){\r\n                    // 根据Index值更新底部li\r\n                    updataBottomUl(bannerUl.activedLiIndex)\r\n                    //播放动画\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                        //回调函数：\r\n                        rightBtn.flag=false;//关闭节流阀\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        rightBtn.addEventListener(\"click\",function(){\r\n            if(!rightBtn.flag)//节流阀：防止频繁触发事件\r\n            {\r\n                rightBtn.flag=true;//打开节流阀\r\n                moveToNext(function(){\r\n                    // 根据Index值更新底部li\r\n                    updataBottomUl(bannerUl.activedLiIndex)\r\n                    //播放动画\r\n                    animate(bannerUl,-bannerUl.children[bannerUl.activedLiIndex].offsetLeft,function(){\r\n                        //回调函数：\r\n                        rightBtn.flag=false;//关闭节流阀\r\n                    })\r\n                });\r\n            }\r\n        });\r\n        function moveToNext(callback){//如果能获取到下一个兄弟元素则修改Index否则保持不变\r\n            if(!bannerUl.activedLiIndex)\r\n            {   //第一次调用则初始化新属性\r\n                bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n            }\r\n            if(bannerUl.children[bannerUl.activedLiIndex].nextElementSibling)//如果该元素存在后一个兄弟元素\r\n            {\r\n                bannerUl.activedLiIndex+=1;//索引+1\r\n            }\r\n            callback && callback();\r\n        }\r\n        function moveToPrevious(callback){//如果能获取到上一个兄弟元素则修改Index否则保持不变\r\n            if(!bannerUl.activedLiIndex)\r\n            {   //第一次调用则初始化新属性\r\n                bannerUl.activedLiIndex=0;//初始化第一个激活元素为0\r\n            }\r\n            if(bannerUl.children[bannerUl.activedLiIndex].previousElementSibling)//如果该元素存在后一个兄弟元素\r\n            {\r\n                bannerUl.activedLiIndex-=1;//索引-1\r\n            }\r\n            callback && callback();\r\n        }\r\n        bottomUl.addEventListener(\"click\",function(event){\r\n            // 获取被点击li的index\r\n            var index = event.target.dataset[\"index\"]\r\n            //修改索引\r\n            bannerUl.activedLiIndex = parseInt(index)//此处需要注意数据类型\r\n            console.log(bannerUl.activedLiIndex);\r\n            //过渡动画\r\n            animate(bannerUl,-bannerUl.children[index].offsetLeft)//动画\r\n            //更新底部li\r\n            updataBottomUl(index)\r\n        })\r\n        function updataBottomUl(index){//更新底部ul状态\r\n            for(var i=0;i<bottomUl.childElementCount;i++)\r\n            {\r\n                bottomUl.children[i].classList.remove(\"active\")\r\n            }\r\n            bottomUl.children[index].classList.add(\"active\")\r\n        }\r\n        //动画函数\r\n        function animate(elementObj, target, callback) {\r\n            clearInterval(elementObj.timer)//clearInterval可以防止animate被反复调用时导致同时调用多个setInterval，致使timer被覆盖\r\n            elementObj.timer = setInterval(function () {//elementObj.timer可以避免反复申请内存\r\n                if (elementObj.offsetLeft == target) {\r\n                    clearInterval(elementObj.timer)\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n                var step = (target - elementObj.offsetLeft) / 10 //根据公式计算步长\r\n                step = step > 0 ? Math.ceil(step) : Math.floor(step)//如果步长是负数则向下取整，如果步长是正数则向上取整。\r\n                elementObj.style.left = elementObj.offsetLeft + step + \"px\"\r\n            }, 15)\r\n        }\r\n        //循环获取下一个子元素\r\n        function getNextActivedElement(elementObj){//如有子元素1，2，3，4 则该该函数返回的是 1->2->3->4->3->2->1->2->3->4->3->2->1....\r\n            if(!elementObj.activedLiIndex)//若activedLiIndex属性不存在则对其初始化\r\n            {\r\n                elementObj.activedLiIndex=0;//初始化索引为第一个元素\r\n            }\r\n            if(!elementObj.moveguide)//若moveguide属性不存在则对其初始化\r\n            {\r\n                elementObj.moveguide=\"forward\";//初始化移动方向为向右\r\n            }\r\n            if(elementObj.moveguide==\"forward\")//移动方向是向前\r\n            {   \r\n                if(elementObj.children[elementObj.activedLiIndex].nextElementSibling)//如果能够找到下一个元素\r\n                {\r\n                    elementObj.activedLiIndex+=1;//索引定位到下一个\r\n                }else{//如果找不到下一个元素\r\n                    elementObj.moveguide=\"backward\";//设置移动方向为往前\r\n                    elementObj.activedLiIndex-=1;//索引定位到前一个\r\n                }\r\n            }else{//移动方向是向后\r\n                if(elementObj.children[elementObj.activedLiIndex].previousElementSibling)//如果能够找到前一个元素\r\n                {\r\n                    elementObj.activedLiIndex-=1;//索引定位到前一个\r\n                }else{\r\n                    elementObj.moveguide=\"forward\";//设置移动方向为往后\r\n                    elementObj.activedLiIndex+=1;//索引定位到下一个\r\n                }\r\n            }\r\n            return elementObj.children[elementObj.activedLiIndex];\r\n        }\r\n    })();\r\n</script>\r\n```\r\n"}