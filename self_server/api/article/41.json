{"shortInfo":{"title":"nodejs的mysql模块学习笔记","date":"2022-08-30T23:25:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["nodejs","mysql"],"hideAtIndex":true,"categories":"后端","id":41,"countWords":888,"readSeconds":88.8,"assetsbaseUrl":"/self_server/assets/"},"content":"# nodejs的mysql模块学习笔记\r\n\r\n\r\n**无法连接数据库的解决**  \r\n`MySQL8` 之前的版本中加密规则是 `mysql_native_password` ,而在之后版本，加密规则是 `caching_sha2_password` ,当前nodejs的mysql模块不支持该加密规则,于是需要修改会旧的加密规则\r\n```bash\r\n# 进入mysql\r\nmysql -u root -p\r\n# 输入:\r\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \"新密码\";\r\n```\r\n\r\n## 连接数据库\r\n**示例代码**\r\n```js\r\nconst mysql = require(\"mysql\") \r\nconst db = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"root\",\r\n    database: \"my_db_01\",\r\n})\r\n\r\ndb.connect();\r\n\r\n```\r\n\r\n\r\n## 查询数据库\r\n**示例代码**\r\n```js\r\ndb.query(\"SELECT * from users\",(err,result)=>{\r\n    if(err){\r\n        console.log(err);\r\n    }else{\r\n        console.log(message);\r\n    }\r\n})\r\n```\r\n\r\n**输出result结果**  \r\n注意: 执行`select`语句的查询结果为数组\r\n```js\r\n[\r\n  RowDataPacket {\r\n    id: 1,\r\n    username: 'DingYigui',\r\n    password: '123',\r\n    status: 0\r\n  },\r\n  RowDataPacket {\r\n    id: 10,\r\n    username: 'DYG1231',\r\n    password: 'd12yg1232',\r\n    status: 0\r\n  }\r\n]\r\n```\r\n\r\n## 插入数据\r\n**方法1**\r\n```js\r\nvar user = {username:\"newUser\",password:\"newPasswd\"}\r\nvar sqlStr = \"INSERT INTO users (username,password) VALUES (?,?);\" //?为占位符\r\n\r\ndb.query(sqlStr,[user.username,user.password],(err,result)=>{ //第二个参数中的数据将被依次填入占位符\r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"插入成功!,新增\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"插入数据失败!\");\r\n    }\r\n})\r\n```\r\n\r\n**输出result结果**  \r\n注意: 执行`INSERT` `UPDATE` `DELETE` 语句的结果均为对象\r\n```js\r\nOkPacket {\r\n  fieldCount: 0,\r\n  affectedRows: 1,\r\n  insertId: 11,\r\n  serverStatus: 2,\r\n  warningCount: 0,\r\n  message: '',\r\n  protocol41: true,\r\n  changedRows: 0\r\n}\r\n```\r\n\r\n**方法2:更高效的方式**\r\n```js\r\nvar user = {username:\"newUser2\",password:\"newPasswd2\"}\r\nvar sqlStr = \"INSERT INTO users set ?;\" //?为占位符\r\n\r\ndb.query(sqlStr,user,(err,result)=>{ //将会自动展开为: UPDATE users SET username = \"newUser2\" , password = \"newPasswd2\" \r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"插入成功!,新增\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"插入数据失败!\");\r\n    }\r\n})\r\n```\r\n\r\n## 更新数据\r\n**方法1**\r\n```js\r\nvar user = {username:\"newUser3\",password:\"newPasswd3\",id:2}\r\nvar sqlStr = \"UPDATE users SET username=?,password=? WHERE id=?;\" //?为占位符\r\ndb.query(sqlStr,[user.username,user.password,user.id],(err,result)=>{ //第二个参数中的数据将被依次填入占位符\r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"更新成功!,新增\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"更新数据失败!\");\r\n    }\r\n})\r\n```\r\n\r\n**方法2:更高效的方式**\r\n```js\r\nvar user = {username:\"newUser3\",password:\"newPasswd3\",id:2 }\r\nvar sqlStr = \"UPDATE users SET ? WHERE id=?;\" //?为占位符\r\n\r\ndb.query(sqlStr,[user,user.id],(err,result)=>{ //将会自动展开为: UPDATE users SET username=newUser3,password=newPasswd3,id=2 WHERE id=2;\r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"更新成功!,新增\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"更新数据失败!\");\r\n    }\r\n})\r\n```\r\n\r\n## 删除数据\r\n```js\r\nvar userID = 5 \r\nvar sqlStr = \"DELETE FROM users WHERE id=?;\" //?为占位符\r\ndb.query(sqlStr,userID,(err,result)=>{ \r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"删除成功!,删除\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"删除数据失败!\");\r\n    }\r\n})\r\n```\r\n\r\n## 标记数据为删除\r\n实际中删除一个用户后存在用户想要撤销删除操作的可能,对于这种需求可以采取修改用户状态为已删除的方式来实现\r\n```js\r\nvar userID = 5 \r\nvar sqlStr = \"UPDATE users SET status=? WHERE id=?;\" //?为占位符\r\ndb.query(sqlStr,[1,5],(err,result)=>{ \r\n    if(err){\r\n        console.log(err.message);\r\n    }else{\r\n        //affectedRows中记录了本次操作影响的行数\r\n        if(result.affectedRows>0) console.log(\"标记用户为已删除成功!,更新了\" + result.affectedRows + \"条数据\");\r\n        else console.log(\"标记用户为已删除失败!\");\r\n    }\r\n})\r\n```\r\n\r\n\r\n## mysql2基本使用\r\n```js\r\nimport mysql from \"mysql2\"\r\nconst pool = mysql.createPool({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"root\",\r\n    database: \"my_db_01\",\r\n})\r\n\r\nexport default  pool.promise()\r\n\r\n\r\n// --------------------------------------------\r\nimport db from \"./mysql.js\" \r\nexport async function getUserInfo(req,res){\r\n    const sql = \"???????\"\r\n    let result = await db.query(sql)\r\n    res.send({\r\n         status:0,\r\n         message:\"\",\r\n         data:result,\r\n    })\r\n}\r\n```"}