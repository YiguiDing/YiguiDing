{"shortInfo":{"title":"flexible.js源码分析","date":"2022-07-05T02:52:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["js","源码分析","前端"],"hideAtIndex":true,"categories":"笔记","id":1001296160,"countWords":854,"readSeconds":85.4,"assetsbaseUrl":"/self_server/assets/"},"content":"# flexible.js源码分析\r\n\r\nflexible.js是手淘开发出的一个用来适配移动端的js框架。手淘框架的核心原理就是根据不同的视口宽度给html根标签设置不同的font-size，然后所有的px都用rem来代替，这样就实现了不同大小的屏幕都适应相同的样式了。\r\n\r\n\r\n## 最外层\r\n* 最外层是一个立即执行函数，\r\n* 接收的实参为window和document对象\r\n* 其中所有变量都是局部变量，不会造成变量名冲突\r\n\r\n```js\r\n(function flexible (window, document) {\r\n    //立即执行函数\r\n}(window, document))\r\n```\r\n\r\n\r\n## 变量\r\n```js\r\n//documentElement是html根标签\r\n  var docEl = document.documentElement\r\n//devicePixelRatio是物理像素比，一般pc端是1 手机端是2\r\n  var dpr = window.devicePixelRatio || 1\r\n```\r\n\r\n\r\n## 设置body字体大小\r\n```js\r\n  // adjust body font size\r\n  function setBodyFontSize () {\r\n    if (document.body) {//判断是否有body元素\r\n      document.body.style.fontSize = (12 * dpr) + 'px' //设置body的Font-size:(12*dpr)px\r\n    }\r\n    else {\r\n        //如果页面没有body，则添加DOMContentLoaded事件监听器，待DOM加载完毕后再来执行该函数\r\n      document.addEventListener('DOMContentLoaded', setBodyFontSize)\r\n    }\r\n  }\r\n  setBodyFontSize();\r\n```\r\n\r\n\r\n## 设置html文字大小\r\n* pageshow是页面显示时触发的事件，无论页面是否来自缓存；\r\n* 该事件会在load事件触发之后触发；\r\n* 该事件对象中persisted属性可以用来判断是否是缓存中的页面触发的pageshow事件\r\n* 该事件添加给window\r\n* 此处不能用load事件来代替的原因是：\r\n    * load事件虽可以在点击超链接、f5刷新、强制刷新、前进后退后触发\r\n    * 但在火狐浏览器中，存在“往返缓存”机制，后退页面时，整个DOM和js的状态都被存储在了内存中，此时再点击前进按钮回到页面，整个页面不会重新加载，不会触发load事件\r\n\r\n```js\r\n  \r\n  function setRemUnit () {\r\n    var rem = docEl.clientWidth / 10 // 设置 1rem = 视口宽度 / 10\r\n    docEl.style.fontSize = rem + 'px' // 为HTML根标签设置字体大小\r\n  }\r\n\r\n  setRemUnit() // 调用\r\n\r\n  // 添加监听事件，当窗口改变大小后重新根据视口宽度计算1rem大小\r\n  window.addEventListener('resize', setRemUnit)\r\n  //页面显示时触发的事件\r\n  window.addEventListener('pageshow', function (e) {\r\n    if (e.persisted) {//如果页面是从缓存中取出的\r\n      setRemUnit()\r\n    }\r\n  })\r\n```\r\n\r\n\r\n## 使移动端支持0.5px\r\n```js\r\n//移动端检测是否支持0.5px，若支持则添加类名使其向下兼容\r\n  if (dpr >= 2) {//检测是否是移动端\r\n   //创建一个假body元素\r\n    var fakeBody = document.createElement('body')\r\n     //创建一个测试元素\r\n    var testElement = document.createElement('div')\r\n     //给测试元素添加0.5px的边框\r\n    testElement.style.border = '.5px solid transparent'\r\n    //将测试元素附加给假body元素\r\n    fakeBody.appendChild(testElement)\r\n    //将假body元素附加给html根标签\r\n    docEl.appendChild(fakeBody)\r\n    // 检测测试元素的高度是否为1，若是则说明支持0.5px的写法\r\n    if (testElement.offsetHeight === 1) {\r\n        //为根标签添加样式类名 通过添加类名hairlines来向下兼容\r\n      docEl.classList.add('hairlines')\r\n    }\r\n    //移除假body元素\r\n    docEl.removeChild(fakeBody)\r\n  }\r\n```\r\n\r\n\r\n## 完整源码\r\n```js\r\n(function flexible (window, document) {\r\n  var docEl = document.documentElement\r\n  var dpr = window.devicePixelRatio || 1\r\n\r\n  // adjust body font size\r\n  function setBodyFontSize () {\r\n    if (document.body) {\r\n      document.body.style.fontSize = (12 * dpr) + 'px'\r\n    }\r\n    else {\r\n      document.addEventListener('DOMContentLoaded', setBodyFontSize)\r\n    }\r\n  }\r\n  setBodyFontSize();\r\n\r\n  // set 1rem = viewWidth / 10\r\n  function setRemUnit () {\r\n    var rem = docEl.clientWidth / 10\r\n    docEl.style.fontSize = rem + 'px'\r\n  }\r\n\r\n  setRemUnit()\r\n\r\n  // reset rem unit on page resize\r\n  window.addEventListener('resize', setRemUnit)\r\n  window.addEventListener('pageshow', function (e) {\r\n    if (e.persisted) {\r\n      setRemUnit()\r\n    }\r\n  })\r\n\r\n  // detect 0.5px supports\r\n  if (dpr >= 2) {\r\n    var fakeBody = document.createElement('body')\r\n    var testElement = document.createElement('div')\r\n    testElement.style.border = '.5px solid transparent'\r\n    fakeBody.appendChild(testElement)\r\n    docEl.appendChild(fakeBody)\r\n    if (testElement.offsetHeight === 1) {\r\n      docEl.classList.add('hairlines')\r\n    }\r\n    docEl.removeChild(fakeBody)\r\n  }\r\n}(window, document))\r\n```\r\n\r\n"}