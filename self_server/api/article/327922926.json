{"shortInfo":{"title":"移动端布局及Flex布局模型","date":"2022-06-18T16:23:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["Flex","移动端","前端"],"hideAtIndex":true,"categories":"笔记","id":327922926,"countWords":3387,"readSeconds":338.7,"assetsbaseUrl":"/self_server/assets/"},"content":"# 移动端布局及Flex布局模型\r\n## 目录\r\n- [移动端布局及Flex布局模型](#移动端布局及flex布局模型)\r\n  - [目录](#目录)\r\n  - [pc端和移动端分辨率](#pc端和移动端分辨率)\r\n    - [pc端分辨率物理分辨率和逻辑分辨率](#pc端分辨率物理分辨率和逻辑分辨率)\r\n    - [手机端物理分辨率和逻辑分辨率](#手机端物理分辨率和逻辑分辨率)\r\n  - [视口](#视口)\r\n  - [二倍图](#二倍图)\r\n  - [百分比布局](#百分比布局)\r\n  - [flex布局](#flex布局)\r\n    - [flex布局的构成](#flex布局的构成)\r\n    - [主轴对齐方式](#主轴对齐方式)\r\n      - [主轴对齐方式测试](#主轴对齐方式测试)\r\n    - [侧轴对齐方式](#侧轴对齐方式)\r\n      - [侧轴对齐方式测试](#侧轴对齐方式测试)\r\n      - [控制单个盒子的侧轴对齐方式](#控制单个盒子的侧轴对齐方式)\r\n    - [flex伸缩比](#flex伸缩比)\r\n    - [修改主轴方向](#修改主轴方向)\r\n      - [修改主轴方向后修改主轴的对齐方式](#修改主轴方向后修改主轴的对齐方式)\r\n      - [使用示例](#使用示例)\r\n    - [弹性盒子的换行](#弹性盒子的换行)\r\n    - [弹性盒子的侧轴对齐方式](#弹性盒子的侧轴对齐方式)\r\n      - [效果测试](#效果测试)\r\n      - [问题](#问题)\r\n\r\n\r\n\r\n## pc端和移动端分辨率\r\n\r\n### pc端分辨率物理分辨率和逻辑分辨率\r\n* pc端常见分辨率-**物理分辨率**\r\n    * 1920x1080\r\n    * 1366x760\r\n* pc端设置按比例缩放后的分辨率-**逻辑分辨率**\r\n    * 缩放150%后的分辨率：(1920/150%)x(1080/150%)\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-00-53-45.png)\r\n\r\n* 写html时应该参考**逻辑**分辨率\r\n\r\n\r\n### 手机端物理分辨率和逻辑分辨率\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-01-46-41.png)\r\n\r\n## 视口\r\n* 一些概念\r\n    ```\r\n    1.什么是视口?\r\n        视口简单理解就是可视区域大小我们称之为视口\r\n        在PC端，视口大小就是浏览器窗口可视区域的大小\r\n        在移动端, 视口大小并不等于窗口大小, 移动端视口宽度被人为定义为了980\r\n\r\n    2.为什么是980而不是其他的值?\r\n        **因为过去网页的版心都是980**\r\n        乔老爷子为了能够让网页在移动端完美的展示, 所以将iOS手机视口的大小定义为了980\r\n        后来谷歌也觉得这是一个非常牛X的方案, 所以Android手机的视口也定义为了980\r\n\r\n    3.移动端自动将视口宽度设置为980带来的问题\r\n        虽然移动端自动将视口宽度设置为980之后让我们可以很完美的看到整个网页\r\n        但是由于移动端的物理尺寸(设备宽度)是远远小于视口宽度的\r\n        所以为了能够在较小的范围内看到视口中所有的内容, 那么就必须将内容缩小\r\n        (和前面讲解Canvas时讲解的viewbox一样, 近大远小原理)\r\n\r\n    4.如何保证在移动端不自动缩放网页的尺寸?\r\n        通过meta设置视口大小\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        width=device-width 设置视口宽度等于设备的宽度\r\n        initial-scale=1.0 初始缩放比例, 1不缩放\r\n        maximum-scale：允许用户缩放到的最大比例\r\n        minimum-scale：允许用户缩放到的最小比例\r\n        user-scalable：用户是否可以手动缩放\r\n    ```\r\n* **移动端**网页视口默认的宽是**980px**\r\n* **PC端**网页视口默认的宽和**电脑逻辑分辨率的宽度**一致\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-01-51-53.png)\r\n\r\n* 使用`meta`标签设置**视口**，可以使**网页宽度**和设备的**逻辑宽度**一致\r\n    ```html\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    ```\r\n    ![](./images/移动端布局及Flex布局模型/2022-06-19-01-56-49.png)\r\n\r\n\r\n## 二倍图\r\n* 当前移动端网页一般参考iPhone6、7、8出设计稿，然后再想办法适配其他机型\r\n* 但由于分辨率的原因，设计稿将会按照物理分辨率设计，因为如果按照逻辑分辨率设计，一张低分辨率的图到了高分辨率的屏幕将会变得模糊不清，所以往往是设计稿用高分辨率的图，但用低分辨率的尺寸，这样经过移动端浏览器的放大，图片的尺寸被放大后依然是清晰的，又由于其物理分辨率和逻辑分辨率**往往是**二倍的关系，所以这样的设计稿的图称为**二倍图**\r\n* 所以结论就是当设计稿中页面宽度为750px时,其实际尺寸应该写375px\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-01-46-41.png)\r\n* 需要注意的是，pc端的设计图也存在二倍图，如果设计图标识网页宽度为3840px，则其实际宽度很可能是1920px\r\n\r\n\r\n## 百分比布局\r\n* 过去普遍使用的一种布局\r\n* 百分比布局也叫流式布局\r\n* 具体就是盒子的宽度取百分比，高度取固定值\r\n* 效果：宽度自适应，高度固定\r\n\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-02-58-50.png)\r\n\r\n\r\n## flex布局\r\n* flex布局也叫弹性布局\r\n* 是一种**浏览器提倡**的**布局模型**\r\n* 非常适合结构化的布局模型\r\n* 布局网页更简单、灵活\r\n* 能够避免浮动脱标的问题\r\n* flex是专门用来布局的模型\r\n* 而浮动一开始只是为了文字环绕效果而开发的，并不是专门用来做布局的\r\n* 对于ie浏览器不兼容\r\n* 查看是否兼容[caniuse.com](https://caniuse.com)\r\n\r\n\r\n### flex布局的构成\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-03-39-43.png)\r\n* 设置方式：父元素添加`display:flex`\r\n* 作用：设置后子元素可以自动的挤压或拉伸\r\n* 各组成部分的名称\r\n    * **弹性容器** ：显示模式为flex的父元素\r\n    * **弹性盒子** ：子元素\r\n    * **主轴** ： **默认** 在水平方向\r\n    * **侧轴/交叉轴** ： **默认** 在垂直方向\r\n\r\n### 主轴对齐方式\r\n* 在flex布局模型中，调节主轴或侧轴的对齐方式可以设置盒子之间的间距\r\n* 属性名：`justify-content`\r\n* 属性值：![](./images/移动端布局及Flex布局模型/2022-06-19-03-57-53.png)\r\n* **当主轴方向为默认方向时，`justify-content`控制水平方向对齐方式**\r\n\r\n#### 主轴对齐方式测试\r\n* 主轴对齐方式justify-content:flex-start 左对齐\r\n<div id=\"textFlex1\">\r\n    <div>flex-start</div>\r\n    <div>flex-start</div>\r\n    <div>flex-start</div>\r\n    <div>flex-start</div>\r\n</div>\r\n<style>\r\n    #textFlex1{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content: flex-start;\r\n    }\r\n    #textFlex1 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 主轴对齐方式justify-content:flex-end 右对齐\r\n<div id=\"textFlex2\">\r\n    <div>flex-end</div>\r\n    <div>flex-end</div>\r\n    <div>flex-end</div>\r\n    <div>flex-end</div>\r\n</div>\r\n<style>\r\n    #textFlex2{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:flex-end;\r\n    }\r\n    #textFlex2 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n* 主轴对齐方式justify-content:flex-center 弹性盒子居中 两边留白\r\n<div id=\"textFlex3\">\r\n    <div>center</div>\r\n    <div>center</div>\r\n    <div>center</div>\r\n    <div>center</div>\r\n</div>\r\n<style>\r\n    #textFlex3{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:center;\r\n    }\r\n    #textFlex3 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 主轴对齐方式justify-content:flex-around 弹性盒子的周围留白\r\n<div id=\"textFlex4\">\r\n    <div>space-around</div>\r\n    <div>space-around</div>\r\n    <div>space-around</div>\r\n    <div>space-around</div>\r\n</div>\r\n<style>\r\n    #textFlex4{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-around;\r\n    }\r\n    #textFlex4 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 主轴对齐方式justify-content:flex-between 弹性盒子的之间留白\r\n<div id=\"textFlex5\">\r\n    <div>space-between</div>\r\n    <div>space-between</div>\r\n    <div>space-between</div>\r\n    <div>space-between</div>\r\n</div>\r\n<style>\r\n    #textFlex5{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-between;\r\n    }\r\n    #textFlex5 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 主轴对齐方式justify-content:flex-evenly 弹性盒子的之间和两边留相同宽度的白\r\n<div id=\"textFlex6\">\r\n    <div>space-evenly</div>\r\n    <div>space-evenly</div>\r\n    <div>space-evenly</div>\r\n    <div>space-evenly</div>\r\n</div>\r\n<style>\r\n    #textFlex6{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n    }\r\n    #textFlex6 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n### 侧轴对齐方式\r\n* 属性名align-items **添加给弹性容器**，控制**所有**盒子的侧轴对齐方式\r\n* 属性名align-self **添加给弹性盒子**,控制**单个**盒子的侧轴对齐方式\r\n![](./images/移动端布局及Flex布局模型/2022-06-19-04-31-31.png)\r\n* **当主轴方向为默认方向时，`align-self`控制垂直方向对齐方式**\r\n\r\n#### 侧轴对齐方式测试\r\n* 侧轴对齐方式`align-items:flex-start` 弹性盒子的顶对齐\r\n<div id=\"textFlex7\">\r\n    <div>space-start</div>\r\n    <div>space-start</div>\r\n    <div>space-start</div>\r\n    <div>space-start</div>\r\n</div>\r\n<style>\r\n    #textFlex7{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items: flex-start;\r\n        height: 150px;\r\n    }\r\n    #textFlex7 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n* 侧轴对齐方式 `align-items:flex-end` 弹性盒子的底对齐\r\n<div id=\"textFlex8\">\r\n    <div>space-end</div>\r\n    <div>space-end</div>\r\n    <div>space-end</div>\r\n    <div>space-end</div>\r\n</div>\r\n<style>\r\n    #textFlex8{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items: flex-end;\r\n        height: 150px;\r\n    }\r\n    #textFlex8 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 侧轴对齐方式`align-items:center` 弹性盒子垂直居中对齐\r\n<div id=\"textFlex9\">\r\n    <div>space-center</div>\r\n    <div>space-center</div>\r\n    <div>space-center</div>\r\n    <div>space-center</div>\r\n</div>\r\n<style>\r\n    #textFlex9{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items:center;\r\n        height: 150px;\r\n    }\r\n    #textFlex9 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n* 侧轴对齐方式`align-items:stretch` 弹性盒子**没有高度时**，将被拉长至铺满高度\r\n<div id=\"textFlex10\">\r\n    <div>space-stretch</div>\r\n    <div>space-stretch</div>\r\n    <div>space-stretch</div>\r\n    <div>space-stretch</div>\r\n</div>\r\n<style>\r\n    #textFlex10{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items:stretch;\r\n        height: 150px;\r\n    }\r\n    #textFlex10 div{\r\n        width: 100px;\r\n        /* height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n#### 控制单个盒子的侧轴对齐方式\r\n<div id=\"textFlex11\">\r\n    <div>space-center</div>\r\n    <div style=\"align-self:flex-end;\">flex-end</div>\r\n    <div>space-center</div>\r\n    <div>space-center</div>\r\n</div>\r\n<style>\r\n    #textFlex11{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items:center;\r\n        height: 150px;\r\n    }\r\n    #textFlex11 div{\r\n        width: 100px;\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n\r\n### flex伸缩比\r\n* 语法格式: `flex:数值;`\r\n* 表示占用父盒子的剩余尺寸的份数\r\n<div id=\"textFlex12\">\r\n    <div>宽50px</div>\r\n    <div>不指定宽，靠内容撑开</div>\r\n    <div>flex: 2;剩余部分的2份</div>\r\n    <div>flex: 4;剩余部分的4份</div>\r\n</div>\r\n<style>\r\n    #textFlex12{\r\n        display: flex;\r\n        background-color:gray;\r\n        justify-content:space-evenly;\r\n        align-items:center;\r\n        height: 150px;\r\n    }\r\n    #textFlex12 div{\r\n        height: 100px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n    #textFlex12 div:nth-child(1){\r\n        width: 80px;\r\n    }\r\n    #textFlex12 div:nth-child(2){\r\n        /* 不指定宽 */\r\n    }\r\n    #textFlex12 div:nth-child(3){\r\n        flex: 2;\r\n    }\r\n    #textFlex12 div:nth-child(4){\r\n        flex: 4;\r\n    }\r\n</style>\r\n\r\n### 修改主轴方向\r\n* 作用：修改主轴方向，实现子元素垂直排列\r\n* 属性名：`flex-direction`\r\n* 属性值：\r\n    ![](./images/移动端布局及Flex布局模型/2022-06-20-06-54-01.png)\r\n* 主轴修改为垂直方向后，水平方向的轴就是侧轴\r\n\r\n#### 修改主轴方向后修改主轴的对齐方式\r\n* 主轴修改为垂直方向后，想要控制主轴（垂直方向）的对齐方式依然使用`justify-content`属性\r\n* 主轴修改为垂直方向后，想要控制侧轴（水平方向）的对齐方式依然使用`align-items`属性\r\n\r\n#### 使用示例\r\n<div id=\"textFlex13\">\r\n    <div>justify-content:flex-start</div>\r\n    <div>justify-content:flex-start</div>\r\n    <div>justify-content:flex-start</div>\r\n</div>\r\n<style>\r\n    #textFlex13{\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 300px;\r\n        background-color:gray;\r\n        justify-content: flex-start;\r\n    }\r\n    #textFlex13 div{\r\n        /* width: 300px; */\r\n        height: 50px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n<br>\r\n<div id=\"textFlex14\">\r\n    <div>justify-content:space-around; align-items:center;</div>\r\n    <div>justify-content:space-around; align-items:center;</div>\r\n    <div>justify-content:space-around; align-items:center;</div>\r\n</div>\r\n<style>\r\n    #textFlex14{\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 300px;\r\n        background-color:gray;\r\n        justify-content:space-around;\r\n        align-items:center;\r\n    }\r\n    #textFlex14 div{\r\n        /* width: 300px; */\r\n        height: 50px;\r\n        /* line-height: 100px; */\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n### 弹性盒子的换行\r\n* 默认情况下，当**弹性容器**的一行之内不能容纳下所有**弹性盒子**时，弹性盒子的**宽**会**缩小**\r\n* 使用`flex-wrap`属性可以实现弹性盒子的换行排列效果\r\n* 取值：\r\n    * `no-wrap` 默认值\r\n        * 弹性盒子会受到挤压，设定的宽度会失效\r\n        * ![](./images/移动端布局及Flex布局模型/2022-06-20-08-10-02.png)\r\n    * `wrap` 换行 \r\n        * 弹性盒子的尺寸不会受到挤压，会在弹性容器容纳不下时换行\r\n        * ![](./images/移动端布局及Flex布局模型/2022-06-20-08-09-01.png)\r\n            * 水平方向末尾留下了多余空间因为justify-content（主轴方向对齐方式）默认值是justify-content:flex-start）\r\n            * 垂直方向行间留下了多余空间 这是因为align-content(侧轴方向对齐方式)默认值的影响）\r\n\r\n\r\n### 弹性盒子的侧轴对齐方式\r\n* 属性名`align-content`\r\n* 属性值：和主轴对齐方式`justify-content`的取值几乎一致（没有`space-evenly`）\r\n* 默认情况下，弹性盒子是不换行的，所以设置侧轴对齐方式会看不到效果，要先设置`flex-wrap:wrap;`属性后才能看到效果\r\n\r\n#### 效果测试\r\n<div id=\"textFlex15\">\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n    <div>123</div>\r\n</div>\r\n<style>\r\n    #textFlex15{\r\n        display: flex;\r\n        flex-wrap:wrap;\r\n        justify-content:center;\r\n        align-content:center;\r\n        /* justify-items: center; */\r\n        /* align-items: center; */\r\n        /* height: 300px; */\r\n        /* width: 300px; */\r\n        background-color:gray;\r\n        align-items:center;\r\n    }\r\n    #textFlex15 div{\r\n        width: 50px;\r\n        height: 50px;\r\n        margin:5px;\r\n        background-color:green;\r\n        border: 1px solid white;\r\n    }\r\n</style>\r\n\r\n#### 问题\r\n* 如何处理最后一行不能左对齐的问题？\r\n![](./images/移动端布局及Flex布局模型/2022-06-20-08-58-31.png)\r\n\r\n\r\n"}