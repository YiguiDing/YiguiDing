{"shortInfo":{"title":"js高级学习笔记","date":"2022-08-28T21:04:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["javascript","js","高级"],"hideAtIndex":true,"categories":"笔记","id":28,"countWords":708,"readSeconds":70.8,"assetsbaseUrl":"/self_server/assets/"},"content":"# js高级学习笔记\r\n## 目录\r\n- [js高级学习笔记](#js高级学习笔记)\r\n  - [目录](#目录)\r\n  - [正则表达式](#正则表达式)\r\n    - [基本语法格式](#基本语法格式)\r\n    - [正则在search()和replace()中的使用](#正则在search和replace中的使用)\r\n    - [RegExp 对象](#regexp-对象)\r\n\r\n<!-- ## ES6模块化规范\r\n**早期社区版的模块化解决方案**\r\n* AMD CMD 用于浏览器的模块化规范\r\n* commonJS 用于服务端的模块化规范\r\n\r\n**当前ES6模块化规范**\r\n* 官方的模块化规范\r\n* 前端和后端共同的模块化规范 -->\r\n\r\n\r\n## 正则表达式\r\n### 基本语法格式\r\n`/正则表达式主体/修饰符(可选)`\r\n* 修饰符:\r\n    * i 不区分大小写\r\n    * g 全局匹配\r\n    * m 多行匹配\r\n* 范围查找:\r\n    * `[abc]`\t查找方括号之间的任何字符。\r\n    * `[0-9]`\t查找任何从 0 至 9 的数字。\r\n    * `(x|y)`\t查找任何以 | 分隔的选项。\r\n* 特殊字符:\r\n    * `\\d`\t    查找数字。\r\n    * `\\s`\t    查找空白字符。\r\n    * `\\b`\t    匹配单词边界。\r\n    * `\\uxxxx`\t查找以十六进制数 xxxx 规定的 Unicode 字符。\r\n* 量词:\r\n    * `n+`\t匹配任何包含至少一个 n 的字符串。\r\n    * `n*`\t匹配任何包含零个或多个 n 的字符串。\r\n    * `n?`\t匹配任何包含零个或一个 n 的字符串。\r\n\r\n### 正则在search()和replace()中的使用\r\n* `str.search(字符串或正则表达式)` 返回查找到的第一个子字符串的下标\r\n* `str.replace(字符串A或正则表达式A,字符串B)` 替换A为B\r\n\r\n\r\n### RegExp 对象\r\n在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。\r\n\r\n**创建对象**\r\n```js\r\nvar patt=new RegExp(正则表达式主体,修饰符);\r\nvar rpatte = new RegExp(\"\\\\w+\");\r\n// 或者更简单的方式:\r\nvar patt=/正则表达式主体/修饰符;\r\n```\r\n\r\n**RegExp方法**\r\n* `reg.exec(string)`    检索字符串中的正则表达式的匹配。返回该匹配值，否则返回null。\r\n* `reg.test()`    检测一个字符串是否匹配某个模式。返回 true 或 false。\r\n* `reg.toString()`    返回正则表达式的字符串值\r\n\r\n**RegExp属性**\r\n* `reg.constructor` 返回一个函数，该函数是一个创建 RegExp 对象的原型。\r\n* `reg.global`  判断是否设置了 \"g\" 修饰符\r\n* `reg.ignoreCase`  判断是否设置了 \"i\" 修饰符\r\n* `reg.multiline`   判断是否设置了 \"m\" 修饰符\r\n* `reg.lastIndex`   用于规定下次匹配的起始位置\r\n* `reg.source`  返回正则表达式的匹配模式\r\n\r\n**支持正则表达式的 String 对象的方法**\r\n* `str.search(字符串或正则)`\t检索与正则表达式相匹配的值\r\n* `str.match()`\t找到一个或多个正则表达式的匹配\r\n* `str.replace()`\t替换与正则表达式匹配的子串\r\n* `str.split()`\t把字符串分割为字符串数组\r\n\r\n\r\n```js\r\nvar regOBJ = /正则表达方式/i\r\n```"}