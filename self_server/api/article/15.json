{"shortInfo":{"layout":"post","title":"git命令备忘笔记","date":"2022-01-09T12:28:00.000Z","cover":"/self_server/assets/images/git.jpg","coverWidth":1915,"coverHeight":895,"tags":["笔记","git"],"categories":"笔记","id":15,"countWords":2715,"readSeconds":271.5,"assetsbaseUrl":"/self_server/assets/"},"content":"# git命令备忘笔记\r\n\r\n## 目录\r\n- [git命令备忘笔记](#git命令备忘笔记)\r\n  - [目录](#目录)\r\n  - [git用户配置](#git用户配置)\r\n  - [编辑git配置文件:](#编辑git配置文件)\r\n  - [查看配置信息](#查看配置信息)\r\n  - [git默认编辑器配置](#git默认编辑器配置)\r\n  - [git默认差异分析工具配置](#git默认差异分析工具配置)\r\n  - [基本操作](#基本操作)\r\n  - [有关创建与提交你的项目的快照的命令：](#有关创建与提交你的项目的快照的命令)\r\n  - [git-查看提交历史](#git-查看提交历史)\r\n  - [远程操作](#远程操作)\r\n  - [git分支管理](#git分支管理)\r\n  - [git 标签](#git-标签)\r\n  - [ssh加密通信配置](#ssh加密通信配置)\r\n  - [windows-git工具打开后自动测试](#windows-git工具打开后自动测试)\r\n  - [将已经提交到远程仓库的版本撤销](#将已经提交到远程仓库的版本撤销)\r\n  - [子仓库](#子仓库)\r\n    - [包含子仓库](#包含子仓库)\r\n    - [从远端克隆父仓库后子仓库为默认为空，需执行以下操作来下载子仓库](#从远端克隆父仓库后子仓库为默认为空需执行以下操作来下载子仓库)\r\n    - [删除误添加到暂存区的子仓库](#删除误添加到暂存区的子仓库)\r\n  - [提交信息为当前日期](#提交信息为当前日期)\r\n\r\n## git用户配置\r\n* `git config --global user.name \"YiguiDing\"`\r\n* `git config --global user.email 2449695354@qq.com`\r\n* `--global` 意味着配置文件写入进当前用户的家目录的全局配置文件\r\n* 去掉该选项意味着配置文件写入当前项目的`.git/config`文件文件\r\n\r\n## 编辑git配置文件:\r\n* `git config -e         `    # 针对当前仓库 \r\n* `git config -e --global ` # 针对系统上所有仓库\r\n\r\n## 查看配置信息\r\n* `git config --list`\r\n* 输出信息中重复的变量名代表来自不同的文件如\r\n  * 系统配置文件 `/etc/gitconfig `\r\n  * 全局配置文件 `~/.config `\r\n  * 项目配置文件 `./.git/config`\r\n* 查询单个配置变量 `git config user.name`\r\n\r\n## git默认编辑器配置\r\n* `git config --global core.editor vim`\r\n* 一般为vi vim 或特殊配置为Emacs\r\n\r\n## git默认差异分析工具配置\r\n* `git config --global merge.tool vimdiff`\r\n* Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。\r\n\r\n\r\n  \r\n## 基本操作\r\n* 将当前所在目录初始化为git仓库: `git init `\r\n* 将XXX目录初始化为git仓库: `git init XXX `\r\n* 告诉Git开始对这些文件进行跟踪: `git add 文件名`\r\n* 提交：`git commit -m \"提交消息\"`\r\n  * linux系统中提交用单引号，win用双引号\r\n* 推送到远程仓库：`git push origin master`\r\n* 克隆远程仓库 `git clone 仓库地址 [指定目录]`\r\n\r\n## 有关创建与提交你的项目的快照的命令：\r\n* `git add\t`    添加文件到暂存区\r\n  * `git add 文件名1 文件名2 文件名3`\r\n  * `git add 文件夹名`\r\n  * `git add . `当前所在文件夹\r\n* `git status`\t查看仓库当前的状态，显示有变更的文件。\r\n  * `-s`参数来获得简短的输出结果\r\n  * `红色??` 表示该文夹没有被追踪（添加到缓存区）\r\n  * `绿色A`  表示该文件已被追踪（添加到缓存区）\r\n  * `绿A红M `    表示该文件添加到缓存之后又有改动。\r\n* `git diff`\t    比较文件的不同，即暂存区和工作区的差异。\r\n  * 尚未缓存的改动：`git diff`\r\n  * 查看已缓存的改动： `git diff --cached`\r\n  * 查看已缓存的与未缓存的所有改动：`git diff HEAD`\r\n  * 显示摘要而非整个diff：`git diff --stat`\r\n  * 显示暂存区和工作区的差异: `git diff [file]`\r\n  * 显示暂存区和上一次提交(commit)的差异:\r\n    * `git diff --cached [file]`\r\n    * `git diff --staged [file]`\r\n  * 显示两次提交之间的差异:\r\n    * `git diff [first-branch]...[second-branch]`\r\n* `git commit`\t提交暂存区到本地仓库。\r\n  * 提交暂存区所有内容：`git commit -m [message]`\r\n  * 提交暂存区指定内容：`git commit [file1] [file2] ... -m [message]`\r\n  * `git -am \"修改了123.txt文件\"`\r\n    * `-a`意味着可以跳过`git add 123.txt`步骤，直接提交\r\n*` git reset`\t    回退版本。\r\n  * `git reset [--soft | --mixed | --hard] [HEAD]`\r\n  * `--soft` 工作区和暂存区内容保持不变，本地仓库回退一个版本\r\n  * `--mixed `为默认，工作区保持不变,暂存区内容回退到上一次提交版本\r\n  * `--hard` 工作区和暂存区内容都回退到上一次提交版本\r\n* `git rm`\t    删除工作区文件。\r\n  * 将文件从暂存区和工作区中删除(该文件提交到暂存区后未被修改)：`git rm fileName.txt`\r\n  * 强行从暂存区和工作区中删除一个文件(该文件提交到暂存区后又被修改)：`git rm -f fileName.txt `\r\n  * 将文件从暂存区删除，但在工作区中保留：`git rm --cached fileName.txt`\r\n  * 进入某个目录中，递归删除该目录下的所有文件和子目录： `git rm –r * `\r\n* `git mv`\t    移动或重命名工作区文件。\r\n  * 移动或重命名：`git mv [file] [newfile]`\r\n  * 强制移动并覆盖：`git mv -f [file] [newfile]`\r\n\r\n## git-查看提交历史\r\n* `git log` - 查看历史提交记录。\r\n  * `-6` 指定列出条数\r\n  *  `--oneline` 选项来查看历史记录的简洁的版本\r\n  *  `--all` 查看所有分支的提交历史\r\n  *  `--graph` 选项，查看历史中什么时候出现了分支、合并。\r\n  *  ` --no-merges` 选项以隐藏合并提交记录\r\n  *  `--reverse` 参数来逆向显示所有日志\r\n  *  `--author=YiguiDing` 查找指定用户的提交日志\r\n  *   `--after` `--since`指定日期之后，使用格式：`--after={2010-04-18}`\r\n  *   `--before` `--until`指定日期之前，使用格式：`--before={3.weeks.ago}` \r\n* `git blame file` - 以列表形式查看指定文件的历史修改记录。\r\n\r\n\r\n## 远程操作\r\n* `git remote`\t远程仓库操作\r\n  * `git remote show [remote]` 显示某个远程仓库详细信息\r\n  * `git remote add [shortName] [url]` 为一个远程库取一个**简短名**\r\n  * `git remote rm shortName`  # 删除远程仓库**简短名**\r\n  * `git remote reName old_shortName new_shortName`  # 修改仓库**简短名**\r\n  * `-v` 列举当前仓库remote远程仓库**简短名**和**实际地址**之间的对应关系\r\n* `git fetch`   从远程获取代码库\r\n  * `git fetch origin` 从远程获取代码库但不合并到当前分支\r\n  * `git merge origin/master` 将远程代码的主分支合并到当前分支\r\n* `git pull`    下载远程代码并合并\r\n  * 其实就是 `git fetch` 和 `git merge local_master` 的简写\r\n  * `git pull <远程主机名> <远程分支名>:<本地分支名>`\r\n  * `git pull origin master:brantest`将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。\r\n  * `git pull origin master`与当前分支合并,冒号后面的部分可以省略。\r\n* `git push`    上传远程代码并合并\r\n    * `git push <远程主机名> <本地分支名>:<远程分支名>` \r\n    * `git push <远程主机名> <本地分支名>` 如果远程分支名与本地分支名相同，则可以省略冒号`:`及其之后内容\r\n\r\n## git分支管理\r\n* `git branch`列出分支\r\n* `git branch newBranchName`创建一个分支\r\n  * `-b` 创建分支后立马切换\r\n  * `-d` 删除分支\r\n* `git checkout newBranchName`切换到新创建的分支\r\n* 分支切换时，如果工作区内容的全部提交，工作区的全部内容会变成新分支的内容，否则未提交的内容会带新分支去\r\n* `git merge branchA` 将分支branchA合并到当前分支中去\r\n  * 合并完成后可以删除branchA分支\r\n  * 当两个分支内容存在冲突时，合并的操作步骤：\r\n    1. 执行合并操作\r\n    1. 提示有文件存在冲突\r\n    1. 手动编辑那些已经合并但存在冲突的文件，删除冲突代码\r\n    1. 执行`git add 文件名` 用用于告诉Git 文件冲突已经解决\r\n    1. 不带参数的执行`git commit`\r\n    1. 成功合并后git将会做出提示\r\n\r\n## git 标签\r\n* `git tag` 默认为给最新一次提交（HEAD）打上标签\r\n* `git tag 3e92c19 ` 给3e92c19(commit id)打上标签\r\n* `-m` 指定标签信息注解内容,示例`git tag -a <tagname> -m \"runoob.com标签\"`\r\n* `-a` (annotated)选项意为\"创建一个带注解的标签\" 会记录这标签是啥时候打的，谁打的，\r\n* `-s` (signed)如果有私钥,可用GPG签署标签,示例：`git tag -s 标签名 -m '标签说明'`\r\n* `-d` 删除标签 `git tag -d 标签名`\r\n* `git show 标签名` 查看标签信息\r\n* `git tag` 查看所有标签\r\n* `git log --decorate` ，也可以看到打的标签\r\n\r\n## ssh加密通信配置\r\n* 配置成功后可以免密码向远程仓库推送\r\n  * 使用格式大致为`git push git@github.com:username/pathToProgectName.git localBranchName:remoteBranchName`\r\n1. 生成 SSH密钥 `ssh-keygen -t rsa -C \"youremail@example.com\"`\r\n    * 将生成两个文件 公钥 `~/.ssh/id_rsa.pub` 和 私钥`~/.ssh/id_rsa`\r\n        * 其中.ssh目录的权限最高允许为755，最低允许为700，也就是说属主用户的权限为rwx,其他用户不能拥有w权限\r\n        * 私钥的权限必须为600 \r\n        * 公钥的权限一般为644,最低应该是600\r\n        * `authoried_keys`权限一般为644，最低应该是600\r\n1. 将生成的SSH公钥附加到服务端的authoried_keys记录文件中\r\n    * 先在客户端将文件拷贝到服务端`scp ~/.ssh/id_rsa.pub root@域名或IP:~/.ssh/authorized_keys`\r\n    * scp使用SSH方式登录，会要求输入密码\r\n1. 再在服务端执行附加命令`cat id_rsa.pub >> authorized_keys`\r\n1. 确保服务端的SSH配置`/etc/ssh/sshd_config`文件中有：\r\n    * `RSAAuthentication yes`\r\n    * `PubkeyAuthentication yes`\r\n    * 其他无关紧要的配置\r\n      * `PermitRootLogin yes`\r\n      * `PasswordAuthentication no`\r\n    * 如有不同需要修改,然后重启服务`service sshd restart`\r\n1. 客户端SSH配置示例`/etc/ssh/ssh_config`\r\n```\r\nHost *\r\n  IdentityFile ~/.ssh/id_rsa\r\nHost github.com\r\n  IdentityFile ~/.ssh/id_rsa\r\nHost gitee.com\r\n  IdentityFile ~/.ssh/id_rsa\r\n```\r\n\r\n## windows-git工具打开后自动测试\r\n附加两行内容到`/etc/profile`或`~/.profile`文件中\r\n  * `ssh git@github.com`\r\n  * `ssh git@gitee.com\r\n`\r\n\r\n## 将已经提交到远程仓库的版本撤销\r\n* `git log --oneline` 找出上一次提交版本的commitID\r\n* `git reset --mixed xxxx` 将缓存区恢复成该commitID\r\n* `git add .` 重新将工作区文件添加到缓存区\r\n* `git commit -m \"xxxxxxx\"` 提交到本地仓库\r\n* `git push origin master --force` 强制推送到远程仓库\r\n\r\n\r\n## 子仓库\r\n### 包含子仓库\r\n* 格式：`git submodule add \"url\" \"add_To_path\"`\r\n    * `git submodule add git@github.com:YiguiDing/js_russuaGame.git`\r\n    * `git submodule add git@github.com:YiguiDing/js_russuaGame.git ./js_russuaGame`\r\n\r\n### 从远端克隆父仓库后子仓库为默认为空，需执行以下操作来下载子仓库\r\n* `git submodule init`\r\n* `git submodule update`\r\n\r\n### 删除误添加到暂存区的子仓库\r\n* `git rm --cached html-js_russiaGame`\r\n\r\n## 提交信息为当前日期\r\n* `git commit -m \"$(date)\"`\r\n* **$(command)** 与 **\\`command\\`**\r\n  * linux中**echo $(date)** 和 **echo \\`date\\`** 的作用是将date命令的结果用echo输出\r\n  * 在Windows的git工具中两种都能使用（类似Linux环境）\r\n  * 但是在powerShell中只有第一种能使用\r\n"}