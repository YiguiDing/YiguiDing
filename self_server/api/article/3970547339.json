{"shortInfo":{"title":"JavaWeb学习笔记","date":"2022-11-06T05:13:00.000Z","endDate":"2022-12-04 0:28:00 +0800","cover":"\\self_server\\assets\\images\\JavaWeb学习笔记\\2022-12-04-01-53-57.png","tags":["笔记"],"categories":"笔记","id":3970547339,"countWords":33813,"readSeconds":3381.3,"assetsbaseUrl":"/self_server/assets/"},"content":"<!-- ![](./images/JavaWeb学习笔记/2022-12-04-01-53-57.png) -->\r\n\r\n<details>\r\n<summary>\r\n显示/隐藏\r\n\r\n## 目录\r\n</summary>\r\n\r\n- [目录](#目录)\r\n- [概念](#概念)\r\n- [数据库:mySql](#数据库mysql)\r\n  - [mySql安装配置](#mysql安装配置)\r\n  - [SQL基础语法](#sql基础语法)\r\n  - [MySql数据类型](#mysql数据类型)\r\n  - [SQL语句的分类](#sql语句的分类)\r\n  - [DDL(Data Definition Language)数据定义语言](#ddldata-definition-language数据定义语言)\r\n    - [DDL——\\>`操作数据库`](#ddl操作数据库)\r\n      - [查询数据库](#查询数据库)\r\n      - [创建数据库](#创建数据库)\r\n      - [删除数据库](#删除数据库)\r\n      - [使用（切换）数据库](#使用切换数据库)\r\n      - [查看当前使用的数据库](#查看当前使用的数据库)\r\n    - [DDL——\\>`操作表`](#ddl操作表)\r\n      - [创建表](#创建表)\r\n      - [查询所有表](#查询所有表)\r\n      - [查询表结构](#查询表结构)\r\n      - [删除表](#删除表)\r\n      - [修改表](#修改表)\r\n        - [修改表名](#修改表名)\r\n        - [添加列](#添加列)\r\n        - [修改列的数据类型](#修改列的数据类型)\r\n        - [修改列名和数据类型](#修改列名和数据类型)\r\n        - [删除列](#删除列)\r\n      - [案例](#案例)\r\n  - [DML(Data Manipulation Language)数据操作语言](#dmldata-manipulation-language数据操作语言)\r\n    - [DML——\\>`添加数据`](#dml添加数据)\r\n      - [添加数据到指定列](#添加数据到指定列)\r\n      - [给所有列添加数据](#给所有列添加数据)\r\n      - [批量添加数据](#批量添加数据)\r\n    - [DML——\\>`修改数据`](#dml修改数据)\r\n    - [DML——\\>`删除表数据`](#dml删除表数据)\r\n  - [DQL(Data Query Language)数据查询语言](#dqldata-query-language数据查询语言)\r\n    - [DQL——\\>`基础查询`](#dql基础查询)\r\n    - [DQL——\\>`条件查询`](#dql条件查询)\r\n    - [DQL——\\>`排序查询`](#dql排序查询)\r\n    - [DQL——\\>`聚合查询`](#dql聚合查询)\r\n    - [DQL——\\>`分组查询`](#dql分组查询)\r\n    - [DQL——\\>`分页查询`](#dql分页查询)\r\n  - [DCL(Data Control Language)数据控制语言](#dcldata-control-language数据控制语言)\r\n    - [??](#)\r\n  - [约束](#约束)\r\n    - [非空约束](#非空约束)\r\n    - [唯一约束](#唯一约束)\r\n    - [主键约束](#主键约束)\r\n    - [检查约束](#检查约束)\r\n    - [默认约束](#默认约束)\r\n    - [外键约束](#外键约束)\r\n    - [额......](#额)\r\n  - [数据库设计](#数据库设计)\r\n    - [一对一](#一对一)\r\n    - [一对多](#一对多)\r\n    - [多对多](#多对多)\r\n  - [多表查询](#多表查询)\r\n    - [笛卡尔积](#笛卡尔积)\r\n    - [内连接](#内连接)\r\n    - [外连接](#外连接)\r\n    - [子查询](#子查询)\r\n    - [案例：子查询](#案例子查询)\r\n  - [事务](#事务)\r\n- [JDBC](#jdbc)\r\n  - [DriverManager工具类](#drivermanager工具类)\r\n  - [Connection数据库连接对象](#connection数据库连接对象)\r\n  - [`Statement` sql执行器对象](#statement-sql执行器对象)\r\n  - [`PreparedStatement` 预编译sql执行器对象:防止sql注入](#preparedstatement-预编译sql执行器对象防止sql注入)\r\n  - [ResultSet 结果集合对象](#resultset-结果集合对象)\r\n  - [数据库连接池](#数据库连接池)\r\n    - [Druid德鲁伊数据库连接池](#druid德鲁伊数据库连接池)\r\n  - [JDBC练习](#jdbc练习)\r\n    - [查询数据](#查询数据)\r\n    - [插入数据](#插入数据)\r\n    - [更新数据](#更新数据)\r\n    - [删除数据](#删除数据)\r\n- [Maven](#maven)\r\n- [myBatis](#mybatis)\r\n  - [myBatis简单示例](#mybatis简单示例)\r\n    - [使用示例1:myBatis简单示例](#使用示例1mybatis简单示例)\r\n    - [使用示例2:使用Mapper代理方式](#使用示例2使用mapper代理方式)\r\n  - [核心配置文件](#核心配置文件)\r\n  - [查询数据](#查询数据-1)\r\n    - [多查询selectAll](#多查询selectall)\r\n    - [单查询selectById](#单查询selectbyid)\r\n    - [多条件查询：散装参数](#多条件查询散装参数)\r\n    - [多条件查询：对象参数](#多条件查询对象参数)\r\n    - [多条件查询：集合参数](#多条件查询集合参数)\r\n    - [多条件-动态条件查询`where标签或1=1恒等式`](#多条件-动态条件查询where标签或11恒等式)\r\n    - [单条件-动态条件查询`:when:choose:otherwise`](#单条件-动态条件查询whenchooseotherwise)\r\n  - [增添数据](#增添数据)\r\n    - [插入单条数据](#插入单条数据)\r\n    - [插入单条数据：返回主键](#插入单条数据返回主键)\r\n  - [修改数据](#修改数据)\r\n    - [修改全部字段](#修改全部字段)\r\n    - [修改任意字段`set:if`](#修改任意字段setif)\r\n  - [删除数据](#删除数据-1)\r\n    - [删除单个deleteById](#删除单个deletebyid)\r\n    - [删除多个`deleteById`:`不使用注解版`](#删除多个deletebyid不使用注解版)\r\n    - [删除多个`deleteById`:`使用注解版`](#删除多个deletebyid使用注解版)\r\n  - [myBatis对参数的封装](#mybatis对参数的封装)\r\n  - [使用注解完成简单sql操作](#使用注解完成简单sql操作)\r\n- [Tomcat](#tomcat)\r\n- [Servlet](#servlet)\r\n  - [什么是Servlet](#什么是servlet)\r\n  - [实现最简Servlet程序](#实现最简servlet程序)\r\n  - [servlet生命周期](#servlet生命周期)\r\n  - [HTTPServlet](#httpservlet)\r\n  - [urlPattern配置](#urlpattern配置)\r\n  - [xml方式配置Servlet](#xml方式配置servlet)\r\n  - [Request对象](#request对象)\r\n    - [Request继承体系](#request继承体系)\r\n    - [Request常用方法](#request常用方法)\r\n    - [通用的获取参数的方法](#通用的获取参数的方法)\r\n    - [解决Request输入流中文乱码的问题](#解决request输入流中文乱码的问题)\r\n  - [Request内部请求转发转发流转给jsp页面Forward](#request内部请求转发转发流转给jsp页面forward)\r\n  - [Response对象](#response对象)\r\n    - [Response设置响应数据功能介绍](#response设置响应数据功能介绍)\r\n    - [Response完成重定向](#response完成重定向)\r\n    - [Response响应字符数据](#response响应字符数据)\r\n    - [Response响应字节数据](#response响应字节数据)\r\n  - [案例：实现登录注册案例](#案例实现登录注册案例)\r\n  - [优化：把SqlSessionFactory优化为工具类](#优化把sqlsessionfactory优化为工具类)\r\n- [JSP(Java Server Pages)Java服务端页面](#jspjava-server-pagesjava服务端页面)\r\n  - [servlet+jsp](#servletjsp)\r\n  - [JSTF标签](#jstf标签)\r\n- [MVC模式与三层架构](#mvc模式与三层架构)\r\n  - [MVC模式](#mvc模式)\r\n  - [三层架构](#三层架构)\r\n  - [SSM三大框架](#ssm三大框架)\r\n  - [MVC三层模式与三层架构的区别](#mvc三层模式与三层架构的区别)\r\n  - [案例业务逻辑](#案例业务逻辑)\r\n- [使用`三层架构`重写登录注册案例](#使用三层架构重写登录注册案例)\r\n  - [项目目录结构](#项目目录结构)\r\n  - [database数据访问层](#database数据访问层)\r\n  - [service业务逻辑层](#service业务逻辑层)\r\n  - [web表现层（控制器+视图）](#web表现层控制器视图)\r\n  - [maven配置](#maven配置)\r\n  - [结合反射对web表现层的进一步优化并实现验证码和JSON响应](#结合反射对web表现层的进一步优化并实现验证码和json响应)\r\n- [Fastjson：JSON 数据和 Java 对象转换](#fastjsonjson-数据和-java-对象转换)\r\n- [Cookie、Session会话跟踪技术](#cookiesession会话跟踪技术)\r\n  - [Cookie](#cookie)\r\n    - [Cookie基本使用和原理](#cookie基本使用和原理)\r\n    - [Cookie存活时间](#cookie存活时间)\r\n    - [Cookie发送中文](#cookie发送中文)\r\n  - [Session](#session)\r\n    - [Session的钝化与活化](#session的钝化与活化)\r\n    - [Session在浏览器的生命周期](#session在浏览器的生命周期)\r\n    - [Session在服务端的生命周期](#session在服务端的生命周期)\r\n  - [实现登录记住我功能:通过Cookie实现](#实现登录记住我功能通过cookie实现)\r\n  - [实现登录记住我功能:通过Session实现](#实现登录记住我功能通过session实现)\r\n  - [实现注册用户验证码的案例](#实现注册用户验证码的案例)\r\n- [Filter](#filter)\r\n- [Listener](#listener)\r\n\r\n</summary>\r\n</details>\r\n\r\n## 概念\r\nJavaWeb：用java技术解决Web互联网领域问题的技术栈\r\n\r\n**内容**\r\n![](./images/JavaWeb学习笔记/2022-11-06-13-28-58.png)\r\n\r\n\r\n## 数据库:mySql\r\n\r\n**DBMS**\r\n* `Oracle`: 收费的大型数据库，Oracle 公司的产品\r\n* `MySQL`: 开源免费的中小型数据库。后来Sun公司收购了MySQL，而Sun公司又被Oracle 收购. \r\n* `MariaDB` :开源免费中小型的数据库,<green>**在MySQL被收购后,由MySql的原开发人员开发的开源版**</green>\r\n* `SQL Server`: MicroSoft公司收费的中型的数据库。C#、.net等语言常使用\r\n* `SQLite` :嵌入式的微型数据库。如:作为Android内置数据库 \r\n\r\n\r\n### mySql安装配置\r\n1. 下载解压版`mysql-5.7`\r\n3. 配置环境变量\r\n   ```text\r\n   JAVA_HOME = D:\\Program Files\\mysql-5.7.38-winx64\r\n   PATH += %MYSQL_HOME%\\bin\r\n   ```\r\n1. 编写配置文件`my.ini`,放到根目录\r\n   ```ini\r\n    [mysql]\r\n    default-character-set=utf8\r\n    \r\n    [mysqld]\r\n    skip-grant-tables # 跳过权限表认证，用于解决登录sql的报错：ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\r\n    port=3306\r\n    character-set-server=utf8\r\n    default-storage-engine=INNODB\r\n    sql-mode=\"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"\r\n   ```\r\n4. 初始化数据库\r\n   ```bash\r\n   #以管理员方式执行，效果为在mysql根目录生成data文件夹\r\n   mysqld --initialize-insecure\r\n   ```\r\n5. 注册mysql为系统服务\r\n   ```bash\r\n   mysqld -install #注册服务\r\n   mysqld -remove #删除服务\r\n   ```\r\n   **问题**\r\n   若注册服务提示找不到文件，则修改注册表，将路径改为正确路径\r\n   ![](./images/JavaWeb学习笔记/2022-11-06-14-56-38.png)\r\n6. 启动mysql服务\r\n   ```bash\r\n   # 方法1\r\n   net start mysql #启动服务 \r\n   net stop mysql # 停止服务\r\n   # 方法2\r\n   services.msc # 通过windows的services图形界面启动\r\n   ```\r\n7. 修改密码\r\n   ```bash\r\n   mysqld --skip-grant-tables # --skip-grant-tables 的意思是跳过权限表认证。\r\n   mysqld -u root -p root  # 修改密码\r\n   ```\r\n8. 登录\r\n   ```bash\r\n   mysql -u root -p # 默认密码为空\r\n   mysql -u 用户名 -p 密码 -h 主机 -P 端口\r\n   ```\r\n\r\n### SQL基础语法\r\n\r\n**规范**\r\n* 关键字不区分大小写，建议大写\r\n\r\n**注释**\r\n```sql\r\n-- 这是单行注释，必须要有空格\r\n/* \r\n   这是多行注释\r\n*/\r\n```\r\n\r\n### MySql数据类型\r\n\r\n**分类**\r\n* 数值类型\r\n* 日期时间类型\r\n* 字符串类型\r\n\r\n**数值类型**\r\n| 数据类型     | 大小    | 描述           | 说明                                                                             |\r\n| ------------ | ------- | -------------- | -------------------------------------------------------------------------------- |\r\n| TINYINT      | 1 byte  | 小整数值       |\r\n| SMALLINT     | 2 bytes | 大整数值       |\r\n| MEDIUMINT    | 3 bytes | 大整数值       |\r\n| INT或INTEGER | 4 bytes | 大整数值       |\r\n| BIGINT       | 8 bytes | 极大整数值     |\r\n| FLOAT        | 4 bytes | 单精度浮点数值 |\r\n| DOUBLE       | 8 bytes | 双精度浮点数值 | `字段名1 double(总长度,保留小数位数)` <br> 如分数[0.00-100.00]：分数 double(5,2) |\r\n| DECIMAL      |         | 小数值         |\r\n\r\n**日期时间类型**\r\n| 数据类型  | 大小 | 描述                        | 说明                                          |\r\n| --------- | ---- | --------------------------- | --------------------------------------------- |\r\n| DATE      | 3    | 日期值                      |\r\n| TIME      | 3    | 时间值或持续时间            |\r\n| YEAR      | 1    | 年份值                      |\r\n| DATETIME  | 8    | 混合日期和时间值            |\r\n| TIMESTAMP | 4    | 混合日期和时间值,**时间戳** | 若该字段不给数值，则mysql会默认给一个当前时间 |\r\n\r\n**字符串类型**\r\n| 数据类型   | 大小                  | 描述                          | 说明                                                                    |\r\n| ---------- | --------------------- | ----------------------------- | ----------------------------------------------------------------------- |\r\n| CHAR       | 0-255 bytes           | 定长字符串                    | \"abc\" 在 `name char(10)` 中占10个字符 浪费空间节约时间 **空间换时间**   |\r\n| VARCHAR    | 0-65535 bytes         | 变长字符串                    | \"abc\" 在 `name varchar(10)` 中占3个字符 浪费时间节约空间 **时间换空间** |\r\n| TINYBLOB   | 0-255 bytes           | 不超过255个字符的二进制字符串 |\r\n| TINYTEXT   | 0-255 bytes           | 短文本字符串                  |\r\n| BLOB       | 0-65535 bytes         | 二进制形式的长文本数据        |\r\n| TEXT       | 0-65535 bytes         | 长文本数据                    |\r\n| MEDIUMBLOB | 0-16 777215 bytes     | 二进制形式的中等长度文本数据  |\r\n| MEDIUMTEXT | 0-16777 215 bytes     | 中等长度文本数据              |\r\n| LONGBLOB   | 0-4 294 967 295 bytes | 进制形式的极大文本数据        |\r\n| LONGTEXT   | 0-4 294 967 295 bytes | 极大文本数据                  |\r\n\r\n\r\n\r\n### SQL语句的分类\r\n* `DDL(Data Definition Language)`数据`定义`语言，用来定义数据库对象:`数据库，表，列`等\r\n* `DML(Data Manipulation Language)`数据`操作`语言，用来对数据库中表的数据进行`增删改`\r\n* `DQL(Data Query Language)`数据`查询`语言，用来`查`询数据库中表的记录(数据)\r\n* `DCL(Data Control Language)`数据`控制`语言，用来`定义数据库的访问权限和安全级别`，及`创建用户`\r\n\r\n### DDL(Data Definition Language)数据定义语言\r\n\r\n#### DDL——>`操作数据库`\r\n\r\n##### 查询数据库\r\n**查询数据库**\r\n```sql\r\nshow databases;\r\n```\r\n\r\n**查询数据库测试**\r\n```bash\r\nmysql> show databases;\r\n+--------------------+\r\n| Database           | # mysql自带的四个数据库：\r\n+--------------------+\r\n| information_schema | # 不在硬盘中，是一个视图，记录了mysql中的库、表\r\n| mysql              | # 存储了权限等的信息\r\n| performance_schema | # 存储了性能相关的信息\r\n| sys                | # 存储了系统相关的信息\r\n+--------------------+\r\n4 rows in set (0.00 sec)\r\n\r\n```\r\n\r\n-------------------------------------------------------------------\r\n##### 创建数据库\r\n\r\n**创建数据库**\r\n```sql\r\ncreate database 数据库名;\r\n```\r\n\r\n**创建数据库测试**\r\n```bash\r\nmysql> create database db1;\r\nQuery OK, 1 row affected (0.09 sec)\r\n```\r\n\r\n**创建数据库（若不存在）**\r\n```sql\r\ncreate database if not exists 数据库名;\r\n```\r\n\r\n-------------------------------------------------------------------\r\n##### 删除数据库\r\n\r\n**删除数据库**\r\n```sql\r\ndrop database 数据库名;\r\n```\r\n\r\n**删除数据库测试**\r\n```bash\r\nmysql> drop database db1;\r\nQuery OK, 0 rows affected (0.00 sec)\r\n```\r\n\r\n\r\n**删除数据库（若存在）**\r\n```sql\r\ndrop database if not exists 数据库名;\r\n```\r\n\r\n-------------------------------------------------------------------\r\n##### 使用（切换）数据库\r\n\r\n**使用数据库**\r\n```sql\r\nuse 数据库名;\r\n```\r\n\r\n**使用数据库测试**\r\n```bash\r\nmysql> use db1;\r\nDatabase changed\r\n```\r\n\r\n-------------------------------------------------------------------\r\n##### 查看当前使用的数据库\r\n**查看当前使用的数据库**\r\n```sql\r\nselect Database();\r\n```\r\n\r\n**查看当前使用的数据库测试**\r\n```bash\r\nmysql> select Database();\r\n+------------+\r\n| Database() |\r\n+------------+\r\n| db1        |\r\n+------------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n-------------------------------------------------------------------\r\n\r\n\r\n#### DDL——>`操作表`\r\n**CRUB**\r\n* 创建(Create)\r\n* 查询(Retrieve)\r\n* 修改(Update)\r\n* 删除(Delete)\r\n\r\n-------------------------------------------------------------------\r\n\r\n##### 创建表\r\n**创建表**\r\n```sql\r\ncreate table 表名(\r\n   字段名1 数据类型1,\r\n   字段名2 数据类型2 -- 最后一行无逗号\r\n);\r\n```\r\n\r\n**创建表测试**\r\n```bash\r\nmysql> \r\ncreate table user(\r\n   id int,\r\n   username varchar(20),\r\n   password varchar(32)\r\n);\r\nQuery OK, 0 rows affected (0.65 sec)\r\nmysql> desc user;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| username | varchar(20) | YES  |     | NULL    |       |\r\n| password | varchar(32) | YES  |     | NULL    |       |\r\n+----------+-------------+------+-----+---------+-------+\r\n3 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n-------------------------------------------------------------------\r\n\r\n##### 查询所有表\r\n\r\n**查询所有表**\r\n```sql\r\nshow tables;\r\n```\r\n\r\n**查询所有表测试**\r\n```bash\r\nmysql> show tables;\r\n+---------------+\r\n| Tables_in_db1 |\r\n+---------------+\r\n| user          |\r\n+---------------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n-------------------------------------------------------------------\r\n\r\n##### 查询表结构\r\n\r\n**查询表结构**\r\n```sql\r\ndesc 表名;\r\n```\r\n\r\n**查询表结构测试**\r\n```bash\r\nmysql> desc user;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| username | varchar(20) | YES  |     | NULL    |       |\r\n| password | varchar(32) | YES  |     | NULL    |       |\r\n+----------+-------------+------+-----+---------+-------+\r\n3 rows in set (0.01 sec)\r\n```\r\n\r\n-------------------------------------------------------------------\r\n\r\n##### 删除表\r\n\r\n**删除表**\r\n```sql\r\ndrop table 表名;\r\n```\r\n\r\n**删除表(判断是否存在)**\r\n```sql\r\ndrop table if exists 表名;\r\n```\r\n\r\n**删除表(判断是否存在)测试**\r\n```bash\r\nmysql>  show tables;\r\n+---------------+\r\n| Tables_in_db1 |\r\n+---------------+\r\n| student       |\r\n| user          |\r\n+---------------+\r\n2 rows in set (0.00 sec)\r\n\r\nmysql> drop table if exists user;\r\nQuery OK, 0 rows affected (0.24 sec)\r\nmysql> show tables;\r\n+---------------+\r\n| Tables_in_db1 |\r\n+---------------+\r\n| student       |\r\n+---------------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n-------------------------------------------------------------------\r\n\r\n##### 修改表\r\n\r\n###### 修改表名\r\n**修改表名**\r\n```sql\r\nalter table 旧表名 rename to 新表名; \r\n```\r\n\r\n**修改表名测试**\r\n```bash\r\nmysql> show tables;\r\n+---------------+\r\n| Tables_in_db1 |\r\n+---------------+\r\n| student       |\r\n+---------------+\r\n1 row in set (0.00 sec)\r\n\r\nmysql> alter table student rename to student_new;\r\nQuery OK, 0 rows affected (0.43 sec)\r\n\r\nmysql> show tables;\r\n+---------------+\r\n| Tables_in_db1 |\r\n+---------------+\r\n| student_new   |\r\n+---------------+\r\n1 row in set (0.00 sec)\r\n```\r\n\r\n\r\n###### 添加列\r\n**添加列**\r\n```sql\r\nalter table 表名 add 列名 数据类型; \r\n```\r\n\r\n**添加列测试**\r\n```bash\r\nmysql> desc student_new;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| name     | char(10)    | YES  |     | NULL    |       |\r\n| sex      | char(1)     | YES  |     | NULL    |       |\r\n| birthday | date        | YES  |     | NULL    |       |\r\n| score    | double(5,2) | YES  |     | NULL    |       |\r\n| email    | varchar(64) | YES  |     | NULL    |       |\r\n| telnum   | char(20)    | YES  |     | NULL    |       |\r\n| status   | tinyint(4)  | YES  |     | NULL    |       |\r\n+----------+-------------+------+-----+---------+-------+\r\n8 rows in set (0.00 sec)\r\n\r\nmysql> alter table student_new add new_attribute int; # 新增字段\r\nQuery OK, 0 rows affected (0.56 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> desc student_new;\r\n+---------------+-------------+------+-----+---------+-------+\r\n| Field         | Type        | Null | Key | Default | Extra |\r\n+---------------+-------------+------+-----+---------+-------+\r\n| id            | int(11)     | YES  |     | NULL    |       |\r\n| name          | char(10)    | YES  |     | NULL    |       |\r\n| sex           | char(1)     | YES  |     | NULL    |       |\r\n| birthday      | date        | YES  |     | NULL    |       |\r\n| score         | double(5,2) | YES  |     | NULL    |       |\r\n| email         | varchar(64) | YES  |     | NULL    |       |\r\n| telnum        | char(20)    | YES  |     | NULL    |       |\r\n| status        | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attribute | int(11)     | YES  |     | NULL    |       | # 新增的字段\r\n+---------------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\n```\r\n\r\n###### 修改列的数据类型\r\n\r\n**修改列的数据类型**\r\n```sql\r\nalter table 表名 modify 列名 新数据类型; \r\n```\r\n**修改数据类型测试**\r\n```bash\r\nmysql> desc student_new;\r\n+---------------+-------------+------+-----+---------+-------+\r\n| Field         | Type        | Null | Key | Default | Extra |\r\n+---------------+-------------+------+-----+---------+-------+\r\n| id            | int(11)     | YES  |     | NULL    |       |\r\n| name          | char(10)    | YES  |     | NULL    |       |\r\n| sex           | char(1)     | YES  |     | NULL    |       |\r\n| birthday      | date        | YES  |     | NULL    |       |\r\n| score         | double(5,2) | YES  |     | NULL    |       |\r\n| email         | varchar(64) | YES  |     | NULL    |       |\r\n| telnum        | char(20)    | YES  |     | NULL    |       |\r\n| status        | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attribute | int(11)     | YES  |     | NULL    |       | # new_attribute int(11)\r\n+---------------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\n\r\nmysql> alter table student_new modify new_attribute char(1);   # 修改字段的数据类型\r\nQuery OK, 0 rows affected (0.63 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> desc student_new;\r\n+---------------+-------------+------+-----+---------+-------+\r\n| Field         | Type        | Null | Key | Default | Extra |\r\n+---------------+-------------+------+-----+---------+-------+\r\n| id            | int(11)     | YES  |     | NULL    |       |\r\n| name          | char(10)    | YES  |     | NULL    |       |\r\n| sex           | char(1)     | YES  |     | NULL    |       |\r\n| birthday      | date        | YES  |     | NULL    |       |\r\n| score         | double(5,2) | YES  |     | NULL    |       |\r\n| email         | varchar(64) | YES  |     | NULL    |       |\r\n| telnum        | char(20)    | YES  |     | NULL    |       |\r\n| status        | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attribute | char(1)     | YES  |     | NULL    |       | # new_attribute char(1)\r\n+---------------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\n```\r\n\r\n###### 修改列名和数据类型\r\n\r\n**修改列名和数据类型**\r\n```sql\r\nalter table 表名 change 列名 新列名 新数据类型; \r\n```\r\n\r\n**修改列名和数据类型测试**\r\n```bash\r\nmysql> desc student_new;\r\n+---------------+-------------+------+-----+---------+-------+\r\n| Field         | Type        | Null | Key | Default | Extra |\r\n+---------------+-------------+------+-----+---------+-------+\r\n| id            | int(11)     | YES  |     | NULL    |       |\r\n| name          | char(10)    | YES  |     | NULL    |       |\r\n| sex           | char(1)     | YES  |     | NULL    |       |\r\n| birthday      | date        | YES  |     | NULL    |       |\r\n| score         | double(5,2) | YES  |     | NULL    |       |\r\n| email         | varchar(64) | YES  |     | NULL    |       |\r\n| telnum        | char(20)    | YES  |     | NULL    |       |\r\n| status        | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attribute | char(1)     | YES  |     | NULL    |       | # 待修改列名和类型\r\n+---------------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\nmysql> alter table student_new change new_attribute new_attr  int; # 修改字段的名字和数据类型\r\nQuery OK, 0 rows affected (0.72 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> desc student_new;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| name     | char(10)    | YES  |     | NULL    |       |\r\n| sex      | char(1)     | YES  |     | NULL    |       |\r\n| birthday | date        | YES  |     | NULL    |       |\r\n| score    | double(5,2) | YES  |     | NULL    |       |\r\n| email    | varchar(64) | YES  |     | NULL    |       |\r\n| telnum   | char(20)    | YES  |     | NULL    |       |\r\n| status   | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attr | int(11)     | YES  |     | NULL    |       | # 修改列名和类型\r\n+----------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\n```\r\n\r\n###### 删除列\r\n\r\n**删除列**\r\n```sql\r\nalter table 表名 drop 列名; \r\n```\r\n\r\n**删除列测试**\r\n```bash\r\nmysql> desc student_new;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| name     | char(10)    | YES  |     | NULL    |       |\r\n| sex      | char(1)     | YES  |     | NULL    |       |\r\n| birthday | date        | YES  |     | NULL    |       |\r\n| score    | double(5,2) | YES  |     | NULL    |       |\r\n| email    | varchar(64) | YES  |     | NULL    |       |\r\n| telnum   | char(20)    | YES  |     | NULL    |       |\r\n| status   | tinyint(4)  | YES  |     | NULL    |       |\r\n| new_attr | int(11)     | YES  |     | NULL    |       | # 待删除列\r\n+----------+-------------+------+-----+---------+-------+\r\n9 rows in set (0.00 sec)\r\n\r\nmysql> alter table student_new drop new_attr;             # 删除字段\r\nQuery OK, 0 rows affected (0.74 sec)\r\nRecords: 0  Duplicates: 0  Warnings: 0\r\n\r\nmysql> desc student_new;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| name     | char(10)    | YES  |     | NULL    |       |\r\n| sex      | char(1)     | YES  |     | NULL    |       |\r\n| birthday | date        | YES  |     | NULL    |       |\r\n| score    | double(5,2) | YES  |     | NULL    |       |\r\n| email    | varchar(64) | YES  |     | NULL    |       |\r\n| telnum   | char(20)    | YES  |     | NULL    |       |\r\n| status   | tinyint(4)  | YES  |     | NULL    |       | # 删除了一个字段\r\n+----------+-------------+------+-----+---------+-------+\r\n8 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n##### 案例\r\n\r\n**案例1**\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-06-17-09-37.png)\r\n```sql\r\ncreate table student(\r\n   id int,\r\n   name char(10),\r\n   sex char(1),\r\n   birthday date,\r\n   score double(5,2),\r\n   email varchar(64),\r\n   telnum char(20),\r\n   status tinyint\r\n);\r\n```\r\n**案例1执行结果**\r\n```bash\r\nmysql> create table student(\r\n   id int,\r\n   name char(10),\r\n   sex char(1),\r\n   birthday date,\r\n   score double(5,2),\r\n   email varchar(64),\r\n   telnum char(20),\r\n   status tinyint\r\n);\r\nQuery OK, 0 rows affected (0.34 sec)\r\n\r\nmysql> desc student;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| id       | int(11)     | YES  |     | NULL    |       |\r\n| name     | char(10)    | YES  |     | NULL    |       |\r\n| sex      | char(1)     | YES  |     | NULL    |       |\r\n| birthday | date        | YES  |     | NULL    |       |\r\n| score    | double(5,2) | YES  |     | NULL    |       |\r\n| email    | varchar(64) | YES  |     | NULL    |       |\r\n| telnum   | char(20)    | YES  |     | NULL    |       |\r\n| status   | tinyint(4)  | YES  |     | NULL    |       |\r\n+----------+-------------+------+-----+---------+-------+\r\n8 rows in set (0.00 sec)\r\n```\r\n\r\n### DML(Data Manipulation Language)数据操作语言\r\n\r\n#### DML——>`添加数据`\r\n##### 添加数据到指定列\r\n**添加数据到指定列**\r\n```sql\r\ninsert into 表名(列名1,列名2,列名3,...) values(值1,值2,值3,...);\r\n```\r\n**添加数据到指定列测试**\r\n```sql\r\nuse db1;\r\ndesc student;\r\ninsert into \r\nstudent(id,name,sex,birthday,score,email,telnum,status)\r\nvalues(0,\"test1\",'男',\"2022-1-1\",99.99,\"244@qq.com\",\"0519-110\",1);\r\nselect * from student;\r\n```\r\n\r\n```bash\r\nmysql> select * from student;\r\n+------+-------+------+------------+-------+------------+----------+--------+------+\r\n| id   | name  | sex  | birthday   | score | email      | telnum   | status | age  |\r\n+------+-------+------+------------+-------+------------+----------+--------+------+\r\n|    0 | test1 | 男   | 2022-01-01 | 99.99 | 244@qq.com | 0519-110 |      1 | NULL |\r\n+------+-------+------+------------+-------+------------+----------+--------+------+\r\n3 rows in set (0.00 sec)\r\n```\r\n\r\n##### 给所有列添加数据\r\n```sql\r\ninsert into 表名 values(值1,值2,值3,...); -- 不建议使用，值的顺序错误将导致赋值错误\r\n```\r\n\r\n##### 批量添加数据\r\n```sql\r\ninsert into 表名(列名1,列名2,列名3,...) values(值1,值2,值3,...),(值1,值2,值3,...),(值1,值2,值3,...),(值1,值2,值3,...),...;\r\ninsert into 表名 values(值1,值2,值3,...),(值1,值2,值3,...),(值1,值2,值3,...),(值1,值2,值3,...),...;\r\n```\r\n\r\n#### DML——>`修改数据`\r\n\r\n\r\n**修改表数据**\r\n```sql\r\nupdate 表名 set 列名1=值1,列名2=值2,列名3=值3,... [where 条件];\r\n```\r\n<warn>不写条件会导致所有行被修改</warn>\r\n\r\n#### DML——>`删除表数据`\r\n\r\n**删除表数据**\r\n```sql\r\ndelete from 表名 [where 条件];\r\ndelete from 表名 [where 属性名=属性值];\r\n```\r\n<warn>不写条件会导致所有行被删除</warn>\r\n\r\n\r\n### DQL(Data Query Language)数据查询语言\r\n\r\n**数据查询语法**\r\n```sql\r\nselect\r\n   字段列表\r\nfrom\r\n   表名列表\r\nwhere\r\n   条件列表\r\ngroup by\r\n   分组列表\r\nhaving\r\n   分组后条件\r\norder by\r\n   排序字段\r\nlimit\r\n   分页限定\r\n;\r\n```\r\n\r\n#### DQL——>`基础查询`\r\n\r\n**查询多个字段**\r\n```sql\r\nselect 字段列表 from 表名列表;\r\nselect * from 表名列表; -- 一般公司里要求不用这种形式，因为不能一眼看出查询了哪些列\r\n```\r\n**查询多个字段测试**\r\n```bash\r\nmysql> select name,birthday,sex from student;\r\n+-------+------------+------+\r\n| name  | birthday   | sex  |\r\n+-------+------------+------+\r\n| test1 | 2022-01-01 | 男   |\r\n| test1 | 2022-01-01 | 男   |\r\n| test1 | 2022-01-01 | 男   |\r\n+-------+------------+------+\r\n3 rows in set (0.00 sec)\r\n```\r\n-------------------------------------------------------------------\r\n\r\n**去除重复记录**\r\n```sql\r\nselect distinct 字段列表 from 表名; --根据字段列表的值去除重复记录\r\n```\r\n**去除重复记录测试**\r\n```sql\r\nselect addr distinct addr from student;\r\n```\r\n-------------------------------------------------------------------\r\n**起别名**\r\n```sql\r\nselect 字段1 as 新列名1,字段2 as 新列名2, from student;\r\nselect 字段1  新列名1,字段2  新列名2, from student; -- as 可以省略\r\n```\r\n**起别名测试**\r\n```sql\r\nselect name as 姓名,age as 年龄,sex as 性别 from student;\r\nselect name 姓名,age 年龄,sex 性别 from student;\r\n```\r\n```bash\r\nmysql> select name 姓名,age 年龄,sex 性别 from student;\r\n+--------+--------+--------+\r\n| 姓名   |  年龄   | 性别   |\r\n+--------+--------+--------+\r\n| test1  |   10   |   男   |\r\n| test2  |   20   |   男   |\r\n+--------+--------+--------+\r\n2 rows in set (0.00 sec)\r\n```\r\n\r\n#### DQL——>`条件查询`\r\n**条件查询语法**\r\n```sql\r\nselect 字段列表 from 表名 where 条件列表;\r\n```\r\n| 符号                  | 说明                                                 |\r\n| --------------------- | ---------------------------------------------------- |\r\n| `>`                   |                                                      |\r\n| `<`                   |                                                      |\r\n| `>=`                  |                                                      |\r\n| `<=`                  |                                                      |\r\n| `=`                   | 注意，只写一个等于                                   |\r\n| `<>` or `!=`          |                                                      |\r\n| `between ... and ...` | `[a,b]`                                              |\r\n| `in()`                | 多选一                                               |\r\n| `like 占位符`         | **模糊查询** `_`单字符任意匹配 `%`零或多字符任意匹配 |\r\n| `is null`             |                                                      |\r\n| `is not null`         |                                                      |\r\n| `and` or `&&`         |                                                      |\r\n| `or` or `\\|\\|`        |                                                      |\r\n| `not` or `!`          |                                                      |\r\n\r\n**条件查询语法测试**\r\n```sql\r\n-- 年龄等于20\r\nselect name,sex from student where age=20;\r\n\r\n-- 年龄不等于20\r\nselect name,sex from student where age!=20;\r\n\r\n-- 年龄大于20\r\nselect name,sex from student where age>20;\r\n\r\n-- 年龄大于等于20\r\nselect name,sex from student where age>=20;\r\n\r\n-- 年龄 等于20 或 等于30 或 等于40 \r\nselect name,sex from student where age=20 or age=30 or age=40;\r\nselect name,sex from student where age in(20,30,40);    -- `in()` 的使用\r\n\r\n-- 年龄 大于等于20 且 小于等于30\r\nselect name,sex from student where age>=20 && age<=30;\r\nselect name,sex from student where age>=20 and age<=30;\r\nselect name,sex from student where age between 20 and 30; -- `between... and...` 的使用\r\n\r\n-- 出生日期在 1998-09-01 到 1999-09-01 \r\nselect name,sex from student where birthday between `1998-09-01` and `1999-09-01`;\r\n\r\n-- 英语成绩为null\r\nselect name,sex from student where english = null; -- 错误写法\r\nselect name,sex from student where english is null; -- 正确写法\r\nselect name,sex from student where english is not null;\r\n\r\n-- 姓马的\r\nselect name,sex from student where name like \"马%\";\r\n\r\n-- 第二个字是花\r\nselect name,sex from student where name like \"_花%\";\r\n\r\n-- 名字中含有德字\r\nselect name,sex from student where name like \"%德%\";\r\n```\r\n\r\n\r\n#### DQL——>`排序查询`\r\n\r\n```sql\r\nselect 字段列表 from 表名 order by 排序字段名称1 [排序方式1],排序字段名2 [排序方式2];\r\n\r\n-- 排序方式\r\n   -- ASC 升序（默认）\r\n   -- DESC 降序\r\n```\r\n<warn>根据多个字段排序时，只有当根据第一个字段排序无法区分区分顺序时，才会根据第二个字段排序。</warn>\r\n\r\n**排序查询书写示例**\r\n```sql\r\n-- 查询学生信息，按年龄升序排序\r\nselect * from student order by age asc;\r\nselect * from student order by age;\r\n\r\n-- 查询学生信息 按数学成绩降序排序\r\nselect * from student order by math_score desc;\r\n\r\n-- 查询学生信息 按数学成绩降序排序,如果数学成绩一致，则按英语成绩升序排序。\r\nselect * from student order by math_score desc,english_score asc;\r\n```\r\n\r\n#### DQL——>`聚合查询`\r\n**概念**：将一列数据作为整体，进行运算。\r\n\r\n**聚合函数**\r\n| 函数名      | 功能     | 取值              |\r\n| ----------- | -------- | ----------------- |\r\n| count(列名) | 统计数量 | `非空列名` 或 `*` |\r\n| max(列名)   | 最大值   |\r\n| min(列名)   | 最小值   |\r\n| sum(列名)   | 求和     |\r\n| avg(列名)   | 平均值   |\r\n\r\n<warn>注意：null值不参与聚合运算,如计算某列平均值，为null的行不参与运算。</warn>\r\n\r\n**sql语法格式**\r\n```sql\r\nselect 聚合函数名(列名)[,可以继续写其他字段名] from 表;\r\n```\r\n\r\n**排序查询书写示例**\r\n```sql\r\n-- 统计班级人数\r\nselect count(id) from student;\r\nselect count(*) from student;\r\n\r\n-- 查询数学最高分者的分数，名字，年龄\r\nselect name,age,max(math_score) from student;\r\n```\r\n\r\n#### DQL——>`分组查询`\r\n\r\n**分组查询**\r\n```sql\r\nselect 字段列表 from 表名 where 查询条件 group by 分组字段名 having 分组后过滤条件;\r\n```\r\n<warn>**注意:** </warn>\r\n* 分组后,只能查询分组字段和聚合函数，查询其他字段能出结果但无意义\r\n* 执行顺序: `where` -> `聚合函数` -> `having`\r\n* `where` 和 `having` 区别：\r\n  * `where` 是对分组前的数据进行限定,无法对聚合函数判断\r\n  * `having` 是对分组后的数据进行过滤,能对聚合函数判断\r\n\r\n**分组查询书写示例**\r\n```sql\r\n-- 查询全班男生女生各自的数学平均分\r\nselect sex,avg(math_score) from student group by sex;\r\n\r\n-- 分组后,只能查询分组字段和聚合函数，查询其他字段能出结果但无意义\r\nselect name,sex,avg(math_score) from student group by sex;\r\n\r\n-- 查询全班男生女生各自的数学平均分及各自人数\r\nselect sex,avg(math_score) as math_avg,count(id) as pcount from student group by sex;\r\n\r\n-- 查询全班男生女生各自的数学平均分及各自人数,分数低于70分不参与分组\r\nselect sex,avg(math_score) as math_avg,count(id) as pcount from student where math_score > 70 group by sex;\r\n\r\n-- 查询全班男生女生各自的数学平均分及各自人数,分数低于70分不参与分组,分组后,各分组的总人数>2\r\nselect \r\n   sex,avg(math_score) as math_avg,\r\n   count(id) as pcount from student\r\nwhere\r\n   math_score > 70\r\ngroup by \r\n   sex \r\nhaving \r\n   count(id) > 2;\r\n```\r\n\r\n#### DQL——>`分页查询`\r\n**分页查询语法**\r\n```sql\r\nselect 字段列表 from 表名 limit 起始索引 , 查询条目数;\r\n```\r\n\r\n**注意点**\r\n* 起始索引：从0开始\r\n* 计算公式：`起始索引 = (查询页-1) * 每页显示条目数`\r\n* <green>分页查询语法格式是mysql特有的</green>\r\n  * `sql Server` 分页查询用 `top`\r\n  * `oracle` 分页查询用 `rownnumber`\r\n\r\n**分页查询语法示例**\r\n```sql\r\n-- 从0开始查询三条数据\r\nselect * from student limit 0 ,3 ;\r\n\r\n-- 每页展示10条数据，查询第1页数据\r\nselect * from student limit 0 ,10 ;    `起始索引 = (查询页-1) * 每页显示条目数`\r\n-- 每页展示10条数据，查询第2页数据\r\nselect * from student limit 10 ,10 ;\r\n-- 每页展示10条数据，查询第3页数据\r\nselect * from student limit 20 ,10 ;\r\n```\r\n\r\n\r\n### DCL(Data Control Language)数据控制语言\r\n#### ??\r\n\r\n### 约束\r\n\r\n概念\r\n* 约束是作用于表中列的规则，用于限制加入数据的\r\n* 约束可以保证数据的 **正确性** **完整性** **有效性**\r\n\r\n**主要的几种约束**\r\n| 约束名称 | 描述                                                              | 关键字                         |\r\n| -------- | ----------------------------------------------------------------- | ------------------------------ |\r\n| 非空约束 | 保证列中所有数据不能有null值                                      | `NOT NULL`                     |\r\n| 唯一约束 | 保证列中所有数据各不相同,如果修饰的列是数值类型可以添加自增约束   | `UNIQUE [AUTO_INCREMENT]`      |\r\n| 主键约束 | 主键是一行数据的唯一标识，要求`非空`且`唯一`                      | `PRIMARY KEY [AUTO_INCREMENT]` |\r\n| 检查约束 | 保证列中的值满足某一条件  <warn> mysql不支持 **检查约束** </warn> | `CHECK`                        |\r\n| 默认约束 | 保存数据时，未指定值则采用默认值                                  | `DEFAULT`                      |\r\n| 外键约束 | 外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性      | `FOREIGN KEY`                  |\r\n\r\n**扩展约束**\r\n| 约束名称 | 描述                                                                           | 关键字          |\r\n| -------- | ------------------------------------------------------------------------------ | --------------- |\r\n| 自增约束 | 当列为`数值类型`且有`唯一约束`，保存数据时，`未指定值`或`给null`时将`自动自增` | AUTO_INCREMENT` |\r\n\r\n\r\n\r\n\r\n\r\n#### 非空约束\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n\r\n-- 在表创建时在列创建 not null 约束：\r\ncreate table student(\r\n   name char(10) not null -- 经测试,MySQL支持\r\n);\r\n\r\n\r\n-- 撤销 not null 约束\r\nalter table student modify name char(10); -- 经测试,MySQL支持\r\n-- 添加 not null 约束\r\nalter table student modify name char(10) not null; -- 经测试,MySQL支持\r\n```\r\n\r\n#### 唯一约束\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n\r\n-- 在表创建时在列创建 unique 约束：\r\ncreate table student(\r\n   stuid int unique -- 经测试,MySQL支持\r\n);\r\n-- 如果需要为多个列定义 PRIMARY KEY 约束\r\ncreate table student(\r\n   stuid int,\r\n   UNIQUE (stuid) -- 经测试,MySQL支持\r\n);\r\n\r\n-- 撤销 unique 约束\r\nALTER TABLE student DROP INDEX stuid;   -- 经测试,MySQL支持\r\n-- 添加 unique 约束\r\nALTER TABLE student ADD UNIQUE (stuid); -- 经测试,MySQL支持\r\n```\r\n\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n-- 如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束\r\ncreate table student(\r\n   stuid int,\r\n   CONSTRAINT c1 UNIQUE (stuid) -- 经测试,MySQL支持\r\n);\r\n-- 删除\r\nALTER TABLE student DROP CONSTRAINT c1; -- 经测试,MySQL不支持\r\nALTER TABLE student DROP INDEX c1; -- 经测试,MySQL支持\r\n-- 添加\r\nALTER TABLE student ADD CONSTRAINT c1 UNIQUE (stuid); -- 经测试,MySQL支持 \r\n```\r\n\r\n\r\n#### 主键约束\r\n**语法**\r\n```sql\r\n -- 主键 `非空not null` 且 `唯一unique`\r\nuse db1;\r\ndrop table if exists student;\r\n\r\n\r\n-- 在表创建时在列创建 PRIMARY KEY 约束：\r\ncreate table student(\r\n   id int primary key -- 经测试,MySQL支持\r\n);\r\n-- 如果需要为多个列定义 PRIMARY KEY 约束\r\ncreate table student(\r\n   id int,\r\n   PRIMARY KEY (id) -- 经测试,MySQL支持 -- 可以用于定义复合主键  PRIMARY KEY (id,name)\r\n);\r\n\r\n-- 撤销 PRIMARY KEY 约束\r\nALTER TABLE student DROP PRIMARY KEY;-- 经测试,MySQL支持\r\n-- 添加 PRIMARY KEY 约束\r\nALTER TABLE student ADD PRIMARY KEY (id);-- 经测试,MySQL支持\r\n```\r\n\r\n```sql\r\n-- 如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束\r\ncreate table student(\r\n   id int,\r\n   CONSTRAINT c1 PRIMARY KEY (id) -- 经测试,MySQL支持\r\n);\r\n-- 通过 CONSTRAINT 对约束命名 添加 PRIMARY KEY 约束\r\nALTER TABLE student ADD CONSTRAINT pk_studentID PRIMARY KEY (id);  -- 经测试,MySQL支持\r\n-- 通过 CONSTRAINT 对约束命名 撤销 PRIMARY KEY 约束\r\nALTER TABLE student DROP CONSTRAINT pk_studentID; --  经测试,MySQL不支持这种写法\r\n```\r\n\r\n#### 检查约束\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n\r\n-- 在表创建时在列创建 check 约束：\r\ncreate table student(\r\n   stuid int check(stuid>0) -- 经测试,MySQL支持\r\n);\r\n-- 如果需要为多个列定义 check 约束\r\ncreate table student(\r\n   stuid int,\r\n   check(stuid>0) -- 经测试,MySQL支持\r\n);\r\n\r\n-- 撤销 check 约束\r\n   ???\r\n-- 添加 CHECK 约束\r\nALTER TABLE student ADD CHECK (stuid>0); -- 经测试,MySQL支持\r\n```\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n-- 如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束\r\ncreate table student(\r\n   stuid int,\r\n   CONSTRAINT c1 CHECK (stuid>0) -- 经测试,MySQL支持\r\n);\r\n-- 删除\r\nALTER TABLE student DROP CONSTRAINT c1; -- 经测试, MySQL 不支持\r\nALTER TABLE student DROP CHECK c1;-- 经测试, MySQL5.7 不支持\r\n-- 添加\r\nALTER TABLE student ADD CONSTRAINT c1 CHECK ( stuid>0 ); -- 经测试,MySQL支持\r\n```\r\n\r\n#### 默认约束\r\n\r\n```sql\r\nuse db1;\r\ndrop table if exists student;\r\n\r\n-- 在表创建时在列创建 default 约束：\r\ncreate table student(\r\n   stuid int default 0 -- 经测试,MySQL支持\r\n);\r\n\r\n-- 撤销 default 约束\r\nALTER TABLE student ALTER stuid DROP DEFAULT ; -- 经测试,MySQL支持\r\n-- 添加 CHECK 约束\r\nALTER TABLE student ALTER stuid SET DEFAULT 0; -- 经测试,MySQL支持\r\n```\r\n\r\n\r\n#### 外键约束\r\n\r\n```sql\r\ndrop database if exists db1;\r\ncreate database if not exists db1;\r\nuse db1;\r\ndrop table if exists student;\r\ndrop table if exists department;\r\n\r\ncreate table department(\r\n   id int primary key,\r\n   name char(20) not null\r\n);\r\n\r\ncreate table student(\r\n   id int primary key,\r\n   depart_id int,\r\n   constraint stu_dep foreign key(depart_id)  references department(id) \r\n);\r\n\r\n-- 添加 FOREIGN KEY 约束\r\nALTER TABLE student ADD FOREIGN KEY (depart_id) REFERENCES department(id); -- 经测试,MySQL支持\r\nALTER TABLE student ADD CONSTRAINT stu_dep FOREIGN KEY (depart_id) REFERENCES department(id); -- 经测试,MySQL支持\r\n-- 撤销 FOREIGN KEY 约束\r\nALTER TABLE student DROP FOREIGN KEY stu_dep ; -- 经测试,MySQL支持\r\n```\r\n\r\n\r\n\r\n#### 额...... \r\n\r\n**属性级(列名)的约束语法**\r\n```sql\r\n-- 在定义表示添加约束\r\ncreate table 表名(\r\n   列名 数据类型 NOT NULL,\r\n   列名 数据类型 UNIQUE AUTO_INCREMENT,\r\n   列名 数据类型 PRIMARY KEY AUTO_INCREMENT,\r\n   列名 数据类型 DEFAULT 0,\r\n   列名 数据类型 FOREIGN KEY,\r\n);\r\n\r\n-- 添加非空约束\r\nalter table 表名 modify 列名 数据类型 NOT NULL;\r\n-- 删除非空约束\r\nalter table 表名 modify 列名 数据类型;\r\n\r\n-- 添加唯一约束\r\nalter table 表名 modify 列名 数据类型 unique;\r\n-- 删除唯一约束\r\nalter table 表名 drop index 列名;\r\n\r\n-- 添加主键约束\r\nalter table 表名 add PRIMARY KEY(列名);\r\n-- 删除主键约束\r\nalter table 表名 drop PRIMARY KEY;\r\n\r\n-- 添加默认约束\r\nalter table 表名 alter 列名 set default 0;\r\n-- 删除默认约束\r\nalter table 表名 alter 列名 drop default;\r\n\r\n\r\n\r\n```\r\n\r\n**属性级(列名)的约束语法测试**\r\n```sql\r\nuse db1;\r\ndrop table if exists employee;\r\ncreate table employee(\r\n    id int primary key auto_increment,     -- 主键\r\n    name char(10) not null,                -- 非空\r\n    joindate date not null,                -- 非空\r\n    salary double(8,2) not null,           -- 非空\r\n    bonus double(8,2) default 0            -- 默认约束\r\n);\r\ninsert into employee(id,name,joindate,salary,bonus) values(1,\"张三1\",'2001-01-01',1000.00,0.00);\r\ninsert into employee(id,name,joindate,salary,bonus) values(null,\"张三2\",'2001-01-01',1000.00,0.00);\r\ninsert into employee(name,joindate,salary,bonus) values(\"张三3\",'2001-01-01',1000.00,0.00);\r\n\r\nselect * from employee;\r\n```\r\n```bash\r\nmysql> select * from employee;\r\n+----+---------+------------+---------+-------+\r\n| id | name    | joindate   | salary  | bonus |\r\n+----+---------+------------+---------+-------+\r\n|  1 | 张三1   | 2001-01-01 | 1000.00 |  0.00 |\r\n|  2 | 张三2   | 2001-01-01 | 1000.00 |  0.00 |\r\n|  3 | 张三3   | 2001-01-01 | 1000.00 |  0.00 |\r\n+----+---------+------------+---------+-------+\r\n3 rows in set (0.00 sec)\r\n```\r\n\r\n\r\n\r\n\r\n<!-- \r\n**属性级约束`子句`的语法**\r\n```sql\r\n-- 在定义表示添加约束（完整性约束名）\r\ncreate table 表名(\r\n   列名 数据类型 \r\n      constraint 完整性约束名别名 NOT NULL,\r\n   列名 数据类型 \r\n      constraint 完整性约束名别名  UNIQUE AUTO_INCREMENT,\r\n   列名 数据类型 \r\n      constraint 完整性约束名别名 PRIMARY KEY AUTO_INCREMENT,\r\n   列名 数据类型 \r\n      constraint 完整性约束名别名 DEFAULT 0,\r\n   列名 数据类型 \r\n      constraint 完整性约束名别名 FOREIGN KEY,\r\n);\r\n-- 添加约束\r\nalter table 表名 add  constraint 约束名称 ;\r\n-- 删除约束\r\nalter table 表名 drop 完整性约束名别名;\r\n```\r\n\r\n**测试**\r\n```sql\r\ndrop database if exists db1;\r\ncreate database db1;\r\nuse db1;\r\ndrop table if exists employee;\r\ncreate table employee(\r\n   -- 仅在sql server 中测试有效\r\n   -- 且constraint子句仅支持 CHECK,DEFAULT,FOREIGN,PRIMARY,REFERENCES,UNIQUE\r\n   id int \r\n   constraint constraint1 primary key ,     -- 主键\r\n   name char(10) not null,                -- 非空\r\n   joindate date not null,                -- 非空\r\n   salary double(8,2) not null,           -- 非空\r\n   bonus double(8,2)\r\n   constraint constraint2 default 0            -- 默认约束\r\n);\r\n```\r\n\r\n-->\r\n\r\n**元祖级的约束语法**  \r\n复合主键必须以这种方式定义\r\n```sql\r\n-- 在创建表时定义约束\r\ncreate table 表名(\r\n   列名1 数据类型1,\r\n   列名2 数据类型2,\r\n   列名3 数据类型3,\r\n   列名4 数据类型4,\r\n   列名5 数据类型5,\r\n   \r\n   primary key(列名1,列名2),\r\n   \r\n   constraint 完整性约束名别名 foreign key(外键列名) references 主表(主表列名), \r\n\r\n   constraint 完整性约束名别名 约束名称\r\n   -- 👆\r\n   -- 在 sqlserver 中 constraint 仅支持 CHECK,DEFAULT,FOREIGN,PRIMARY,REFERENCES,UNIQUE\r\n   -- 在 mysql 中 经测试，constraint 支持 unique ，primary key  foreign key，其他暂未测试\r\n);\r\n\r\n-- 添加约束\r\nalter table 表名 add  constraint 完整性约束名别名 约束名称;\r\n-- 删除约束\r\nalter table 表名 drop 完整性约束名别名;\r\n\r\n-- 添加外键约束\r\nalter table 表名 add constraint 完整性约束名别名 foreign key(外键列名) references 主表(主表列名);\r\n-- 删除外键约束\r\nalter table 表名 drop foreign key 完整性约束名别名;\r\n```\r\n\r\n**元祖级的约束语法测试**\r\n```sql\r\nuse db1;\r\n\r\ndrop table if exists department;\r\ncreate table department(\r\n    id int primary key auto_increment,     -- 主键\r\n    name char(20)\r\n);\r\n\r\ndrop table if exists employee;\r\ncreate table employee(\r\n    id int auto_increment,                 -- 主键\r\n    name char(10) not null,                -- 非空\r\n    joindate date not null,                -- 非空\r\n    salary double(8,2) not null,           -- 非空\r\n    bonus double(8,2) default 0,           -- 默认约束\r\n    department int,                        -- 外键\r\n   constraint c1 unique(name), -- 唯一\r\n   constraint c2 primary key(id), -- 主键\r\n   constraint c3 foreign key(department) references department(id) --引用完整性约束\r\n);\r\n```\r\n```bash\r\nmysql> desc employee;\r\n--------------\r\ndesc employee\r\n--------------\r\n\r\n+------------+-------------+------+-----+---------+----------------+\r\n| Field      | Type        | Null | Key | Default | Extra          |\r\n+------------+-------------+------+-----+---------+----------------+\r\n| id         | int(11)     | NO   | PRI | NULL    | auto_increment |\r\n| name       | char(10)    | NO   | UNI | NULL    |                |\r\n| joindate   | date        | NO   |     | NULL    |                |\r\n| salary     | double(8,2) | NO   |     | NULL    |                |\r\n| bonus      | double(8,2) | YES  |     | 0.00    |                |\r\n| department | int(11)     | YES  | MUL | NULL    |                |\r\n+------------+-------------+------+-----+---------+----------------+\r\n6 rows in set (0.00 sec)\r\n```\r\n\r\n### 数据库设计\r\n**表关系分类**\r\n* 一对一：\r\n  * 将一个实体中常用字段和不常用字段拆分为两个表，用于提升查询性能\r\n  * 用户和用户详情信息表\r\n  * 一个用户有一个详情信息\r\n* 一对多（多对一）：\r\n  * 部门和员工\r\n  * 一个部门有多个员工，多个员工同属一个部门\r\n* 多对多\r\n  * 商品和订单\r\n  * 一个商品对应多个订单，一个订单有多个商品\r\n\r\n#### 一对一\r\n**实现方式** 在任意一方建立外键，指向另一方的主键，并且设置外键为`唯一UNIQUE`\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-08-01-53-42.png)\r\n\r\n#### 一对多\r\n**实现方式** 在`多`的一方建立外键，指向`一`的一方的主键\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-08-01-46-47.png)\r\n\r\n#### 多对多\r\n**实现方式** 建立第三张`中间表`，中间表至少包含`两个外键`，分别关联两方的`主键`。\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-08-01-49-47.png)\r\n\r\n\r\n### 多表查询\r\n**多表查询**\r\n* 笛卡尔积：取A、B集合的组合\r\n* 多表查询：从多张查询数据\r\n   * 连接查询\r\n      * 内连接：查询A、B交集数据\r\n      * 外连接：\r\n         * 左外连接：查询A表所有数据和交集部分数据\r\n         * 右外连接：查询B表所有数据和交集部分数据\r\n      * 子查询：查询中嵌套查询\r\n* ![](./images/JavaWeb学习笔记/2022-11-08-02-14-14.png)\r\n\r\n#### 笛卡尔积\r\n* 笛卡尔积：有A、B两集合，取A、B两集合所有的组合\r\n* 若A表有4条数据，B表有8条数据，笛卡尔积就有32条数据。\r\n```sql\r\nselect * from tableA,tableB;\r\n```\r\n\r\n#### 内连接\r\n```sql\r\n-- 写法1：隐式内连接\r\nselect * from tableA,tableB where tableA.id = tableB.id;\r\nselect tableA.id,tableA.name,tableA.id,tableA.name from tableA,tableB where tableA.id = tableB.id; -- 防止字段名冲突\r\nselect A.id,A.name,B.id,B.name from tableA as A,tableB as B where A.id = B.id; -- 给表起别名\r\n\r\n-- 写法2：显式内连接\r\nselect * from tableA inner join tableB on tableA.id = tableB.id;\r\nselect * from tableA join tableB on tableA.id = tableB.id; -- inner可省略\r\n```\r\n\r\n#### 外连接\r\n```sql\r\n--- 左外连接:  tableA的所有数据 + tableA和tableB的交集数据\r\nselect * from tableA left outer join tableB on tableA.id = tableB.id;\r\nselect * from tableA left join tableB on tableA.id = tableB.id; -- outer 可省略\r\n\r\n--- 右外连接： tableB的所有数据 + tableA和tableB的交集数据\r\nselect * from tableA right join tableB on tableA.id = tableB.id;\r\nselect * from tableA right join tableB on tableA.id = tableB.id; -- outer 可省略\r\n```\r\n\r\n\r\n#### 子查询\r\n**概念**： 查询中嵌套查询，称嵌套查询为子查询\r\n\r\n**分类**：**根据子查询的结果不同，作用不同** \r\n* 子查询结果为**单行单列**：（使用`=` `!=` `>` `<`等进行条件判断）\r\n  ```sql\r\n  select 字段列表 from 表 where 字段名 = (子查询);\r\n  select 字段列表,(子查询) as 字段别名  from 表;\r\n  ```\r\n* 子查询结果为**单行多列**：（使用 `in` 等关键字进行条件判断）\r\n  ```sql\r\n  select 字段列表 from 表 where 字段名 in (子查询);\r\n  ```\r\n* 子查询结果为**多行多列**,：（作为**虚拟表**）\r\n   ```sql\r\n   select 字段列表 from (子查询) where 条件;\r\n   ```\r\n\r\n#### 案例：子查询\r\n\r\n**数据准备**\r\n```sql\r\ndrop database if exists db2;\r\ncreate database db2;\r\nuse db2;\r\nDROP TABLE IF EXISTS emp;\r\nDROP TABLE IF EXISTS dept;\r\nDROP TABLE IF EXISTS job;\r\nDROP TABLE IF EXISTS salarygrade;\r\n\r\n\r\n-- 部门表\r\nCREATE TABLE dept (\r\n  id INT PRIMARY KEY PRIMARY KEY, -- 部门id\r\n  dname VARCHAR(50), -- 部门名称\r\n  loc VARCHAR(50) -- 部门所在地\r\n);\r\n\r\n\r\n\r\n-- 职务表，职务名称，职务描述\r\nCREATE TABLE job (\r\n  id INT PRIMARY KEY,\r\n  jname VARCHAR(20),\r\n  description VARCHAR(50)\r\n);\r\n\r\n-- 员工表\r\nCREATE TABLE emp (\r\n  id INT PRIMARY KEY, -- 员工id\r\n  ename VARCHAR(50), -- 员工姓名\r\n  job_id INT, -- 职务id\r\n  mgr INT , -- 上级领导\r\n  joindate DATE, -- 入职日期\r\n  salary DECIMAL(7,2), -- 工资\r\n  bonus DECIMAL(7,2), -- 奖金\r\n  dept_id INT, -- 所在部门编号\r\n  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),\r\n  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)\r\n);\r\n-- 工资等级表\r\nCREATE TABLE salarygrade (\r\n  grade INT PRIMARY KEY,   -- 级别\r\n  losalary INT,  -- 最低工资\r\n  hisalary INT -- 最高工资\r\n);\r\n\t\t\t\t\r\n-- 添加4个部门\r\nINSERT INTO dept(id,dname,loc) VALUES \r\n(10,'教研部','北京'),\r\n(20,'学工部','上海'),\r\n(30,'销售部','广州'),\r\n(40,'财务部','深圳');\r\n\r\n-- 添加4个职务\r\nINSERT INTO job (id, jname, description) VALUES\r\n(1, '董事长', '管理整个公司，接单'),\r\n(2, '经理', '管理部门员工'),\r\n(3, '销售员', '向客人推销产品'),\r\n(4, '文员', '使用办公软件');\r\n\r\n\r\n-- 添加员工\r\nINSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES \r\n(1001,'孙悟空',4,1004,'2000-12-17','8000.00',NULL,20),\r\n(1002,'卢俊义',3,1006,'2001-02-20','16000.00','3000.00',30),\r\n(1003,'林冲',3,1006,'2001-02-22','12500.00','5000.00',30),\r\n(1004,'唐僧',2,1009,'2001-04-02','29750.00',NULL,20),\r\n(1005,'李逵',4,1006,'2001-09-28','12500.00','14000.00',30),\r\n(1006,'宋江',2,1009,'2001-05-01','28500.00',NULL,30),\r\n(1007,'刘备',2,1009,'2001-09-01','24500.00',NULL,10),\r\n(1008,'猪八戒',4,1004,'2007-04-19','30000.00',NULL,20),\r\n(1009,'罗贯中',1,NULL,'2001-11-17','50000.00',NULL,10),\r\n(1010,'吴用',3,1006,'2001-09-08','15000.00','0.00',30),\r\n(1011,'沙僧',4,1004,'2007-05-23','11000.00',NULL,20),\r\n(1012,'李逵',4,1006,'2001-12-03','9500.00',NULL,30),\r\n(1013,'小白龙',4,1004,'2001-12-03','30000.00',NULL,20),\r\n(1014,'关羽',4,1007,'2002-01-23','13000.00',NULL,10);\r\n\r\n\r\n-- 添加5个工资等级\r\nINSERT INTO salarygrade(grade,losalary,hisalary) VALUES \r\n(1,7000,12000),\r\n(2,12010,14000),\r\n(3,14010,20000),\r\n(4,20010,30000),\r\n(5,30010,99990);\r\n\r\n```\r\n\r\n**题目 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述**\r\n```sql\r\n-- ----写法一：隐式内连接\r\nuse db2;\r\nselect \r\n   emp.id,\r\n   emp.ename,\r\n   emp.salary,\r\n   job.jname,\r\n   job.description\r\nfrom \r\n   emp,job\r\nwhere\r\n   emp.job_id = job.id;\r\n\r\n-- ----写法二：显式内连接\r\nuse db2;\r\nselect \r\n   emp.id,\r\n   emp.ename,\r\n   emp.salary,\r\n   job.jname,\r\n   job.description\r\nfrom \r\n   emp\r\ninner join\r\n   job\r\non\r\n   emp.job_id = job.id;\r\n```\r\n**结果**\r\n| id   | ename  | salary | jname  | description        |\r\n| ---- | ------ | ------ | ------ | ------------------ |\r\n| 1009 | 罗贯？ | 50000  | 董事？ | 管理整个公司，接？ |\r\n| 1004 | 唐僧   | 29750  | 经理   | 管理部门员工       |\r\n| 1006 | 宋江   | 28500  | 经理   | 管理部门员工       |\r\n| 1007 | 刘备   | 24500  | 经理   | 管理部门员工       |\r\n| 1002 | 卢俊？ | 16000  | 销售员 | 向客人推销产品     |\r\n| 1003 | 林冲   | 12500  | 销售员 | 向客人推销产品     |\r\n| 1010 | 吴用   | 15000  | 销售员 | 向客人推销产品     |\r\n| 1001 | 孙悟？ | 8000   | 文员   | 使用办公软件       |\r\n| 1005 | 李？   | 12500  | 文员   | 使用办公软件       |\r\n| 1008 | 猪八？ | 30000  | 文员   | 使用办公软件       |\r\n| 1011 | 沙僧   | 11000  | 文员   | 使用办公软件       |\r\n| 1012 | 李？   | 9500   | 文员   | 使用办公软件       |\r\n| 1013 | 小白？ | 30000  | 文员   | 使用办公软件       |\r\n| 1014 | 关羽   | 13000  | 文员   | 使用办公软件       |\r\n\r\n**题目 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置**\r\n```sql\r\n-- ----写法一：隐式内连接\r\nuse db2;\r\nselect \r\n   emp.id,\r\n   emp.ename,\r\n   emp.salary,\r\n   job.jname,\r\n   job.description,\r\n   dept.dname,\r\n   dept.loc\r\nfrom \r\n   emp,job,dept\r\nwhere\r\n   emp.job_id = job.id and emp.dept_id = dept.id;\r\n\r\n-- ----写法二：显式内连接\r\nuse db2;\r\nselect \r\n   emp.id,\r\n   emp.ename,\r\n   emp.salary,\r\n   job.jname,\r\n   job.description,\r\n   dept.dname,\r\n   dept.loc\r\nfrom \r\n   emp\r\ninner join job on emp.job_id = job.id\r\ninner join dept on emp.dept_id = dept.id;\r\n```\r\n**结果**\r\n| id   | ename  | salary | jname  | description        | dname  | loc  |\r\n| ---- | ------ | ------ | ------ | ------------------ | ------ | ---- |\r\n| 1009 | 罗贯？ | 50000  | 董事？ | 管理整个公司，接？ | 教研？ | 北京 |\r\n| 1007 | 刘备   | 24500  | 经理   | 管理部门员工       | 教研？ | 北京 |\r\n| 1014 | 关羽   | 13000  | 文员   | 使用办公软件       | 教研？ | 北京 |\r\n| 1004 | 唐僧   | 29750  | 经理   | 管理部门员工       | 学工？ | 上海 |\r\n| 1001 | 孙悟？ | 8000   | 文员   | 使用办公软件       | 学工？ | 上海 |\r\n| 1008 | 猪八？ | 30000  | 文员   | 使用办公软件       | 学工？ | 上海 |\r\n| 1011 | 沙僧   | 11000  | 文员   | 使用办公软件       | 学工？ | 上海 |\r\n| 1013 | 小白？ | 30000  | 文员   | 使用办公软件       | 学工？ | 上海 |\r\n| 1006 | 宋江   | 28500  | 经理   | 管理部门员工       | 销售部 | 广州 |\r\n| 1002 | 卢俊？ | 16000  | 销售员 | 向客人推销产品     | 销售部 | 广州 |\r\n| 1003 | 林冲   | 12500  | 销售员 | 向客人推销产品     | 销售部 | 广州 |\r\n| 1010 | 吴用   | 15000  | 销售员 | 向客人推销产品     | 销售部 | 广州 |\r\n| 1005 | 李？   | 12500  | 文员   | 使用办公软件       | 销售部 | 广州 |\r\n| 1012 | 李？   | 9500   | 文员   | 使用办公软件       | 销售部 | 广州 |\r\n\r\n\r\n**题目 3.查询员工姓名，工资，工资等级**\r\n```sql\r\n-- 写法1：子查询\r\nuse db2;\r\nselect \r\n   emp.ename,\r\n   emp.salary,\r\n   (select grade from salarygrade where emp.salary between salarygrade.losalary and salarygrade.hisalary ) as salarygrade\r\nfrom\r\n   emp;\r\n\r\n-- 写法2：隐式内连接\r\nuse db2;\r\nselect \r\n   emp.ename,\r\n   emp.salary,\r\n   salarygrade.grade\r\nfrom \r\n   emp,\r\n   salarygrade\r\nwhere\r\n   emp.salary between  salarygrade.losalary and salarygrade.hisalary \r\n;\r\n-- 写法3：显式内连接\r\nuse db2;\r\nselect \r\n   emp.ename,\r\n   emp.salary,\r\n   salarygrade.grade\r\nfrom \r\n   emp\r\ninner join\r\n   salarygrade\r\non\r\n   emp.salary between  salarygrade.losalary and salarygrade.hisalary \r\n;\r\n```\r\n\r\n| ename  | salary | grade |\r\n| ------ | ------ | ----- |\r\n| 孙悟？ | 8000   | 1     |\r\n| 卢俊？ | 16000  | 3     |\r\n| 林冲   | 12500  | 2     |\r\n| 唐僧   | 29750  | 4     |\r\n| 李？   | 12500  | 2     |\r\n| 宋江   | 28500  | 4     |\r\n| 刘备   | 24500  | 4     |\r\n| 猪八？ | 30000  | 4     |\r\n| 罗贯？ | 50000  | 5     |\r\n| 吴用   | 15000  | 3     |\r\n| 沙僧   | 11000  | 1     |\r\n| 李？   | 9500   | 1     |\r\n| 小白？ | 30000  | 4     |\r\n| 关羽   | 13000  | 2     |\r\n\r\n**题目 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级**\r\n```sql\r\n-- 写法1：显式内连接\r\nuse db2;\r\nselect \r\n   emp.ename,\r\n   emp.salary,\r\n   job.jname,\r\n   job.description,\r\n   dept.dname,\r\n   dept.loc,\r\n   salarygrade.grade\r\nfrom \r\n   emp\r\ninner join job on emp.job_id = job.id\r\ninner join dept on emp.dept_id = dept.id\r\ninner join salarygrade on emp.salary between salarygrade.losalary and salarygrade.hisalary\r\n;\r\n\r\n-- 写法2：子查询\r\nuse db2;\r\nselect \r\n   emp.ename,\r\n   emp.salary,\r\n   emp.dept_id,\r\n   (select grade from salarygrade where emp.salary between salarygrade.losalary and salarygrade.hisalary ) as salarygrade ,\r\n   (select job.jname from job where emp.job_id = job.id) as jname,\r\n   (select job.description from job where emp.job_id = job.id) as jdescription,\r\n   (select dept.dname from dept where emp.dept_id = dept.id) as dname,\r\n   (select dept.loc from dept where emp.dept_id = dept.id) as dloc\r\nfrom \r\n   emp\r\n;\r\n```\r\n**查询结果**\r\n| ename | salary | jname  | description       | dname  | loc  | grade |\r\n| ----- | ------ | ------ | ----------------- | ------ | ---- | ----- |\r\n| 孙悟? | 8000   | 文员   | 使用办公软件      | 学工?  | 上海 | 1     |\r\n| 卢俊? | 16000  | 销售员 | 向客人推销产品    | 销售部 | 广州 | 3     |\r\n| 林冲  | 12500  | 销售员 | 向客人推销产品    | 销售部 | 广州 | 2     |\r\n| 唐僧  | 29750  | 经理   | 管理部门员工      | 学工?  | 上海 | 4     |\r\n| 李?   | 12500  | 文员   | 使用办公软件      | 销售部 | 广州 | 2     |\r\n| 宋江  | 28500  | 经理   | 管理部门员工      | 销售部 | 广州 | 4     |\r\n| 刘备  | 24500  | 经理   | 管理部门员工      | 教研?  | 北京 | 4     |\r\n| 猪八? | 30000  | 文员   | 使用办公软件      | 学工?  | 上海 | 4     |\r\n| 罗贯? | 50000  | 董事?  | 管理整个公司，接? | 教研?  | 北京 | 5     |\r\n| 吴用  | 15000  | 销售员 | 向客人推销产品    | 销售部 | 广州 | 3     |\r\n| 沙僧  | 11000  | 文员   | 使用办公软件      | 学工?  | 上海 | 1     |\r\n| 李?   | 9500   | 文员   | 使用办公软件      | 销售部 | 广州 | 1     |\r\n| 小白? | 30000  | 文员   | 使用办公软件      | 学工?  | 上海 | 4     |\r\n| 关羽  | 13000  | 文员   | 使用办公软件      | 教研?  | 北京 | 2     |\r\n\r\n\r\n**题目 5.查询出部门编号、部门名称、部门位置、部门人数**\r\n```sql\r\n-- 方法1： 子查询\r\nuse db2;\r\nselect\r\n   dept.id as 部门编号 ,\r\n   dept.dname as 部门名称 ,\r\n   dept.loc as 部门位置 ,\r\n   (select count(emp.id) from emp where dept.id = emp.dept_id) as 部门人数\r\nfrom\r\n   dept\r\n;\r\n```\r\n\r\n| 部门编号 | 部门名称 | 部门位置 | 部门人数 |\r\n| -------- | -------- | -------- | -------- |\r\n| 10       | 教研?    | 北京     | 3        |\r\n| 20       | 学工?    | 上海     | 5        |\r\n| 30       | 销售部   | 广州     | 6        |\r\n| 40       | 财务?    | 深圳     | 0        |\r\n\r\n\r\n### 事务\r\n**概念**\r\n* 简单理解，事务是一组操作命令，当一组中的一条操作执行出错，则这一组的操作将全部被撤销（回滚）。\r\n* 事务（Transaction）是一种机制一个操作序列，包含了一组数据库操作命令\r\n* 事务把所有命令作为整体一起提交操作请求，这一组数据库命令要么同时成功，要么同时失败。\r\n* 事务是一个不可分割的工作逻辑单元。\r\n\r\n**特性ACID**\r\n* **原子性**(Atomicity):事务是不可分割的最小操作单位，要么同时成功，要么同时失败\r\n* **一致性**(Consistency):事务完成时，必须使所有的数据都保持一致状态\r\n* **隔离性**(lsolation) :多个事务之间，操作的可见性\r\n* **持久性**(Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\r\n\r\n\r\n**语法**\r\n ```sql\r\n -- 开启事务\r\n start transaction;\r\n -- 开启事务\r\n begin;\r\n 普通sql语句1\r\n 普通sql语句2\r\n 普通sql语句3\r\n 普通sql语句......\r\n\r\n -- 提交事务\r\n commit;\r\n --回滚事务\r\n rollback;\r\n ```\r\n\r\nmysql默认提交事务规则\r\n```sql\r\nselect @@autocommit; -- 输出1表示事务默认自动提交\r\nsql语句; -- 该语句将自动提交\r\n\r\nset @@autocommit = 0; -- 修改事务默认提交方式\r\nselect @@autocommit; -- 输出0表示需要手动提交\r\n\r\nsql语句; -- 该语句将不会自动提交\r\ncommit; -- 手动提交\r\n```\r\n\r\n\r\n## JDBC\r\n**概念**\r\n* 全称：JDBC(Java DataBase Connectivity)Java数据库连接\r\n* 操作关系型数据库的一套API，也就是一个接口类\r\n* 各个数据库厂商会去实现这套接口，提供数据库驱动jar包\r\n* 通过JDBC接口可以不改变sql语句，操作不同的数据库：mysql oracle DB2\r\n* ![](./images/JavaWeb学习笔记/2022-11-08-13-47-24.png)\r\n\r\n\r\n\r\n**测试JDBC：基本写法**\r\n\r\n```sql\r\nshow databases;\r\ndrop database if exists db1;\r\ncreate database db1;\r\nuse db1;\r\ncreate table student(\r\n   id int primary key,\r\n   age int\r\n);\r\ninsert into student(id,age) values(0,10);\r\nupdate student set age=15 where id = 0;\r\n```\r\n\r\n```java\r\npackage test_jdbc;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.Statement;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        // 0. 引入mysql-connector-j-8.0.31.jar包\r\n        // 1. 注册驱动\r\n        Class.forName(\"com.mysql.cj.jdbc.Driver\");// 新版本将自动注册，其实不用写\r\n        // 2. 获取连接\r\n        String url = \"jdbc:mysql://localhost:3306/db1\";\r\n        String username = \"root\";\r\n        String password = \"123456\";\r\n        Connection connection = DriverManager.getConnection(url, username, password);\r\n        // 3.定义sql语句\r\n        String sql = \"update student set age=15 where id = 0;\";\r\n        // 4.获取sql执行器对象Statement\r\n        Statement statement = connection.createStatement();\r\n        // 5.执行sql语句\r\n        int updataCount = statement.executeUpdate(sql);\r\n        // 6.处理结果\r\n        System.out.println(updataCount);\r\n        // 7.释放资源\r\n        statement.close();\r\n        connection.close();\r\n    }\r\n}\r\n```\r\n![](./images/JavaWeb学习笔记/2022-11-08-15-00-45.png)\r\n\r\n### DriverManager工具类\r\nDriverManager(驱动管理类)**作用**:\r\n1. **注册驱动** (mysql5之后的驱动包将自动注册)\r\n   1. 注册驱动的过程:\r\n      1. `Class.forName(\"com.mysql.cj.jdbc.Driver\");`将`Driver类`的字节码加载到内存中，\r\n      2. `Driver()`类中的**静态代码块**被执行：\r\n      3. ![](./images/JavaWeb学习笔记/2022-11-14-22-14-18.png)\r\n      4. DriverManager对象通过其自身的静态方法`DriverManager.registerDriver()`接收到`new Driver()`的实例对象\r\n2. **获取数据库连接**\r\n   * `DriverManager.getConnection(url,user,password);`\r\n   * `url`格式：`jdbc:mysql://ip或域名:端口/数据库名称？参数名1=参数值1&参数名2=参数值2`\r\n     * 简写：\r\n       * `localhost:3306` 可简写为\r\n       * `jdbc:mysql:///数据库名称？参数名1=参数值1&参数名2=参数值2`\r\n       * **在xml中的转义字符：**`&`  --> `&amp;`\r\n     * 参数配置：\r\n       * `useSSL=false` 关闭不使用SSL安全连接时的提示\r\n       * `useServerPrepStemts=true` 开启sql语句预编译功能，防止sql注入\r\n\r\n```java\r\nString url = \"jdbc:mysql://localhost:3306/db1\";//完整写法\r\nString url = \"jdbc:mysql:///db1\";//简写\r\nString url = \"jdbc:mysql:///db1?useSSL=false\";//关闭不使用SSL安全连接时的提示\r\nString username = \"root\";\r\nString password = \"123456\";\r\nConnection connection = DriverManager.getConnection(url, username, password);\r\n```\r\n\r\n\r\n### Connection数据库连接对象\r\n\r\n**作用**\r\n1. **获取sql执行器`Statement`、`PreparedStatement`、`CallableStatement`对象**\r\n   ```java\r\n   //获取普通sql执行器对象\r\n   Statement statement = connection.createStatement();\r\n   ```\r\n   ```java\r\n   //获取预编译sql执行器对象:防止sql注入\r\n   PreparedStatement pstatement = connection.prepareStatement(sql);\r\n   ```\r\n   ```java\r\n   //执行存储过程的对象\r\n   CallableStatement cstatement = connection.prepareCall(sql);\r\n   ```\r\n2. **事务处理**\r\n   ```java\r\n   //开启事务：mysql为自动提交事务，设置为自动提交为false便是开启事务管理\r\n   connection.setAutoCommit(boolean autoCommit);\r\n   ```\r\n   ```java\r\n   //提交事务\r\n   connection.commit();\r\n   ```\r\n   ```java\r\n   //回滚事务\r\n   connection.rollback();\r\n   ```\r\n   **事务处理示例**\r\n   ```java\r\n   try{\r\n      connection.setAutoCommit(false);//开启事务\r\n\r\n      Statement statement = connection.createStatement();\r\n\r\n      statement.executeUpdate(sql语句1);\r\n      statement.executeUpdate(sql语句2);\r\n      statement.executeUpdate(sql语句3);\r\n\r\n      connection.commit();//提交事务\r\n   }catch(Exception e){\r\n      connection.rollback();//捕获到任何异常便回滚数据\r\n      connection.setAutoCommit(false);//关闭事务（如果需要）\r\n   }\r\n   ```\r\n\r\n### `Statement` sql执行器对象\r\n\r\n**作用**\r\n1. 执行sql语句\r\n   ```java\r\n   // 执行 DML DDL语句\r\n   //    * 返回值：\r\n   //       * DML语句执行成功后影响的行数\r\n   //       * DDL语句执行成功也可能返回0\r\n   int executeUpdate(sql);\r\n   ```\r\n   ```java\r\n   // 执行DQL语句\r\n   //    * 返回值：ResultSet 类型的结果集合对象，表示查询结果\r\n   ResultSet executeQuery(sql);\r\n   ```\r\n\r\n\r\n### `PreparedStatement` 预编译sql执行器对象:防止sql注入\r\n\r\n**概念**\r\n* `PreparedStatement` 继承自 `Statement` 对象\r\n\r\n\r\n**作用**\r\n* 预编译SQL语句并执行:预防sql注入\r\n\r\n**优点**\r\n* 防sql注入\r\n* 高性能\r\n\r\n**防sql注入原理**： \r\n* 对敏感字符和关键字进行了转义\r\n\r\n**高性能执行原理**\r\n* sql语句提交给mysql服务器要完成一系列操作：\r\n  * **sql语句的语法检查**\r\n  * **将sql语句编译成可执行函数**\r\n  * ![](./images/JavaWeb学习笔记/2022-11-15-01-41-47.png)\r\n* `PreparedStatement(sql模板字符串)` 调用时，会把sql模板语句发送给sql服务器进行预编译，且多次调用只会预编译一次。\r\n* 程序在后续传入参数值时，不需要在进行预编译操作。直接执行sql的**可执行函数**\r\n\r\n**sql注入** \r\n* 通过一定的手段，向程序输入预先编辑好的sql语句，以达到执行sql代码，完成一定的操作，对服务器进行攻击的目的。\r\n* 如： \r\n  * 若后端判断验证用户合法的sql是 `select * from users where username = '输入的用户名' and password = '输入的密码' `;\r\n  * 则在密码框输入`'or '1'='1`\r\n  * sql的语句就变为了 `select * from users where username = '输入的用户名' and password = '' or '1'='1' `;\r\n  * ![](./images/JavaWeb学习笔记/2022-11-15-00-43-02.png)\r\n\r\n\r\n\r\n**使用**\r\n* 使用？作为占位符，预编译sql语句\r\n```java\r\nString url = \"jdbc:mysql://localhost:3306/db1?useServerPrepStemts=true\"; // 启用预编译功能，不启用也行，但使用prepareStatement() 不会导致执行效率变高\r\nString username = \"root\";\r\nString password = \"123456\";\r\n\r\nConnection connection = DriverManager.getConnection(url, username, password);\r\n\r\nString username = \"admin\";\r\nString password = \"admin\";\r\n// 使用？作为占位符，传入prepareStatement() 函数\r\nString sql = \"select * from user where username = ? and password = ? \";\r\nPreparedStatement pstatement = connection.prepareStatement(sql);// 预编译sql语句，多次执行不会导致mysql服务器多次预编译，只会编译一次\r\npstatement.setString(1,username);//给第1个？设置值\r\npstatement.setString(2,password);//给第2个？设置值\r\nResultSet result =  pstatement.executeQuery();//执行sql语句（不要传递参数）\r\n\r\nwhile(result.next()){\r\n   String id = result.getString(\"id\");\r\n   String name = result.getString(\"name\");\r\n   System.out.println(id);\r\n   System.out.println(name);\r\n}\r\n\r\n\r\nresult.close(); // 释放资源\r\nstatement.close(); // 释放资源\r\nconnection.close(); // 释放资源\r\n```\r\n\r\n\r\n### ResultSet 结果集合对象\r\n\r\n**作用**\r\n0. 该实例对象的内容是sql的查询结果\r\n1. 获取查询结果\r\n   ```java\r\n   // 遍历行\r\n   //    * 游标指针：查询结果是一个二维表，游标指针初始指向表头所在行（数据行的上一行）\r\n   //    * next()函数:该函数会使得游标指针指向下一行\r\n   //    * 返回值: 布尔值，当前行是否是有效行（是否有数据）\r\n   boolean next();\r\n   ```\r\n   ```java\r\n   // 获取某列的数据\r\n   //    * 参数\r\n   //       * int 列编号 从1开始编号\r\n   //       * String 列名\r\n   //    * 返回值\r\n   //       * xxx数据类型的数据\r\n   xxx getXxx(参数);\r\n\r\n   String getString(\"UserName\");\r\n   String getString(1);\r\n   ```\r\n\r\n**使用案例**\r\n```java\r\nConnection connection = DriverManager.getConnection(url, username, password);\r\nStatement statement = connection.createStatement();\r\nResultSet result =  statement.executeQuery(sql);\r\n\r\nwhile(result.next()){\r\n   String id = result.getString(\"id\");\r\n   String name = result.getString(\"name\");\r\n   System.out.println(id);\r\n   System.out.println(name);\r\n}\r\nresult.close(); // 释放资源\r\nstatement.close(); // 释放资源\r\nconnection.close(); // 释放资源\r\n```\r\n\r\n\r\n\r\n### 数据库连接池\r\n\r\n**数据库连接池简介**\r\n* 概念类似于线程池，数据连接的建立要耗费时间和计算资源，预先建立一定数量的数据库连接，按需分配，\r\n* 数据库连接池是个容器，负责分配、管理数据库连接(Connection)\r\n\r\n数据库连接池的标准接口及常用实现类\r\n* **接口**： `DataSource`\r\n  ```java\r\n  //接口方法：\r\n  Connection getConnection();//获取池内的连接\r\n  ```\r\n* **实现类**： `DBCP` `C3P0` `Druid` \r\n\r\n\r\n#### Druid德鲁伊数据库连接池\r\nDruid德鲁伊\r\n* 阿里巴巴开源数据库连接池\r\n* 功能强大、性能优秀\r\n\r\n**Druid基本使用**\r\n```java\r\npackage test_for_druid;\r\nimport java.io.FileInputStream;\r\nimport java.sql.Connection;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n//1.导入jar包\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\n//2.编写配置文件\r\n\r\n\r\npublic class Main {\r\n    public static void main(String[] args)throws Exception {\r\n        //3.加载配置文件\r\n        Properties config = new Properties();\r\n        //\r\n        // System.out.println(System.getProperty(\"user.dir\"));//查看当前所在目录\r\n        config.load(new FileInputStream(\"./src/test_for_druid/druid.properties\"));\r\n        System.out.println(config.toString());\r\n\r\n        //4.获取连接池对象\r\n        DataSource dataSource =  DruidDataSourceFactory.createDataSource(config);\r\n        \r\n        //5.从连接池中获取连接对象\r\n        Connection connection = dataSource.getConnection();\r\n\r\n        System.out.println(connection);\r\n    }\r\n}\r\n```\r\n**Druid配置文件**\r\n```properties\r\n# jdbc驱动类名\r\ndriverClassName=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql:///db5?useSSL=false&useServerPrepStmts=true\r\nusername=root\r\npassword=root\r\n# 初始连接数\r\ninitialSize=5\r\n# 最大连接数\r\nmaxActive=10\r\n# 最大等待时间\r\nmaxWait=3000\r\n```\r\n\r\n### JDBC练习\r\n\r\n#### 查询数据\r\n**数据准备**\r\n```sql\r\ndrop database if exists db5;\r\ncreate database db5;\r\nuse db5;\r\ncreate table tb_brand(\r\n   -- id\r\n   id int primary key auto_increment,\r\n   -- 品牌名\r\n   brand_name varchar(20),\r\n   -- 公司名\r\n   company_name varchar(20),\r\n   -- 排序优先级\r\n   ordered int,\r\n   -- 描述\r\n   description varchar(100),\r\n   -- 状态：1 启用 0 禁用\r\n   status int\r\n);\r\ninsert into \r\n    tb_brand(brand_name,company_name,ordered,description,status) \r\n    values\r\n        (\"三只松鼠\",\"三只松鼠股份有限公司\",5,'好吃不上火',0),\r\n        (\"华为\",\"华为技术有限公司\",1,'华为致力于把数字技术带入每个人、每个家庭、每个组织，构建万物互联的智能世界',1),\r\n        (\"小米\",\"小米科技有限公司\",4,'Are you ok?',1);\r\n\r\nSELECT * from tb_brand;\r\n```\r\n**查询表中所有数据案例**\r\n```java\r\npackage test_for_druid;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n//1.导入jar包\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\n//2.编写配置文件\r\n\r\npublic class Main {\r\n    public static void main(String[] args)throws Exception {\r\n        //3.加载配置文件\r\n        Properties config = new Properties();\r\n        //\r\n        // System.out.println(System.getProperty(\"user.dir\"));//查看当前所在目录\r\n        config.load(new FileInputStream(\"./src/test_for_druid/druid.properties\"));\r\n        System.out.println(config.toString());\r\n\r\n        //4.获取连接池对象\r\n        DataSource dataSource =  DruidDataSourceFactory.createDataSource(config);\r\n        \r\n        //5.从连接池中获取连接对象\r\n        Connection connection = dataSource.getConnection();\r\n\r\n        // 定义sql语句\r\n        String sql = \"select * from tb_brand\";\r\n        // 获取sql预编译对象\r\n        PreparedStatement preparedStatement =  connection.prepareStatement(sql);\r\n        //执行查询\r\n        ResultSet resultSet = preparedStatement.executeQuery();\r\n        List<Banner> banners = new LinkedList<>();\r\n        //遍历结果并存入数组\r\n        while(resultSet.next()){\r\n            banners.add(new Banner(\r\n                resultSet.getInt(\"id\"),\r\n                resultSet.getString(\"brand_name\"),\r\n                resultSet.getString(\"company_name\"),\r\n                resultSet.getInt(\"ordered\"),\r\n                resultSet.getString(\"description\"),\r\n                resultSet.getInt(\"status\")\r\n                ));\r\n        }\r\n        System.out.println(banners);\r\n        //释放资源\r\n        preparedStatement.close();\r\n        connection.close();\r\n    }\r\n}\r\nclass Banner{\r\n    // id\r\n    private Integer id;\r\n    // 品牌名\r\n    private String brand_name;\r\n    // 公司名\r\n    private String company_name;\r\n    // 排序优先级\r\n    private Integer ordered;\r\n    // 描述\r\n    private String description;\r\n    // 状态：1 启用 0 禁用\r\n    private Integer status;\r\n    public Banner(Integer id, String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.id = id;\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"\\nBanner [id=\" + id + \", brand_name=\" + brand_name + \", company_name=\" + company_name + \", ordered=\"\r\n                + ordered + \", description=\" + description + \", status=\" + status + \"]\";\r\n    }\r\n}\r\n```\r\n\r\n#### 插入数据\r\n```java\r\npackage test_for_druid;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n//1.导入jar包\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\n//2.编写配置文件\r\n\r\npublic class Main {\r\n    public static void main(String[] args)throws Exception {\r\n        //3.加载配置文件\r\n        Properties config = new Properties();\r\n        //\r\n        // System.out.println(System.getProperty(\"user.dir\"));//查看当前所在目录\r\n        config.load(new FileInputStream(\"./src/test_for_druid/druid.properties\"));\r\n        System.out.println(config.toString());\r\n\r\n        //4.获取连接池对象\r\n        DataSource dataSource =  DruidDataSourceFactory.createDataSource(config);\r\n        \r\n        //5.从连接池中获取连接对象\r\n        Connection connection = dataSource.getConnection();\r\n\r\n        // Banner 获取数据\r\n        Banner banner = new Banner(\"生命有限\", \"生命有限公司\", 2, \"当了程序员，寿命减十年\", 0);\r\n        // 定义sql语句\r\n        String sql = \"insert tb_brand(brand_name,company_name,ordered,description,status) values(?,?,?,?,?)\";\r\n        // 获取sql预编译对象\r\n        PreparedStatement preparedStatement =  connection.prepareStatement(sql);\r\n        // 设置值\r\n        preparedStatement.setString(1, banner.getBrand_name());\r\n        preparedStatement.setString(2, banner.getCompany_name());\r\n        preparedStatement.setInt(3, banner.getOrdered());\r\n        preparedStatement.setString(4, banner.getDescription());\r\n        preparedStatement.setInt(5, banner.getStatus());\r\n        //执行查询\r\n        int result = preparedStatement.executeUpdate();\r\n        if(result>0)\r\n            System.out.println(\"更新成功\");\r\n        else\r\n            System.out.println(\"更新失败\");\r\n        //释放资源\r\n        preparedStatement.close();\r\n        connection.close();\r\n    }\r\n}\r\nclass Banner{\r\n    // id\r\n    private Integer id;\r\n    // 品牌名\r\n    private String brand_name;\r\n    // 公司名\r\n    private String company_name;\r\n    // 排序优先级\r\n    private Integer ordered;\r\n    // 描述\r\n    private String description;\r\n    // 状态：1 启用 0 禁用\r\n    private Integer status;\r\n    public Banner(Integer id, String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.id = id;\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    public Banner(String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"\\nBanner [id=\" + id + \", brand_name=\" + brand_name + \", company_name=\" + company_name + \", ordered=\"\r\n                + ordered + \", description=\" + description + \", status=\" + status + \"]\";\r\n    }\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public String getBrand_name() {\r\n        return brand_name;\r\n    }\r\n    public String getCompany_name() {\r\n        return company_name;\r\n    }\r\n    public Integer getOrdered() {\r\n        return ordered;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public Integer getStatus() {\r\n        return status;\r\n    }\r\n    \r\n}\r\n```\r\n\r\n#### 更新数据\r\n```java\r\npackage test_for_druid;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n//1.导入jar包\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\n//2.编写配置文件\r\n\r\npublic class Main {\r\n    public static void main(String[] args)throws Exception {\r\n        //3.加载配置文件\r\n        Properties config = new Properties();\r\n        //\r\n        // System.out.println(System.getProperty(\"user.dir\"));//查看当前所在目录\r\n        config.load(new FileInputStream(\"./src/test_for_druid/druid.properties\"));\r\n        System.out.println(config.toString());\r\n\r\n        //4.获取连接池对象\r\n        DataSource dataSource =  DruidDataSourceFactory.createDataSource(config);\r\n        \r\n        //5.从连接池中获取连接对象\r\n        Connection connection = dataSource.getConnection();\r\n\r\n        // Banner 获取数据\r\n        Banner banner = new Banner(4,\"生命有限\", \"生命有限公司\", 9999, \"当了程序员，寿命减十年......\", 0);\r\n        // 定义sql语句\r\n        String sql = \"update tb_brand set brand_name=?, company_name=?, ordered=?, description=?, status=? where id =?\";\r\n        // 获取sql预编译对象\r\n        PreparedStatement preparedStatement =  connection.prepareStatement(sql);\r\n        // 设置值\r\n        preparedStatement.setString(1, banner.getBrand_name());\r\n        preparedStatement.setString(2, banner.getCompany_name());\r\n        preparedStatement.setInt(3, banner.getOrdered());\r\n        preparedStatement.setString(4, banner.getDescription());\r\n        preparedStatement.setInt(5, banner.getStatus());\r\n        preparedStatement.setInt(6, banner.getId());\r\n\r\n        //执行查询\r\n        int result = preparedStatement.executeUpdate();\r\n        if(result>0)\r\n            System.out.println(\"更新成功\");\r\n        else\r\n            System.out.println(\"更新失败\");\r\n\r\n        //释放资源\r\n        preparedStatement.close();\r\n        connection.close();\r\n    }\r\n}\r\nclass Banner{\r\n    // id\r\n    private Integer id;\r\n    // 品牌名\r\n    private String brand_name;\r\n    // 公司名\r\n    private String company_name;\r\n    // 排序优先级\r\n    private Integer ordered;\r\n    // 描述\r\n    private String description;\r\n    // 状态：1 启用 0 禁用\r\n    private Integer status;\r\n    public Banner(Integer id, String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.id = id;\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    public Banner(String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"\\nBanner [id=\" + id + \", brand_name=\" + brand_name + \", company_name=\" + company_name + \", ordered=\"\r\n                + ordered + \", description=\" + description + \", status=\" + status + \"]\";\r\n    }\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public String getBrand_name() {\r\n        return brand_name;\r\n    }\r\n    public String getCompany_name() {\r\n        return company_name;\r\n    }\r\n    public Integer getOrdered() {\r\n        return ordered;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public Integer getStatus() {\r\n        return status;\r\n    }\r\n    \r\n}\r\n```\r\n\r\n#### 删除数据\r\n```java\r\npackage test_for_druid;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n//1.导入jar包\r\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\r\n//2.编写配置文件\r\n\r\npublic class Main {\r\n    public static void main(String[] args)throws Exception {\r\n        //3.加载配置文件\r\n        Properties config = new Properties();\r\n        //\r\n        // System.out.println(System.getProperty(\"user.dir\"));//查看当前所在目录\r\n        config.load(new FileInputStream(\"./src/test_for_druid/druid.properties\"));\r\n        System.out.println(config.toString());\r\n\r\n        //4.获取连接池对象\r\n        DataSource dataSource =  DruidDataSourceFactory.createDataSource(config);\r\n        \r\n        //5.从连接池中获取连接对象\r\n        Connection connection = dataSource.getConnection();\r\n\r\n        // Banner 获取数据\r\n        int id = 4;\r\n        // 定义sql语句\r\n        String sql = \"delete from tb_brand where id = ?\";\r\n        // 获取sql预编译对象\r\n        PreparedStatement preparedStatement =  connection.prepareStatement(sql);\r\n        // 设置值\r\n        preparedStatement.setInt(1,id);\r\n\r\n        //执行查询\r\n        int result = preparedStatement.executeUpdate();\r\n        if(result>0)\r\n            System.out.println(\"更新成功\");\r\n        else\r\n            System.out.println(\"更新失败\");\r\n        //释放资源\r\n        preparedStatement.close();\r\n        connection.close();\r\n    }\r\n}\r\nclass Banner{\r\n    // id\r\n    private Integer id;\r\n    // 品牌名\r\n    private String brand_name;\r\n    // 公司名\r\n    private String company_name;\r\n    // 排序优先级\r\n    private Integer ordered;\r\n    // 描述\r\n    private String description;\r\n    // 状态：1 启用 0 禁用\r\n    private Integer status;\r\n    public Banner(Integer id, String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.id = id;\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    public Banner(String brand_name, String company_name, Integer ordered, String description,\r\n            Integer status) {\r\n        this.brand_name = brand_name;\r\n        this.company_name = company_name;\r\n        this.ordered = ordered;\r\n        this.description = description;\r\n        this.status = status;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"\\nBanner [id=\" + id + \", brand_name=\" + brand_name + \", company_name=\" + company_name + \", ordered=\"\r\n                + ordered + \", description=\" + description + \", status=\" + status + \"]\";\r\n    }\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public String getBrand_name() {\r\n        return brand_name;\r\n    }\r\n    public String getCompany_name() {\r\n        return company_name;\r\n    }\r\n    public Integer getOrdered() {\r\n        return ordered;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public Integer getStatus() {\r\n        return status;\r\n    }\r\n}\r\n```\r\n\r\n## Maven\r\n\r\nMaven是专门用于管理和构建Java项目的工具，基于项目对象模型（POM）的概念，它的主要功能有:\r\n* 提供了一套标准化的项目结构，通过Maven使得不同IDE创建的项目结构一致\r\n* 提供了一套标准化的构建流程(编译，测试，打包，发布......)\r\n* 提供了一套依赖管理机制\r\n\r\n**标准化的项目结构**\r\n![](./images/JavaWeb学习笔记/2022-11-16-00-15-30.png)\r\n\r\n**标准化的构建流程**\r\n![](./images/JavaWeb学习笔记/2022-11-16-00-21-33.png)\r\n\r\n**依赖管理机制**\r\n![](./images/JavaWeb学习笔记/2022-11-16-00-20-55.png)\r\n\r\n**maven模型**\r\n* POM\r\n* dependency\r\n* Plugin\r\n![](./images/JavaWeb学习笔记/2022-11-16-00-30-15.png)\r\n\r\n**Maven仓库**\r\n * 本地仓库:自己计算机上的一个目录\r\n * 中央仓库:由Maven团队维护的全球唯─的仓库\r\n   * 地址: https://repo1.maven.org/maven2/\r\n * 远程仓库(私服):由公司团队搭建的私有仓库\r\n * jar包的查找顺序\r\n    * 一般引入顺序\r\n      * 项目中使用坐标引入对应依赖jar包，\r\n      * 首先会查找本地仓库中是否有对应的jar包:\r\n      * 如果有，则在项目直接引用;\r\n      * 如果没有，则去中央仓库中下载对应的jar包到本地仓库然后引用。 \r\n    * 搭建远程仓库(私服)后，jar包的查找顺序\r\n      * 本地仓库→远程仓库→中央仓库\r\n\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-16-00-32-01.png)\r\n\r\n**安装配置**\r\n![](./images/JavaWeb学习笔记/2022-11-16-02-06-18.png)\r\n\r\n\r\n**配置本地仓库所在路径**`apache-maven-3.6.3\\conf\\settings.xml`\r\n```xml\r\n<localRepository>D:\\Program Files\\maven\\repository</localRepository>\r\n```\r\n\r\n**配置镜像**`apache-maven-3.6.3\\conf\\settings.xml`\r\n```xml\r\n  <mirrors>\r\n     <mirror>\r\n      <id>aliyunmaven</id>\r\n      <mirrorOf>*</mirrorOf>\r\n      <name>阿里云公共仓库</name>\r\n      <url>https://maven.aliyun.com/repository/public</url>\r\n    </mirror>\r\n  </mirrors>\r\n```\r\n\r\n**坐标**\r\n* Maven 中的坐标是资源的唯一标识\r\n* 使用坐标来定义项目或引入项目中需要的依赖\r\n* Maven 坐标主要组成\r\n  * `groupld`: 定义当前Maven项目隶属组织名称（通常是域名反写，例如: com.itheima)\r\n  * `artifactld`: 定义当前Maven项目名称(通常是模块名称，例如order-service、goods-service)\r\n  * `version`: 定义当前项目版本号\r\n\r\n**定义项目**\r\n![](./images/JavaWeb学习笔记/2022-11-16-22-32-44.png)\r\n\r\n**定义引入项目中需要的依赖项目**\r\n![](./images/JavaWeb学习笔记/2022-11-16-22-33-02.png)\r\n\r\n**常用命令**\r\n```bash\r\n# Maven常用命令\r\ncd project_root\r\nmvn compile # 编译\r\nmvn clean # 清理\r\nmvn test # 测试\r\nmvn package # 打包\r\nmvn install # 安装\r\n```\r\n\r\n**生命周期**\r\n![](./images/JavaWeb学习笔记/2022-11-16-21-57-43.png)\r\n![](./images/JavaWeb学习笔记/2022-11-16-21-58-56.png)\r\n\r\n**依赖管理**\r\n* `scope`可以设置对应jar包的作用范围\r\n* 作用范围\r\n  * 编译环境\r\n  * 测试环境\r\n  * 运行环境\r\n\r\n```xml\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope> <!-- scope指定依赖的作用范围 -->\r\n    </dependency>\r\n  </dependencies>\r\n```\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-17-08-31-04.png)\r\n\r\n## myBatis\r\n* MyBatis是一款优秀的`持久层`**框架**，用于简化`JDBC`开发\r\n* MyBatis 本是 Apache的一个开源项目`iBatis`, 2010年这个项目由apache software foundation迁移到了google code，并且改名为MyBatis。2013年11月迁移到Github\r\n* 官网: https://mybatis.org/mybatis-3/zh/index.html\r\n\r\n**持久层**\r\n* 负责将数据到保存到数据库的那一层代码\r\n* JavaEE三层架构:\r\n  * 表现层 页面展示\r\n  * 业务层 逻辑处理\r\n  * 持久层\r\n\r\n**JDBC缺点**\r\n![](./images/JavaWeb学习笔记/2022-11-17-09-25-52.png)\r\n\r\n**maBatis对JDBC的简化**\r\n![](./images/JavaWeb学习笔记/2022-11-17-09-32-01.png)\r\n\r\n**简单示例：基本步骤**\r\n![](./images/JavaWeb学习笔记/2022-11-26-20-50-57.png)\r\n\r\n### myBatis简单示例\r\n#### 使用示例1:myBatis简单示例\r\n\r\n**准备数据**\r\n```sql\r\nuse db5;\r\ncreate table tb_user(\r\n    id int primary key auto_increment,\r\n    name varchar(20),\r\n    password varchar(20),\r\n    gender char(1),\r\n    addr varchar(30)\r\n);\r\ninsert into \r\ntb_user(id,name,password,gender,addr) \r\nvalues\r\n    (1,\"张三\",\"123\",\"男\",\"北京\"),\r\n    (2,\"李四\",\"123\",\"男\",\"北京\"),\r\n    (3,\"王五\",\"123\",\"男\",\"北京\")\r\n;\r\n```\r\n\r\n**编辑maven项目配置文件`pom.xml`,配置相关依赖**\r\n```xml\r\n    <dependency>\r\n      <!-- mybatis -->\r\n      <groupId>org.mybatis</groupId>\r\n      <artifactId>mybatis</artifactId>\r\n      <version>3.5.5</version>\r\n    </dependency>\r\n    <dependency>\r\n      <!-- mysql的JDBC驱动 -->\r\n      <groupId>mysql</groupId>\r\n      <artifactId>mysql-connector-java</artifactId>\r\n      <version>5.1.46</version>\r\n    </dependency>\r\n```\r\n**编辑mybatis配置文件 `src/main/resources/mybatis-config.xml`**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n  <environments default=\"development\">\r\n    <environment id=\"development\">\r\n      <transactionManager type=\"JDBC\"/>\r\n      <dataSource type=\"POOLED\">\r\n        <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/> <!-- 填mysql的驱动的路径 -->\r\n        <property name=\"url\" value=\"jdbc:mysql:///db5?useSSL=false\"/>  <!-- 填mysql数据库的路径 -->\r\n        <property name=\"username\" value=\"root\"/>  <!-- 填数据库的username -->\r\n        <property name=\"password\" value=\"root\"/>   <!-- 填数据库的password -->\r\n      </dataSource>\r\n    </environment>\r\n  </environments>\r\n  <mappers>\r\n    <mapper resource=\"./UserMapper.xml\"/>  <!-- 填sql语句的映射文件路径 -->\r\n  </mappers>\r\n</configuration>\r\n```\r\n\r\n**编辑sql语句映射文件`src/main/resources/UserMapper.xml`**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"namespaceTest1\"> <!-- 在程序中需要通过 `命名空间.sql语句id` 执行该命令  -->\r\n   <select id=\"selectAllUsers\" resultType=\"com.example.pojo.User\"> <!-- resultType是User类的类型  -->\r\n      select * from tb_user\r\n   </select>\r\n</mapper>\r\n```\r\n\r\n**定义User类`src/main/java/com/example/pojo/User.java`**\r\n```java\r\npackage com.example.pojo;\r\n\r\npublic class User {\r\n    private Integer id;\r\n    private String name;\r\n    private String password;\r\n    private String gender;\r\n    private String addr;\r\n    \r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n    public String getGender() {\r\n        return gender;\r\n    }\r\n    public void setGender(String gender) {\r\n        this.gender = gender;\r\n    }\r\n    public String getAddr() {\r\n        return addr;\r\n    }\r\n    public void setAddr(String addr) {\r\n        this.addr = addr;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"User [id=\" + id + \", name=\" + name + \", password=\" + password + \", gender=\" + gender + \", addr=\" + addr\r\n                + \"]\";\r\n    }\r\n    \r\n}\r\n```\r\n\r\n**执行sql语句**\r\n`src/main/java/com/example/testSelectAll.java`\r\n```java\r\npackage com.example;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\nimport com.example.pojo.User;\r\n\r\npublic class testSelectAll {\r\n    public static void main(String[] args) throws Exception{\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n         \r\n        //通过 `命名空间.sql语句ID` 执行sql语句，结果会自动封装到`List<User>`中\r\n        List<User> users = session.selectList(\"namespaceTest1.selectAllUsers\"); // 这里依然存在把字符串写到程序中的硬编码问题，需要后续进一步解决\r\n\r\n        System.out.println(users);\r\n\r\n        // 释放资源\r\n        session.close();\r\n    }\r\n}\r\n```\r\n输出：\r\n![](./images/JavaWeb学习笔记/2022-11-17-19-33-28.png)\r\n\r\n#### 使用示例2:使用Mapper代理方式\r\n**目的**：解决前一种方法中存在的硬编码问题\r\n![](./images/JavaWeb学习笔记/2022-11-26-21-45-33.png)\r\n\r\n配置过程\r\n![](./images/JavaWeb学习笔记/2022-11-17-19-24-17.png)\r\n\r\n\r\n\r\n0.修改配置\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n  <environments default=\"development\">\r\n    <environment id=\"development\">\r\n      <transactionManager type=\"JDBC\"/>\r\n      <dataSource type=\"POOLED\">\r\n        <!-- \r\n            use db5;\r\n            create table tb_user(\r\n                id int primary key auto_increment,\r\n                name varchar(20),\r\n                password varchar(20),\r\n                gender char(1),\r\n                addr varchar(30)\r\n            );\r\n            insert into \r\n            tb_user(id,name,password,gender,addr) \r\n            values\r\n                (1,\"张三\",\"123\",\"男\",\"北京\"),\r\n                (2,\"李四\",\"123\",\"男\",\"北京\"),\r\n                (3,\"王五\",\"123\",\"男\",\"北京\")\r\n            ;\r\n         -->\r\n        <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/> <!-- 填mysql的驱动的路径 -->\r\n        <property name=\"url\" value=\"jdbc:mysql:///db5?useSSL=false\"/>  <!-- 填mysql数据库的路径 -->\r\n        <property name=\"username\" value=\"root\"/>  <!-- 填数据库的username -->\r\n        <property name=\"password\" value=\"root\"/>   <!-- 填数据库的password -->\r\n      </dataSource>\r\n    </environment>\r\n  </environments>\r\n  <mappers>\r\n    <!-- <mapper resource=\"com/example/mapper/UserMapper.xml\"/>   --> <!-- 填sql语句的映射文件路径 -->\r\n    <package name=\"com.example.mapper\" /> <!-- 使用这种Mapper代理的方式便可以用这种包扫描的写法 -->\r\n  </mappers>\r\n</configuration>\r\n```\r\n\r\n1.定义接口：`src/main/java/com/example/mapper/UserMapper.java`\r\n* 注意存放路径\r\n* 注意接口的函数名、形参列表、返回值都和`UserMapper.xml`中的sql语句有关\r\n\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\n\r\nimport com.example.pojo.User;\r\n\r\npublic interface UserMapper {\r\n    List<User> selectAll(); // 函数名要和UserMapper.xml中的id名一致\r\n}\r\n```\r\n\r\n2.修改：`src/resources/com/example/mapper/UserMapper.xml`\r\n* 注意存放路径，`UserMapper.xml`原本应当存放在和`UserMapper.java`相同的位置，但xml文件应当统一放在resources目录下，且resources目录下的文件打包后将会放到项目根目录，所以存放在`/resources/com/example/mapper/`目录下，打包后也会存放在`UserMapper.java`所在目录\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.UserMapper\">  <!-- namespace改为接口类 -->\r\n  <select id=\"selectAll\" resultType=\"com.example.pojo.User\">   <!-- id为接口的函数名 -->\r\n    select * from tb_user\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n\r\n3.获取UserMapper接口的代理对象\r\n* `session.getMapper(UserMapper.class)`的作用就是实现一个接口代理然后提供代理。\r\n  \r\n```java\r\npackage com.example;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\nimport com.example.mapper.UserMapper;\r\nimport com.example.pojo.User;\r\n\r\npublic class testSelectAll {\r\n    public static void main(String[] args) throws Exception{\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n        // 方法一：通过 `命名空间.sql语句ID` 执行sql\r\n        // List<User> users = session.selectList(\"namespaceTest1.selectAllUsers\");\r\n\r\n        // 方法二：通过mapper\r\n        // 获取UserMapper接口的代理对象\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n        List<User> users = userMapper.selectAll();\r\n\r\n        System.out.println(users);\r\n    }\r\n}\r\n```\r\n输出：\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-17-19-33-14.png)\r\n\r\n\r\n\r\n\r\n### 核心配置文件\r\n\r\n[文档:https://mybatis.net.cn/](https://mybatis.net.cn/)\r\n![](./images/JavaWeb学习笔记/2022-11-27-20-50-29.png)\r\n\r\n\r\n**包别名**\r\n* 当这样配置时， `Blog` 可以用在任何使用 全限名 `domain.blog.Blog` 的地方。\r\n```xml\r\n<typeAliases>\r\n  <typeAlias alias=\"Author\" type=\"domain.blog.Author\"/>  <!-- 单独配置 -->\r\n  <package name=\"domain.blog\"/> <!-- 包扫描方式配置 -->\r\n</typeAliases>\r\n```\r\n\r\n\r\n### 查询数据\r\n\r\n#### 多查询selectAll\r\n\r\n**数据准备**\r\n```sql\r\ndrop database if exists db5;\r\ncreate database db5;\r\nuse db5;\r\ncreate table tb_brand(\r\n   -- id\r\n   id int primary key auto_increment,\r\n   -- 品牌名\r\n   brand_name varchar(20),\r\n   -- 公司名\r\n   company_name varchar(20),\r\n   -- 排序优先级\r\n   ordered int,\r\n   -- 描述\r\n   description varchar(100),\r\n   -- 状态：1 启用 0 禁用\r\n   status int\r\n);\r\ninsert into \r\n    tb_brand(brand_name,company_name,ordered,description,status) \r\n    values\r\n        (\"三只松鼠\",\"三只松鼠股份有限公司\",5,'好吃不上火',0),\r\n        (\"华为\",\"华为技术有限公司\",1,'华为致力于把数字技术带入每个人、每个家庭、每个组织，构建万物互联的智能世界',1),\r\n        (\"小米\",\"小米科技有限公司\",4,'Are you ok?',1);\r\n\r\nSELECT * from tb_brand;\r\n```\r\n\r\n**mybatis配置文件修改**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n  <environments default=\"development\">\r\n    <environment id=\"development\">\r\n      <transactionManager type=\"JDBC\"/>\r\n      <dataSource type=\"POOLED\">\r\n        <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/> <!-- 填mysql的驱动的路径 -->\r\n        <property name=\"url\" value=\"jdbc:mysql:///db5?useSSL=false\"/>  <!-- 填mysql数据库的路径 -->\r\n        <property name=\"username\" value=\"root\"/>  <!-- 填数据库的username -->\r\n        <property name=\"password\" value=\"root\"/>   <!-- 填数据库的password -->\r\n      </dataSource>\r\n    </environment>\r\n  </environments>\r\n  <mappers>\r\n    <package name=\"com.example.mapper\" /> <!-- 包扫描方式 -->\r\n  </mappers>\r\n</configuration>\r\n```\r\n\r\n**编写`pojo.Brand`类**\r\n```java\r\npackage com.example.pojo;\r\n\r\npublic class Brand {\r\n    Integer id;             // -- id\r\n    String brandName;      // -- 品牌名\r\n    String companyName;    // -- 公司名\r\n    Integer ordered;        // -- 排序优先级\r\n    String description;     // -- 描述\r\n    Integer status;         // -- 状态：1 启用 0 禁用\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n    public String getBrandName() {\r\n        return brandName;\r\n    }\r\n    public void setBrandName(String brandName) {\r\n        this.brandName = brandName;\r\n    }\r\n    public String getCompanyName() {\r\n        return companyName;\r\n    }\r\n    public void setCompanyName(String companyName) {\r\n        this.companyName = companyName;\r\n    }\r\n    public Integer getOrdered() {\r\n        return ordered;\r\n    }\r\n    public void setOrdered(Integer ordered) {\r\n        this.ordered = ordered;\r\n    }\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n    public Integer getStatus() {\r\n        return status;\r\n    }\r\n    public void setStatus(Integer status) {\r\n        this.status = status;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"Brand [id=\" + id + \", brandName=\" + brandName + \", companyName=\" + companyName + \", ordered=\" + ordered\r\n                + \", description=\" + description + \", status=\" + status + \"]\";\r\n    }\r\n}\r\n```\r\n\r\n**编写`BrandMapper.java`接口类**\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    List<Brand> selectAll();\r\n}\r\n```\r\n\r\n**编写`BrandMapper.xml`**\r\n* 方法一：原始写法，由于数据库中字段名称为 `brand_name` 类中相应字段名称为 `brandName` 两者不一致，在封装数据阶段会出现问题。\r\n  ```xml\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n  <mapper namespace=\"com.example.mapper.BrandMapper\">\r\n    <!-- selectAll --> \r\n    <select id=\"selectAll\" resultType=\"com.example.pojo.Brand\">\r\n      select * from tb_brand;\r\n    </select>\r\n  </mapper>\r\n  ```\r\n* 方法二：修改sql语句，修改字段别名使其与类中字段名称一致\r\n  ```xml\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n  <mapper namespace=\"com.example.mapper.BrandMapper\">\r\n    <!-- selectAll --> \r\n    <select id=\"selectAll\" resultType=\"com.example.pojo.Brand\">\r\n      select \r\n         id,\r\n         brand_name as brandName,\r\n         company_name as companyName,\r\n         ordered,\r\n         description,\r\n         status,\r\n      from tb_brand;\r\n    </select>\r\n  </mapper>\r\n  ```\r\n* 方法三：定义sql片段\r\n  ```xml\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n  <mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <sql id=\"brand_colums\">  <!-- 定义sql片段 --> \r\n         id,\r\n         brand_name as brandName,\r\n         company_name as companyName,\r\n         ordered,\r\n         description,\r\n         status,\r\n  </sql>\r\n    <select id=\"selectAll\" resultType=\"com.example.pojo.Brand\">\r\n      select \r\n         <include refid=\"brand_colums\" /> <!-- 引用sql片段 --> \r\n      from tb_brand;\r\n    </select>\r\n  </mapper>\r\n  ```\r\n* 方法四：使用resultMap\r\n  ```xml\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n  <mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"brand_resultMap\" type=\"com.example.pojo.Brand\">  <!-- 定义resultMap --> \r\n         <result column=\"brand_name\" property=\"brandName\" />\r\n         <result column=\"company_name\" property=\"companyName\" />\r\n  </sql>\r\n    <select id=\"selectAll\" resultMap=\"brand_resultMap\"> <!-- resultMap = brand_resultMap --> \r\n      select * from tb_brand;\r\n    </select>\r\n  </mapper>\r\n  ```\r\n\r\n\r\n**编写`testBrand.java`测试类**\r\n```java\r\npackage com.example;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport com.example.mapper.BrandMapper;\r\nimport com.example.pojo.Brand;\r\n\r\npublic class testBrand {\r\n    @Test\r\n    public void testSelectAllBrand() throws Exception{\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n        // 方法一：通过 `命名空间.sql语句ID` 执行sql\r\n        // List<User> users = session.selectList(\"namespaceTest1.selectAllUsers\");\r\n\r\n        // 方法二：通过mapper\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n        List<Brand> brands = brandMapper.selectAll();\r\n\r\n        System.out.println(brands);\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 单查询selectById\r\n\r\n修改`BrandMapper.xml`\r\n\r\n**注意点**\r\n* sql语句`参数占位符`\r\n  * `#{}`占位符 等效于 `?` 也是就是`jdbc`里的`PreparedStatement`,有防sql注入的作用\r\n  * `${}`占位符 1以字符串方式拼接字符串，`存在sql注入问题`\r\n    * 可用于动态确定列名或表名\r\n      * `select ${columName1}`\r\n      * `from ${tableName}`\r\n* 返回值\r\n  * `parameterType=\"int\"` 可省略\r\n* **特殊字符的处理**：在xml中编写sql语句的`<`等的特殊字符\r\n  * `转义字符` `<` => `&lt;`\r\n  * `CDATA区` `<![CDATA[ 这里可以填特殊字符 ]]>`\r\n\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <!-- selectAll --> \r\n  <select id=\"selectAll\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand;\r\n  </select>\r\n\r\n  <!-- selectById --> \r\n  <select id=\"selectById\" parameterType=\"int\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand where id=#{id};\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n修改`BrandMapper.java`\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    List<Brand> selectAll();\r\n    Brand selectById(int id);\r\n}\r\n```\r\n\r\n**编写测试类**\r\n```java\r\npackage com.example;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport com.example.mapper.BrandMapper;\r\nimport com.example.pojo.Brand;\r\n\r\npublic class testBrand {\r\n\r\n    @Test\r\n    public void testSelectBrandById() throws Exception{\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n        // 方法一：通过 `命名空间.sql语句ID` 执行sql\r\n        // List<User> users = session.selectList(\"namespaceTest1.selectAllUsers\");\r\n\r\n        // 方法二：通过mapper\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n        Brand brands = brandMapper.selectById(1);\r\n\r\n        System.out.println(brands);\r\n    }\r\n}\r\n```\r\n输出结果\r\n```\r\nBrand [id=1, brandName=三只松鼠, companyName=三只松鼠股份有限公司, ordered=5, description=好吃不上火, status=0]\r\n```\r\n\r\n#### 多条件查询：散装参数\r\n**多条件查询参数的接收**\r\n1. `散装参数` 要使用注解`@Param(\"字段名\")`和sql的`${字段名}`要一致\r\n2. `对象参数` 要保证`对象属性名`和sql的`${}`要一致\r\n3. `map集合参数` 要保证`map键`和sql的`${}`要一致\r\n\r\n`BrandMapper.xml`核心代码\r\n```xml\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    where status = #{status}\r\n      and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 --> \r\n      and brand_name like #{brandName}\r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n`BrandMapper.java`核心代码\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    List<Brand> selectAll();\r\n    Brand selectById(int id);\r\n    \r\n    List<Brand> selectByCondition(\r\n        @Param(\"status\")        int     status,\r\n        @Param(\"companyName\")   String  companyName,\r\n        @Param(\"brandName\")     String  brandName\r\n    );\r\n}\r\n```\r\n\r\n`testBrand.java`测试代码\r\n```java\r\n@Test\r\npublic void testSelectByCondition() throws Exception{\r\n    // 模拟获取到查询数据\r\n    int status = 1;\r\n    String companyName = \"华为\";\r\n    String brandName = \"华为\";\r\n\r\n    // 对数据处理\r\n    companyName = \"%\"+companyName+\"%\";\r\n    brandName = \"%\"+brandName+\"%\";\r\n\r\n\r\n    // 加载mybatis核心配置文件\r\n    String resource = \"mybatis-config.xml\";\r\n    InputStream inputStream = Resources.getResourceAsStream(resource);\r\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n    // 获取SqlSession，用其来执行sql语句\r\n    SqlSession session = sqlSessionFactory.openSession();\r\n\r\n    // 获取UserMapper接口的代理对象\r\n    BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n    List<Brand> brands = brandMapper.selectByCondition(status,companyName,brandName);\r\n\r\n    System.out.println(brands);\r\n}\r\n```\r\n\r\n#### 多条件查询：对象参数\r\n`BrandMapper.xml`核心代码\r\n```xml\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    where status = #{status}\r\n      and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 --> \r\n      and brand_name like #{brandName}\r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n`BrandMapper.java`核心代码\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    List<Brand> selectAll();\r\n    Brand selectById(int id);\r\n    \r\n    List<Brand> selectByCondition(\r\n        @Param(\"status\")        int     status,\r\n        @Param(\"companyName\")   String  companyName,\r\n        @Param(\"brandName\")     String  brandName\r\n    );\r\n\r\n//-----------------------------------------------------------------------------\r\n    List<Brand> selectByCondition(Brand brand);\r\n//-----------------------------------------------------------------------------\r\n\r\n}\r\n```\r\n\r\n`testBrand.java`测试代码\r\n```java\r\n    @Test\r\n    public void testSelectByCondition() throws Exception{\r\n        // 模拟获取到查询数据\r\n        int status = 1;\r\n        String companyName = \"华为\";\r\n        String brandName = \"华为\";\r\n\r\n        // 对数据处理\r\n        companyName = \"%\"+companyName+\"%\";\r\n        brandName = \"%\"+brandName+\"%\";\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n        Brand searchBrand = new Brand();\r\n        searchBrand.setStatus(status);\r\n        searchBrand.setCompanyName(companyName);\r\n        searchBrand.setBrandName(brandName);\r\n//-----------------------------------------------------------------------------\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n\r\n//-----------------------------------------------------------------------------\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n        List<Brand> brands = brandMapper.selectByCondition(searchBrand);\r\n//-----------------------------------------------------------------------------\r\n\r\n        System.out.println(brands);\r\n    }\r\n```\r\n#### 多条件查询：集合参数\r\n\r\n\r\n\r\n\r\n`testBrand.java`测试代码\r\n```java\r\n    @Test\r\n    public void testSelectByCondition() throws Exception{\r\n        // 模拟获取到查询数据\r\n        int status = 1;\r\n        String companyName = \"华为\";\r\n        String brandName = \"华为\";\r\n\r\n        // 对数据处理\r\n        companyName = \"%\"+companyName+\"%\";\r\n        brandName = \"%\"+brandName+\"%\";\r\n\r\n        Map<String,Object> searchBrand = new HashMap<>();\r\n        searchBrand.put(\"status\",status);\r\n        searchBrand.put(\"companyName\",companyName);\r\n        searchBrand.put(\"brandName\",brandName);\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n        List<Brand> brands = brandMapper.selectByCondition(searchBrand);\r\n\r\n        System.out.println(brands);\r\n    }\r\n```\r\n\r\n\r\n#### 多条件-动态条件查询`where标签或1=1恒等式`\r\n* if 条件判断：用于判断传入的参数是否有值\r\n  * test 逻辑表达式\r\n* 存在问题：`status==null`时，第二个`if`中的`and`将导致`sql语法错误`\r\n  * **`1=1`恒等式**解决\r\n  * `where`标签解决\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <!-- selectAll --> \r\n  <select id=\"selectAll\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand;\r\n  </select>\r\n\r\n  <!-- selectById --> \r\n  <select id=\"selectById\" parameterType=\"int\" resultMap=\"BrandColumMapper\">\r\n    <![CDATA[ \r\n      select * from tb_brand where id=#{id};\r\n    ]]>\r\n  </select>\r\n  <!-- selectByCondition -->\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    where\r\n    <if test=\"status!=null\">\r\n      status = #{status}\r\n    </if> \r\n    <if test=\" company_name!=null and company_name!='' \">\r\n    and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 --> \r\n    </if> \r\n    <if test=\" brand_name!=null and brand_name!='' \">\r\n      and brand_name like #{brandName}\r\n    </if> \r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n**`1=1`恒等式解决问题**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <!-- selectAll --> \r\n  <select id=\"selectAll\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand;\r\n  </select>\r\n\r\n  <!-- selectById --> \r\n  <select id=\"selectById\" parameterType=\"int\" resultMap=\"BrandColumMapper\">\r\n    <![CDATA[ \r\n      select * from tb_brand where id=#{id};\r\n    ]]>\r\n  </select>\r\n  <!-- selectByCondition -->\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    where\r\n    1=1\r\n    <if test=\"status!=null\">\r\n      and status = #{status}\r\n    </if> \r\n    <if test=\" company_name!=null and company_name!='' \">\r\n    and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 --> \r\n    </if> \r\n    <if test=\" brand_name!=null and brand_name!='' \">\r\n      and brand_name like #{brandName}\r\n    </if> \r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n**`1=1`恒等式解决问题**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <!-- selectAll --> \r\n  <select id=\"selectAll\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand;\r\n  </select>\r\n\r\n  <!-- selectById --> \r\n  <select id=\"selectById\" parameterType=\"int\" resultMap=\"BrandColumMapper\">\r\n    <![CDATA[ \r\n      select * from tb_brand where id=#{id};\r\n    ]]>\r\n  </select>\r\n  <!-- selectByCondition -->\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    where\r\n    1=1\r\n    <if test=\"status!=null\">\r\n      and status = #{status}\r\n    </if> \r\n    <if test=\" company_name!=null and company_name!='' \">\r\n    and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 --> \r\n    </if> \r\n    <if test=\" brand_name!=null and brand_name!='' \">\r\n      and brand_name like #{brandName}\r\n    </if> \r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n\r\n**`where`标签解决**\r\nwhere标签能自动去掉多余的and or \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n  <!-- selectAll -->\r\n  <select id=\"selectAll\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand;\r\n  </select>\r\n\r\n  <!-- selectById -->\r\n  <select id=\"selectById\" parameterType=\"int\" resultMap=\"BrandColumMapper\">\r\n    <![CDATA[ \r\n      select * from tb_brand where id=#{id};\r\n    ]]>\r\n  </select>\r\n  <select id=\"selectByCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n    <where> <!-- where标签会帮你自动去掉多余的and or 如果没有任何条件会去掉自身 -->\r\n      <if test=\"status!=null\">\r\n        and status = #{status}\r\n      </if>\r\n      <if test=\" company_name!=null and company_name!='' \">\r\n        and company_name like #{companyName} <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 -->\r\n      </if>\r\n      <if test=\" brand_name!=null and brand_name!='' \">\r\n        and brand_name like #{brandName}\r\n      </if>\r\n    </where>\r\n      ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n#### 单条件-动态条件查询`:when:choose:otherwise`\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.example.mapper.BrandMapper\">\r\n  <resultMap id=\"BrandColumMapper\" type=\"com.example.pojo.Brand\">\r\n    <result column=\"brand_name\" property=\"brandName\" />\r\n    <result column=\"company_name\" property=\"companyName\" />\r\n  </resultMap>\r\n\r\n  <select id=\"selectBySingleCondition\" resultMap=\"BrandColumMapper\">\r\n    select * from tb_brand\r\n      <where> <!-- where标签会帮你自动去掉多余的and or 如果没有任何条件会去掉自身 -->\r\n      <choose>\r\n        <when test=\"status!=null\">\r\n        status = #{status}\r\n      </when>\r\n        <when test=\"companyName!=null and companyName!=''\">\r\n          company_name like #{companyName}\r\n          <!-- 此处的companyName的命名规则最好是和对象的属性名保持一致，以避免后续产生的问题 -->\r\n        </when>\r\n        <when test=\" brandName!=null and brandName!='' \">\r\n          brand_name like #{brandName}\r\n        </when>\r\n        <otherwise>\r\n          1=1\r\n        </otherwise>\r\n      </choose>\r\n    </where>\r\n    ;\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n`BrandMapper.java`\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.apache.ibatis.annotations.Param;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    List<Brand> selectAll();\r\n\r\n    Brand selectById(int id);\r\n    \r\n    List<Brand> selectByCondition(\r\n        @Param(\"status\")        int     status,\r\n        @Param(\"companyName\")   String  companyName,\r\n        @Param(\"brandName\")     String  brandName\r\n    );\r\n\r\n    List<Brand> selectByCondition(Brand brand);\r\n\r\n    List<Brand> selectByCondition(Map<String,Object> brand);\r\n//-------------------------------------------------------------\r\n    List<Brand> selectBySingleCondition(Map<String,Object> brand);\r\n//-------------------------------------------------------------\r\n}\r\n```\r\n\r\n**测试**\r\n```java\r\npackage com.example;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport com.example.mapper.BrandMapper;\r\nimport com.example.pojo.Brand;\r\n\r\npublic class testBrand {\r\n    @Test\r\n    public void testSelectByCondition() throws Exception{\r\n        // 模拟获取到查询数据\r\n        int status = 1;\r\n        String companyName = \"华为\";\r\n        String brandName = \"华为\";\r\n\r\n        // 对数据处理\r\n        companyName = \"%\"+companyName+\"%\";\r\n        brandName = \"%\"+brandName+\"%\";\r\n\r\n        Map<String,Object> searchBrand = new HashMap<>();\r\n        // searchBrand.put(\"status\",status);\r\n        searchBrand.put(\"companyName\",companyName);\r\n        // searchBrand.put(\"brandName\",brandName);\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n        List<Brand> brands = brandMapper.selectBySingleCondition(searchBrand);\r\n\r\n        System.out.println(brands);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 增添数据\r\n\r\n#### 插入单条数据\r\n`BrandMapper.xml`\r\n```xml\r\n  <insert id=\"add\">\r\n    insert into tb_brand(brand_name,company_name,ordered,description,status) \r\n    values(#{brandName},#{companyName},#{ordered},#{description},#{status});\r\n  </insert>\r\n```\r\n\r\n`BrandMapper.java`\r\n```java\r\nvoid add(Brand brand);\r\n```\r\n\r\n**测试类**\r\n```java\r\n    @Test\r\n    public void testAdd() throws Exception {\r\n        // 模拟获取到查询数据\r\n\r\n        // 封装数据\r\n        Brand brand = new Brand();\r\n        brand.setBrandName(\"三星\");\r\n        brand.setCompanyName(\"三星公司\");\r\n        brand.setDescription(\"我们有全世界最好用的电池\");\r\n        brand.setOrdered(5);\r\n        brand.setStatus(1);\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(false);// 第一个参数为autoCommit 默认为false 也就是默认开启事务\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n\r\n        try {\r\n            // jdbc默认为手动提交事务\r\n            brandMapper.add(brand);\r\n            session.commit();//手动提交\r\n            System.out.println(\"添加成功\");\r\n\r\n        } catch (Exception e) {\r\n            session.rollback();//回滚\r\n        }\r\n    }\r\n```\r\n\r\n#### 插入单条数据：返回主键\r\n```xml\r\n  <!-- \r\n      useGeneratedKeys=\"true\"  keyProperty=\"id\" \r\n      useGeneratedKeys 表示返回生成的主键，\r\n      keyProperty 指定要封装到对象的什么字段中\r\n   -->\r\n  <insert id=\"add\" useGeneratedKeys=\"true\"  keyProperty=\"id\">\r\n    insert into tb_brand(brand_name,company_name,ordered,description,status) \r\n    values(#{brandName},#{companyName},#{ordered},#{description},#{status});\r\n  </insert>\r\n```\r\n\r\n```java\r\n@Test\r\n    public void testAdd() throws Exception {\r\n        // 模拟获取到查询数据\r\n\r\n        // 封装数据\r\n        Brand brand = new Brand();\r\n        brand.setBrandName(\"三星\");\r\n        brand.setCompanyName(\"三星公司\");\r\n        brand.setDescription(\"我们有全世界最好用的电池\");\r\n        brand.setOrdered(5);\r\n        brand.setStatus(1);\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(false);// 第一个参数为autoCommit 默认为false 也就是默认开启事务\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n\r\n        try {\r\n            // jdbc默认为手动提交事务\r\n            brandMapper.add(brand);\r\n            session.commit();//手动提交\r\n            System.out.println(brand.getId()); // 输出id\r\n            System.out.println(\"添加成功\");\r\n\r\n        } catch (Exception e) {\r\n            session.rollback();//回滚\r\n        }\r\n    }\r\n```\r\n\r\n### 修改数据\r\n\r\n#### 修改全部字段\r\n\r\n`BrandMapper.xml`\r\n```xml\r\n  <update id=\"update\">\r\n    update \r\n      tb_brand\r\n    set\r\n      brand_name=#{brandName},\r\n      company_name=#{companyName},\r\n      ordered=#{ordered},\r\n      description=#{description},\r\n      status=#{status}\r\n    where\r\n      id = #{id}\r\n    ;\r\n  </update>\r\n```\r\n\r\n`BrandMapper.java`\r\n```java\r\n    int update(Brand brand);// 返回值可为void 也可为int，为int时，返回影响的行数\r\n```\r\n\r\n`测试类`\r\n```java\r\n    @Test\r\n    public void testUpdate() throws Exception {\r\n        // 模拟获取到查询数据\r\n\r\n        // 封装数据\r\n        Brand brand = new Brand();\r\n        brand.setBrandName(\"三星\");\r\n        brand.setCompanyName(\"三星公司\");\r\n        brand.setDescription(\"我们不生产电池，我们只是炸弹的搬运工\");\r\n        brand.setOrdered(5);\r\n        brand.setStatus(1);\r\n        brand.setId(9);\r\n\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(false);// 第一个参数为autoCommit 默认为false 也就是默认开启事务\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n\r\n        try {// jdbc默认为手动提交事务\r\n            int affectedRows = brandMapper.update(brand);\r\n            session.commit();//手动提交\r\n            System.out.println(\"更新成功,影响的行数：\"+affectedRows);\r\n\r\n        } catch (Exception e) {\r\n            session.rollback();//回滚\r\n        }\r\n    }\r\n```\r\n\r\n#### 修改任意字段`set:if`\r\n\r\n```xml\r\n  <update id=\"update\">\r\n    update \r\n      tb_brand\r\n    <set>  <!-- 用set标签来避免由if产生的逗号问题 --> \r\n      <if test=\" brandName!=null and brandName!='' \">\r\n        brand_name=#{brandName},\r\n      </if>\r\n      <if test=\" companyName!=null and companyName!='' \">\r\n        company_name=#{companyName},\r\n      </if>\r\n      <if test=\" ordered!=null \">\r\n        ordered=#{ordered},\r\n      </if>\r\n      <if test=\" description!=null and description!='' \">\r\n        description=#{description},\r\n      </if>\r\n      <if test=\" status!=null \">\r\n        status=#{status}\r\n      </if>\r\n    </set>\r\n    where\r\n      id = #{id}\r\n    ;\r\n  </update>\r\n```\r\n\r\n### 删除数据\r\n\r\n#### 删除单个deleteById\r\n```xml\r\n  <!-- deleteById --> \r\n  <delete id=\"deleteById\">\r\n    delete \r\n      from \r\n        tb_brand\r\n      where \r\n        id = #{id}\r\n    ;\r\n  </delete>\r\n```\r\n\r\n```java\r\n    int deleteById(int id);\r\n```\r\n\r\n```java\r\n    @Test\r\n    public void testdeleteById() throws Exception {\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession();\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n\r\n        int affectedRows = brandMapper.deleteById(9);\r\n        System.out.println(\"删除成功,影响的行数：\"+affectedRows);\r\n\r\n    }\r\n```\r\n\r\n\r\n#### 删除多个`deleteById`:`不使用注解版`\r\n```java\r\n    int deleteByIds(int[] ids);// 删除多个\r\n```\r\n\r\n```xml\r\n  <!-- deleteByIds --> \r\n  <delete id=\"deleteByIds\">\r\n  delete \r\n    from \r\n      tb_brand\r\n    where \r\n      id in \r\n        <foreach collection=\"array\" item=\"id\" separator=\",\" open=\"(\" close=\")\"><!-- mybaties会将数组的参数封装为map集合，其key为array，value为数组 --> \r\n          ${id}\r\n        </foreach>\r\n  ;    \r\n  </delete>\r\n```\r\n\r\n```java\r\n    @Test\r\n    public void testdeleteByIds() throws Exception {\r\n        int[] ids = {1,3,5};\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(false);// 第一个参数为autoCommit 默认为false 也就是默认开启事务\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        BrandMapper brandMapper = session.getMapper(BrandMapper.class);\r\n\r\n        int affectedRows = brandMapper.deleteByIds(ids);\r\n        System.out.println(\"删除成功,影响的行数：\"+affectedRows);\r\n    }\r\n```\r\n\r\n#### 删除多个`deleteById`:`使用注解版`\r\n\r\n```java\r\n/* \r\n   mybaties会将数组的参数封装为map集合，\r\n      默认其key为array，value为数组\r\n      使用@Param(\"ids\")，可将key改为ids\r\n*/\r\n```\r\n\r\n```java\r\n    int deleteByIds(@Param(\"ids\")  int[] ids);// 删除多个\r\n```\r\n\r\n```xml\r\n  <!-- deleteByIds --> \r\n  <delete id=\"deleteByIds\">\r\n  delete \r\n    from \r\n      tb_brand\r\n    where \r\n      id in \r\n        <foreach collection=\"ids\" item=\"id\" separator=\",\" open=\"(\" close=\")\"><!-- collection指定键名 --> \r\n          ${id}\r\n        </foreach>\r\n  ;    \r\n  </delete>\r\n```\r\n\r\n### myBatis对参数的封装\r\nMyBatis 接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式\r\n\r\n**对于单个参数**\r\n* 基本类型：\r\n  * 直接使用，`形参名` 和 `sql参数占位符` 可任意，\r\n* POJO类型：直接使用，`对象的属性名`需和`sql参数占位符`名称 一致\r\n* Map集合：直接使用，`键名`需和`sql参数占位符`名称 一致\r\n* Collection： 内部自动封装为map集合\r\n  * `map.put(\"arg0\",connection)`  使用注解`@Param(\"修改默认的arg键名\")`\r\n  * `map.put(\"connection\",connection)`\r\n* list: 内部自动封装为map集合\r\n  * `map.put(\"arg0\",原lsit集合)` 使用注解`@Param(\"修改默认的arg键名\")`\r\n  * `map.put(\"connection\",原lsit集合)`\r\n  * `map.put(\"list\",原lsit集合)`\r\n* array：内部自动封装为map集合\r\n  * `map.put(\"arg0\",原array数组)` 使用注解`@Param(\"修改默认的arg键名\")`\r\n  * `map.put(\"array\",原array数组)`\r\n**对于多个参数**\r\n* 多个参数会封装为map集合\r\n  * `map.put(\"arg0\",形式参数0)` 使用注解`@Param(\"修改默认的arg键名\")`\r\n  * `map.put(\"param0\",形式参数0)`\r\n  * `map.put(\"arg1\",形式参数1)`\r\n  * `map.put(\"param1\",形式参数1)`\r\n\r\n\r\n**题目**\r\n![](./images/JavaWeb学习笔记/2022-11-28-12-48-27.png)\r\n\r\n```\r\n应该为：\r\nuser.userName\r\nuser.password\r\n```\r\n\r\n### 使用注解完成简单sql操作\r\n```java\r\npackage com.example.mapper;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.apache.ibatis.annotations.Param;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport com.example.pojo.Brand;\r\n\r\npublic interface BrandMapper {\r\n    @Select(\"select *,brand_name as brandName,company_name as companyName from tb_brand;\")\r\n    List<Brand> selectAll();\r\n\r\n    @Select(\"select *,brand_name as brandName,company_name as companyName from tb_brand where id = #{id};\")\r\n    Brand selectById(int id);\r\n}\r\n```\r\n\r\n## Tomcat \r\n* Tomcat 是一个轻量级的Web服务器，\r\n* 支持Servlet/JSP少量JavaEE规范，\r\n* 也称为Web容器，Servlet容器\r\n\r\n**解压后目录结构**\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-28-15-56-00.png)\r\n\r\n**启动与关闭**\r\n![](./images/JavaWeb学习笔记/2022-11-28-15-59-22.png)\r\n\r\n**配置**\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-10-33.png)\r\n\r\n**部署**\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-17-24.png)\r\n\r\n`xml`\r\n```xml\r\n\r\n```\r\n\r\n**javaWeb项目目录结构**\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-22-06.png)\r\n\r\n**在idea中通过本地tomCat启动javaWeb项目**\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-47-30.png)\r\n\r\n**在javaWeb项目中集成tomCat**\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-48-08.png)\r\n```xml\r\n\r\n  <build>\r\n    <finalName>web</finalName>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.tomcat.maven</groupId>\r\n        <artifactId>tomcat7-maven-plugin</artifactId>\r\n        <version>2.2</version>\r\n        <configuration>\r\n          <port>8088</port>\r\n          <path>/</path>\r\n        </configuration>\r\n      </plugin>\r\n      <plugin>\r\n        <groupId>org.apache.tomcat.maven</groupId>\r\n        <artifactId>tomcat6-maven-plugin</artifactId>\r\n        <version>2.3-SNAPSHOT</version>\r\n      </plugin>\r\n    </plugins>\r\n  </build>\r\n\r\n```\r\n\r\n![](./images/JavaWeb学习笔记/2022-11-28-18-49-56.png)\r\n\r\n## Servlet\r\n* Servlet已经是一个非常非常古老的技术了，\r\n* 而且在实际开发中几乎不会用到，\r\n* 在面试中也几乎不会问到Servlet相关的知识。\r\n* `但Struts2和SpringMVC框架，底层都是跟Servlet有关`\r\n\r\n### 什么是Servlet\r\n> servlet程序是由servlet容器（即tomcat服务器）进行管理的  \r\n> 即：由servlet容器（tomcat）完成servlet的实例化、初始化、服务、销毁\r\n\r\nServlet（Server Applet）是Java Servlet的简称，  \r\n是用Java编写的服务器端程序，  \r\n主要功能在于交互式地浏览和修改数据，生成**动态Web内容**。  \r\n简单来说 `Servlet本质就是处理请求做出响应的实现类`\r\n* 客户端发送请求至Web服务器端。\r\n* 服务器将请求信息发送至Servlet\r\n* Servlet 根据请求内容生成响应内容并将其传给服务器。\r\n* 服务器将响应返回给客户端。\r\n* ![](./images/JavaWeb学习笔记/2022-11-29-22-30-28.png)\r\n\r\n> **服务器的三大组件：**\r\n> * servlet：用于处理请求和响应\r\n> * filter：用于过滤请求和响应\r\n> * listener：用于监听服务器的状态\r\n\r\n### 实现最简Servlet程序\r\n**流程**\r\n* 用`maven`创建`javaWeb`项目，在`pom.xml`配置文件中导入`Servlet`依赖\r\n  ```xml\r\n    <dependencies>\r\n    <dependency>\r\n      <groupId>javax.servlet</groupId>\r\n      <artifactId>javax.servlet-api</artifactId>\r\n      <version>3.1.0</version>\r\n      <scope>provided</scope> <!-- provided表示该依赖仅在编译和测试环境有效，因为该包在其运行环境（tomcat）中有,如果不这么写会导致冲突 -->\r\n    </dependency>\r\n  </dependencies>\r\n  ```\r\n* 编写一个类，实现`HttpServlet`类 或 继承`GenericServlet`类 或 实现`Servlet`接口类\r\n* `重写` 或 `实现` 相应的方法\r\n* 在类上使用注解`@WebServlet(\"/demo1\")`,配置其访问路径\r\n* 访问`http://localhost:8080/demo1`\r\n\r\n**实现Servlet接口版**\r\n```java\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.Servlet;\r\nimport javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\n@WebServlet(\"/demo1\")\r\npublic class MyServlet implements Servlet {\r\n    @Override\r\n    public void init(ServletConfig arg0) throws ServletException {\r\n        // TODO Auto-generated method stub\r\n    }\r\n    @Override\r\n    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\r\n        System.out.println(\"收到一个请求\");\r\n    }\r\n    @Override\r\n    public void destroy() {\r\n        // TODO Auto-generated method stub\r\n    }\r\n    // 获取ServletConfig对象\r\n    @Override\r\n    public ServletConfig getServletConfig() {\r\n        // TODO Auto-generated method stub\r\n        return null;\r\n    }\r\n    // 获取Servlet信息\r\n    @Override\r\n    public String getServletInfo() {\r\n        // TODO Auto-generated method stub\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n**继承HttpServlet版**\r\n```java\r\npublic class MyServlet extends HttpServlet {\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"收到一个get请求\");\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"收到一个post请求\");\r\n    }\r\n}\r\n```\r\n\r\n**继承GenericServlet版**\r\n```java\r\npublic class MyServlet extends GenericServlet {\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n### servlet生命周期\r\n![](./images/JavaWeb学习笔记/2022-11-30-17-04-42.png)\r\n```java\r\n@WebServlet(urlPatterens=\"/demo1\",loadOnStartUp=1)\r\npublic class MyServlet implements Servlet {\r\n    /**\r\n     * 调用时机：默认情况下在该servlet被第一次访问时,由容器来调用init()方法，只会被调用一次\r\n     *  * 修改调用时机： loadOnStartUp \r\n     *      * 默认值为-1 表示在该url被访问后再初始化\r\n     *      * 可修改为1 表示在服务器启动后便初始化\r\n     * 调用次数：1次\r\n     */\r\n    @Override \r\n    public void init(ServletConfig arg0) throws ServletException {\r\n        System.out.println(\"url被第一次访问...\");\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@WebServlet(urlPatterens=\"/demo1\",loadOnStartUp=1)\r\npublic class MyServlet implements Servlet {\r\n    /**\r\n     * 调用时机：url每次被访问时调用一次\r\n     * 调用次数：每当被访问就调用\r\n     */\r\n    @Override\r\n    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\r\n        System.out.println(\"收到一个请求\");\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@WebServlet(urlPatterens=\"/demo1\",loadOnStartUp=1)\r\npublic class MyServlet implements Servlet {\r\n    /**\r\n     * 调用时机：Servlet被销毁时（内存释放时，服务进程被正常关闭时），由容器来销毁\r\n     * 调用次数：1次\r\n     */\r\n    @Override\r\n    public void destroy() {\r\n        // TODO Auto-generated method stub\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### HTTPServlet\r\n\r\n**一般直接继承HTTPServlet**\r\n* HttpServlet是指能够处理HTTP协议请求的Servlet，\r\n* 它在原有Servlet接口上添加了一些与HTTP协议处理方法，\r\n* 它比Servlet接口的功能更为强大。\r\n* HttpServlet在实现Servlet接口时，覆写了service方法，\r\n  * 该方法体内的代码会自动判断用户的请求方式，\r\n  * 如为GET请求，则调用HttpServlet的doGet方法，\r\n  * 如为Post请求，则调用doPost方法。\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-13-46-59.png)\r\n![](./images/JavaWeb学习笔记/2022-12-01-13-48-03.png)\r\n![](./images/JavaWeb学习笔记/2022-12-01-14-22-54.png)\r\n\r\n\r\n**继承HttpServlet版**\r\n```java\r\n@WebServlet(urlPatterns=\"/api/1\")\r\npublic class MyHttpServlet extends HttpServlet {\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"收到一个get请求\");\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"收到一个post请求\");\r\n    }\r\n}\r\n```\r\n\r\n### urlPattern配置\r\n\r\n**一个urlPattern可以配置多个访问路径配置**\r\n```java\r\n@WebServlet(urlPatterns={\"/api/1\",\"/api/2\"})\r\npublic class MyHttpServlet extends HttpServlet {\r\n}\r\n```\r\n\r\n**urlPattern配置规则**\r\n* 精确匹配\r\n  ```java\r\n  @WebServlet(urlPatterns={\"/api/1\",\"/api/2\"}) // 若一个url同时满足精确匹配和目录匹配，则精确匹配优先级更高\r\n  ```\r\n* 目录匹配\r\n  ```java\r\n  @WebServlet(urlPatterns={\"/api/1/*\",\"/api/2/*\"})\r\n  ```\r\n* 扩展名匹配\r\n  ```java\r\n  @WebServlet(urlPatterns={\"*.do1\",\"*.do2\"}) // 不能写 \"/*.do1\"\r\n  ```\r\n* 任意匹配\r\n  ```java\r\n  @WebServlet(urlPatterns={\"/\",\"/*\"})\r\n  ```\r\n**`/`和`/*`区别:**\r\n* 当项目中的Servlet配置了`/`则会覆盖掉tomcat中DefaultServlet（他会处理项目中静态页面的访问，如index.html），当其他的url-pattern都匹配不上时都会走这个Servlet\r\n* 当项目中配置了`/*`，意味着匹配任意访问路径\r\n\r\n**优先级**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-15-03-09.png)\r\n\r\n\r\n\r\n### xml方式配置Servlet\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-15-05-38.png)\r\n\r\n\r\n### Request对象\r\n\r\n#### Request继承体系\r\n![](./images/JavaWeb学习笔记/2022-12-01-15-37-24.png)\r\n\r\n#### Request常用方法\r\n![](./images/JavaWeb学习笔记/2022-12-01-16-03-32.png)\r\n![](./images/JavaWeb学习笔记/2022-12-01-15-56-36.png)\r\n![](./images/JavaWeb学习笔记/2022-12-01-15-58-24.png)\r\n\r\n\r\n#### 通用的获取参数的方法\r\n**由于不同的请求方式（get,post）需要使用不同的方法来获取参数，这造成了一定的不方便**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-16-09-00.png)\r\n\r\n\r\n**`通用的`  获取请求数据的 方式**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-16-25-19.png)\r\n\r\n\r\n**测试代码**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-16-52-38.png)\r\n\r\n```bash\r\n收到一个get请求\r\nuserName:[2449695354@qq.com]\r\npassword:[123123]\r\nreadMe:[true]\r\nautoLogin:[true]\r\nhobby:[1, 2, 3]\r\n```\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n<h2>Hello World!</h2>\r\n<form action=\"/api\" method=\"get\">\r\n    userName:<input type=\"text\" name=\"userName\"><br>\r\n    password:<input type=\"password\" name=\"password\"><br>\r\n    <input type=\"checkbox\" name=\"readMe\" value=\"true\">readMe <br>\r\n    <input type=\"checkbox\" name=\"autoLogin\" value=\"true\">autoLogin <br>\r\n    <input type=\"checkbox\" name=\"hobby\" value=\"1\">熬夜 <br>\r\n    <input type=\"checkbox\" name=\"hobby\" value=\"2\">敲代码 <br>\r\n    <input type=\"checkbox\" name=\"hobby\" value=\"3\">掉头发 <br>\r\n    <input type=\"submit\">\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n```java\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Map;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api\")\r\npublic class MyServlet extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"收到一个get请求\");\r\n        Map<String,String[]> paramMap = req.getParameterMap();\r\n        for(String key : paramMap.keySet()){\r\n            System.out.println(key+\":\"+Arrays.toString(paramMap.get(key)));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        // （如果要实现一个接口支持两种请求方式）\r\n        // 由于统一了获取请求参数的格式，故可将post请求转交给doget函数\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 解决Request输入流中文乱码的问题\r\n\r\n> 注：新版tomcat8.0之后已将get请求乱码问题解决，解码方式为UTF-8\r\n\r\n**POST方式乱码的解决**\r\n\r\n由于POST方式的数据是以原始格式放在请求体中的，到达服务端后，底层是通过getReader()方式获取到的,默认会以`ISO-8859-1`解码，所以可以通过设置获取流的编码方式来解决该问题\r\n```java\r\nreq.setCharacterEncoding(\"UTF-8\");// 设置输入流编码\r\nMap<String,String[]> paramMap = req.getParameterMap(); // 然后就能获得正常的数据了\r\n```\r\n\r\n**GET方式乱码的解决：原理解释起来比较困难**  \r\n> 这种方式也能解决post的乱码\r\n\r\n* GET方式的请求数据是放在URL中的，但URL是不支持中文的，  \r\n* 浏览器会将中文以`UTF-8`格式进行`URL编码`   \r\n  * ![](./images/JavaWeb学习笔记/2022-12-01-17-26-05.png)\r\n* TomCat收到后会以`ISO-8859-1`格式进行`URL解码`  \r\n  * ![](./images/JavaWeb学习笔记/2022-12-01-17-22-07.png)\r\n* 问题在于无法修改这个`ISO-8859-1`格式为`UTF-8`  \r\n* 所以需要将得到的数据重新以`ISO-8859-1`格式`解码`获取字节码\r\n* 然后再将得到的字节码以以`UTF-8`格式解析为字符串\r\n\r\n\r\n**URL编码**\r\n1. 将字符串按照编码方式转为二进制\r\n2. 每个字节转为2个16进制数并在前边加上%\r\n\r\n```java\r\nimport java.net.URLDecoder;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        String userName = \"张三\";\r\n\r\n        // 浏览器做的事\r\n        // 以 ISO_8859_1 编码 URL\r\n        String userName_Browser = URLEncoder.encode(userName,StandardCharsets.UTF_8);\r\n        System.out.println(userName_Browser); // 输出： %E5%BC%A0%E4%B8%89\r\n\r\n        // TomCat做的事，\r\n        // 以 ISO_8859_1 解码 URL\r\n        String userName_TomCat = URLDecoder.decode(userName_Browser, StandardCharsets.ISO_8859_1);\r\n        System.out.println(userName_TomCat); // 输出： ??????\r\n\r\n        // 作为Servlet开发人员要做的事，\r\n        // 以 ISO_8859_1 解码 `乱码字符串` 获取 `字节数组` ， 然后以UTF_8字符集编码解析 `字节数组` 获取 `字符串` \r\n        String userName_Servlet = new String(userName_TomCat.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);\r\n        System.out.println(userName_Servlet); // 输出： 张三\r\n    }\r\n}\r\n```\r\n\r\n### Request内部请求转发转发流转给jsp页面Forward\r\n![](./images/JavaWeb学习笔记/2022-12-01-19-57-28.png) \r\n> \r\n\r\n**方法**\r\n```java\r\nreq.getRequestDispatcher(\"/api/2\").forward(req, resp);\r\n```\r\n\r\n**传递数据的一些方法**\r\n![](./images/JavaWeb学习笔记/2022-12-01-20-46-36.png)\r\n\r\n\r\n**终端输出**\r\n```bash\r\n/api1 被访问\r\n/api/2 被访问\r\ntest的数据为: test的数据\r\n```\r\n\r\n```java\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/1\")\r\npublic class MyServlet1 extends HttpServlet { // 该类需为public\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"/api/1 被访问\");\r\n\r\n        req.setAttribute(\"test\", \"test的数据\");\r\n        \r\n        // 转发给 \"/api/2\" 的处理函数\r\n        req.getRequestDispatcher(\"/api/2\").forward(req, resp);\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n```java\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/2\")\r\npublic class MyServlet2 extends HttpServlet { // 注意 该类需为public\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"/api/2 被访问\");\r\n        System.out.println( \"test的数据为: \"+req.getAttribute(\"test\") );\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n### Response对象\r\n\r\n**实现关系**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-01-21-33-06.png)\r\n\r\n#### Response设置响应数据功能介绍\r\n![](./images/JavaWeb学习笔记/2022-12-01-21-39-13.png)\r\n\r\n#### Response完成重定向\r\n![](./images/JavaWeb学习笔记/2022-12-01-21-41-02.png)\r\n\r\n```java\r\n@WebServlet(\"/api/1\")\r\npublic class MyServlet1 extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        System.out.println(\"/api/1 被访问\");\r\n\r\n        // 设置响应行\r\n        resp.setStatus(302);\r\n        // 设置相应头\r\n        resp.setHeader(\"location\", \"/api/2\");\r\n\r\n        // 等效的简化写法\r\n        // resp.sendRedirect(\"api/2\");\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n#### Response响应字符数据\r\n```java\r\nresponse.setContentType(\"text/html;charset=utf-8\");\r\nPrintWriter wr = response.getWriter();\r\nwr.write(\"<h1>测试</h1>\");\r\n```\r\n\r\n```java\r\n@WebServlet(\"/a\")\r\npublic class MyServlet0 extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\r\n        response.setContentType(\"text/html;charset=utf-8\"); // 使其支持中文 ，因为，response获取到的输出流默认为IOS-8859-1\r\n        PrintWriter wr = response.getWriter(); // 注意PrintWriter会随着resp的关闭而自动销毁\r\n        wr.write(\"<h1>测试</h1>\");\r\n    }\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n#### Response响应字节数据\r\n\r\n```java\r\nOutputStream os = response.getOutputStream();\r\n```\r\n\r\n```java\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.apache.commons.io.IOUtils; //commons-io IOUtils是流的工具库\r\n\r\n@WebServlet(\"/a\")\r\npublic class MyServlet0 extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\r\n        InputStream is = this.getClass().getResourceAsStream(\"./123.txt\");\r\n        OutputStream os = response.getOutputStream();\r\n        IOUtils.copy(is, os);// 拷贝\r\n        System.out.println(\"拷贝完毕\");\r\n    }\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n### 案例：实现登录注册案例\r\n\r\n**注册**  \r\n![](./images/JavaWeb学习笔记/2022-12-02-21-44-16.png)\r\n![](./images/JavaWeb学习笔记/2022-12-02-21-44-28.png)\r\n\r\n**注册**  \r\n![](./images/JavaWeb学习笔记/2022-12-02-21-43-58.png)\r\n![](./images/JavaWeb学习笔记/2022-12-02-21-43-42.png)\r\n\r\n**数据准备**\r\n```sql\r\nCREATE DATABASE IF NOT EXISTS db6;\r\n\r\nCREATE TABLE IF NOT EXISTS tb_user(\r\n    id INT AUTO_INCREMENT PRIMARY KEY,\r\n    username VARCHAR(20) UNIQUE NOT NULL,\r\n    password VARCHAR(20) NOT NULL\r\n);\r\n\r\nINSERT INTO \r\n    tb_user(username,password)\r\nVALUES\r\n    (\"张三\",\"123456\"),\r\n    (\"王五\",\"123456\")\r\n;\r\n```\r\n\r\n**项目目录结构**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-02-21-37-23.png)\r\n\r\n**pom.xml**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n\r\n  <groupId>com.webapptest</groupId>\r\n  <artifactId>webapptest</artifactId>\r\n  <version>1.1-SNAPSHOT</version>\r\n  <packaging>war</packaging>\r\n  \r\n\r\n  <name>web Maven Webapp</name>\r\n  <!-- FIXME change it to the project's website -->\r\n  <url>http://www.example.com</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n\r\n  <dependencies>\r\n\r\n    <dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>javax.servlet-api</artifactId>\r\n    <version>3.1.0</version>\r\n    <scope>provided</scope>\r\n  </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>org.mybatis</groupId>\r\n      <artifactId>mybatis</artifactId>\r\n      <version>3.5.11</version>\r\n    </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>mysql</groupId>\r\n      <artifactId>mysql-connector-java</artifactId>\r\n      <version>8.0.31</version>\r\n    </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>org.apache.tomcat</groupId>\r\n      <artifactId>tomcat</artifactId>\r\n      <version>10.1.2</version>\r\n      <type>pom</type>\r\n    </dependency>\r\n\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    \r\n  </dependencies>\r\n\r\n  <build>\r\n    <finalName>web</finalName>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.tomcat.maven</groupId>\r\n        <artifactId>tomcat7-maven-plugin</artifactId>\r\n        <version>2.2</version>\r\n        <configuration>\r\n          <port>8080</port>\r\n          <path>/</path>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>\r\n    \r\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\r\n      <plugins>\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-war-plugin</artifactId>\r\n          <version>3.2.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement>\r\n  </build>\r\n</project>\r\n```\r\n\r\n**mybatis-config.xml**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n  <environments default=\"development\">\r\n    <environment id=\"development\">\r\n      <transactionManager type=\"JDBC\"/>\r\n      <dataSource type=\"POOLED\">\r\n        <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/> <!-- 填mysql的驱动的路径 -->\r\n        <property name=\"url\" value=\"jdbc:mysql:///db6?useSSL=false&amp;useServerPrepStemts=true\"/>  <!-- 填mysql数据库的路径 -->\r\n        <property name=\"username\" value=\"root\"/>  <!-- 填数据库的username -->\r\n        <property name=\"password\" value=\"root\"/>   <!-- 填数据库的password -->\r\n      </dataSource>\r\n    </environment>\r\n  </environments>\r\n  <mappers>\r\n    <package name=\"com.webapptest.mapper\" /> <!-- 使用这种Mapper代理的方式便可以用这种包扫描的写法 -->\r\n  </mappers>\r\n</configuration>\r\n```\r\n\r\n`UserMapper.java`\r\n```java\r\npackage com.webapptest.mapper;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.annotations.Insert;\r\nimport org.apache.ibatis.annotations.Param;\r\n// import org.apache.ibatis.annotations.Select;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport com.webapptest.pojo.User;\r\n\r\npublic interface UserMapper {\r\n\r\n    List<User> selectAll();\r\n    \r\n    User selectUserById(int id);\r\n\r\n    @Select(\"select * from tb_user where username = #{username} and password = #{password};\")\r\n    User selectUserByUsernameAndPassword(\r\n        @Param(\"username\") String username,\r\n        @Param(\"password\") String password\r\n    );\r\n\r\n    @Insert(\"INSERT INTO tb_user(id,username,password) values(null,#{username},#{password});\")\r\n    int addUser(User user);\r\n}\r\n```\r\n\r\n`UserMapper.xml`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.webapptest.mapper.UserMapper\">  <!-- namespace改为接口类 -->\r\n  <select id=\"selectAll\" resultType=\"com.webapptest.pojo.User\">   <!-- id为接口的函数名 -->\r\n    select * from tb_user;\r\n  </select>\r\n  <!-- selectUserById --> \r\n  <select id=\"selectUserById\" resultType=\"com.webapptest.pojo.User\">\r\n    select * from tb_user where id = #{id};\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n`pojo/User.java`\r\n```java\r\npackage com.webapptest.pojo;\r\n\r\npublic class User {\r\n    Integer id; \r\n    String username; \r\n    String password;\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"User [id=\" + id + \", username=\" + username + \", password=\" + password + \"]\";\r\n    }\r\n}\r\n```\r\n\r\n\r\n`Login.java`\r\n* 踩坑记录，WebServlet的实现类需放到`/src/main/java/`目录下\r\n```java\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\nimport com.webapptest.mapper.UserMapper;\r\nimport com.webapptest.pojo.User;\r\n\r\n@WebServlet(urlPatterns = \"/api/login\")\r\npublic class Login extends HttpServlet {\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        \r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(true);\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n        User user = userMapper.selectUserByUsernameAndPassword(username,password);\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\");\r\n        else\r\n            response.getWriter().println(\"登录失败!\");\r\n        \r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n        session.close();\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n`Register.java`\r\n```java\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\nimport com.webapptest.mapper.UserMapper;\r\nimport com.webapptest.pojo.User;\r\n\r\n@WebServlet(urlPatterns = \"/api/register\")\r\npublic class Register extends HttpServlet {\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n\r\n        User user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n        \r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n        // 加载mybatis核心配置文件\r\n        String resource = \"mybatis-config.xml\";\r\n        InputStream inputStream = Resources.getResourceAsStream(resource);\r\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n\r\n        // 获取SqlSession，用其来执行sql语句\r\n        SqlSession session = sqlSessionFactory.openSession(true);\r\n        \r\n        // 获取UserMapper接口的代理对象\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n\r\n        int affectedRows=0;\r\n\r\n        try {\r\n            // 因为用户名是unique 插入出错则直接提示注册失败\r\n            affectedRows = userMapper.addUser(user);\r\n            response.getWriter().println(\"注册成功!\"+ affectedRows);\r\n\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n            response.getWriter().println(\"注册失败!\" + affectedRows);\r\n        }\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n        session.close();\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n`login.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>登录</h2>\r\n    <form action=\"/api/login\" method=\"post\">\r\n        userName:<input type=\"text\" name=\"username\"> <br>\r\n        password:<input type=\"password\" name=\"password\"> <br>\r\n        <input type=\"submit\" value=\"登录\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n`register.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>注册</h2>\r\n    <form action=\"/api/register\" method=\"post\">\r\n        userName: <input type=\"text\" name=\"username\"> <br>\r\n        password: <input type=\"password\" name=\"password\"> <br>\r\n        <input type=\"submit\" value=\"注册\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n### 优化：把SqlSessionFactory优化为工具类\r\n```java\r\npackage com.webapptest.datebase;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\npublic class DBSessionPool {// 数据库连接池\r\n    public static SqlSessionFactory sqlSessionFactory=null;\r\n    public static SqlSession getSession(Boolean isAutoCommit) throws IOException {\r\n        if(DBSessionPool.sqlSessionFactory==null){\r\n            // 加载mybatis核心配置文件\r\n            String resource = \"mybatis-config.xml\";\r\n            InputStream inputStream = Resources.getResourceAsStream(resource);\r\n            DBSessionPool.sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n        }\r\n        // 获取SqlSession，用其来执行sql语句\r\n        return DBSessionPool.sqlSessionFactory.openSession(isAutoCommit);\r\n    }\r\n}\r\n```\r\n\r\n**从数据库连接池 获取 sqlSession**\r\n```java\r\nimport java.io.IOException;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport org.apache.ibatis.session.SqlSession;\r\n\r\nimport com.webapptest.datebase.DBSessionPool;\r\nimport com.webapptest.mapper.UserMapper;\r\nimport com.webapptest.pojo.User;\r\n\r\n@WebServlet(urlPatterns = \"/api/login\")\r\npublic class Login extends HttpServlet {\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        \r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n\r\n         //从数据库连接池 获取 sqlSession\r\n        SqlSession session = DBSessionPool.getSession(true);\r\n\r\n        // 获取UserMapper接口的代理对象\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n        User user = userMapper.selectUserByUsernameAndPassword(username,password);\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\");\r\n        else\r\n            response.getWriter().println(\"登录失败!\");\r\n        \r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n        session.close();\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n## JSP(Java Server Pages)Java服务端页面\r\n> 简单了解即可，JSP已经逐渐退出历史舞台了。\r\n> JSP本质和PHP类似    \r\n> JSP已经逐渐被AJAX技术取代了  \r\n\r\n\r\n> JSP=HTML+JAVA\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-02-23-23-39.png)\r\n\r\n\r\n`{{ProjectRoot}}/src/main/webapp/index.jsp`\r\n```jsp\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n  <body>\r\n  <h2>Hello World!</h2>\r\n  <%\r\n    <!-- System.out.println(\"Hello JSP...\"); -->\r\n      out.println(\"Hello JSP...\");\r\n  %>\r\n  </body>\r\n</html>\r\n```\r\n**编译后大概的样子**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-02-23-43-04.png)\r\n\r\n`pom.xml`\r\n```xml\r\n    <dependency>\r\n      <groupId>javax.servlet.jsp</groupId>\r\n      <artifactId>jsp-api</artifactId>\r\n      <version>2.2.1-b03</version>\r\n      <scope>provided</scope>\r\n    </dependency>\r\n```\r\n\r\n\r\n> JSP本质就是一个Servlet\r\n>\r\n> JSP在被访问时，由JSP容器(Tomcat)将其转换为Java文件(Servlet)，在由JSP容器(Tomcat)将其编译，最终对外提供服务的其实就是这个字节码文件\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-02-23-38-51.png)\r\n\r\n\r\nJSP脚本标记分类\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-02-23-43-37.png)\r\n\r\n\r\n**缺点**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-04-24.png)\r\n\r\n### servlet+jsp\r\n\r\n> 这种方式的主要解决java代码和html代码混在一起难以阅读的问题，  \r\n> 核心原理是，\r\n> * 将需要的数据在servlet中封装好，   \r\n>   * `req.setAttribute(\"test\", \"test的数据\");`   \r\n> * 然后通过通过内部转发流转给jsp页面\r\n>   * `req.getRequestDispatcher(\"/api/2\").forward(req, resp);` \r\n> * jsp页面通过 `EL表达式语言` 读取封装好的数据\r\n\r\n\r\n**EL表达式**\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-24-06.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-26-07.png)\r\n\r\n**基本的书写格式**\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-19-35.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-23-15.png)\r\n\r\n\r\n### JSTF标签\r\n> 该技术主要是解决了过去java的if和for循环不得不写在jsp代码中的问题  \r\n> 其实就是以html标签的方式写java的某些语句\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-37-11.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-39-22.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-41-02.png)\r\n\r\n\r\n**使用JSTF标签的预备步骤**\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-36-54.png)\r\n\r\n\r\n\r\n## MVC模式与三层架构\r\n\r\n### MVC模式\r\nMVC是一种分层开发的模式，其中:\r\n* M: Model，业务模型，处理业务\r\n* V: View，视图，界面展示\r\n* C: Controller，控制器，处理请求，调用模型和视图\r\n\r\n**MVC好处**\r\n* 职责单一\r\n* 互不影响有利于分工协作\r\n* 有利于组件重用\r\n\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-44-23.png)\r\n\r\n\r\n### 三层架构\r\n\r\n* 数据访问层:对数据库的CRUD基本操作\r\n* 业务逻辑层:对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能\r\n* 表现层:接收请求，封装数据，调用业务逻辑层，响应数据\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-51-27.png)\r\n\r\n**三层架构项目结构**\r\n\r\n依次分别为：\r\n* 数据访问层\r\n* 业务逻辑层\r\n* 表现层（控制器+视图）\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-58-28.png)\r\n\r\n\r\n### SSM三大框架\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-50-12.png)\r\n\r\n### MVC三层模式与三层架构的区别\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-00-54-22.png)\r\n\r\n### 案例业务逻辑\r\n![](./images/JavaWeb学习笔记/2022-12-03-01-04-10.png)\r\n\r\n## 使用`三层架构`重写登录注册案例\r\n### 项目目录结构\r\n* database 数据访问层\r\n  * `mybatis-config.xml`\r\n  * `mapper` \r\n  * `pojo`\r\n  * `DBSessionPool.java` 单例模式的数据库池\r\n* `service` 业务逻辑层\r\n* `web` 表现层（控制器+视图）\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-01-47-23.png)\r\n\r\n### database数据访问层\r\n`database/DBSessionPool.java`\r\n```java\r\npackage com.webapptest.database;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\npublic class DBSessionPool {// 数据库连接池\r\n    public static SqlSessionFactory sqlSessionFactory=null;\r\n    public static SqlSessionFactory getSqlSessionFactory() {\r\n        if(DBSessionPool.sqlSessionFactory==null){\r\n            // 加载mybatis核心配置文件\r\n            try {\r\n                String resource = \"mybatis-config.xml\";\r\n                InputStream inputStream;\r\n                inputStream = Resources.getResourceAsStream(resource);\r\n                DBSessionPool.sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return DBSessionPool.sqlSessionFactory;\r\n    }\r\n}\r\n\r\n```\r\n\r\n`database/mapper/UserMapper.java`\r\n```java\r\npackage com.webapptest.database.mapper;\r\nimport java.util.List;\r\n\r\nimport org.apache.ibatis.annotations.Insert;\r\nimport org.apache.ibatis.annotations.Param;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport com.webapptest.database.pojo.User;\r\n\r\npublic interface UserMapper {\r\n\r\n    List<User> selectAll();\r\n    \r\n    User selectUserById(int id);\r\n\r\n    @Select(\"select * from tb_user where username = #{username} and password = #{password};\")\r\n    User selectUserByUsernameAndPassword(\r\n        @Param(\"username\") String username,\r\n        @Param(\"password\") String password\r\n    );\r\n\r\n    @Insert(\"INSERT INTO tb_user(id,username,password) values(null,#{username},#{password});\")\r\n    int addUser(User user);\r\n}\r\n```\r\n\r\n`database/mapper/UserMapper.xml`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.webapptest.database.mapper.UserMapper\">  <!-- namespace改为接口类 -->\r\n  <select id=\"selectAll\" resultType=\"com.webapptest.database.pojo.User\">   <!-- id为接口的函数名 -->\r\n    select * from tb_user;\r\n  </select>\r\n  <!-- selectUserById --> \r\n  <select id=\"selectUserById\" resultType=\"com.webapptest.database.pojo.User\">\r\n    select * from tb_user where id = #{id};\r\n  </select>\r\n</mapper>\r\n```\r\n\r\n`../resources/mybatis-config.xml`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n  <environments default=\"development\">\r\n    <environment id=\"development\">\r\n      <transactionManager type=\"JDBC\"/>\r\n      <dataSource type=\"POOLED\">\r\n        <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/> <!-- 填mysql的驱动的路径 -->\r\n        <property name=\"url\" value=\"jdbc:mysql:///db6?useSSL=false&amp;useServerPrepStemts=true\"/>  <!-- 填mysql数据库的路径 -->\r\n        <property name=\"username\" value=\"root\"/>  <!-- 填数据库的username -->\r\n        <property name=\"password\" value=\"root\"/>   <!-- 填数据库的password -->\r\n      </dataSource>\r\n    </environment>\r\n  </environments>\r\n  <mappers>\r\n    <package name=\"com.webapptest.database.mapper\" /> <!-- 使用这种Mapper代理的方式便可以用这种包扫描的写法 -->\r\n  </mappers>\r\n</configuration>\r\n```\r\n\r\n### service业务逻辑层\r\n\r\n`service/UserService.java`\r\n```java\r\npackage com.webapptest.service;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport com.webapptest.database.DBSessionPool;\r\nimport com.webapptest.database.mapper.UserMapper;\r\nimport com.webapptest.database.pojo.User;\r\n\r\npublic class UserService {\r\n    SqlSession session = DBSessionPool.getSqlSessionFactory().openSession(false); // 获取sqlSession\r\n\r\n    // 添加用户\r\n    public boolean addUser(User user){\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n        int affectedRows=0;\r\n        try {\r\n            affectedRows = userMapper.addUser(user);\r\n            if(affectedRows == 1) {\r\n                session.commit(); // 提交事务\r\n                return true;\r\n            }else{\r\n                session.rollback();// 回滚事务\r\n                return false;\r\n            }\r\n        } catch (Exception e) {\r\n            session.rollback();// 回滚事务\r\n            return false;\r\n        } finally {\r\n            session.close();\r\n        }\r\n    }\r\n    public User checkUserExist(String username,String password){// 检查用户是否存在\r\n        UserMapper userMapper = session.getMapper(UserMapper.class);\r\n        return userMapper.selectUserByUsernameAndPassword(username,password);\r\n    }\r\n}\r\n```\r\n\r\n### web表现层（控制器+视图）\r\n\r\n`web/Login.java`\r\n```java\r\npackage com.webapptest.web;\r\n\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n\r\n@WebServlet(urlPatterns = \"/api/login\")\r\npublic class Login extends HttpServlet {\r\n\r\n    UserService userService = new UserService(); // 服务层\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n     \r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\");\r\n        else\r\n            response.getWriter().println(\"登录失败!\");\r\n        \r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n\r\n```\r\n\r\n`web/Register.java`\r\n```java\r\npackage com.webapptest.web;\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n@WebServlet(urlPatterns = \"/api/register\")\r\npublic class Register extends HttpServlet {\r\n    UserService userService = new UserService();\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n\r\n        User user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n\r\n        Boolean result = userService.addUser(user);\r\n\r\n        if(result)\r\n            response.getWriter().println(\"注册成功!\");\r\n        else\r\n            response.getWriter().println(\"注册失败!\");\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n### maven配置\r\n\r\n`pom.xml`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n\r\n  <groupId>com.webapptest</groupId>\r\n  <artifactId>webapptest</artifactId>\r\n  <version>1.1-SNAPSHOT</version>\r\n  <packaging>war</packaging>\r\n  \r\n\r\n  <name>web Maven Webapp</name>\r\n  <!-- FIXME change it to the project's website -->\r\n  <url>http://www.example.com</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n\r\n  <dependencies>\r\n\r\n    <dependency>\r\n      <groupId>javax.servlet.jsp</groupId>\r\n      <artifactId>jsp-api</artifactId>\r\n      <version>2.2.1-b03</version>\r\n      <scope>provided</scope>\r\n    </dependency>\r\n\r\n\r\n    <dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>javax.servlet-api</artifactId>\r\n    <version>3.1.0</version>\r\n    <scope>provided</scope>\r\n  </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>org.mybatis</groupId>\r\n      <artifactId>mybatis</artifactId>\r\n      <version>3.5.11</version>\r\n    </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>mysql</groupId>\r\n      <artifactId>mysql-connector-java</artifactId>\r\n      <version>8.0.31</version>\r\n    </dependency>\r\n\r\n\r\n    <dependency>\r\n      <groupId>org.apache.tomcat</groupId>\r\n      <artifactId>tomcat</artifactId>\r\n      <version>10.1.2</version>\r\n      <type>pom</type>\r\n    </dependency>\r\n\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    \r\n  </dependencies>\r\n\r\n  <build>\r\n    <finalName>web</finalName>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.tomcat.maven</groupId>\r\n        <artifactId>tomcat7-maven-plugin</artifactId>\r\n        <version>2.2</version>\r\n        <configuration>\r\n          <port>8080</port>\r\n          <path>/</path>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>\r\n    \r\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\r\n      <plugins>\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-war-plugin</artifactId>\r\n          <version>3.2.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement>\r\n  </build>\r\n</project>\r\n```\r\n\r\n\r\n### <green>结合反射对web表现层的进一步优化并实现验证码和JSON响应</green>\r\n\r\n**完整代码：**\r\n[webapp_三层架构模板并实现登录注册验证码](./resource/webapp.zip)\r\n\r\n\r\n> 如果任何一个方法都写一个Servelet实现类，代码会变的很臃肿  \r\n> \r\n> 在Web表现层根据请求的URL直接调用service业务逻辑层的方法  \r\n> 自定义BaseServlet，根据浏览器请求的URL路径完成处理函数的调用\r\n\r\n**优化后目录结构**  \r\n![](./images/JavaWeb学习笔记/2022-12-03-23-54-42.png)\r\n\r\n**优化后登录界面及响应结果JSON结果**  \r\n![](./images/JavaWeb学习笔记/2022-12-04-00-12-03.png)\r\n![](./images/JavaWeb学习笔记/2022-12-04-00-11-14.png)\r\n\r\n**优化后注册界面及响应结果JSON结果**  \r\n![](./images/JavaWeb学习笔记/2022-12-04-00-13-49.png)\r\n![](./images/JavaWeb学习笔记/2022-12-04-00-14-03.png)\r\n\r\n`login.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>登录</h2>\r\n    <form action=\"/api/user/login\" method=\"post\">\r\n        userName:<input type=\"text\" name=\"username\"> <br>\r\n        password:<input type=\"password\" name=\"password\"> <br>\r\n        remember:<input type=\"checkbox\" name=\"remember\" value=\"true\"> <br>\r\n        <input type=\"submit\" value=\"登录\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n`register.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>注册</h2>\r\n    <form action=\"/api/user/register\" method=\"post\">\r\n        userName: <input type=\"text\" name=\"username\"> <br>\r\n        password: <input type=\"password\" name=\"password\"> <br>\r\n        VarifyCode: <input type=\"text\" name=\"VarifyCode\" > <br>\r\n        <img src=\"/api/user/getVerifytImage\" alt=\"\" style=\"width: 200px;height: 50px;\"> <br>\r\n        <input type=\"submit\" value=\"注册\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n`BaseServlet.java`\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Method;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class BaseServlet extends HttpServlet {\r\n    @Override\r\n    protected void service(HttpServletRequest req, HttpServletResponse resp) {\r\n        String uriString = req.getRequestURI(); // 获取URI: /user/login\r\n        int supliceIndex = uriString.lastIndexOf(\"/\"); // 找到最后一个/符号的位置\r\n        String methodName = uriString.substring(supliceIndex+1); //获取方法名: login\r\n\r\n        try {// 通过反射获取这个方法,并执行这个方法\r\n            Method method = this.getClass().getDeclaredMethod(methodName,HttpServletRequest.class,HttpServletResponse.class);\r\n            method.invoke(this, req,resp);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(\"BaseServlet的service被调用了\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n`UserServlet.java`\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\nimport com.webapptest.utils.CheckCodeUtil;\r\n\r\n// 当浏览器访问 /api/user/login 时，\r\n// 会由 BaseServlet 的 service 函数 找到子类的 login 这个函数,然后执行他\r\n@WebServlet(\"/api/user/*\")\r\npublic class UserServlet extends BaseServlet{\r\n    UserService userService = new UserService(); // 服务层\r\n    public void login(HttpServletRequest request,HttpServletResponse response ) throws IOException{\r\n\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n     \r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n        ResponseData responseData = new ResponseData();\r\n        if(user!=null){\r\n            responseData.setStatus(1);\r\n            responseData.setMsg(\"登录成功!\");\r\n            user.setPassword(null);// 清除密码信息\r\n            responseData.setData(user);// 把user对象传递过去\r\n        }\r\n        else{\r\n            responseData.setStatus(0);\r\n            responseData.setMsg(\"登录失败!\");\r\n        }\r\n        response.getWriter().write(JSON.toJSONString(responseData));// 响应数据\r\n\r\n        System.out.println(\"UserServlet的login被调用了\");\r\n    }\r\n    // 获取注册用户时需要的验证码图片\r\n    public void getVerifytImage(HttpServletRequest request,HttpServletResponse response) throws IOException{\r\n        // 生成5位的随机验证码，并保存到session中\r\n        String VarifyCode = CheckCodeUtil.generateVerifyCode(5);\r\n        request.getSession().setAttribute(\"VarifyCode\", VarifyCode);\r\n        // 生成图片返回给浏览器\r\n        CheckCodeUtil.outputImage(200, 50, response.getOutputStream(), VarifyCode);\r\n        System.out.println(\"UserServlet的getVerifytImage被调用了\");\r\n    }\r\n    // 注册用户\r\n    public void register(HttpServletRequest request,HttpServletResponse response) throws IOException{\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String VarifyCode = request.getParameter(\"VarifyCode\"); // 从浏览器得到的VarifyCode\r\n        String VarifyCode_inSession = (String) request.getSession().getAttribute(\"VarifyCode\");// 从session中获得的VarifyCode\r\n\r\n        User user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n\r\n        ResponseData responseData = new ResponseData();\r\n\r\n        if( VarifyCode.equalsIgnoreCase(VarifyCode_inSession) == false) // 忽略大小写的比对\r\n        {\r\n            responseData.setStatus(1);\r\n            responseData.setMsg(\"注册失败!,验证码错误。\");\r\n            response.getWriter().write(JSON.toJSONString(responseData));\r\n            return;\r\n        }\r\n\r\n        Boolean result = userService.addUser(user);\r\n\r\n        if(result){\r\n            responseData.setStatus(1);\r\n            responseData.setMsg(\"注册成功!\");\r\n        }\r\n        else{\r\n            responseData.setStatus(0);\r\n            responseData.setMsg(\"注册失败!\");\r\n        }\r\n        response.getWriter().write(JSON.toJSONString(responseData));\r\n    \r\n        System.out.println(\"UserServlet的register被调用了\");\r\n    }\r\n    private class ResponseData{\r\n        int status;\r\n        String msg;\r\n        Object data;\r\n        public int getStatus() {\r\n            return status;\r\n        }\r\n        public void setStatus(int status) {\r\n            this.status = status;\r\n        }\r\n        public String getMsg() {\r\n            return msg;\r\n        }\r\n        public void setMsg(String msg) {\r\n            this.msg = msg;\r\n        }\r\n        public Object getData() {\r\n            return data;\r\n        }\r\n        public void setData(Object data) {\r\n            this.data = data;\r\n        }\r\n        \r\n    } \r\n}\r\n```\r\n\r\n\r\n\r\n## Fastjson：JSON 数据和 Java 对象转换\r\nFastjson是阿里巴巴提供的一个Java语言编写的高性能功能完善的JSON库，是目前Java语言中最快的JSON库，可以实现Java对象和JSON字符串的相互转换。\r\n\r\n```xml\r\n<dependency>\r\n  <groupld>com.alibaba</groupld>\r\n  <artifactld>fastjson</artifactld>\r\n  <version>1.2.62</version>\r\n</dependency>\r\n```\r\n```java\r\nUser user = new User();\r\nuser.setUsername(\"admin\");\r\nuser.setPassword(\"123456\");\r\n\r\n// 将java对象 转 json字符串\r\nString jsonStr = JSON.toJSONString(obj);\r\n\r\n// 将json字符串 转 java对象\r\nUser user = JSON.parseObject(jsonStr,User.class);\r\n```\r\n\r\n\r\n## Cookie、Session会话跟踪技术\r\n\r\n> 简单来说，就是用来解决http协议无状态性的，  \r\n> 用来让服务端与客户端能在多次请求间共享数据  \r\n> 可以让服务端能够识别两次不同的请求是否为同一身份的用户  \r\n> 可用来做身份验证  \r\n\r\n**实现方式**:\r\n1. 客户端会话跟踪技术:Cookie\r\n2. 服务端会话跟踪技术:Session\r\n\r\n\r\n### Cookie\r\n#### Cookie基本使用和原理\r\n\r\n**在服务端`发送`cookie**\r\n\r\n> 服务端发送 cookie 给浏览器 基于http协议，  \r\n> 保存在响应头的setCookie字段中   \r\n> 浏览器会自动保存cookie\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-02-48-28.png)\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-02-56-37.png)\r\n\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/getCookie\")\r\npublic class GetCookie extends HttpServlet{\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        // 发送cookie \r\n        resp.addCookie(new Cookie(\"key\", \"value\"));\r\n    }\r\n}\r\n```\r\n\r\n**在服务端`接收`cookie**\r\n\r\n> 浏览器发送 cookie 给服务器 基于http协议，  \r\n> 保存在请求头的Cookie字段中   \r\n> 浏览器会自动发送cookie\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-02-55-20.png)\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-02-52-19.png)\r\n\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/sendCookie\")\r\npublic class SendCookie extends HttpServlet{\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        Cookie[] cookies = req.getCookies();\r\n        for (Cookie cookie : cookies) {\r\n            System.out.println(cookie.getName()+\":\"+cookie.getValue());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Cookie存活时间\r\n\r\n\r\n**`cookie`存活时间**\r\n* 默认情况下，服务端发来的cookie，浏览器会保存在内存中，浏览器关闭后cookie销毁\r\n* 服务端可以通过`setMaxAge(int seconds)`设置发送的cookie的存活时间\r\n  * 正数：将cookie存入浏览器所在电脑`硬盘`，持久化存储，`过期自动销毁`\r\n  * 0：`即刻删除`浏览器所在电脑中对应字段的值\r\n  * 负数：默认值，存入浏览器所在电脑的`内存`，`关闭浏览器后自动销毁`\r\n\r\n**Cookie默认不支持存储中文**\r\n* 但可在发送是使用URL来编码，收到后再编码会中文\r\n\r\n#### Cookie发送中文\r\n\r\n**发送中文**\r\n![](./images/JavaWeb学习笔记/2022-12-03-03-17-31.png)\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/getCookie\")\r\npublic class GetCookie extends HttpServlet{\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        // 发送cookie \r\n        Cookie cookie = new Cookie(\"key\", URLEncoder.encode(\"中文\", StandardCharsets.UTF_8));\r\n        cookie.setMaxAge(3600);// 设置过期时间\r\n        resp.addCookie(cookie);\r\n    }\r\n}\r\n```\r\n\r\n\r\n**接收中文**\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-03-21-56.png)\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebServlet(\"/api/sendCookie\")\r\npublic class SendCookie extends HttpServlet{\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        Cookie[] cookies = req.getCookies();\r\n        for (Cookie cookie : cookies) {\r\n            System.out.println(cookie.getName()+\":\"+URLDecoder.decode(cookie.getValue(), StandardCharsets.UTF_8));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Session\r\n> Session 是基于 Cookie 实现的\r\n>\r\n> 原理理解：浏览器第一次访问服务器后，服务器会为这个会话创建一个Session对象，存放在内存中，在这个Session对象中能够存储键值对信息，而后，服务器响应浏览器，并在响应头的Cookie中附带这个SessionID,浏览器第二次访问服务器时，会在响应头的Cookie字段中自动携带这个SessionID，服务器通过这个SessionID去内存中寻找这个Session，就能获取到上一次在Session中存储的信息\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-03-38-49.png)\r\n\r\n> 浏览器第一次访问服务器时，服务器自动创建Session对象并在响应头中携带该Session的ID\r\n![](./images/JavaWeb学习笔记/2022-12-03-03-56-22.png)\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\n@WebServlet(\"/api/GetSession\")\r\npublic class GetSession extends HttpServlet{\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        HttpSession session = req.getSession();\r\n        System.out.println(session.getAttribute(\"测试\"));\r\n    }\r\n}\r\n```\r\n\r\n> 浏览器第二次访问服务器时，浏览器自动通过Cookie携带Session的ID，服务器根据该SessionID从内存中找出该Session\r\n![](./images/JavaWeb学习笔记/2022-12-03-03-57-03.png)\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\n\r\n@WebServlet(\"/api/SendSession\")\r\npublic class SendSession extends HttpServlet{\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        HttpSession session = req.getSession();\r\n        session.setAttribute(\"测试\", \"Session测试\");\r\n    }\r\n}\r\n```\r\n\r\n#### Session的钝化与活化\r\n服务器重启后，Session中的数据是否还在?\r\n* 钝化:在服务器`正常关闭`后，Tomcat会自动将Session数据写入硬盘的文件中(对象序列化)\r\n* 活化:再次启动服务器后，从文件中加载数据到Session中,然后文件会被删除\r\n\r\n#### Session在浏览器的生命周期\r\n> * 默认为关闭浏览器窗口便自动销毁。  \r\n> * 若生命周期有延长，需在服务端指定\r\n\r\n#### Session在服务端的生命周期\r\n> 默认为30分钟，可在web.xml 或tomcat的默认配置文件中修改\r\n```java\r\n<!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \r\n\"http://java.sun.com/dtd/web-app_2_3.dtd\">\r\n\r\n<web-app>\r\n  <display-name>Archetype Created Web Application</display-name>\r\n  <session-config>\r\n    <session-timeout>30</session-timeout>\r\n  </session-config>\r\n</web-app>\r\n```\r\n\r\n> **手动销毁**\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\n\r\n@WebServlet(\"/api/GetSession\")\r\npublic class GetSession extends HttpServlet{\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        HttpSession session = req.getSession();\r\n        session.invalidate();// 销毁该session\r\n        System.out.println(session.getAttribute(\"测试\"));\r\n    }\r\n}\r\n```\r\n\r\n### 实现登录记住我功能:通过Cookie实现\r\n\r\n> 在页面中提供记住我remember选项\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>登录</h2>\r\n    <form action=\"/api/login\" method=\"post\">\r\n        userName:<input type=\"text\" name=\"username\"> <br>\r\n        password:<input type=\"password\" name=\"password\"> <br>\r\n        remember:<input type=\"checkbox\" name=\"remember\" value=\"true\"> <br>\r\n        <input type=\"submit\" value=\"登录\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n> 处理登录业务，同时处理remember业务逻辑，打钩则生成cookie，发送给客户端\r\n```java\r\npackage com.webapptest.web;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n\r\n@WebServlet(urlPatterns = \"/api/login\")\r\npublic class Login extends HttpServlet {\r\n\r\n    UserService userService = new UserService(); // 服务层\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String remember = request.getParameter(\"remember\");\r\n     \r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n//---------------------------------------------------------------------------------\r\n        if(user!=null){\r\n            response.getWriter().println(\"登录成功!\");\r\n            if(\"true\".equals(remember)){ // 如果需要记住客户端，\r\n                Cookie cusername = new Cookie(\"username\",URLEncoder.encode(username,StandardCharsets.UTF_8));  // 用户名密码，统一URL编码\r\n                Cookie cpassword = new Cookie(\"password\",URLEncoder.encode(password,StandardCharsets.UTF_8));  // 用户名密码，统一URL编码\r\n                cusername.setMaxAge(60*60*24);\r\n                cpassword.setMaxAge(60*60*24);\r\n                cusername.setPath(\"/\"); // 作用域\r\n                cpassword.setPath(\"/\"); // 作用域\r\n                response.addCookie(cusername);\r\n                response.addCookie(cpassword);\r\n            }\r\n        }\r\n//---------------------------------------------------------------------------------\r\n        else\r\n            response.getWriter().println(\"登录失败!\");\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n\r\n> 后续的登录逻辑，用户访问`/login`如果能从用户的cookie中找到用户名密码，直接登录，否则内部跳转到`/login.html`页面\r\n```java\r\npackage com.webapptest.web;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n\r\n@WebServlet(urlPatterns = \"/login\")\r\npublic class Login_Rdirector extends HttpServlet {\r\n\r\n    UserService userService = new UserService(); // 服务层\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n        String username=null;\r\n        String password=null;\r\n\r\n//---------------------------------------------------------------------------------\r\n        Cookie[] cookies = request.getCookies(); // 从客户端cookie中提取用户名和密码信息\r\n        for (Cookie cookie : cookies) {\r\n            if(cookie.getName().equals(\"username\"))\r\n                username = URLDecoder.decode(cookie.getValue(), StandardCharsets.UTF_8); // 解码URL用户名\r\n            if(cookie.getName().equals(\"password\"))\r\n                password = URLDecoder.decode(cookie.getValue(), StandardCharsets.UTF_8); // 解码URL密码\r\n        }\r\n//---------------------------------------------------------------------------------\r\n\r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\"); // 如果存在，直接回复登陆成功\r\n        else\r\n            request.getRequestDispatcher(\"/login.html\").forward(request, response);  // 如果不存在，内部流转到登录页面   \r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n### 实现登录记住我功能:通过Session实现\r\n\r\n```java\r\npackage com.webapptest.web;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n\r\n@WebServlet(urlPatterns = \"/login\")\r\npublic class Login_Rdirector extends HttpServlet {\r\n\r\n    UserService userService = new UserService(); // 服务层\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n//---------------------------------------------------------------------------------\r\n        HttpSession httpSession = request.getSession();\r\n        String username=( String ) httpSession.getAttribute(\"username\");\r\n        String password=( String ) httpSession.getAttribute(\"password\");\r\n//---------------------------------------------------------------------------------\r\n\r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\"); // 如果存在，直接回复登陆成功\r\n        else\r\n            request.getRequestDispatcher(\"/login.html\").forward(request, response);  // 如果不存在，内部流转到登录页面   \r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npackage com.webapptest.web;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.Cookie;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n\r\n@WebServlet(urlPatterns = \"/login\")\r\npublic class Login_Rdirector extends HttpServlet {\r\n\r\n    UserService userService = new UserService(); // 服务层\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n//---------------------------------------------------------------------------------\r\n        HttpSession httpSession = request.getSession();\r\n        String username=( String ) httpSession.getAttribute(\"username\");\r\n        String password=( String ) httpSession.getAttribute(\"password\");\r\n//---------------------------------------------------------------------------------\r\n\r\n        System.out.println(username);\r\n        System.out.println(password);\r\n\r\n        // 调用服务层，检查用户存在\r\n        User user = userService.checkUserExist(username, password);\r\n\r\n        if(user!=null)\r\n            response.getWriter().println(\"登录成功!\"); // 如果存在，直接回复登陆成功\r\n        else\r\n            request.getRequestDispatcher(\"/login.html\").forward(request, response);  // 如果不存在，内部流转到登录页面   \r\n    }\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n### 实现注册用户验证码的案例\r\n\r\n![](./images/JavaWeb学习笔记/2022-12-03-14-46-47.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-14-47-34.png)\r\n![](./images/JavaWeb学习笔记/2022-12-03-14-47-45.png)\r\n\r\n**登录界面**\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <h2>注册</h2>\r\n    <form action=\"/api/register\" method=\"post\">\r\n        userName: <input type=\"text\" name=\"username\"> <br>\r\n        password: <input type=\"password\" name=\"password\"> <br>\r\n        <!-- --------------------------------------------------------------------- -->\r\n        VarifyCode: <input type=\"text\" name=\"VarifyCode\" > \r\n        <img src=\"/api/GetVarifyCodeImg\" alt=\"\" style=\"width: 200px;height: 50px;\">\r\n        <!-- --------------------------------------------------------------------- -->\r\n        <input type=\"submit\" value=\"注册\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n**获取验证码图片**\r\n\r\n> 核心操作生成验证码图片返回给服务端  \r\n> 并且要把验证码存取在服务端的session中\r\n```java\r\npackage com.webapptest.web;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport com.webapptest.utils.CheckCodeUtil;\r\n\r\n@WebServlet(\"/api/GetVarifyCodeImg\")\r\npublic class GetVarifyCodeImg extends HttpServlet{\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        // 生成5位的随机验证码，并保存到session中\r\n        String VarifyCode = CheckCodeUtil.generateVerifyCode(5);\r\n        req.getSession().setAttribute(\"VarifyCode\", VarifyCode);\r\n        // 生成200x50的图片，通过输出流返回给浏览器\r\n        CheckCodeUtil.outputImage(200, 50, resp.getOutputStream(), VarifyCode);\r\n    }\r\n}\r\n```\r\n\r\n重写`/api/register.java`\r\n\r\n> 要将session中的验证码和客户端收到的验证码进行比对\r\n\r\n```java\r\npackage com.webapptest.web;\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\n\r\nimport com.webapptest.database.pojo.User;\r\nimport com.webapptest.service.UserService;\r\n\r\n@WebServlet(urlPatterns = \"/api/register\")\r\npublic class Register extends HttpServlet {\r\n    UserService userService = new UserService();\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n        request.setCharacterEncoding(\"UTF-8\");\r\n        response.setCharacterEncoding(\"UTF-8\");\r\n        response.setContentType(\"text/html;charset=utf-8\");\r\n\r\n        \r\n        String username = request.getParameter(\"username\");\r\n        String password = request.getParameter(\"password\");\r\n        String VarifyCode = request.getParameter(\"VarifyCode\"); // 从浏览器得到的VarifyCode\r\n\r\n        // 从session中获得的VarifyCode\r\n        String VarifyCode_inSession = (String) request.getSession().getAttribute(\"VarifyCode\");\r\n\r\n         // 忽略大小写的比对\r\n        if( VarifyCode.equalsIgnoreCase(VarifyCode_inSession) == false)\r\n        {\r\n            response.getWriter().println(\"注册失败!,验证码错误。\");\r\n            return;\r\n        }\r\n\r\n        User user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n\r\n        Boolean result = userService.addUser(user);\r\n\r\n        if(result)\r\n            response.getWriter().println(\"注册成功!\");\r\n        else\r\n            response.getWriter().println(\"注册失败!\");\r\n    }\r\n\r\n    @Override\r\n    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        this.doGet(req, resp);\r\n    }\r\n}\r\n```\r\n\r\n**生成验证码图片的工具类**\r\n\r\n> [CheckCodeUtil.java](./Utils/CheckCodeUtil.java)\r\n\r\n## Filter\r\n\r\n**概念**  \r\nFilter表示过滤器，是JavaWeb三大组件(Servlet、Filter、Listener)之一。\r\n\r\n**拦截资源路径**  \r\n* `Filter`拦截资源路径`@WebFilter(\"/*\")`\r\n* 具体资源: `/index.jsp`:只有访问`index.jsp`时才会被拦截。\r\n* 目录拦截:`/user/*`:访问`/user`下的所有资源，都会被拦截\r\n* 后缀名: `*jsp`:访问`后缀名为jsp`的资源，都会被拦截\r\n* 拦截所有:`/*`:访问`所有`资源，都会被拦截\r\n\r\n**注解的优先级**  \r\n注解配置的Filter，优先级按照过滤器类名(字符串)的排序\r\n\r\n\r\n> 过滤器链执行流程\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-17-16-31.png)\r\n> ![](./images/JavaWeb学习笔记/2022-12-03-19-48-49.png)\r\n\r\n```java\r\npackage com.webapptest.web.filter;\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.Filter;\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.FilterConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.annotation.WebFilter;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n@WebFilter(\"/login\")\r\npublic class GolbleFilter implements Filter {\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\r\n    throws IOException, ServletException\r\n    {\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest)request;\r\n\r\n        // 1.放行前，对request中的数据进行预处理\r\n        // 此处可对 httpServletRequest 处理\r\n\r\n        // 2. 放行，转交给下一个过滤器，如果已经是最后一个过滤器，则交给实际的Servlet的处理函数\r\n        chain.doFilter(request, response);\r\n\r\n        HttpServletResponse httpServletResponse = (HttpServletResponse)response;\r\n        // 3. 此时拿到的 response 是经过 过滤器和实际Servlet处理函数处理过的response\r\n        // 此处可对 httpServletResponse 处理\r\n    }\r\n    @Override\r\n    public void destroy() {\r\n    }\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n    }\r\n}\r\n```\r\n\r\n## Listener\r\n\r\n**概念**  \r\nListener表示监听器，是JavaWeb三大组件(Servlet、Filter、Listener)之一\r\n\r\n> 监听器可以监听就是在`application`,`session`,`request`三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件\r\n\r\n**Listener分类**  \r\nJavaWeb中提供了8个监听器   \r\n![](./images/JavaWeb学习笔记/2022-12-03-20-13-53.png)\r\n\r\n**基本使用**\r\n```java\r\npackage com.webapptest.web.filter.listener;\r\n\r\nimport javax.servlet.ServletContextEvent;\r\nimport javax.servlet.ServletContextListener;\r\nimport javax.servlet.annotation.WebListener;\r\n\r\n@WebListener // 记得加注解\r\npublic class ServeletAppListener implements ServletContextListener { // 类名任意，关键是要实现接口，添加注解\r\n    @Override\r\n    public void contextInitialized(ServletContextEvent sce) {\r\n        System.out.println(\"ServeletApp启动了......\");\r\n    }\r\n    @Override\r\n    public void contextDestroyed(ServletContextEvent sce) {\r\n        System.out.println(\"ServeletApp关闭了......\");\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n<style>\r\n    gold{\r\n        color:black;\r\n        background-color:gold;\r\n    }\r\n    green{\r\n        color:white;\r\n        background-color:green;\r\n    }\r\n    warn{\r\n        color:white;\r\n        background-color:red;\r\n    }\r\n</style>"}