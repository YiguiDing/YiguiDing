{"shortInfo":{"cover":"/self_server/assets/images/《数据结构与算法分析》学习笔记/cover.png","coverWidth":813,"coverHeight":539,"title":"《数据结构与算法分析》第1章_1.3递归简论","date":"2022-05-24T02:34:27.000Z","modified":"2022-05-26T21:32:23.529Z","tags":["《数据结构与算法分析》","笔记"],"hideAtIndex":true,"categories":"笔记","id":56,"countWords":374,"readSeconds":37.4,"assetsbaseUrl":"/self_server/assets/"},"content":"# 第1章_1.3递归简论\r\n## 1.3递归简论\r\n* 有时候数学函数以不太标准的形式来定义\r\n* 当一个函数用它自己来定义时就称为是递归（recursive）\r\n  + f(x)=1 while x==0;\r\n  + f(x)=x*f(x-1) else;\r\n* 编写递归代码的四条基本法则：\r\n  1. 基准情形。必须总有某些基准情形，它无须递归就能解出。\r\n  2. 不断推进。对于那些需要递归求解的情形，每一次递归调用都必须要使求解状况朝接近基准情形的方向推进。\r\n  3. 设计法则。假设所有的递归调用都能运行。\r\n  4. 合成效益法则( compound interest rule)。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。\r\n\r\n## 示例程序1\r\n\r\n```c\r\nint func(int x)\r\n{\r\n  if(x==0) return 1;  //处理基准情况\r\n  else return x*func(x-1); //执行递归调用 且向基准情形推进\r\n}\r\n```\r\n\r\n## 示例程序2\r\n* 注意，以下代码是低效的，mod操作的耗费很大，因为 N%10=N-(N/10)*10\r\n```c\r\nvoid printNum(int num)\r\n{\r\n  if(num>=10) printNum(num/10);\r\n  putchar(num%10+'0');\r\n}\r\n```\r\n\r\n## 练习题\r\n* 1.3 只使用处理I/O的PrintDigit函数，编写一个程序以输出任意实数(可以是负的)。\r\n```c\r\nvoid printNum(int num)\r\n{\r\n  if(num<0)\r\n  {\r\n    putchar('-');\r\n    num=-num;\r\n  }\r\n  if(num>=10)\r\n    printNum(num/10);\r\n  putchar(num%10);\r\n\r\n}\r\n```\r\n\r\n* 运行结果 ![](./images/《数据结构与算法分析》学习笔记/Clipboard_2022-05-24-19-49-04.png)\r\n\r\n\r\n"}