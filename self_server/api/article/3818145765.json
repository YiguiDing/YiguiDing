{"shortInfo":{"title":"Electron19","date":"2022-11-19T12:12:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["笔记"],"categories":"笔记","id":3818145765,"countWords":5304,"readSeconds":530.4,"assetsbaseUrl":"/self_server/assets/"},"content":"# Electron 19\r\n \r\n## 目录\r\n- [Electron 19](#electron-19)\r\n  - [目录](#目录)\r\n  - [1、什么是 Electron](#1什么是-electron)\r\n  - [2、Electron 初探](#2electron-初探)\r\n    - [2.1 常见的桌面GUI工具介绍](#21-常见的桌面gui工具介绍)\r\n    - [2.2 桌面端设计与开发要点](#22-桌面端设计与开发要点)\r\n    - [2.3 初始化项目 + 项目依赖介绍](#23-初始化项目--项目依赖介绍)\r\n  - [3、Electron 核心概念](#3electron-核心概念)\r\n    - [3.1 Electron 主进程与渲染进程](#31-electron-主进程与渲染进程)\r\n    - [3.2 主进程事件生命周期](#32-主进程事件生命周期)\r\n    - [3.3 渲染进程如何使用 Node 模块](#33-渲染进程如何使用-node-模块)\r\n    - [3.5 主进程与渲染进程通信](#35-主进程与渲染进程通信)\r\n      - [3.5.1 index.html](#351-indexhtml)\r\n      - [3.5.2 renderer.js](#352-rendererjs)\r\n      - [3.5.3 main.js](#353-mainjs)\r\n  - [4、主进程](#4主进程)\r\n    - [4.1 App](#41-app)\r\n      - [4.1.1 事件](#411-事件)\r\n        - [4.1.1.1 before-quit](#4111-before-quit)\r\n        - [4.1.1.2 browser-window-blur](#4112-browser-window-blur)\r\n        - [4.1.1.3 browser-window-focus](#4113-browser-window-focus)\r\n      - [4.1.2 方法](#412-方法)\r\n        - [4.1.2.1 app.quit()](#4121-appquit)\r\n        - [4.1.2.2 app.getPath(name)](#4122-appgetpathname)\r\n    - [4.2 BrowserWindow](#42-browserwindow)\r\n      - [4.2.1 实例方法](#421-实例方法)\r\n      - [4.2.2 优雅的显示窗口](#422-优雅的显示窗口)\r\n      - [4.2.3 父子窗口](#423-父子窗口)\r\n      - [4.2.4 无边框窗口](#424-无边框窗口)\r\n      - [4.2.5 属性与方法](#425-属性与方法)\r\n        - [4.2.5.1 minWidth \\&\\& minHeight](#4251-minwidth--minheight)\r\n        - [4.2.5.2 窗口焦点事件](#4252-窗口焦点事件)\r\n        - [4.2.5.3 静态方法](#4253-静态方法)\r\n        - [4.2.5.4 实例方法](#4254-实例方法)\r\n      - [4.2.6 state](#426-state)\r\n      - [4.2.7 webContents](#427-webcontents)\r\n        - [4.2.7.1 方法 getAllWebContents(）\\*](#4271-方法-getallwebcontents)\r\n        - [4.2.7.2 实例事件](#4272-实例事件)\r\n        - [4.2.7.3 实例方法](#4273-实例方法)\r\n    - [4.3 dialog - 对话框](#43-dialog---对话框)\r\n    - [4.4 快捷键+系统快捷键](#44-快捷键系统快捷键)\r\n    - [4.5 Menu](#45-menu)\r\n      - [4.5.1 index.html](#451-indexhtml)\r\n      - [4.5.2 main.js](#452-mainjs)\r\n      - [4.5.3 mainMenu.js](#453-mainmenujs)\r\n    - [4.6 Context Menus](#46-context-menus)\r\n      - [4.6.1 index.html](#461-indexhtml)\r\n      - [4.6.2 main.js](#462-mainjs)\r\n    - [4.7 Tray (托盘)](#47-tray-托盘)\r\n      - [4.7.1 main.js](#471-mainjs)\r\n  - [5、渲染进程](#5渲染进程)\r\n    - [5.1 clipboard](#51-clipboard)\r\n      - [5.1.1 `readText()`](#511-readtext)\r\n      - [5.1.2 `writeText(text)`](#512-writetexttext)\r\n    - [5.2 contextBridge](#52-contextbridge)\r\n    - [5.3 desktopCapturer](#53-desktopcapturer)\r\n    - [5.4 ipcRenderer](#54-ipcrenderer)\r\n    - [5.5 nativeImage](#55-nativeimage)\r\n      - [5.5.1 支持的格式](#551-支持的格式)\r\n      - [5.5.2 高分辨率图像](#552-高分辨率图像)\r\n      - [5.5.3 方法](#553-方法)\r\n      - [5.5.4 Class: NativeImage](#554-class-nativeimage)\r\n\r\n\r\n\r\n## 1、什么是 Electron\r\n\r\n参见 PPT。\r\n\r\n## 2、Electron 初探\r\n\r\n### 2.1 常见的桌面GUI工具介绍\r\n\r\n| 名称     | 语音   | 优点                     | 缺点                     |\r\n| -------- | ------ | ------------------------ | ------------------------ |\r\n| `QT`       | C++    | `跨平台、性能好、生态好`   | `依赖多，程序包大`         |\r\n| PyQT     | Python | 底层集成度高、易上手     | 授权问题                 |\r\n| WPF      | C#     | 类库丰富、扩展灵活       | 只支持Windows，程序包大  |\r\n| WinForm  | C#     | 性能好，组件丰富，易上手 | 只支持Windows，UI差      |\r\n| Swing    | Java   | 基于AWT，组件丰富        | 性能差，UI一般           |\r\n| `NW.js`    | JS     | 跨平台性好，界面美观     | 底层交互差、性能差，包大 |\r\n| `Electron` | JS     | 相比NW发展更好           | `底层交互差、性能差，包大` |\r\n| CEF      | C++    | 性能好，灵活集成，UI美观 | 占用资源多，包大         |\r\n\r\n- 底层依赖 + 调用:CEF、QT、Swing\r\n- UI美观:Electron（NW.js）、PyQT\r\n- 跨平台:Swing（JAVA）、PyQT（Python、C++）、Electron（前端）\r\n\r\n技术是为业务服务的，选择合适的最重要！\r\n\r\n### 2.2 桌面端设计与开发要点\r\n\r\n1、UX/UI设计概念\r\n\r\n**UX设计:** UX（User Experience）即用户体验，其核心是用户，体验指用户在使用产品以及与产品发生交互时出现的主观感受和需求满足。\r\n\r\n**UI设计:** UI（User Interface）使用者界面，可以说是 UX 设计的一部分，其中重要的**图形化或者可视化**部分，都是由 UI 设计来完成的。\r\n\r\n2、核心原则\r\n\r\n简单易用。\r\n\r\n3、通用原则\r\n\r\n交互简单:上手就会，一看就懂\r\n\r\n风格统一:菜单、导航、按钮反馈、颜色、预知提示\r\n\r\n认知一致:名词、友好提示、划分信息、突出展示\r\n\r\n4、桌面端设计\r\n\r\n保持与PC端统一的风格设计与交互设计。\r\n\r\n加入定制的菜单与专业操控设计。\r\n\r\n减少资源加载。\r\n\r\n### 2.3 初始化项目 + 项目依赖介绍\r\n\r\n1、Electron 官网\r\n\r\nhttps://www.electronjs.org/\r\n\r\n2、初始化一个项目\r\n\r\n```\r\nfelixlu electron $ npm init -y\r\n```\r\n\r\n```\r\nnpm i electron -D\r\n```\r\n\r\n3、配置启动脚本\r\n\r\n在 package.json 里配置 npm 脚本:\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"start\": \"electron .\"\r\n  },\r\n}\r\n```\r\n\r\n4、创建入口文件\r\n\r\n- 在项目根目录下创建文件 index.html:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Electron Demo</title>\r\n</head>\r\n<body>\r\n  hello Electron\r\n</body>\r\n</html>\r\n```\r\n\r\n- 在项目根目录下创建 index.js 文件，这是程序的入口文件:\r\n\r\n```js\r\nconst { app } = require('electron')\r\n\r\n// 主进程\r\nconst createWindow = () => {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600\r\n  })\r\n\r\n  win.loadFile('index.html')\r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n```\r\n\r\n\r\n\r\n## 3、Electron 核心概念\r\n\r\n### 3.1 Electron 主进程与渲染进程\r\n\r\n**主进程:** 启动项目时运行的 main.js 脚本就是我们说的主进程。在主进程运行的脚本可以以创建 Web 页面的形式展示 GUI。**主进程只有一个**。\r\n\r\n**渲染进程:** 每个 Electron 的页面都在运行着自己的进程，这样的进程称之为渲染进程（基于Chromium的多进程结构）。\r\n\r\n![image-20220622220437989](./images/image-20220622220437989.png)\r\n\r\n主进程使用 BrowserWindow 创建实例，主进程销毁后，对应的渲染进程回被终止。主进程与渲染进程通过 IPC 方式（事件驱动）进行通信。\r\n\r\n### 3.2 主进程事件生命周期\r\n\r\n> main process modules/app/event:https://www.electronjs.org/zh/docs/latest/api/app\r\n\r\n```js\r\napp.on('window-all-closed', () => {\r\n  console.log('window-all-closed')\r\n  // 对于 MacOS 系统 -> 关闭窗口时，不会直接推出应用\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})\r\n\r\napp.on('quit', () => {\r\n  console.log('quit')\r\n})\r\n\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n  // 在MacOS下，当全部窗口关闭，点击 dock 图标，窗口再次打开。\r\n  app.on('activate', () => {\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      createWindow()\r\n    }\r\n  })\r\n})\r\n```\r\n\r\n### 3.3 渲染进程如何使用 Node 模块\r\n\r\n**1、通过 webPreferences/nodeIntegration**\r\n\r\n```js\r\nconst win = new BrowserWindow({\r\n  width: 800,\r\n  height: 400,\r\n  webPreferences: {\r\n  \tnodeIntegration: true,\r\n  \tcontextIsolation: false\r\n  }\r\n})\r\n```\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Electron Demo</title>\r\n  <script src=\"https://unpkg.com/vue@next\"></script>\r\n</head>\r\n<body>\r\n  <h1>\r\n    hello Electron\r\n  </h1>\r\n  <div id=\"root\">\r\n    <p>electronVersion: {{electronVersion}}</p>\r\n    <p>nodeVersion: {{nodeVersion}}</p>\r\n    <p>chromeVersion: {{chromeVersion}}</p>\r\n  </div>\r\n  <script>\r\n    // const path = require('path')\r\n    // console.log(path)\r\n    const app = Vue.createApp({\r\n      data() {\r\n        return {\r\n          electronVersion: process.versions.electron,\r\n          nodeVersion: process.versions.node,\r\n          chromeVersion: process.versions.chrome\r\n        }\r\n      }\r\n    })\r\n    app.mount('#root')\r\n  </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n**2、通过 webPreferences/preload 实现**\r\n\r\n```js\r\nconst win = new BrowserWindow({\r\n    width: 800,\r\n    height: 400,\r\n    webPreferences: {\r\n      // 在启动应用时在渲染进程里预加载 js\r\n      preload: path.join(__dirname, './preload-js/index.js')\r\n    }\r\n  })\r\n```\r\n\r\n```js\r\n// preload-js/index.js\r\n\r\n// const { contextBridge } = require('electron')\r\n// contextBridge.exposeInMainWorld('myAPI', {\r\n//  desktop: true\r\n// })\r\n\r\nconst { createApp } = require('vue')\r\nwindow.addEventListener('load', () => {\r\n  const app = createApp({\r\n    data() {\r\n      return {\r\n        electronVersion: process.versions.electron,\r\n        nodeVersion: process.versions.node,\r\n        chromeVersion: process.versions.chrome\r\n      }\r\n    }\r\n  })\r\n  app.mount('#root')\r\n})\r\n```\r\n\r\n**3、代码改造**\r\n\r\n```js\r\n// index.js\r\n win.loadFile('./renderer/index.html')\r\n```\r\n\r\n```html\r\n<!-- renderer/index.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <!-- <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self';\"> -->\r\n  <title>Electron Demo</title>\r\n  <script src=\"./vue.global.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>hello Electron</h1>\r\n  <div id=\"root\"></div>\r\n  <script src=\"./main.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n```js\r\n// renderer/main.js\r\nconst app = Vue.createApp({\r\n  template: `\r\n    <p>electronVersion: {{electronVersion}}</p>\r\n    <p>nodeVersion: {{nodeVersion}}</p>\r\n    <p>chromeVersion: {{chromeVersion}}</p>\r\n  `,\r\n  data() {\r\n    return {\r\n      electronVersion: process.versions.electron,\r\n      nodeVersion: process.versions.node,\r\n      chromeVersion: process.versions.chrome\r\n    }\r\n  }\r\n})\r\napp.mount('#root')\r\n```\r\n\r\n```html\r\n<!-- 配置CSP -->\r\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline'\">\r\n```\r\n\r\n```js\r\n// 暂时关闭安全警告\r\nprocess.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n```\r\n\r\n### 3.5 主进程与渲染进程通信\r\n\r\n#### 3.5.1 index.html\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline'\">\r\n    <title>Hello World!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello World!</h1>\r\n\r\n    <button type=\"button\" id=\"talk\">Talk to main process</button><br>\r\n\r\n    <!-- All of the Node.js APIs are available in this renderer process. -->\r\n    We are using Node.js <strong><script>document.write( process.versions.node)</script></strong>,\r\n    and Electron <strong><script>document.write( process.versions.electron )</script></strong>.\r\n\r\n    <script>\r\n      // You can also require other files to run in this process\r\n      require('./renderer.js')\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n#### 3.5.2 renderer.js\r\n\r\n```js\r\n// This file is required by the index.html file and will\r\n// be executed in the renderer process for that window.\r\n// All of the Node.js APIs are available in this process.\r\n\r\nconst { ipcRenderer } = require('electron')\r\n\r\nlet i = 1\r\nsetInterval( () => {\r\n  console.log(i)\r\n  i++\r\n}, 1000)\r\n\r\ndocument.getElementById('talk').addEventListener('click', e => {\r\n\r\n  // ipcRenderer.send( 'channel1', 'Hello from main window')\r\n\r\n  let response = ipcRenderer.sendSync( 'sync-message', 'Waiting for response')\r\n  console.log(response)\r\n\r\n})\r\n\r\nipcRenderer.on( 'channel1-response', (e, args) => {\r\n  console.log(args)\r\n})\r\n\r\nipcRenderer.on( 'mailbox', (e, args) => {\r\n  console.log(args)\r\n})\r\n```\r\n\r\n#### 3.5.3 main.js\r\n\r\n```js\r\n// Modules\r\nconst {app, BrowserWindow, ipcMain} = require('electron')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow\r\n\r\n// Create a new BrowserWindow when `app` is ready\r\nfunction createWindow () {\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1000, height: 800, x: 100, y:140,\r\n    webPreferences: { nodeIntegration: true }\r\n  })\r\n\r\n  // Load index.html into the new BrowserWindow\r\n  mainWindow.loadFile('index.html')\r\n\r\n  // Open DevTools - Remove for PRODUCTION!\r\n  mainWindow.webContents.openDevTools();\r\n\r\n  mainWindow.webContents.on( 'did-finish-load', e => {\r\n\r\n    // mainWindow.webContents.send( 'mailbox', {\r\n    //   from: 'Ray',\r\n    //   email: 'ray@stackacademy.tv',\r\n    //   priority: 1\r\n    // })\r\n  })\r\n\r\n  // Listen for window being closed\r\n  mainWindow.on('closed',  () => {\r\n    mainWindow = null\r\n  })\r\n}\r\n\r\nipcMain.on( 'sync-message', (e, args) => {\r\n  console.log(args)\r\n\r\n  setTimeout( () => {\r\n    e.returnValue = 'A sync response from the main process'\r\n  }, 4000)\r\n\r\n})\r\n\r\nipcMain.on( 'channel1', (e, args) => {\r\n  console.log(args)\r\n  e.sender.send( 'channel1-response', 'Message received on \"channel1\". Thank you!')\r\n})\r\n\r\n// Electron `app` is ready\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed - (Not macOS - Darwin)\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// When app icon is clicked and app is running, (macOS) recreate the BrowserWindow\r\napp.on('activate', () => {\r\n  if (mainWindow === null) createWindow()\r\n})\r\n```\r\n\r\n## 4、主进程\r\n\r\n> Electron API （Electron API 有两种）\r\n\r\n- Main Process （主进进程）\r\n- Renderer Process（渲染进程）\r\n\r\n### 4.1 App\r\n\r\n#### 4.1.1 事件\r\n\r\n##### 4.1.1.1 before-quit\r\n\r\n> 在应用程序开始关闭窗口之前触发。\r\n\r\n```js\r\napp.on('before-quit', (e) => {\r\n  console.log('App is quiting')\r\n  e.preventDefault()\r\n})\r\n```\r\n\r\n##### 4.1.1.2 browser-window-blur\r\n\r\n> 在 browserWindow 失去焦点时发出\r\n\r\n```js\r\napp.on('browser-window-blur', (e) => {\r\n  console.log('App unfocused')\r\n})\r\n```\r\n\r\n##### 4.1.1.3 browser-window-focus\r\n\r\n> 在 browserWindow 获得焦点时发出\r\n\r\n```js\r\napp.on('browser-window-focus', (e) => {\r\n  console.log('App focused')\r\n})\r\n```\r\n\r\n#### 4.1.2 方法\r\n\r\n##### 4.1.2.1 app.quit()\r\n\r\n```js\r\napp.on('browser-window-blur', (e) => {\r\n  setTimeout(() => {\r\n    app.quit()\r\n  }, 3000)\r\n})\r\n\r\napp.on('browser-window-blur', (e) => {\r\n  setTimeout(app.quit, 3000)\r\n})\r\n```\r\n\r\n##### 4.1.2.2 app.getPath(name)\r\n\r\n```js\r\napp.whenReady().then(() => {\r\n  console.log(app.getPath('desktop'))\r\n  console.log(app.getPath('music'))\r\n  console.log(app.getPath('temp'))\r\n  console.log(app.getPath('userData'))\r\n\r\n  createWindow()\r\n})\r\n```\r\n\r\n### 4.2 BrowserWindow\r\n\r\n> electron.BrowserWindow: 创建和控制浏览器窗口\r\n\r\n#### 4.2.1 实例方法\r\n\r\nwin.loadURL(url[, options]): 和 loadFile 互斥\r\n\r\n```js\r\nmainWindow.loadURL('https://www.baidu.com')\r\n```\r\n\r\n#### 4.2.2 优雅的显示窗口\r\n\r\n- 使用ready-to-show事件\r\n\r\n```js\r\nlet mainWindow = new BrowserWindow({ show: false })\r\nmainWindow.once('ready-to-show', () => {\r\n  mainWindow.show()\r\n})\r\n```\r\n\r\n- 设置 backgroundColor\r\n\r\n```js\r\nlet win = new BrowserWindow({ backgroundColor: '#2e2c29' })\r\n```\r\n\r\n#### 4.2.3 父子窗口\r\n\r\n- 窗口定义\r\n\r\n```js\r\nsecondaryWindow = new BrowserWindow({\r\n  width: 600,\r\n  height: 600,\r\n  webPreferences: { nodeIntegration: true }\r\n})\r\n\r\nsecondaryWindow.loadFile('index.html')\r\n\r\nsecondaryWindow.on('closed',  () => {\r\n   mainWindow = null\r\n})\r\n```\r\n\r\n- 窗口关系\r\n\r\n```js\r\nsecondaryWindow = new BrowserWindow({\r\n  parent: mainWindon, // 定义父窗口\r\n  modal: true // 锁定在主窗口\r\n})\r\n```\r\n\r\n- 子窗口显示和隐藏\r\n\r\n```js\r\nsecondaryWindow = new BrowserWindow({\r\n  show: false\r\n})\r\n\r\nsetTimeout(() => {\r\n  secondaryWindow.show()\r\n  setTimeout(() => {\r\n    secondaryWindow.hide()\r\n  }, 3000)\r\n}, 2000)\r\n```\r\n\r\n#### 4.2.4 无边框窗口\r\n\r\n> Frameless Window\r\n\r\n```js\r\nmainWindow = new BrowserWindow({\r\n  frame: false\r\n})\r\n```\r\n\r\n让页面可拖拽\r\n\r\n```html\r\n<body style=\"user-select: none; -webkit-app-region:drag;\">\r\n```\r\n\r\nno-drag 修复下面控件的bug\r\n\r\n```html\r\n<input style=\"-webkit-app-region: no-drag;\" type=\"range\" name=\"range\" min=\"0\" max=\"10\">\r\n```\r\n\r\n显示红绿灯\r\n\r\n```js\r\nmainWindow = new BrowserWindow({\r\n  titleBarStyle: 'hidden' // or hiddenInset 距离红绿灯更近\r\n})\r\n```\r\n\r\n#### 4.2.5 属性与方法\r\n\r\n##### 4.2.5.1 minWidth && minHeight\r\n\r\n```js\r\nmainWindow = new BrowserWindow({\r\n  minWidth: 300,\r\n  minHeight: 300\r\n})\r\n```\r\n\r\n更多详见:https://electronjs.org/docs/api/browser-window#new-browserwindowoptions\r\n\r\n##### 4.2.5.2 窗口焦点事件\r\n\r\n```js\r\nsecWindow = new BrowserWindow({\r\n  width: 400, height: 300,\r\n  webPreferences: { nodeIntegration: true },\r\n})\r\n\r\nmainWindow.on('focus', () => {\r\n  console.log('mainWindow focused')\r\n})\r\n\r\nsecWindow.on('focus', () => {\r\n  console.log('secWindow focused')\r\n})\r\n\r\napp.on('browser-window-focus', () => {\r\n  console.log('App focused')\r\n})\r\n```\r\n\r\n##### 4.2.5.3 静态方法\r\n\r\n- getAllWindows()\r\n\r\n```js\r\nlet allWindows = BrowserWindow.getAllWindows()\r\nconsole.log(allWindows)\r\n```\r\n\r\n更多详见: https://electronjs.org/docs/api/browser-window#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\r\n\r\n##### 4.2.5.4 实例方法\r\n\r\n- maximize()\r\n\r\n```\r\nsecWindow.on('closed', () => {\r\n  mainWindow.maximize()\r\n})\r\n```\r\n\r\n更多详见:https://electronjs.org/docs/api/browser-window#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\r\n\r\n#### 4.2.6 state\r\n\r\n> electron-win-state 保存窗口的状态\r\n> `npm install electron-win-state`\r\n\r\n#### 4.2.7 webContents\r\n\r\n> webContents 是 EventEmitter 的实例， 负责渲染和控制网页, 是 BrowserWindow 对象的一个属性。\r\n\r\n```\r\nlet wc = mainWindow.webContents\r\nconsole.log(wc)\r\n```\r\n\r\n##### 4.2.7.1 方法 getAllWebContents(）*\r\n\r\n- 返回 WebContents[] - 所有 WebContents 实例的数组。 包含所有Windows，webviews，opened devtools 和 devtools 扩展背景页的 web 内容\r\n\r\n```\r\nconst {app, BrowserWindow, webContents} = require('electron')\r\nconsole.log(webContents.getAllWebContents())\r\n```\r\n\r\n##### 4.2.7.2 实例事件\r\n\r\n- did-finish-load\r\n- dom-ready\r\n\r\n```html\r\n<div>\r\n   <img src=\"https://placekitten.com/500/500\" alt=\"\">\r\n</div>\r\n<script>\r\nlet wc = mainWindow.webContents\r\nwc.on('did-finish-load', () => {\r\n  console.log('Conent fully loaded')\r\n})\r\nwc.on('dom-ready', () => {\r\n  console.log('DOM Ready')\r\n})\r\n</script>\r\n```\r\n\r\n- new-window\r\n\r\n```html\r\n<div>\r\n  <a target=\"_blank\" href=\"https://placekitten.com/500/500\"><h3>Kitten</h3></a>\r\n</div>\r\n\r\n<script>\r\nwc.on('new-window', (e, url) => {\r\n  e.preventDefault()\r\n  console.log('DOM Ready')\r\n})\r\n</script>\r\n```\r\n\r\n- context-menu : 右键上下文信息\r\n\r\n```js\r\nwc.on('context-menu', (e, params) => {\r\n  console.log(`Context menu opened on: ${params.mediaType} at x:${params.x}, y:${params.y}`)\r\n})\r\n\r\nwc.on('context-menu', (e, params) => {\r\n  console.log(`User seleted text: ${params.selectionText}`)\r\n  console.log(`Selection can be copied: ${params.editFlags.canCopy}`)\r\n})\r\n```\r\n\r\n##### 4.2.7.3 实例方法\r\n\r\n- executeJavaScript()\r\n\r\n```js\r\nwc.on('context-menu', (e, params) => {\r\n  wc.executeJavaScript(`alert('${params.selectionText}')`)\r\n})\r\n```\r\n\r\n### 4.3 dialog - 对话框\r\n\r\n> 显示用于打开和保存文件、警报等的本机系统对话框\r\n\r\n```js\r\nconst {app, BrowserWindow, dialog} = require('electron')\r\n\r\nmainWindow.webContents.on('did-finish-load', () => {\r\n  dialog.showOpenDialog({\r\n    buttonLabel: '选择',\r\n    defaultPath: app.getPath('desktop'),\r\n    properties: ['multiSelections', 'createDirectory', 'openFile', 'openDirectory']\r\n  }).then((result)=> {\r\n    console.log(result.filepaths)\r\n  })\r\n})\r\n```\r\n\r\n```js\r\ndialog.showSaveDialog({}).then(result => {\r\n  console.log(result.filePath)\r\n})\r\n```\r\n\r\n```js\r\nconst answers = ['Yes', 'No', 'Maybe']\r\ndialog.showMessageBox({\r\n  title: 'Message Box',\r\n  message: 'Please select an option',\r\n  detail: 'Message details.',\r\n  buttons: answers\r\n}).then(({response}) => {\r\n  console.log(`User selected: ${answers[response]}`)\r\n})\r\n```\r\n\r\n### 4.4 快捷键+系统快捷键\r\n\r\n> **快捷键**:定义键盘快捷键。\r\n> **系统快捷键**:在应用程序没有键盘焦点时，监听键盘事件。\r\n\r\n快捷键可以包含多个功能键和一个键码的字符串，由符号+结合，用来定义你应用中的键盘快捷键\r\n\r\n示例:\r\n\r\n+ CommandOrControl+A\r\n+ CommandOrControl+Shift+Z\r\n\r\n快捷方式使用 register 方法在 globalShortcut 模块中注册。\r\n\r\nglobalShortcut 模块可以在操作系统中注册/注销全局快捷键, 以便可以为操作定制各种快捷键。\r\n\r\n注意: 快捷方式是全局的; 即使应用程序没有键盘焦点, 它也仍然在持续监听键盘事件。 在应用程序模块发出 ready 事件之前, 不应使用此模块。\r\n\r\n```js\r\nconst {app, BrowserWindow, globalShortcut} = require('electron')\r\n\r\nglobalShortcut.register('G', () => {\r\n  console.log('User pressed G')\r\n})\r\n```\r\n\r\n```js\r\nglobalShortcut.register('CommandOrControl+Y', () => {\r\n  console.log('User pressed G with a combination key')\r\n  globalShortcut.unregister('CommandOrControl+Y')\r\n})\r\n```\r\n\r\n### 4.5 Menu\r\n\r\n#### 4.5.1 index.html\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline'\">\r\n    <title>Hello World!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello World!</h1>\r\n\r\n    <textarea name=\"name\" rows=\"8\" cols=\"80\"></textarea>\r\n\r\n    <!-- All of the Node.js APIs are available in this renderer process. -->\r\n    We are using Node.js <strong><script>document.write( process.versions.node)</script></strong>,\r\n    and Electron <strong><script>document.write( process.versions.electron )</script></strong>.\r\n\r\n    <script>\r\n      // You can also require other files to run in this process\r\n      require('./renderer.js')\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n#### 4.5.2 main.js\r\n\r\n```js\r\n// Modules\r\nconst {app, BrowserWindow, Menu, MenuItem} = require('electron')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow\r\n\r\nlet mainMenu = Menu.buildFromTemplate( require('./mainMenu') )\r\n\r\n\r\n// Create a new BrowserWindow when `app` is ready\r\nfunction createWindow () {\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1000, height: 800,\r\n    webPreferences: { nodeIntegration: true }\r\n  })\r\n\r\n  // Load index.html into the new BrowserWindow\r\n  mainWindow.loadFile('index.html')\r\n\r\n  // Open DevTools - Remove for PRODUCTION!\r\n  mainWindow.webContents.openDevTools();\r\n\r\n  Menu.setApplicationMenu(mainMenu)\r\n\r\n  // Listen for window being closed\r\n  mainWindow.on('closed',  () => {\r\n    mainWindow = null\r\n  })\r\n}\r\n\r\n// Electron `app` is ready\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed - (Not macOS - Darwin)\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// When app icon is clicked and app is running, (macOS) recreate the BrowserWindow\r\napp.on('activate', () => {\r\n  if (mainWindow === null) createWindow()\r\n})\r\n\r\n```\r\n\r\n#### 4.5.3 mainMenu.js\r\n\r\n```js\r\nmodule.exports = [\r\n  {\r\n    label: 'Electron',\r\n    submenu: [\r\n      { label: 'Item 1'},\r\n      { label: 'Item 2', submenu: [ { label: 'Sub Item 1'} ]},\r\n      { label: 'Item 3'},\r\n    ]\r\n  },\r\n  {\r\n    label: 'Edit',\r\n    submenu: [\r\n      { role: 'undo'},\r\n      { role: 'redo'},\r\n      { role: 'copy'},\r\n      { role: 'paste'},\r\n    ]\r\n  },\r\n  {\r\n    label: 'Actions',\r\n    submenu: [\r\n      {\r\n        label: 'DevTools',\r\n        role: 'toggleDevTools'\r\n      },\r\n      {\r\n        role: 'toggleFullScreen'\r\n      },\r\n      {\r\n        label: 'Greet',\r\n        click: () => { console.log('Hello from Main Menu') },\r\n        accelerator: 'Shift+Alt+G'\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n### 4.6 Context Menus\r\n\r\n#### 4.6.1 index.html\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline'\">\r\n    <title>Hello World!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello World!</h1>\r\n\r\n    <textarea name=\"name\" rows=\"8\" cols=\"80\"></textarea>\r\n\r\n    <!-- All of the Node.js APIs are available in this renderer process. -->\r\n    We are using Node.js <strong><script>document.write( process.versions.node)</script></strong>,\r\n    and Electron <strong><script>document.write( process.versions.electron )</script></strong>.\r\n\r\n    <script>\r\n      // You can also require other files to run in this process\r\n      require('./renderer.js')\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n#### 4.6.2 main.js\r\n\r\n```js\r\n// Modules\r\nconst {app, BrowserWindow, Menu} = require('electron')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow\r\n\r\nlet contextMenu = Menu.buildFromTemplate([\r\n  { label: 'Item 1' },\r\n  { role: 'editMenu' }\r\n])\r\n\r\n// Create a new BrowserWindow when `app` is ready\r\nfunction createWindow () {\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1000, height: 800,\r\n    webPreferences: { nodeIntegration: true }\r\n  })\r\n\r\n  // Load index.html into the new BrowserWindow\r\n  mainWindow.loadFile('index.html')\r\n\r\n  // Open DevTools - Remove for PRODUCTION!\r\n  mainWindow.webContents.openDevTools();\r\n\r\n  mainWindow.webContents.on('context-menu', e => {\r\n    contextMenu.popup()\r\n  })\r\n\r\n  // Listen for window being closed\r\n  mainWindow.on('closed',  () => {\r\n    mainWindow = null\r\n  })\r\n}\r\n\r\n// Electron `app` is ready\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed - (Not macOS - Darwin)\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// When app icon is clicked and app is running, (macOS) recreate the BrowserWindow\r\napp.on('activate', () => {\r\n  if (mainWindow === null) createWindow()\r\n})\r\n```\r\n\r\n### 4.7 Tray (托盘)\r\n\r\n#### 4.7.1 main.js\r\n\r\n```js\r\n// Modules\r\nconst {app, BrowserWindow, Tray, Menu} = require('electron')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow, tray\r\n\r\nlet trayMenu = Menu.buildFromTemplate([\r\n  { label: 'Item 1' },\r\n  { role: 'quit' }\r\n])\r\n\r\nfunction createTray() {\r\n\r\n  tray = new Tray('trayTemplate@2x.png')\r\n  tray.setToolTip('Tray details')\r\n\r\n  tray.on('click', e => {\r\n\r\n    if (e.shiftKey) {\r\n      app.quit()\r\n    } else {\r\n      mainWindow.isVisible() ? mainWindow.hide() : mainWindow.show()\r\n    }\r\n  })\r\n\r\n  tray.setContextMenu(trayMenu)\r\n}\r\n\r\n// Create a new BrowserWindow when `app` is ready\r\nfunction createWindow () {\r\n\r\n  createTray()\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 1000, height: 800,\r\n    webPreferences: { nodeIntegration: true }\r\n  })\r\n\r\n  // Load index.html into the new BrowserWindow\r\n  mainWindow.loadFile('index.html')\r\n\r\n  // Open DevTools - Remove for PRODUCTION!\r\n  mainWindow.webContents.openDevTools();\r\n\r\n  // Listen for window being closed\r\n  mainWindow.on('closed',  () => {\r\n    mainWindow = null\r\n  })\r\n}\r\n\r\n// Electron `app` is ready\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed - (Not macOS - Darwin)\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// When app icon is clicked and app is running, (macOS) recreate the BrowserWindow\r\napp.on('activate', () => {\r\n  if (mainWindow === null) createWindow()\r\n})\r\n```\r\n\r\n## 5、渲染进程\r\n\r\n### 5.1 clipboard\r\n\r\n> 在系统剪贴板上进行复制和粘贴操作。\r\n>\r\n> 在主进程（main process）和渲染进程（renderer process）上均可用。\r\n\r\n#### 5.1.1 `readText()`\r\n\r\n返回字符串 - 剪贴板中的内容为纯文本。\r\n\r\n```js\r\nconst { clipboard } = require('electron')\r\n\r\nclipboard.writeText('千锋教育HTML5大前端!')\r\n\r\nconst text = clipboard.readText()\r\nconsole.log(text)\r\n// hello i am a bit of text!'\r\n```\r\n\r\n#### 5.1.2 `writeText(text)`\r\n\r\n将文本作为纯文本写进剪贴板。\r\n\r\n### 5.2 contextBridge\r\n\r\n> 创建一个安全的、双向的、跨越隔离情境的同步桥梁。\r\n>\r\n> 只在渲染进程（renderer pocess）中可用。\r\n\r\n### 5.3 desktopCapturer\r\n\r\n>使用 navigator.mediaDevices.getUserMedia API 访问可用于从桌面捕获音频和视频的媒体源信息。\r\n>\r\n>只在主进程（main process）可用。\r\n\r\n下面的例子显示了如何从一个标题为Electron的桌面窗口捕捉图像:\r\n\r\n- 在主进程里\r\n\r\n```js\r\n// ./controller/getSource.js\r\nconst { desktopCapturer, ipcMain } = require('electron')\r\n\r\nconst getSource = (mainWindow) => {\r\n  ipcMain.handle('desktop-capturer', async (event) => {\r\n    desktopCapturer.getSources({ \r\n      types: ['window', 'screen'],\r\n      thumbnailSize: {\r\n        width: 1728,\r\n        height: 1117\r\n      }\r\n    }).then(async sources => {\r\n      for (const source of sources) {\r\n        if (source.name === 'Entire Screen') {\r\n          mainWindow.webContents.send('SET_SOURCE', source)\r\n          return\r\n        }\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nmodule.exports = getSource\r\n\r\n// ./main.js\r\ngetSource(win)\r\n```\r\n\r\n- 在预处理JS里\r\n\r\n```js\r\n// ./preload-js/setSource.js\r\nconst { ipcRenderer } = require('electron')\r\n\r\nconst setSource = () => {\r\n  return new Promise((resolve) => {\r\n    ipcRenderer.on('SET_SOURCE', async (event, source) => {\r\n      let str = source.thumbnail.crop({ x: 0, y: 30, width: 1200, height: 1170 })\r\n      resolve(str.toDataURL())\r\n    })\r\n  })\r\n}\r\n\r\nconst invokeCaptureEvent = async () => {\r\n  const result = await ipcRenderer.invoke('desktop-capturer')\r\n  return result\r\n}\r\n\r\nmodule.exports = {\r\n  setSource,\r\n  invokeCaptureEvent\r\n}\r\n\r\n// ./preload-js/index.js\r\nconst { setSource, invokeCaptureEvent } = require('./setSource')\r\ncontextBridge.exposeInMainWorld('myAPI', {\r\n  setSource,\r\n  invokeCaptureEvent\r\n})\r\n```\r\n\r\n- 在渲染进程页面里\r\n\r\n```js\r\nconst app = Vue.createApp({\r\n  template: `\r\n    <div>\r\n      <button @click=\"captureDesk\">抓取桌面</button>\r\n    </div>\r\n    <div>\r\n      <img :src=\"imgSrc\" alt=\"\" />\r\n    </div>\r\n  `,\r\n\r\n  data() {\r\n    return {\r\n      imgSrc: ''\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async captureDesk() {\r\n      const result = await myAPI.invokeCaptureEvent()\r\n    }\r\n  },\r\n\r\n  async beforeCreate() {\r\n    let imgDataUrl = await myAPI.setSource()\r\n    this.imgSrc = imgDataUrl\r\n  },\r\n})\r\n\r\napp.mount('#root')\r\n```\r\n\r\n### 5.4 ipcRenderer\r\n\r\n>从一个渲染器进程到主进程的异步通信。\r\n>\r\n>只在渲染进程（renderer pocess）中可用。\r\n\r\n### 5.5 nativeImage\r\n\r\n>使用PNG或JPG文件创建托盘、停靠区和应用程序图标。\r\n>\r\n>在主进程（main process）和渲染进程（renderer process）上均可用。\r\n\r\n在Electron中，对于接受图像的API，你可以传递文件路径或NativeImage实例。当传递null时，将使用一个空的图像。\r\n\r\n例如，在创建一个托盘或设置一个窗口的图标时，你可以把图像文件路径作为一个字符串传递。\r\n\r\n```js\r\nconst { BrowserWindow, Tray } = require('electron')\r\n\r\nconst appIcon = new Tray('/Users/somebody/images/icon.png')\r\nconst win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })\r\nconsole.log(appIcon, win)\r\n```\r\n\r\n或者从剪贴板上读取图像，返回一个NativeImage。\r\n\r\n```js\r\nconst { clipboard, Tray } = require('electron')\r\nconst image = clipboard.readImage()\r\nconst appIcon = new Tray(image)\r\nconsole.log(appIcon)\r\n```\r\n\r\n#### 5.5.1 支持的格式\r\n\r\n目前支持PNG和JPEG图像格式。建议使用PNG，因为它支持透明度和无损压缩。\r\n\r\n在Windows上，你也可以从文件路径加载ICO图标。为了获得最佳的视觉质量，建议至少包括以下尺寸的文件。\r\n\r\n- Small icon\r\n  - 16x16 (100% DPI scale)\r\n  - 20x20 (125% DPI scale)\r\n  - 24x24 (150% DPI scale)\r\n  - 32x32 (200% DPI scale)\r\n- Large icon\r\n  - 32x32 (100% DPI scale)\r\n  - 40x40 (125% DPI scale)\r\n  - 48x48 (150% DPI scale)\r\n  - 64x64 (200% DPI scale)\r\n  - 256x256\r\n\r\n#### 5.5.2 高分辨率图像\r\n\r\n在支持高DPI的平台上，如苹果Retina显示器，你可以在图像的基本文件名后附加@2x来标记它为高分辨率的图像。\r\n\r\n例如，如果icon.png是一个具有标准分辨率的普通图像，那么icon@2x.png，将被视为具有双倍DPI密度的高分辨率图像。\r\n\r\n如果你想同时支持不同DPI密度的显示器，你可以把不同尺寸的图像放在同一个文件夹里，使用不带DPI后缀的文件名。例如:\r\n\r\n```js\r\nimages/\r\n├── icon.png\r\n├── icon@2x.png\r\n└── icon@3x.png\r\n```\r\n\r\n```js\r\nconst { Tray } = require('electron')\r\nconst appIcon = new Tray('/Users/somebody/images/icon.png')\r\nconsole.log(appIcon)\r\n```\r\n\r\n还支持以下DPI的后缀:\r\n\r\n```js\r\n@1x\r\n@1.25x\r\n@1.33x\r\n@1.4x\r\n@1.5x\r\n@1.8x\r\n@2x\r\n@2.5x\r\n@3x\r\n@4x\r\n@5x\r\n```\r\n\r\n#### 5.5.3 方法\r\n\r\n- ### `nativeImage.createEmpty()`\r\n\r\n- ### `nativeImage.createFromPath(path)`\r\n\r\n返回 `NativeImage`\r\n\r\n从位于路径的文件中创建一个新的NativeImage实例。如果路径不存在，不能被读取，或者不是一个有效的图像，该方法将返回一个空图像。\r\n\r\n```js\r\nconst nativeImage = require('electron').nativeImage\r\n\r\nconst image = nativeImage.createFromPath('/Users/somebody/images/icon.png')\r\nconsole.log(image)\r\n```\r\n\r\n- ### `nativeImage.createFromDataURL(dataURL)`\r\n\r\n#### 5.5.4 Class: NativeImage\r\n\r\n自然地包裹图像，如托盘、停靠区和应用程序图标。\r\n\r\n\r\n在主进程（main process）和渲染进程（renderer process）上均可用。\r\n\r\n实例方法:\r\n\r\n- #### `image.toPNG([options])`\r\n\r\n- #### `image.toJPEG(quality)`\r\n\r\n- #### `image.toDataURL([options])`\r\n\r\n- #### `image.getSize([scaleFactor])`\r\n\r\n- #### `image.crop(rect)`\r\n\r\n\r\n<style>\r\n    gold{\r\n        color:black;\r\n        background-color:gold;\r\n    }\r\n    green{\r\n        color:white;\r\n        background-color:green;\r\n    }\r\n    warn{\r\n        color:white;\r\n        background-color:red;\r\n    }\r\n</style>\r\n"}