{"shortInfo":{"title":"express学习笔记","date":"2022-08-30T00:05:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["express"],"hideAtIndex":true,"categories":"后端","id":8,"countWords":3778,"readSeconds":377.8,"assetsbaseUrl":"/self_server/assets/"},"content":"# express学习笔记\r\n\r\n## 目录\r\n- [express学习笔记](#express学习笔记)\r\n  - [目录](#目录)\r\n  - [概念](#概念)\r\n  - [实现API接口服务器](#实现api接口服务器)\r\n    - [**基本示例:post get all listen**](#基本示例post-get-all-listen)\r\n    - [**获取URL中的<red>查询参数</red>**](#获取url中的red查询参数red)\r\n    - [**获取URL中的<red>动态参数</red>**](#获取url中的red动态参数red)\r\n  - [静态web服务器](#静态web服务器)\r\n    - [**基本使用示例**](#基本使用示例)\r\n    - [**托管多个静态网页**](#托管多个静态网页)\r\n    - [**挂载路径前缀**](#挂载路径前缀)\r\n  - [路由](#路由)\r\n    - [概念](#概念-1)\r\n    - [**<sky>最简用法</sky>:直接挂载到app上**](#sky最简用法sky直接挂载到app上)\r\n    - [**<sky>高级用法</sky>:将路由抽离为单独模块**](#sky高级用法sky将路由抽离为单独模块)\r\n    - [为路由添加访问前缀](#为路由添加访问前缀)\r\n  - [中间件](#中间件)\r\n    - [概念](#概念-2)\r\n    - [示例](#示例)\r\n    - [**中间件的分类**](#中间件的分类)\r\n    - [**应用级别中间件**](#应用级别中间件)\r\n    - [**路由级别中间件**](#路由级别中间件)\r\n    - [**错误级别中间件**](#错误级别中间件)\r\n    - [**内置中间件**](#内置中间件)\r\n    - [**第三方中间件**](#第三方中间件)\r\n    - [**自定义中间件:尝试实现urlencoded模块**](#自定义中间件尝试实现urlencoded模块)\r\n  - [常用中间件的使用](#常用中间件的使用)\r\n    - [CORS跨源访问限制](#cors跨源访问限制)\r\n    - [express-session身份认证](#express-session身份认证)\r\n    - [JWT认证机制机制](#jwt认证机制机制)\r\n\r\n\r\n------------------------------------------------------------------\r\n\r\n## 概念\r\nexpress作用和nodejs的http模块类似,用于创建web服务器<br>\r\nexpress是基于http模块封装的,使用起来比http模块简单,效率更高\r\n\r\n**express用处**\r\n* web服务器\r\n* API接口服务器\r\n\r\n------------------------------------------------------------------\r\n\r\n## 实现API接口服务器\r\n### **基本示例:post get all listen**\r\n```js\r\nconst express = require(\"express\")\r\n\r\nconst app = express();\r\n\r\napp.get(\"/test_01\",(request,response)=>{\r\n    response.send(\"hello world!!\")\r\n})\r\n\r\napp.post(\"/test_02\",(request,response)=>{\r\n    response.send({hello:\"world\"})\r\n})\r\n\r\napp.all(\"/test_03\",(request,response)=>{\r\n    response.send({hello:\"world\"})\r\n})\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"express server is running at http://127.0.0.1:8000\")\r\n})\r\n```\r\n------------------------------------------------------------------\r\n\r\n\r\n### **获取URL中的<red>查询参数</red>**\r\n```js\r\napp.get(\"/test_04\",(request,response)=>{\r\n    // request.query默认是空对象\r\n    // 客户端使用 ?name=DingYigui&age=20 这种查询字符串形式的URL时\r\n    // request.query=={\"name\"=\"DingYigui\",\"age\"=20}\r\n\r\n    console.log(request.query)\r\n    \r\n    response.send(request.query)\r\n})\r\n```\r\n------------------------------------------------------------------\r\n\r\n### **获取URL中的<red>动态参数</red>**\r\n```js\r\napp.get(\"/test_05/:name/:age\",(request,response)=>{\r\n    // request.params 默认是空对象 是动态匹配到的URL参数\r\n    // 客户端使用 /test_05/DingYigui/20 形式的URL时\r\n    // request.params=={\"name\"=\"DingYigui\",\"age\"=20}\r\n    console.log(request.params)\r\n    response.send(request.params)\r\n})\r\n```\r\n------------------------------------------------------------------\r\n\r\n## 静态web服务器\r\n\r\n### **基本使用示例**\r\n```js\r\nconst express = require(\"express\")\r\n\r\nconst app = express();\r\n\r\napp.use(express.static(\"./site0\"))\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"express server is running at http://127.0.0.1:8000\")\r\n})\r\n```\r\n\r\n> 要访问 `/site0/index` 只需访问 `/index`\r\n\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n### **托管多个静态网页**\r\n```js\r\napp.use(express.static(\"./site1\"))\r\napp.use(express.static(\"./site2\"))\r\n```\r\n> 注意: 若访问的index.html在两个文件目录中均存在,则优先访问第一个文件夹\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n### **挂载路径前缀**\r\n```js\r\napp.use(\"/subSite\",express.static(\"./site1\"))\r\n```\r\n> 要访问 `/site1/index` 则需访问 `/subSite/index`\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n## 路由\r\n### 概念\r\n路由就是**映射关系**,在express中就是指**客户端请求**和**服务端处理函数**的**映射关系**\r\n\r\nexpress路由的**组成**: `app.METHOD(PATH,HANDLER)`\r\n* `METHOD` 请求的方法\r\n* `PATH` 请求的URL地址\r\n* `HANDLER` 处理函数\r\n\r\nexpress路由的**匹配规则**\r\n* 将按照定义的**先后顺序**进行匹配\r\n* **请求类型**和**请求URL**需**同时匹配**才会调用对应的**处理函数**\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n### **<sky>最简用法</sky>:直接挂载到app上**  \r\n<red>express不建议将路由直接挂载到app上,这样会导致代码量越来越多,不便管理</red>\r\n\r\n```js\r\napp.get(\"/test_01\",(request,response)=>{\r\n    response.send(\"hello world!!\")\r\n})\r\n\r\napp.post(\"/test_02\",(request,response)=>{\r\n    response.send({hello:\"world\"})\r\n})\r\n\r\napp.all(\"/test_03\",(request,response)=>{\r\n    response.send({hello:\"world\"})\r\n})\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n### **<sky>高级用法</sky>:将路由抽离为单独模块**  \r\n\r\n<gre>express官方推荐用法</gre>  \r\n\r\n```js\r\n// ./src/user.js\r\nconst express = require(\"express\")\r\nconst routerApp = express.Router()     //创建路由对象\r\n\r\nrouterApp.get(\"/user/list\",(req,res)=>{ //挂载路由\r\n    res.send(\"getted user list\")\r\n})\r\nrouterApp.post(\"/user/add\",(req,res)=>{ //挂载路由\r\n    res.send(\"added user\")\r\n})\r\n\r\nmodule.exports = routerApp //导出路由对象\r\n```\r\n\r\n```js\r\n// ./index.js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\nconst userRouter = require(\"./src/user.js\") //导入user路由模块\r\napp.use(\"/api\",userRouter) //注册路由\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n>`app.use()`用于注册全局**中间件**\r\n\r\n\r\n------------------------------------------------------------------\r\n\r\n### 为路由添加访问前缀\r\n```js\r\napp.use(\"/api\",userRouter) //添加访问前缀\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n\r\n## 中间件\r\n\r\n### 概念\r\n中间件(Middleware),特指业务流程的中间处理环节\r\n\r\n但一个请求到达express服务器后,可连续调用多个中间件对请求进行**预处理**\r\n![图 1](./images/express学习笔记/94e6281102dfa399e3de1d15a143647e4bdec8256d7ce39ebff2d5eb91fcee3f.png)  \r\n\r\n\r\n**中间件本质为函数**\r\n```js\r\nconst mw = function (request,response,next){\r\n    console.log(\"这是一个中间件函数\")\r\n    next()\r\n}\r\n```\r\n**next()函数**  \r\nnext()函数实现多个中间件之间的**连续调用**,表示把**流转关系**转交给**下一个中间件**或**路由**\r\n\r\n![图 2](./images/express学习笔记/05ed400ef4edde4dad65a33e9bf0c8354e53ddb3f963aabae9c53f4a1c7dd4aa.png)  \r\n\r\n\r\n\r\n### 示例\r\n**案例1:全局生效的中间件**\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n//定义中间件1\r\nconst mw1 = function(req,res,next){\r\n    req.startTime = Date.now()\r\n    console.log(\"执行了第1个中间件\")\r\n    next()\r\n}\r\n//定义中间件2\r\nconst mw2 = function(req,res,next){\r\n    console.log(\"执行了第2个中间件\")\r\n    next()\r\n}\r\n\r\n//注册中间件1:先注册的先执行,后注册的后执行\r\napp.use(mw1)\r\n//注册中间件2\r\napp.use(mw2)\r\n\r\n\r\napp.get(\"/testRW\",(req,res)=>{ //挂载路由\r\n    var now = Date.now()\r\n    var gap = now-req.startTime\r\n    res.send(\"处理该请求耗时:\"+ gap + \"ms\")\r\n})\r\n\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n> **注意**:对于全局生效的中间件,一定要在路由之前注册中间件\r\n\r\n\r\n\r\n**案例2:局部生效的中间件**\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n//定义中间件1\r\nconst mw1 = function(req,res,next){\r\n    req.startTime = Date.now()\r\n    console.log(\"执行了第1个中间件\")\r\n    next()\r\n}\r\n//定义中间件2\r\nconst mw2 = function(req,res,next){\r\n    console.log(\"执行了第2个中间件\")\r\n    next()\r\n}\r\n\r\n\r\n//以下三种方式均可\r\napp.get(\"/testRW_2_1\",mw1,(req,res)=>{ //挂载路由\r\n    var now = Date.now()\r\n    var gap = now-req.startTime\r\n    res.send(\"处理该请求耗时:\"+ gap + \"ms\")\r\n})\r\n\r\n// 以下两种方式等效\r\napp.get(\"/testRW_2_2\",mw1,mw2,(req,res)=>{ //挂载路由\r\n    var now = Date.now()\r\n    var gap = now-req.startTime\r\n    res.send(\"处理该请求耗时:\"+ gap + \"ms\")\r\n})\r\n\r\napp.get(\"/testRW_2_3\",[mw1,mw2],(req,res)=>{ //挂载路由\r\n    var now = Date.now()\r\n    var gap = now-req.startTime\r\n    res.send(\"处理该请求耗时:\"+ gap + \"ms\")\r\n})\r\n\r\napp.listen(8000,()=>{\r\n    console.log(\"server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n\r\n\r\n### **中间件的分类**\r\n* **应用**级别中间件\r\n* **路由**级别中间件\r\n* **错误**级别中间件\r\n* Express**内置**中间件\r\n* **第三方**中间件\r\n\r\n\r\n### **应用级别中间件**\r\n通过`app.use()` `app.post()` `app.get()`绑定到**app实例**上的中间件都称为**应用级别中间件**\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\napp.use((req,res,next)=>{\r\n    console.log(\"这是一个应用级别中间件,同时也是全局中间件\")\r\n    next();\r\n})\r\n\r\napp.get(\"/api/test\",\r\n    (req,res,next)=>{\r\n        console.log(\"这是一个应用级别中间件,同时也是局部中间件\")\r\n        next();\r\n    },\r\n    (req,res)=>{\r\n        res.send(\"hello world\")\r\n    }\r\n)\r\n```\r\n\r\n### **路由级别中间件**\r\n绑定到`express.Router()`的**实例**上的中间件都称为**路由级别中间件**\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\nconst router = app.Router()\r\n\r\nrouter.use((req,res,next)=>{\r\n    console.log(\"这是一个路由级别中间件\")\r\n    next();\r\n})\r\n\r\nrouter.get(\"/test\",\r\n    (req,res,next)=>{\r\n        console.log(\"这是一个路由级别中间件\")\r\n        next();\r\n    },\r\n    (req,res)=>{\r\n        res.send(\"hello world\")\r\n    }\r\n)\r\n\r\napp.use(\"/api\",router)\r\n```\r\n\r\n\r\n### **错误级别中间件**  \r\n用于捕获整个项目中发生异常错误的中间件,**防止项目异常崩溃的问题**  \r\n**格式:**`function(err,req,res,next){}`  \r\n**注意:** <red>错误级别中间件需放在路由之后<red>\r\n```js\r\n//创建路由\r\napp.get(\"/test\",(req,res)=>{\r\n    throw new Error(\"服务器发生了内部错误!!!\") //手动抛出一个错误\r\n    res.send(\"hello world\")                 //此处便不会执行\r\n})\r\n\r\n//注册错误级别中间件\r\napp.use((err,req,res,next)=>{\r\n    console.log(err.message)                //输出错误信息\r\n    res.send(err.message)                   //向客户端响应\r\n})\r\n```\r\n\r\n### **内置中间件**\r\n自`express@4.16.0`起内置了三个常用中间件\r\n* `express.static` \r\n  * 用于托管指定目录下的静态网页\r\n  * (该中间件可兼任旧版本)\r\n* `express.json()`\r\n  * 用于解析<red>**请求体中**</red>的**JSON格式**的数据,解析完毕后将被挂载到`req.body`上  \r\n  * (该中间件不可兼任旧版本的express)\r\n* `express.urlencoded()`\r\n  * 用于解析<red>**请求体中**</red>中的**URL-encoded格式**的数据,解析完毕后将被挂载到`req.body`上\r\n  * (该中间件不可兼任旧版本的express)\r\n\r\n```js\r\n// 解析 application/json 格式的数据\r\napp.use(express.json())\r\n// 解析 application/x-www-form-urlencoded 格式的数据\r\napp.use(express.urlencoded({extented:false}))\r\n\r\napp.post(\"/\",(req,res)=>{ //此时便能够解析并获取到请求体中的json格式和urlencoded格式的数据了\r\n    console.log(req.body)\r\n    res.send(req.body)\r\n})\r\n```\r\n\r\n\r\n### **第三方中间件**\r\n在`express@4.16.0`内置`express.urlencoded`模块之前,常使用的一个叫<red>body-parser</red>的模块  \r\n实际上该模块就是`express.urlencoded`的前身\r\n```js\r\nconst parser = require(\"body-parser\")\r\napp.use(parser.urlencoded({extented:false}))\r\n```\r\n\r\n### **自定义中间件:尝试实现urlencoded模块**\r\n实现将请求体中的`a=123&b=321`格式的数据解析为`{a:123,b:321}`格式的json对象\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\nconst qs = require(\"querystring\")\r\nfunction BodyUrlDataDecoded(req,res,next){//定义中间件\r\n    req.bodyUrlData = []\r\n    req.on(\"data\",(chunk)=>{ //监听req的data\r\n        req.bodyUrlData.push(chunk) //收集数据片段\r\n    })\r\n    req.on(\"end\",()=>{//监听req的end事件\r\n        var temp = req.bodyUrlData.toString() //将收集的数据片段转换为字符串\r\n        req.body = qs.parse(temp) // 将字符串通过nodejs内置的querystring模块解析为json对象\r\n        next()\r\n    })\r\n}\r\napp.use(BodyUrlDataDecoded) //注册中间件\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\napp.all(\"/\",(req,res)=>{\r\n    res.setHeader(\"Access-Control-Allow-Origin\",\"*\")\r\n    res.setHeader(\"Access-Control-Allow-Headers\",\"*\")\r\n    console.log(req.body);\r\n    res.send(req.body)\r\n})\r\napp.listen(8000,()=>{\r\n    console.log(\"express server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n\r\n## 常用中间件的使用\r\n\r\n### CORS跨源访问限制\r\n**方法1:添加请求头**\r\n```js\r\nres.setHeader(\"Access-Control-Allow-Origin\",\"*\")\r\nres.setHeader(\"Access-Control-Allow-Headers\",\"*\")\r\n```\r\n\r\n方法2: 通过第三方中间件cors\r\n```js\r\nconst cors = require(\"cors\")\r\napp.use(cors)\r\n```\r\n\r\n\r\n### express-session身份认证\r\n\r\n**基本使用**\r\n```js\r\nconst session = require(\"express-session\")\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\napp.use(session({\r\n    secret: \"keyboard cat\",\r\n    resave: false,\r\n    saveUninitialized: true,\r\n}))\r\n\r\n\r\napp.post(\"/api/login\", (req, res) => {\r\n\r\n    console.log(req.session);\r\n\r\n    //判断用户名和密码是否正确\r\n    if (req.body.username != \"admin\" && req.body.password != \"admin\") {\r\n        res.send({ status: 1, msg: \"登陆失败\" })\r\n        return;\r\n    }\r\n\r\n    //保存此次会话的用户信息\r\n    req.session.userinfo = req.body\r\n    req.session.islogin = true\r\n    res.send({ status: 0, msg: \"登陆成功\" })\r\n    return;\r\n})\r\n```\r\n\r\n**`console.log(req.session);`输出的数据格式**\r\n```js\r\n// 登陆前\r\nSession {\r\n  cookie: { path: '/', _expires: null, originalMaxAge: null, httpOnly: true }\r\n}\r\n\r\n//登陆后\r\nSession {\r\n  cookie: { path: '/', _expires: null, originalMaxAge: null, httpOnly: true },\r\n  userinfo: { username: 'admin', password: 'admin' },\r\n  islogin: true\r\n}\r\n```\r\n\r\n\r\n**实现 `登陆` `登出` 的案例**\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\nconst session = require(\"express-session\")\r\n\r\napp.use(express.static(\"./webRoot\"))\r\n\r\napp.use(session({\r\n    secret: \"keyboard cat\",     //任意字符串,用于加密cookie\r\n    resave: false,              //固定写法\r\n    saveUninitialized: true,    //固定写法\r\n}))\r\n\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: false }))\r\n\r\napp.post(\"/api/login\", (req, res) => {\r\n\r\n    console.log(req.session);\r\n\r\n    //判断用户名和密码是否正确\r\n    if (req.body.username != \"admin\" && req.body.password != \"admin\") {\r\n        res.send({ \r\n            status: 1, \r\n            msg: \"登陆失败\" \r\n        })\r\n        return;\r\n    }\r\n\r\n    //保存此次会话的用户信息\r\n    req.session.userinfo = req.body\r\n    req.session.islogin = true\r\n    res.send({ \r\n        status: 0, \r\n        msg: \"登陆成功\" \r\n    })\r\n    return;\r\n})\r\n\r\napp.get(\"/api/logout\", (req, res) => {\r\n\r\n    //判断该请求的是否已经登陆\r\n    if (!req.session.islogin) {\r\n        res.send({ \r\n            status: 1, \r\n            msg: \"logout失败\" \r\n        })\r\n        return;\r\n    }\r\n\r\n    //销毁该会话\r\n    req.session.destroy()\r\n    res.send({ status: 0, msg: \"logout成功\" })\r\n    return;\r\n})\r\n\r\napp.get(\"/api/get-username\", (req, res) => {\r\n    //判断该请求的是否已经登陆\r\n    if (!req.session.islogin) {\r\n        res.send({ \r\n            status: 1, \r\n            msg: \"get-username失败\" \r\n        })\r\n        return;\r\n    }\r\n    res.send({ \r\n        status: 0, \r\n        msg: \"get-username成功\", \r\n        username: req.session.userinfo.username \r\n    })\r\n    return;\r\n})\r\n\r\n\r\napp.listen(8000, () => {\r\n    console.log(\"server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n\r\n\r\n```html\r\n    <h1>登陆</h1>\r\n    <form action=\"/api/login\" method=\"post\">\r\n        <input type=\"text\" name=\"username\"><br>\r\n        <input type=\"password\" name=\"password\"><br>\r\n        <input type=\"submit\" value=\"登陆\"><br>\r\n    </form>\r\n\r\n    <h1>登出</h1>\r\n    <form action=\"/api/logout\" method=\"get\">\r\n        <input type=\"submit\" value=\"登出\"><br>\r\n    </form>\r\n\r\n    <h1>获取当前用户的用户名</h1>\r\n    <form action=\"/api/get-username\" method=\"get\">\r\n        <input type=\"submit\" value=\"获取当前用户的用户名\"><br>\r\n    </form>\r\n```\r\n\r\n\r\n\r\n### JWT认证机制机制\r\n**安装相关包**\r\n* `jsonwebtoken` 用于将用户信息**加密**为JWT字符串\r\n* `express-jwt` 用于将从客户端收到的JWT字符串**解密**为用户信息\r\n\r\n```bash\r\nnpm install jsonwebtoken express-jwt\r\n```\r\n\r\n**实现JWT认证登陆的完整示例**\r\n\r\n![图 6](./images/express学习笔记/a6285567a812d97f3fe90506e6993ed9f7e77ca9e06f3b5bcedbca35616fe252.png)  \r\n\r\n\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n//jwt身份认证\r\nconst jwtEncode = require(\"jsonwebtoken\") //加密\r\n// const jwtDecode = require(\"express-jwt\")  //解密\r\nvar { expressjwt: jwtDecode } = require(\"express-jwt\");\r\nconst secretKey = \"dfwofwiefjw0wfej02fj023j0r2\" //随便写一段密钥用于加密token\r\n\r\n//用于支持跨源\r\nconst cors = require(\"cors\")\r\napp.use(cors())\r\n\r\n// 静态资源\r\napp.use(express.static(\"./webRoot\"))\r\n\r\n//解密请求头中的 jwtToken 解析还原为json对象 并把解析出来的信息挂载到 req.auth 上\r\n//同时配置了访问权限 没有Token则不能访问任何接口 \r\n//unless指定某些页面不需要Token 这里指定 /api/login 不需要身份认证便能访问\r\napp.use(\r\n    jwtDecode({\r\n        secret: secretKey,\r\n        algorithms: [\"HS256\"] //防止潜在的降级攻击所必需的\r\n    })\r\n        .unless({ path: [/^\\/api\\/login/] }) //指定 /api/login 不需要身份认证便能访问\r\n)\r\n\r\n//用于req.body\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: false }))\r\n\r\n//登陆api\r\napp.post(\"/api/login\", (req, res) => {\r\n\r\n    //判断用户名和密码是否正确\r\n    if (req.body.username != \"admin\" && req.body.password != \"admin\") {\r\n        res.send({\r\n            status: 1,\r\n            msg: \"登陆失败\"\r\n        })\r\n        return;\r\n    }\r\n\r\n    //生成token\r\n    //sign方法:sign(参数1,参数2,参数3)\r\n    // 参数1 待加密的数据\r\n    // 参数2 加密密钥\r\n    // 参数3 配置项,可配置有效期\r\n    var token = jwtEncode.sign({ username: req.body.username }, secretKey, { expiresIn: \"30s\" })\r\n    //发送token\r\n    res.send({\r\n        status: 0,\r\n        msg: \"登陆成功\",\r\n        token: token\r\n    })\r\n})\r\n\r\n// app.get(\"/api/logout\", (req, res) => {\r\n// logout不需要服务端执行任何操作了 只需要客户端删除token就好了\r\n//     res.send({ \r\n//         status: 0, \r\n//         msg: \"logout成功\" \r\n//     })\r\n//     return;\r\n// })\r\n\r\napp.get(\"/api/get-userinfo\", (req, res) => {\r\n    res.send({\r\n        status: 0,\r\n        msg: \"获取用户的信息成功\",\r\n        userinfo: req.auth\r\n    })\r\n    return;\r\n})\r\n\r\napp.use((err, res, req, next) => { //处理错误\r\n    if (err.name == \"UnauthorizedError\") {\r\n        req.send({\r\n            status: 401,\r\n            msg: \"未登陆或登陆状态已过期,请重新登陆\",\r\n            err: err\r\n        })\r\n    } else {\r\n        req.send({\r\n            status: 500,\r\n            msg: \"服务器未知错误\",\r\n            err: err\r\n        })\r\n    }\r\n}\r\n)\r\n\r\n\r\n\r\n\r\napp.listen(8000, () => {\r\n    console.log(\"server is running at http://127.0.0.1:8000\");\r\n})\r\n```\r\n\r\n**前端代码**\r\n```html\r\n    <!-- jquery库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n    <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n    <!-- axios 库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n    <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js\"></script>\r\n\r\n\r\n    <h1>登陆</h1>\r\n    用户:<input type=\"text\" id=\"username\"><br>\r\n    密码:<input type=\"password\" id=\"password\"><br>\r\n    <button id=\"btn-login\">登陆</button>\r\n    <div id=\"login-result\"></div>\r\n    <script>\r\n        $(\"#btn-login\").click(function () {\r\n            console.log(\"123\");\r\n            //axios(config)\r\n            axios({\r\n                method: 'post',\r\n                url: \"/api/login\",\r\n                data: {\r\n                    username: $(\"#username\").val(),\r\n                    password: $(\"#password\").val(),\r\n                }\r\n            })\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    $(\"#login-result\").text(JSON.stringify(response.data))\r\n                    sessionStorage.setItem(\"token\", response.data.token) //保存token\r\n                })\r\n        })\r\n    </script>\r\n\r\n\r\n\r\n\r\n\r\n    <h1>获取用户的信息</h1>\r\n    <button id=\"btn-get-userinfo\">获取</button>\r\n    <div id=\"get-userinfo-result\"></div>\r\n    <script>\r\n        $(\"#btn-get-userinfo\").click(function () {\r\n            //axios(config)\r\n            axios({\r\n                method: 'get',\r\n                url: \"/api/get-userinfo\",\r\n                headers: {//报头\r\n                    Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") //获取token\r\n                }\r\n            })\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    $(\"#get-userinfo-result\").text(JSON.stringify(response.data))\r\n                })\r\n        })\r\n    </script>\r\n\r\n\r\n    <h1>登出</h1>\r\n    <button id=\"btn-logout\">登出</button>\r\n    <div id=\"logout-result\"></div>\r\n    <script>\r\n        $(\"#btn-logout\").click(function () {\r\n            sessionStorage.setItem(\"token\", \"\") //清除token\r\n            $(\"#logout-result\").text(\"登出完毕\")\r\n\r\n        })\r\n    </script>\r\n```\r\n\r\n\r\n<style>\r\n    red{\r\n        color:red;\r\n    }\r\n    gre{\r\n        color:green;\r\n    }\r\n    sky{\r\n        color:skyblue;\r\n    }\r\n</style>"}