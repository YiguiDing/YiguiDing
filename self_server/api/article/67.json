{"shortInfo":{"title":"《数据结构与算法分析》第4章_5.平衡树的概念","cover":"/self_server/assets/images/《数据结构与算法分析》学习笔记/cover.png","coverWidth":813,"coverHeight":539,"date":"2022-05-30T16:18:26.000Z","modified":"2022-05-31T00:36:11.025Z","tags":["《数据结构与算法分析》","笔记"],"hideAtIndex":true,"categories":"笔记","id":67,"countWords":287,"readSeconds":28.7,"assetsbaseUrl":"/self_server/assets/"},"content":"# 第4章_5.平衡树的概念\r\n## 平衡树\r\n* 将一个有序的数据插入到一颗空的二叉树中，插入完成后，二叉树将会变得没有左节点只有右节点，也就是说退化成了链表。而链表的插入操作，往一个长度为n的有序链表中插入一个数据，其平均时间复杂度为O(n)，那么插入n个数据，将会花费二次时间。\r\n* **解决办法：**要有一个附加的**平衡(balance)结构的条件:任何节点的深度不得过深**\r\n* **较老的实现平衡树方法**\r\n  * 算法大部分都比标准二叉查找树复杂\r\n  * 更新平均也要花费更长的时间\r\n  * 最老的一种平衡查找树就是**AVL树**\r\n* **较新的实现平衡树方法**\r\n  + 放弃平衡条件，允许树有任意深度\r\n  + 为使后续操作更高效，每次操作之后要**根据调整规则进行调整**\r\n  + 这种数据结构属于自调整类结构(self-adjusting)\r\n  + **伸展树(splay tree)** 就是这种数据类型，其分析相当复杂 \r\n"}