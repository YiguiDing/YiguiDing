{"shortInfo":{"title":"JavaScript基础知识复习笔记","date":"2022-06-23T21:27:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["JavaScript","前端"],"hideAtIndex":true,"categories":"笔记","id":23,"countWords":6624,"readSeconds":662.4,"assetsbaseUrl":"/self_server/assets/"},"content":"# JavaScript基础知识复习笔记\r\n\r\n## 目录\r\n- [JavaScript基础知识复习笔记](#javascript基础知识复习笔记)\r\n  - [目录](#目录)\r\n  - [简介](#简介)\r\n    - [用处](#用处)\r\n    - [浏览器组成](#浏览器组成)\r\n    - [js组成](#js组成)\r\n      - [ECMAScript](#ecmascript)\r\n      - [DOM](#dom)\r\n      - [BOM](#bom)\r\n  - [书写位置](#书写位置)\r\n    - [行内式](#行内式)\r\n    - [内嵌式](#内嵌式)\r\n    - [外链式](#外链式)\r\n  - [注释](#注释)\r\n  - [输入输出](#输入输出)\r\n  - [变量](#变量)\r\n    - [特殊情况](#特殊情况)\r\n    - [命名规范](#命名规范)\r\n  - [数据类型](#数据类型)\r\n    - [数据类型分类](#数据类型分类)\r\n      - [数字型Number](#数字型number)\r\n      - [字符串型String](#字符串型string)\r\n        - [转义字符](#转义字符)\r\n        - [长度](#长度)\r\n        - [拼接](#拼接)\r\n      - [布尔型Boolean](#布尔型boolean)\r\n      - [未定义Undefined](#未定义undefined)\r\n      - [空值Null](#空值null)\r\n    - [数据类型检测](#数据类型检测)\r\n    - [通过控制台颜色判断类型](#通过控制台颜色判断类型)\r\n    - [字面量](#字面量)\r\n    - [数据类型转换](#数据类型转换)\r\n      - [转为字符串](#转为字符串)\r\n      - [转为数值型](#转为数值型)\r\n      - [转为布尔型](#转为布尔型)\r\n  - [标识符、关键字、保留字](#标识符关键字保留字)\r\n  - [运算符](#运算符)\r\n    - [逻辑与的逻辑中断](#逻辑与的逻辑中断)\r\n    - [逻辑或的逻辑中断](#逻辑或的逻辑中断)\r\n  - [运算符优先级](#运算符优先级)\r\n  - [流程控制](#流程控制)\r\n    - [分支](#分支)\r\n    - [循环](#循环)\r\n    - [相关关键字](#相关关键字)\r\n  - [数组Arrary](#数组arrary)\r\n    - [创建](#创建)\r\n    - [遍历](#遍历)\r\n    - [新增元素](#新增元素)\r\n  - [函数](#函数)\r\n    - [先声明后使用](#先声明后使用)\r\n    - [形参和实参个数问题](#形参和实参个数问题)\r\n    - [arguments](#arguments)\r\n  - [立即执行函数](#立即执行函数)\r\n    - [写法](#写法)\r\n  - [作用域](#作用域)\r\n    - [作用域链](#作用域链)\r\n  - [预解析](#预解析)\r\n    - [案例1](#案例1)\r\n    - [案例2](#案例2)\r\n    - [案例3](#案例3)\r\n    - [案例4（经典面试题）](#案例4经典面试题)\r\n  - [自定义对象](#自定义对象)\r\n    - [创建对象](#创建对象)\r\n    - [new关键字](#new关键字)\r\n    - [遍历对象](#遍历对象)\r\n  - [内置对象](#内置对象)\r\n    - [Math对象](#math对象)\r\n    - [Date对象](#date对象)\r\n      - [网页倒计时效果例程](#网页倒计时效果例程)\r\n    - [Array对象](#array对象)\r\n    - [String对象](#string对象)\r\n      - [基本包装类型](#基本包装类型)\r\n      - [字符串不可变性](#字符串不可变性)\r\n    - [String对象的常用方法](#string对象的常用方法)\r\n    - [试写相关算法](#试写相关算法)\r\n  - [数据类型总结](#数据类型总结)\r\n    - [分类](#分类)\r\n    - [堆和栈](#堆和栈)\r\n    - [函数的值传递：类似c语言](#函数的值传递类似c语言)\r\n\r\n## 简介\r\n* 布兰登艾奇（Brendan Eich 1961~）在1995年10天时间设计出了JavaScript  \r\n* 网景公司最初命名为LiveScript 后与sun公司（Java由Sun公司发明）合作改名为JavaScript   \r\n* JavaScript是运行在客户端的脚本（script）语言  \r\n* 脚本语言 ：不需要编译，运行过程有js解释器逐行解释并执行  \r\n* 现在也可以基于nodejs进行服务端编程  \r\n\r\n### 用处\r\n* 表单动态校验 ：密码强度检测（js产生的最初目的）\r\n* 网页特效\r\n* 服务端开发（nodejs）\r\n* 桌面程序（Electron）\r\n* App（Cordova）\r\n* 硬件控制-物联网（Ruff）\r\n* 游戏开发（cocos2d-js）\r\n\r\n### 浏览器组成\r\n* 渲染引擎 ：解析html css 俗称内核，Chrome的blink 老版本的webkit\r\n* js引擎 ：**解释执行**网页的JavaScript代码，Chrome的v8\r\n    * 浏览器本身并不会执行js代码，而是通过内置引擎来执行\r\n    * **其它的JavaScript的引擎**转换成**字节码**或JavaScript，**V8使用c++开发**，**V8将JavaScript编译成原生机器码**，使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，**JavaScript程序在V8引擎下的运行速度媲美二进制程序。**\r\n\r\n\r\n### js组成\r\n* ECMAScript ：JavaScript语法\r\n* DOM ：页面文档对象模型\r\n* BOM ：浏览器对象模型\r\n\r\n#### ECMAScript\r\n* ECMAScript 国际标准 由ECMA国际组织进行标准化 规定了JS的编程语法和基础核心知识\r\n* JavaScript 工业标准 网景公司\r\n* JScript 工业标准 微软公司\r\n\r\n#### DOM\r\n* （Document Object Model）页面文档对象模型\r\n* 是W3C组织推荐的处理可扩展标记语言的标准编程接口\r\n* 通过DOM提供的接口可对页面元素进行操作（大小、位置、颜色...）\r\n\r\n#### BOM\r\n* （Browser Object Model）浏览器对象模型\r\n* 通过BOM可操作浏览器窗口，如弹出框，控制跳转，获取分辨率\r\n\r\n\r\n## 书写位置\r\n\r\n### 行内式\r\n直接写在html元素标签内部   \r\n因为html标签属性值使用双引号，js字符串应当使用单引号\r\n```html\r\n<input type=\"button\" value=\"这是一个按钮\" onclick=\"alert('提示框内容')\">\r\n```\r\n\r\n### 内嵌式\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n    <script>\r\n        alert('提示框内容');\r\n    </script>\r\n</head>\r\n<body>\r\n    \r\n</body>\r\n</html>\r\n```\r\n\r\n### 外链式\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n    <script src=\"./js/index.js\"></script>\r\n</head>\r\n<body>\r\n    \r\n</body>\r\n</html>\r\n```\r\n\r\n## 注释\r\n* 单行注释\r\n* 多行注释\r\n```js\r\n\r\n//单行注释\r\n\r\n/*\r\n多行注释\r\n多行注释\r\n*/\r\n\r\n```\r\n\r\n\r\n## 输入输出\r\n* 弹出输入框 `prompt(\"字符串\")` 返回值类型：`string`\r\n* 弹出提示框 `alert(\"字符串\")`\r\n* 控制台打印信息 `console.log(\"字符串\")`\r\n\r\n## 变量\r\n* 使用var关键字声明变量：`var num;`\r\n* 赋值 `num=1;`\r\n* 声明并赋值 `var myname=\"DingYigui\";`\r\n\r\n### 特殊情况\r\n* 只声明不赋值，直接使用，变量为`undefined`\r\n* 不声明不赋值，直接使用，程序会报错：变量未定义；**报错之后，后续代码不再执行**\r\n* 不声明直接赋值，可以直接使用，成为全局变量\r\n\r\n### 命名规范\r\n* 有字母数字下划线及$组成  \r\n* 区分大小写  \r\n* 不能以数字开头  \r\n* 不能是关键字、保留字  \r\n\r\n* 其他\r\n    * **建议**变量名、函数名有意义  \r\n    * **建议**遵循驼峰命名法thisIsAVar  \r\n    * 变量名一般用名词\r\n    * 函数名一般用动词\r\n    * name不是关键字也不是保留字，但在一些浏览器中有其他含义，最好不要用作变量名\r\n    * \r\n\r\n\r\n\r\n## 数据类型\r\nJavaScript是**弱类型语言**，或者说**动态语言**。   \r\n不用提前声明变量的类型，**在程序运行过程中类型会自动被确定**  \r\n数字型变量在被赋值为字符串后自动变为字符串型\r\n\r\n### 数据类型分类\r\n* 简单数据类型 ： **Number** **String** **Boolean** **Undefined** **Null**\r\n* 复杂数据类型：object\r\n![](./images/JavaScript基础知识复习笔记/2022-06-24-15-01-21.png)\r\n\r\n#### 数字型Number\r\n* 整数：`var a=0;`\r\n* 小数：`var a=1.5;`\r\n* 八进制：`var a=07;//八进制`\r\n* 十六进制：`var a=0xff;//十六进制`\r\n\r\n范围\r\n```js\r\nalert(Number.MAX_VALUE);//最大值 \r\nalert(Number.MIN_VALUE);//最小值 \r\n```\r\n\r\n特殊值\r\n```js\r\nalert(Infinity);//无穷大\r\nalert(-Infinity);//无穷小 \r\nalert(NaN);//Not a Number 不是一个数\r\n\r\nalert(Number.MAX_VALUE*2);//将会输出Infinity\r\nalert(\"字符串\"-100);//将会输出NaN\r\n```\r\n\r\n函数\r\n```js\r\nisNaN() //判断是否是NaN\r\n```\r\n\r\n#### 字符串型String\r\n加了引号或双引号就是字符串  \r\n字符串中需要包含单引号时外部用双引号  \r\n字符串中需要包含双引号时外部用单引号  \r\n\r\n##### 转义字符\r\n* \\t\r\n* \\n newline换行\r\n* \\\\\\\r\n* \\'\r\n* \\\" \r\n* \\b blank空格\r\n\r\n##### 长度  \r\n```js\r\nvar str=\"123\"  \r\nalert(str.length)\r\n```\r\n\r\n##### 拼接  \r\n```js\r\n\"123\"+\"456\"  \r\nstr1 + str2\r\n```\r\n\r\n字符串和其他类型拼接，先会把其他类型自动转为字符串，结果为字符串\r\n```js\r\n\"123\"+ 456\r\n\"123\"+ true\r\n```\r\n#### 布尔型Boolean\r\n* 取值为 **true** 或 **false**  \r\n* 在餐饮数值运算时被当做1或0  \r\n\r\n#### 未定义Undefined\r\n* 变量声明不赋值时，变量的默认值\r\n    ```js\r\n    var i;\r\n    ```\r\n* 也可以直接赋值为undefined\r\n    ```js\r\n    var i=undefined;\r\n    ```\r\n* 和字符串相连会被转换成字符串\"undefined\"  \r\n* 和数值运算结果为NaN\r\n\r\n#### 空值Null\r\n```js\r\nvar i=null\r\n```\r\n* 空值和字符串相连被当做字符串\"undefined\"  \r\n* 空值和数字相加被当做0\r\n\r\n### 数据类型检测\r\n* 语法：`typeof 变量名` \r\n* 结果为\"number\" 、 \"string\" 、 \"boolean\" 、 \"undefined\" 、 \"object\"(var a=null;a是对象)\r\n\r\n```js\r\nvar x= prompt(\"请输入数字\")\r\nconsole.log(typeof x);//输出string\r\n```\r\n\r\n### 通过控制台颜色判断类型\r\n* 蓝色为数值\r\n* 深蓝色为布尔值\r\n* 灰色为字符串\r\n\r\n![](./images/JavaScript基础知识复习笔记/2022-06-25-04-32-58.png)\r\n![](./images/JavaScript基础知识复习笔记/2022-06-25-04-32-43.png)\r\n\r\n### 字面量\r\n数字字面量1，2，3 1.5\r\n字符串字面量 \"123\" '123'\r\n布尔字面量 true false\r\n\r\n### 数据类型转换\r\n* 表单、prompt()获取到的数据默认是字符串类型，不能进行加减运算\r\n* 三种转换\r\n    * 转换成字符串\r\n    * 转换成数字\r\n    * 转换成布尔型\r\n\r\n#### 转为字符串\r\n* `XXX.toString()`\r\n* `String(XXX)`强制转换\r\n* `XXX+\"\"`拼接字符串 利用+运算转换为字符串\r\n```js\r\n// toString()\r\nvar num=1;\r\nvar str=num.toString();\r\nconsole.log(typeof str)\r\n\r\n// String()强制转换\r\nconsole.log(typeof String(123))\r\n\r\n\r\n// 加号拼接字符串\r\n123+\"\"\r\nconsole.log(typeof (123+\"\"))\r\n```\r\n#### 转为数值型\r\n* `parseInt(string)` 获取整数部分\r\n* `parseFloat(string)` 获取整数及小数部分\r\n* `Number()` 强制转换为数值型 获取整数及小数部分\r\n* js隐式转换（`- * /`）利用算术运算转换为数值型\r\n\r\n```js\r\nparseInt(\"1.5px\")//结果：1\r\nparseInt(\"width:1.5px\")//结果：NaN\r\n\r\nparseFloat(\"1.5px\")//结果：1.5\r\nparseFloat(\"width:1.5px\")//结果：NaN\r\n\r\nNumber(\"1.\")//结果：1\r\nNumber(\"1.5\")//结果：1.5\r\n\r\n\"1.5\"+1.5 //结果为字符串拼接效果：\"1.51.5\"\r\n\"1.5\"-1.5 //结果为数值相相减效果：0\r\n\"1.5\"*1.5 //结果为数值相乘效果：2.25\r\n\"1.5\"/1.5 //结果为数值相除效果：1\r\n\r\n```\r\n\r\n#### 转为布尔型\r\n* Boolean()\r\n* 代表空的否定的值都会转换成`false`：0 、 \"\" 、null 、NaN 、undefined \r\n* 其余都会被转换成`true`\r\n\r\n```js\r\nBoolean(null)//false\r\nBoolean(0)//false\r\nBoolean(NaN)//false\r\nBoolean(\"\")//false\r\nBoolean(undefined)//false\r\n\r\n```\r\n\r\n## 标识符、关键字、保留字\r\n* **标识(zhi)符**:变量名、函数名、参数名...\r\n    * 不能是关键字或保留字\r\n* **关键字**：编程语言中已经使用的字，for break case...\r\n* **保留字**：预留的关键字byte char const double\r\n\r\n## 运算符\r\n* 算数：+ - * %\r\n    * 由于表示精度问题，浮点数0.1+0.2不一定等于0.3\r\n* 自增自减：++i --i i++ i--\r\n* 比较运算符（关系运算符）\r\n    * <\r\n    * \\>\r\n    * \\<=\r\n    * \\>=\r\n    * == 会自动类型转换：1==\"1\"为真\r\n    * != 不等\r\n    * === 全等，要求值相同，类型也相同，才为真\r\n    * !== 不等\r\n\r\n* 逻辑运算符:\r\n    * 与&&\r\n    * 或||\r\n    * 非!\r\n\r\n* 赋值运算符\r\n    * =\r\n    * += -=\r\n    * *= /= %=\r\n\r\n### 逻辑与的逻辑中断\r\n表达式1&&表达式2  \r\n* 当表达式1的值为真，整个表达式的返回值为表达式2\r\n* 当表达式1的值为假，整个表达式的返回值为表达式1\r\n\r\n```js\r\n123 && 321 //返回321\r\n\r\n0 && 321 //返回0\r\n'' && 321 //返回''\r\nfalse && 321 //返回false\r\nundefined && 321 //返回undefined\r\n```\r\n\r\n### 逻辑或的逻辑中断\r\n表达式1||表达式2  \r\n* 如果表达式1的值为真，则整个表达式的值为表达式1\r\n* 如果表达式1的值为假，则整个表达式的值为表达式2\r\n\r\n```js\r\n123 || 321 //返回123\r\n\r\n0 || 321 //返回321\r\n'' || 321 //返回321\r\nfalse || 321 //返回321\r\nundefined || 321 //返回321\r\n```\r\n\r\n\r\n## 运算符优先级\r\n![](./images/JavaScript基础知识复习笔记/2022-06-26-04-17-35.png)\r\n\r\n## 流程控制\r\n\r\n### 分支\r\nif分支:和c语言语法一致\r\n```js\r\nif(表达式){\r\n    语句;\r\n}\r\n\r\nif(表达式){\r\n    语句;\r\n}else{\r\n    语句2;\r\n}\r\n\r\nif(表达式){\r\n    语句;\r\n}\r\nelse if(表达式2){\r\n    语句2;\r\n}else{\r\n    语句3;\r\n}\r\n```\r\n\r\n三元表达式\r\n```js\r\nresult=表达式1? 表达式2:表达式3;\r\n```\r\n\r\n多分支语句：也是和c语言类似\r\n```js\r\nswitch(变量 或 表达式){\r\n    case 变量值1:  //要求 switch中的值 和 case 的值 是全等的关系\r\n        语句1;\r\n        break;\r\n    case 变量值2:\r\n        语句2;\r\n        break;\r\n    case 变量值3:\r\n        语句3;\r\n        break;\r\n    default:\r\n        语句4;\r\n        break; //default如果没有写在所有case的最后，则break不能省略，\r\n}\r\n```\r\n\r\n### 循环\r\nfor\r\n```js\r\nfor(var i=1;i<=100;i++){\r\n    语句1;\r\n}\r\n```\r\n\r\nwhile\r\n```js\r\nwhile(表达式){\r\n    语句1;\r\n}\r\n```\r\n\r\ndo\r\n```js\r\ndo{\r\n    语句1;\r\n}while(表达式);\r\n```\r\n\r\n```js\r\n//语法\r\nfor(变量名 in 对象或数组){\r\n    //\r\n}\r\n```\r\n\r\n### 相关关键字\r\n* continue 立即结束本次循环，进入下一次循环\r\n* break 立即跳出整个循环\r\n\r\n\r\n## 数组Arrary\r\n* 数组中可以存放**任意类型**的数据\r\n### 创建\r\n* 利用字面量创建数组\r\n```js\r\nvar arr=[];//创建空数组\r\nvar arr=[1,2.5,\"3\",ture];\r\narr[2]//\"3\"\r\n```\r\n* new创建数组\r\n```js\r\n    var arr=new Array();//创建空数组\r\n```\r\n### 遍历\r\n```js\r\nvar arr=[1,2,3,4,5];\r\nfor(var i=0;i<arr.length;i++){\r\n    console.log(arr[i]);\r\n}\r\n```\r\n\r\n### 新增元素\r\n方法1\r\n* XXX.length是可修改的\r\n* XXX.length+=2后，会新增两个undefined的元素\r\n* 在这个位置赋值就好了\r\n\r\n方法2\r\n* 直接索引到元素然后赋值\r\n```js\r\nvar arr=[];\r\nfor(var i=0;i<100;i++)\r\n{\r\n    arr[i]=i;\r\n}\r\nconsole.log(arr);\r\n```\r\n\r\n## 函数\r\n### 先声明后使用\r\n* 声明方法1：\r\n    ```js\r\n    // 声明方法1：\r\n    function 函数名(形式参数1,形式参数2,....){\r\n        语句;\r\n        //利用return返回值：\r\n        return 需要返回的结果 ;\r\n        //利用return返回多个结果\r\n        return [result1,result2];\r\n        //利用return终止函数：\r\n        return;//没有返回值的函数 或返回值为return; 其返回值的值为undefined\r\n    }\r\n    //调用：\r\n    var y = 函数名(实际参数1,实际参数2,....);\r\n    ```\r\n\r\n* 声明方法2（匿名函数）：\r\n    ```js\r\n    // 声明方法2（匿名函数）：\r\n    var 变量名 = function(形式参数1,形式参数2,....){\r\n        // 语句;\r\n    }\r\n    // 调用：\r\n    变量名(实际参数1,实际参数2,....);\r\n    ```\r\n\r\n### 形参和实参个数问题\r\n```js\r\nfunction A(x1,x2){\r\n    console.log(x1+x2);\r\n}\r\n\r\nA(1);// 形参x1被赋值为1 x2没有被赋值 结果为undefined 于是x1+x2结果为NaN\r\nA(1,2);//结果为3\r\nA(1,2,3);//形参x1被赋值为1 x2被赋值为2 实参3被忽略\r\n\r\n```\r\n\r\n### arguments\r\n* arguments是所有函数都具有的**内置对象**\r\n* 可以通过该对象获取函数传入的所有实参、和实参的具体个数\r\n* arguments是一个**伪数组**\r\n    * 具有length属性\r\n    * 按索引获取元素\r\n    * 没有pop push 等方法\r\n\r\n```js\r\nfunction A(){\r\n    console.log(arguments)\r\n}\r\n\r\nA();\r\nA(1,2,3,4,5);\r\n```\r\n\r\n## 立即执行函数\r\n* 不需要先声明后调用，声明后立马就能执行的函数\r\n* 立即函数的最大作用就是创建了一个独立的作用域，其中创建的所有变量都是局部变量\r\n* 两个不同的立即函数直接需用分号隔开\r\n\r\n### 写法\r\n```js\r\n//写法1：相当于 var fun = function(形参列表){}; (fun)(实参列表);\r\n(function(形参列表){})(实参列表);\r\n\r\n//写法2: 相当于 var fun = function(形参列表){}; fun(实参列表);\r\n(function(形参列表){}(实参列表));\r\n```\r\n\r\n\r\n\r\n\r\n## 作用域\r\n* 全局变量：\r\n    * 作用域：作用于整个js文件或整个script标签\r\n    * 全局变量在作用域中的任何位置都可以使用\r\n    * 若在局部使用的一个未声明的变量，则该变量自动变为全局变量\r\n* 局部变量\r\n    * 形参、函数内部变量\r\n    * \r\n* 块级作用域（ es6新增）\r\n    * {}\r\n    * if(){}\r\n    * for(){} while(){} do{}while()\r\n    * 大括号里面声明的变量不能在之外声明\r\n\r\n### 作用域链\r\n内部函数访问外部变量时，按嵌套的深度查找，深度优先\r\n\r\n```js\r\nvar num=1;\r\nfunction a(){\r\n    var num=2;\r\n    function b(){\r\n        console.log(num);//2\r\n    }\r\n}\r\n```\r\n\r\n## 预解析\r\njs引擎在执行js脚本时分为两步\r\n* 预解析：将所有 var声明的全局变量 和 函数 提升到**当前**作用域之前\r\n    * 变量预解析（变量提升）：仅仅是将var变量的声明提前，**赋初值的操作不会提前。**\r\n    * 函数预解析（函数提升）：把函数声明提升到最前\r\n* 执行代码：按书写顺序执行\r\n\r\n\r\n变量预解析导致undefined的示例：\r\n```js\r\nconsole.log(y);//undefined\r\nvar y=123;\r\n//相当于：\r\nvar y;\r\nconsole.log(y);//undefined\r\ny=123;\r\n```\r\n\r\n```js\r\na();// 返回：1\r\nfunction a(){\r\n    return 1;\r\n}\r\n// 相当于：\r\nfunction a(){\r\n    return 1;\r\n}\r\na();// 返回：1\r\n\r\n//所以非匿名函数的声明写在使用语句之前不会有什么问题\r\n```\r\n\r\n```js\r\nf();//undefined\r\nvar f=function(){return 123;}\r\n\r\n// 相当于：\r\nvar f;\r\nf();//undefined\r\nf=function(){return 123;}\r\n```\r\n\r\n\r\n### 案例1  \r\n输出结果是undefined而不是10\r\n```js\r\nvar num=10;\r\nfun();\r\nfunction fun(){\r\n    console.log(num);\r\n    var num = 20;\r\n}\r\n```\r\n相当于：\r\n```js\r\nvar num=10;\r\nfunction fun(){\r\n    var num;\r\n    console.log(num);\r\n    num = 20;\r\n}\r\nfun();\r\n```\r\n\r\n### 案例2  \r\n结果：  \r\nundefined  \r\n20  \r\n![](./images/JavaScript基础知识复习笔记/2022-06-26-10-21-28.png)\r\n\r\n### 案例3  \r\n结果：  \r\nundefined  \r\n9\r\n\r\n![](./images/JavaScript基础知识复习笔记/2022-06-26-10-23-27.png)\r\n\r\n### 案例4（经典面试题）  \r\n结果：  \r\n9  \r\n9  \r\n9  \r\n9  \r\n9  \r\n报错：undefined  \r\n![](./images/JavaScript基础知识复习笔记/2022-06-26-10-26-27.png)\r\n\r\n## 自定义对象\r\n* js中对象有三种\r\n    * 自定义对象\r\n    * 内置对象\r\n    * 浏览器对象\r\n* 对象由**属性**和**方法**组成\r\n* 对象是**复杂数据类型**object\r\n* 对象是无序的相关属性和方法的集合\r\n* 构造函数抽象出了对象的公共部分，封装到了函数中，泛指了某一大类\r\n* 利用构造函数创建对象的过程也称为**对象实例化**\r\n### 创建对象\r\n* **字面量**创建对象,大括号{} \r\n    ```js\r\n    //创建\r\n    var obj={\r\n        //键值对\r\n        name:\"dyg\",\r\n        age:18,\r\n        sayHi:function(){\r\n                ;\r\n            }\r\n        }\r\n    //使用\r\n    obj.name\r\n    obj[\"name\"]\r\n    obj.age\r\n    obj.sayHi();\r\n    ```\r\n* **new**创建对象\r\n    ```js\r\n    var obj=new Object();//创建空对象\r\n    obj.name=\"DingYigui\" //追加属性\r\n    obj.age=18;\r\n    obj.sayHi=function(){};//追加方法\r\n    ```\r\n* **构造函数**创建对象  \r\n    构造函数是特殊的函数，用来初始化对象，为对象初始化值，与new一起使用  \r\n    * **构造函数首字母必须大写**    \r\n    * **构造函数不需要返回值就能返回对象**  \r\n    * **调用构造函数必须使用new**  \r\n    ```js\r\n    function 构造函数名(形式参数1,形式参数2,...){\r\n        this.属性名=形式参数1;\r\n        this.方法名=function (){};\r\n    }\r\n\r\n    var obj=new 构造函数名(实际参数1,形式参数2,...);\r\n    ```\r\n\r\n### new关键字\r\nnew关键字创建对象的过程  \r\n1. new 构造函数(); 会在内存中创建一个空对象。\r\n2. this会指向创建的空对象。\r\n3. 执行构造函数内的语句，给空对象添加属性和方法\r\n4. 返回这个对象\r\n\r\n### 遍历对象\r\n```js\r\n//语法\r\nfor(变量 in 对象){\r\n    //\r\n}\r\n\r\n//示例\r\nvar obj = {name:\"dingYigui\",age:\"18\"}\r\nfor(key in obj){\r\n    console.log(key);//属性名\r\n    console.log(obj[key]);//属性值\r\n}\r\n```\r\n\r\n## 内置对象\r\n* **一般查文档**[**MDN**](https://developer.mozilla.org/)\r\n### Math对象\r\n* Math不是一个构造函数名，而是一个静态的对象（就是字面量创建的对象{}）\r\n* 常用属性\r\n    * `Math.PI` \r\n    * `Math.E` \r\n* 常用方法\r\n    * `Math.sqrt()`\r\n    * `Math.max()` \r\n        * 正常返回实参数组的最大值\r\n        * 有非数返回NaN\r\n        * 没有实参返回负无穷\r\n    * `Math.min()`\r\n    * `Math.floor()` 向下取整\r\n    * `Math.ceil()` 向上取整\r\n    * `Math.round()` 四舍五入 \r\n        * **3.5结果为4** \r\n        * 但：**-3.5结果为-3** \r\n    * `Math.abs()` 绝对值 \"-1\"能隐式转换\r\n    * `Math.random()`  `[0,1)`\r\n\r\n### Date对象\r\n* Date不是静态对象，而是一个构造函数名 只能通过new实例化日期对象\r\n* 常用声明写法\r\n    * `new Date();` 默认传入值为当前时间\r\n    * `new Date(value);` value是毫秒数\r\n    * `new Date(dateString);`\r\n        * `new Date(\"1995-12-17 03:24:00\");`\r\n    * `new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);`\r\n        * `new Date(2022,6,27)`\r\n* 常用方法\r\n    * `obj.getFullYear()` 年\r\n    * `obj.getMonth()` 月，0-11\r\n    * `obj.getDate()` 日\r\n    * `obj.getDay()` 星期日->六 0->6 \r\n    * `obj.getHours()` 时\r\n    * `obj.getMinutes()` 分\r\n    * `obj.getSeconds()` 秒\r\n    * `obj.valueOf()` 获取毫秒数（自1970.1.1）\r\n    * `obj.getTime()` 获取毫秒数（自1970.1.1）\r\n    * `var date = + new Date();` 获取毫秒数（自1970.1.1）\r\n    * `Date.now()` 获取毫秒数（自1970.1.1） **H5新增的方法，不用new**\r\n* 由于不同时刻获取到的毫秒数不会重复，所以毫秒数也叫**时间戳**\r\n\r\n#### 网页倒计时效果例程\r\n```js\r\nfunction getLast(targetTime){\r\n    var target=+new Date(targetTime);\r\n    var now=+new Date();\r\n\r\n    var last=(target-now)/1000;//剩余总毫秒数\r\n    last=last<=0? 0:last;\r\n\r\n    var d=parseInt(last/60/60/24);\r\n    var h=parseInt(last/60/60%24);\r\n    var m=parseInt(last/60%60);\r\n    var s=parseInt(last%60);\r\n\r\n    d=d<10? \"0\"+d:d;\r\n    h=h<10? \"0\"+h:h;\r\n    m=m<10? \"0\"+m:m;\r\n    s=s<10? \"0\"+s:s;\r\n\r\n    return d+\" \"+h+\":\"+m+\":\"+s;\r\n}\r\n\r\nconsole.log(getLast(\"2022-6-28 12:24:00\"));\r\nconsole.log(getLast(0));\r\n```\r\n\r\n### Array对象\r\n* 常用字面量`[]`声明，或用`new Array()`声明空数组\r\n* 检测是否为数组： \r\n    * `instanceof` **运算符** 返回布尔值 `obj instanceof Array` 判断x是否为Array\r\n    * `Array.isArray(obj)` 检测是否为数组 Array内置方法\r\n* 常用方法\r\n    * `new Array(2)` 表示声明一个长度为2的空数组\r\n    * `new Array(2,3)` 表示声明一个数组`[2,3]`\r\n    * `Array.isArray(obj)` 检测是否为数组 Array内置方法\r\n    * `obj.push(x[,y,z])` 数组**末尾**添加一个或多个元素 **返回新数组长度**\r\n    * `obj.unshift(x[,y,z])` 数组**开头**添加一个或多个元素 **返回新数组长度**\r\n    * `obj.pop()` **弹出（删除）**数组中**最后一个**元素，**返回值为弹出的这个元素**\r\n    * `obj.shift()` **弹出（删除）**数组中**第一个**元素，**返回值为弹出的这个元素**\r\n    * `obj.reverse()` 翻转原数组 返回该数组\r\n    * `obj.sort()` 字典序排序 只能对0-9的数字完美排序\r\n    * `obj.sort(function(a,b){return a-b;})` 能对数字大小排序 a-b升序 b-a降序\r\n    * `obj.indexOf(x)` 返回数组中**第一个**元素x的索引  查找不到返回-1\r\n    * `obj.indexOf(x)` 返回数组中**最后一个**元素x的索引  查找不到返回-1\r\n    * `obj.indexOf(x,startIndex)` 同上，从某个位置开始查找\r\n    * `obj.toString()` 数组转字符串,逗号分隔 返回值字符串，不修改原数组\r\n    * `obj.join(\"分隔符 无实参默认逗号\")` 数组转字符串,自定义分隔符分隔 返回值字符串，不修改原数组\r\n    * `obj.concat()` 连接两个或多个数组，应该不影响原数组\r\n    * `obj.slice(beginIndex,endIndex)` 数组截取，返回被截取出的新数组 不会影响原数组\r\n    * `obj.splice(beginIndex,要删除个数)` 数组删除，返回被删除的数组，会影响原数组\r\n    * `obj.splice(obj.findIndex( (item)=> item.id == targetId),1)` 删除符合条件的指定元素\r\n    * `obj.filter( (item,index,arr) => return item > 10 )` filter过滤器,不会对空数组进行检测；不会改变原始数组\r\n    * `obj.includes(item)` 判断数组中是否包含某元素\r\n\r\n去重\r\n```js\r\n//遍历旧数组\r\n//如果旧数字的元素在新数组中查找不到，则插入新数组\r\n//否则进入下一次循环\r\n\r\nvar oldArray=[123,123,123,456,456,789,789]\r\nvar newArray=[];\r\nfor(index in oldArray){\r\n    if(newArray.indexOf(oldArray[index])==-1)\r\n        newArray.push(oldArray[index])\r\n}\r\nconsole.log(newArray);\r\n```\r\n\r\n### String对象\r\n\r\n#### 基本包装类型\r\n基本包装类型：js会把基本数据类型包装成复杂数据类型，这样基本数据类型就有了属性和方法\r\n\r\njs提供了三个特殊的引用类型：\r\n* String\r\n* Number\r\n* Boolean  \r\n\r\n```js\r\n//基本数据类型是没有属性和方法的，但是一下代码能正常执行\r\nvar str=\"DingYigui\"\r\nconsole.log(str.length);\r\n\r\n//上述代码的执行过程为\r\n// 1、生成临时变量，把简单类型保证成复杂数据类型\r\nvar temp = new String(\"DingYigui\")\r\n//2.赋值\r\nstr=temp;\r\n// 3. 销毁\r\ntemp=null;\r\n\r\n```\r\n\r\n#### 字符串不可变性\r\n字符串内的值不可变，虽看上去内容可以改变，实际是在内存中开辟了新的空间，地址变了  \r\n不要频繁拼接字符串：\r\n```js\r\n// 不要频繁拼接字符串，因为该过程会不断申请新内存\r\nvar str=\"123\"\r\nstr=\"456\"//重新给字符串赋值会在内存中重新开辟空间，这个特点就是字符串不可变\r\n\r\n//由于字符串不可变，频繁拼接字符串就会有效率问题，因为开辟空间需要时间\r\n\r\nfor(var i=0;i<10000000;i++)\r\n{\r\n    str+=i;\r\n}\r\nconsole.log(str)//非常耗时\r\n\r\n```\r\n\r\n### String对象的常用方法\r\n由于字符串的不可变性，字符串的所有方法不会修改字符串本身，只会返回一个新的字符串\r\n\r\n* `str.indexOf(\"查找字符\")`\r\n* `str.indexOf(\"查找字符\",startIndex)`\r\n* `str.charAt(index)` 返回指定位置字符\r\n* `str[index]` 返回指定位置字符 (html5 IE8+)\r\n* `str.charCodeAt(index)` 返回指定位置字符的ASCII码\r\n* `str.concat(str1,str2,str3)` 拼接两个多多个字符串 等效+运算符\r\n* `str.substr(starIndex,length)` 返回从某位置开始指定长度的字符串\r\n* `str.slice(start,end)` 截取下标(start,end] 的字符串，可以理解为切片\r\n* `str.substring(start,end)` 截取下标(start,end] 的字符串，同上，但是不接受负数\r\n* `str.replace(\"被替换的字符\",\"替换为字符\")`  只替换第一个字符  \r\n* `str.split(\"根据字符串中的什么字符作为分隔符\")` 字符转数组 \r\n    * `arr.join(\"分隔符\")` 是数组转字符串\r\n* `str.toUpperCase()` 转大写\r\n* `str.toLowerCase()` 转小写\r\n* \r\n\r\n### 试写相关算法\r\n查找字符串中所有z出现的位置及次数\r\n\r\n```js\r\nvar str=\"abcdzqwezxqwezgeflz\"\r\nvar list=[];\r\n\r\nlist.push(str.indexOf(\"z\"));//查找第一个z的位置\r\nwhile(true)\r\n{\r\n    var temp=str.indexOf(\"z\",list[list.length-1]+1)//从上一个位置之后开始查找\r\n    if(temp==-1)\r\n        break;\r\n    list.push(temp);\r\n}\r\nconsole.log(list)\r\nconsole.log(\"z出现了\" + list.length + \"次\")\r\n```\r\n\r\n统计每个字符出现的次数\r\n```js\r\nvar str=\"abcdzqwezxqwezgeflz\"\r\nvar obj={};\r\n\r\nfor(i in str)//统计每个字符出现的次数\r\n{\r\n    if(obj[str[i]])\r\n    {\r\n        obj[str[i]]++\r\n    }else{\r\n        obj[str[i]]=1;\r\n    }\r\n}\r\nconsole.log(obj)\r\n```\r\n\r\n统计每个字符出现的次数和具体位置\r\n```js\r\nvar str=\"abcdzqwezxqwezgeflz\"\r\nvar obj={};\r\n\r\nfor(i in str)//统计每个字符出现的次数\r\n{\r\n    if(obj[str[i]])\r\n    {\r\n        obj[str[i]].count++;\r\n        obj[str[i]].position.push(i);\r\n    }else{\r\n        obj[str[i]]={count:1,position:[i]}\r\n    }\r\n}\r\nconsole.log(obj)\r\n```\r\n![](./images/JavaScript基础知识复习笔记/2022-06-27-21-26-13.png)\r\n\r\n\r\n## 数据类型总结\r\n### 分类\r\n* **简单数据类型** 也叫基本数据类型、值类型\r\n    * 存储时，存储的是值本身，因此也叫值类型\r\n    * number string boolean undefined null(空对象，设计遗留问题)\r\n* **复杂数据类型** 也叫 引用类型\r\n    * Object Array Date等\r\n\r\n### 堆和栈\r\n* JavaScript中没有堆和栈的概念，下面的概念只是为了理解。\r\n* 一般是局部变量、函数形参、返回值\r\n    * 简单数据类型放入栈\r\n* 有程序员分配和释放，若程序员不释放，由垃圾回收机制回收\r\n    * 复杂数据类型放入堆\r\n\r\n* 简单数据类型存放在栈，直接在栈中存储值\r\n* 复杂数据类型存放在堆，在栈中存放地址\r\n![](./images/JavaScript基础知识复习笔记/2022-06-27-22-19-50.png)\r\n\r\n### 函数的值传递：类似c语言\r\n* 简单数据类型，实参传给形参的是值，对形参的操作不会影响原值\r\n* 复杂数据类型，实参传给形参的是地址，对形参的操作会印象原值"}