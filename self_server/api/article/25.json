{"shortInfo":{"title":"jsWebApis学习笔记之DOM","date":"2022-06-28T00:55:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["JavaScript","WebApis","BOM","DOM","前端"],"hideAtIndex":true,"categories":"笔记","id":25,"countWords":10828,"readSeconds":1082.8,"assetsbaseUrl":"/self_server/assets/"},"content":"# jsWebApis学习笔记之DOM\r\n\r\n## 目录\r\n- [jsWebApis学习笔记之DOM](#jswebapis学习笔记之dom)\r\n  - [目录](#目录)\r\n  - [内容组成](#内容组成)\r\n    - [Web API](#web-api)\r\n    - [DOM](#dom)\r\n      - [DOM的一些概念](#dom的一些概念)\r\n  - [获取元素](#获取元素)\r\n    - [根据ID获取](#根据id获取)\r\n    - [根据标签获取](#根据标签获取)\r\n    - [根据类名获取](#根据类名获取)\r\n    - [查询选择器](#查询选择器)\r\n    - [特殊元素标签的获取](#特殊元素标签的获取)\r\n  - [事件](#事件)\r\n    - [常用事件类型](#常用事件类型)\r\n      - [面试题：mousemove与mouseenter的区别](#面试题mousemove与mouseenter的区别)\r\n    - [DOM事件流](#dom事件流)\r\n    - [注册事件](#注册事件)\r\n      - [传统注册方式](#传统注册方式)\r\n      - [方法监听注册方式](#方法监听注册方式)\r\n        - [事件监听方法的使用](#事件监听方法的使用)\r\n      - [解绑事件](#解绑事件)\r\n      - [事件委托](#事件委托)\r\n        - [面试题：事件委托原理](#面试题事件委托原理)\r\n    - [事件对象](#事件对象)\r\n      - [事件对象的属性和方法](#事件对象的属性和方法)\r\n    - [鼠标事件对象](#鼠标事件对象)\r\n      - [获取鼠标在页面中的坐标](#获取鼠标在页面中的坐标)\r\n      - [案例：拖拽移动元素](#案例拖拽移动元素)\r\n    - [键盘事件对象](#键盘事件对象)\r\n      - [案例：使输入框获得焦点](#案例使输入框获得焦点)\r\n      - [案例：放大显示输入内容](#案例放大显示输入内容)\r\n  - [操作元素](#操作元素)\r\n    - [修改元素内容](#修改元素内容)\r\n    - [修改元素属性](#修改元素属性)\r\n    - [修改元素样式](#修改元素样式)\r\n    - [修改元素类名](#修改元素类名)\r\n    - [单标签(表单)元素属性的修改](#单标签表单元素属性的修改)\r\n    - [操作元素示例](#操作元素示例)\r\n  - [节点操作](#节点操作)\r\n  - [元素偏移量offset系列属性](#元素偏移量offset系列属性)\r\n  - [元素可视区client系列属性](#元素可视区client系列属性)\r\n  - [元素滚动scroll系列属性](#元素滚动scroll系列属性)\r\n  - [页面window.scroll](#页面windowscroll)\r\n  - [offset、client、scroll三系列总结](#offsetclientscroll三系列总结)\r\n  - [dom核心知识点总结](#dom核心知识点总结)\r\n    - [创建](#创建)\r\n    - [增](#增)\r\n    - [删](#删)\r\n    - [改](#改)\r\n    - [查](#查)\r\n    - [属性操作](#属性操作)\r\n    - [事件操作](#事件操作)\r\n  - [一些案例](#一些案例)\r\n    - [全选框](#全选框)\r\n    - [tab栏切换制作](#tab栏切换制作)\r\n    - [新浪下拉菜单](#新浪下拉菜单)\r\n    - [简单留言发布案例实现](#简单留言发布案例实现)\r\n    - [动态生成表格](#动态生成表格)\r\n    - [实例：防止复制内容](#实例防止复制内容)\r\n      - [禁止鼠标右键菜单](#禁止鼠标右键菜单)\r\n      - [禁止鼠标选中文字](#禁止鼠标选中文字)\r\n      - [禁止f12键](#禁止f12键)\r\n    - [实例：阻止链接跳转](#实例阻止链接跳转)\r\n\r\n\r\n## 内容组成\r\n* JavaScript基础语法是ECMA组织制定的\r\n* Web Apis 是W3C组织制定的标准\r\n    * 主要学习BOM DOM\r\n\r\n![](./images/jsWebApis学习笔记之DOM/2022-06-28-08-58-57.png)\r\n\r\n\r\n\r\n### Web API\r\n* **API**（application programming interface应用程序编程接口）是一些预先定义的函数，提供给应用程序和开发人员基于某软件或硬件访问一组例程的能力，而又无需访问源码、理解内部工作机制细节\r\n* **Web API**是浏览器提供的一套操作浏览器功能和页面的API （BOM DOM）\r\n    * alert()是BOM API\r\n\r\n\r\n### DOM\r\n* **DOM**（Document Object Model文档对象模型），是**W3C**组织推荐的处理**可扩展标记语言**的标准**编程接口**\r\n    * 可扩展标记语言：\r\n        * HTML\r\n        * XML\r\n#### DOM的一些概念\r\n* **DOM树**\r\n    ![](./images/jsWebApis学习笔记之DOM/2022-06-28-09-16-59.png)\r\n* **文档document** ：一个页面就是一个文档\r\n* **元素element** ：页面中所有的标签都是元素\r\n* **节点node** ：页面中所有内容都可看做节点（标签，属性，文本，注释等）\r\n\r\n* **对象** ，DOM把文档，元素，节点看做对象\r\n\r\n## 获取元素\r\n* 根据ID获取\r\n* 根据标签获取\r\n* 根据HTML5新增方法获取\r\n* 特殊元素获取\r\n\r\n\r\n### 根据ID获取  \r\n`document.getElementById(\"idName\")`\r\n```html\r\n<div id=\"Demo1\">123</div>\r\n<script>\r\n    //参数是区分大小写的字符串\r\n    //返回一个对象\r\n    var Demo1=document.getElementById(\"Demo1\")\r\n\r\n    //测试：\r\n    console.log(Demo1)// <div id=\"Demo1\">123</div>\r\n    console.log(typeof Demo1)// object\r\n    console.dir(Demo1)// dir()用于打印查看元素对象，可以看到其属性和方法\r\n\r\n//注意：默认情况下，script标签需写在#Demo1 标签之后，因为文档页面从上往下加载，script加载时#Demo1标签必须已经存在，\r\n</script>\r\n```\r\n\r\n### 根据标签获取  \r\n获取整个页面的某标签`document.getElementsByTagName()`\r\n```html\r\n<ul>\r\n    <li>1</li>\r\n    <li>2</li>\r\n    <li>3</li>\r\n    <li>4</li>\r\n    <li>5</li>\r\n</ul>\r\n<script>\r\n    // 获得元素是动态的。个人理解：对元素的修改会同步到html，对html的修改会同步到获得到的元素\r\n\r\n    //返回值为获取的元素对象的集合，是伪数组\r\n    // 即使只有一个li，用该函数获取是有一个元素的伪数组，\r\n    //如果页面中没有li标签，返回值是空的伪数组\r\n    // document.getElementsByTagName获取到的是整个页面的相应标签\r\n    var elements2=document.getElementsByTagName(\"li\")\r\n    console.log(elements2)\r\n    console.log(elements2[0])\r\n    console.dir(elements2)\r\n    console.dir(elements2[0])\r\n\r\n</script>\r\n```\r\n获取某个标签的子标签`element.getElementsByTagName()`\r\n```html\r\n<ul>\r\n    <li>0</li>\r\n    <li>0</li>\r\n    <li>0</li>\r\n    <li>0</li>\r\n    <li>0</li>\r\n</ul>\r\n<ol id=\"olDemo\">\r\n    <li>1</li>\r\n    <li>2</li>\r\n    <li>3</li>\r\n    <li>4</li>\r\n    <li>5</li>\r\n</ol>\r\n<script>\r\n    // element.getElementsByTagName 获取到的是某元素的所有子标签\r\n    var ol=document.getElementById(\"olDemo\")\r\n    var ol_li=ol.getElementsByTagName(\"li\")\r\n    console.log(ol_li)\r\n    console.log(ol_li[0])\r\n    console.dir(ol_li)\r\n    console.dir(ol_li[0])\r\n</script>\r\n```\r\n\r\n### 根据类名获取  \r\n* getElementsByClassName()\r\n* **该方法是是HTML5标准**，ie678不支持html5  \r\n\r\n获取整个页面的某标签`document.getElementsByClassName()`\r\n\r\n```html\r\n<div class=\"classN1\">1</div>\r\n<div class=\"classN1\">2</div>\r\n\r\n<script>\r\n    var divs=document.getElementsByClassName(\"classN1\")\r\n    console.log(divs);\r\n    console.dir(divs);\r\n</script>\r\n```\r\n\r\n### 查询选择器  \r\n* **该方法是HTML5标准**  \r\n\r\nquerySelector返回查询到的**第一个**元素\r\n```html\r\n    <div class=\"father\">\r\n        <div id=\"id1\" class=\"class1\">1</div>\r\n        <div class=\"class1\">2</div>\r\n    </div>\r\n\r\n    <script>\r\n        // 传入的字符串类似css的选择器语法\r\n        // querySelector返回第一个查询到的元素\r\n        var divs=document.querySelector(\".father>div#id1.class1\")\r\n        console.log(divs);\r\n        console.dir(divs);\r\n    </script>\r\n```\r\n\r\nquerySelectorAll返回查询到的**所有**元素\r\n```html\r\n    <div class=\"father\">\r\n        <div id=\"id1\" class=\"class1\">1</div>\r\n        <div class=\"class1\">2</div>\r\n    </div>\r\n\r\n    <script>\r\n        // 返回值为存放节点的伪数组\r\n        var divs=document.querySelectorAll(\".father>div.class1\")\r\n        console.log(divs);\r\n        console.dir(divs);\r\n    </script>\r\n```\r\n\r\n\r\n### 特殊元素标签的获取\r\n```html\r\n<script>\r\n    //body标签直接用document.body获取\r\n    var bodyEle=document.body\r\n    console.log(bodyEle);\r\n    console.dir(bodyEle);\r\n\r\n    //body标签用document.documentElement获取\r\n    var htmlEle=document.documentElement\r\n    console.log(htmlEle);\r\n    console.dir(htmlEle);\r\n</script>\r\n```\r\n\r\n## 事件\r\n* 事件是可以被js检测到的行为\r\n* 可以理解为触发响应机制\r\n* 事件三要素（组成）\r\n    * 事件源：事件被触发的元素对象\r\n    * 事件类型：事件是如何触发的，鼠标点击？ 鼠标经过？\r\n    * 事件处理程序: 通过函数赋值的方式完成\r\n* 执行事件的步骤\r\n    * 获取事件源\r\n    * 注册事件（绑定事件）\r\n    * 添加事件处理程序（函数赋值）\r\n\r\n**示例**\r\n```html\r\n<button id=\"btn\">点击</button>\r\n<script>\r\n    //事件源\r\n    var btn=document.getElementById(\"btn\")\r\n    //事件类型，事件处理程序\r\n    btn.onclick = function(){\r\n        //do something...\r\n        alert(\"点击了按钮\")\r\n    }\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 常用事件类型\r\n* `element.onclick` 鼠标点击\r\n* `element.onfocus` 获得鼠标焦点\r\n* `element.onblur` 失去鼠标焦点\r\n* `element.onmouseover` 鼠标经过\r\n* `element.onmouseout` 鼠标离开\r\n* `element.onmousemove` 鼠标移动\r\n* `element.onmouseup` 鼠标弹起触发\r\n* `element.onmousedown` 鼠标按下触发\r\n* `element.onkeyup` 键盘弹起 松开按键时会触发一次\r\n* `element.onkeydown` 键盘按下 按下后会一直不断触发\r\n* `element.onkeypress` 键盘按下，按下后会一直不断触发 但不能识别功能键，如ctrl shift\r\n* 按键事件执行顺序为down->press->up\r\n\r\n#### 面试题：mousemove与mouseenter的区别\r\n* 当鼠标移动到元素上时就会触发moseenter事件\r\n* mouseover是鼠标经过自身盒子会触发，经过子盒子，父盒子也会触发该事件\r\n* moseenter是只有鼠标经过自身盒子才会触发，\r\n*  因为moseenter不支持冒泡，子元素的事件不会传播到父级\r\n*  常和moseenter搭配的mouseleave也不支持冒泡，\r\n\r\n### DOM事件流\r\n* 事件流描述的是从页面中接收事件的顺序\r\n* 时间发生时，事件会在元素节点之间按特定顺序传播，该过程称为DOM事件流\r\n* 模型三阶段\r\n    * 捕获阶段、\r\n    * 目标阶段、\r\n    * 冒泡阶段\r\n* 事件冒泡：IE提出\r\n* 事件冒泡：网景提出\r\n* 注意\r\n    * js代码中只能执行捕捉阶段和冒泡阶段中的一种事件\r\n    * onclick和attachEvent只能得到冒泡阶段的事件\r\n    * addEventListener\r\n        * 可以得到两种中任意一种阶段的事件，\r\n        * 默认接收冒泡阶段的事件，\r\n        * 第三个参数设置为true时，接收捕获阶段的事件\r\n    * 实际开发中很少使用事件捕捉，更关注事件冒泡\r\n    * 有些事件没有冒泡：onblur onfocus onmouseenter onmouseleave\r\n    * 事件冒泡有事会带来麻烦，有时又很有用\r\n\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-02-01-36-52.png)\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-02-01-31-07.png)\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-02-01-33-57.png)\r\n\r\n\r\n**两种事件传播方式测试**\r\n\r\n<div id=\"demoVMOWIEJF\" style=\"display: inline-block;background-color: skyblue; \">\r\n    <div>\r\n        <button style=\"margin: 20px;\">捕获阶段事件传播测试</button>\r\n    </div>\r\n</div>\r\n<div id=\"demoFBERT45\" style=\"display: inline-block;background-color: skyblue; \">\r\n    <div>\r\n        <button style=\"margin: 20px;\">冒泡阶段事件传播测试</button>\r\n    </div>\r\n</div>\r\n<script>\r\n    var father1=document.querySelector(\"#demoVMOWIEJF>div\")\r\n    father1.addEventListener(\"click\",function(){\r\n        alert(\"father:检测到捕获阶段事件click\")\r\n    },\r\n    true\r\n    )\r\n    father1.firstElementChild.addEventListener(\"click\",function(){\r\n        alert(\"child:检测到捕获阶段事件click\")\r\n    },\r\n    true\r\n    )\r\n    var father2=document.querySelector(\"#demoFBERT45>div\")\r\n    father2.addEventListener(\"click\",function(){\r\n        alert(\"father:检测到冒泡阶段事件click\")\r\n    },\r\n    false\r\n    )\r\n    father2.firstElementChild.addEventListener(\"click\",function(){\r\n        alert(\"child:检测到冒泡阶段事件click\")\r\n    },\r\n    false\r\n    )\r\n</script>\r\n\r\n```html\r\n<div id=\"demoVMOWIEJF\" style=\"display: inline-block;background-color: skyblue; \">\r\n    <div>\r\n        <button style=\"margin: 20px;\">捕获阶段事件传播测试</button>\r\n    </div>\r\n</div>\r\n<div id=\"demoFBERT45\" style=\"display: inline-block;background-color: skyblue; \">\r\n    <div>\r\n        <button style=\"margin: 20px;\">冒泡阶段事件传播测试</button>\r\n    </div>\r\n</div>\r\n<script>\r\n    var father1=document.querySelector(\"#demoVMOWIEJF>div\")\r\n    father1.addEventListener(\"click\",function(){\r\n        alert(\"father:检测到捕获阶段事件click\")\r\n    },\r\n    true\r\n    )\r\n    father1.firstElementChild.addEventListener(\"click\",function(){\r\n        alert(\"child:检测到捕获阶段事件click\")\r\n    },\r\n    true\r\n    )\r\n\r\n    var father2=document.querySelector(\"#demoFBERT45>div\")\r\n    father2.addEventListener(\"click\",function(){\r\n        alert(\"father:检测到冒泡阶段事件click\")\r\n    },\r\n    false\r\n    )\r\n    father2.firstElementChild.addEventListener(\"click\",function(){\r\n        alert(\"child:检测到冒泡阶段事件click\")\r\n    },\r\n    false\r\n    )\r\n    \r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n### 注册事件\r\n\r\n* 给元素添加事件称为注册事件或绑定事件\r\n* 注册事件有两种方式\r\n    * 传统方式\r\n    * 方法监听注册方式\r\n \r\n\r\n#### 传统注册方式\r\n * 利用on开头的事件名注册，如onclick\r\n * `<button onclick=\"alert('hi~')\"></button>`\r\n * `btn.onclick=function(){}`\r\n * 特点：注册事件的**唯一性** 同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数\r\n\r\n#### 方法监听注册方式\r\n* w3c标准 推荐的方式\r\n* `addEventListener()` **方法监听** ie678不支持\r\n* `attachEvent(eventNameWithOn,callback)`代替，**仅ie8及之前支持** 是一个非标准特性，应尽量不要在生产环境中使用\r\n* 同一个元素同一个事件可以注册多个**监听器（事件处理函数）**\r\n* 按注册顺序依次执行 \r\n\r\n##### 事件监听方法的使用\r\n* `element.addEventListener(type,listener[,useCapture])`\r\n* `type`:事件类型字符串，如click moseover 注意不带on\r\n* `listener`：事件处理函数，事件发生时，会调用该监听函数\r\n* `useCapture`:可选参数，布尔值，默认false，与DOM事件流相关\r\n\r\n\r\n#### 解绑事件\r\n* 传统方法：`element.onclick=null`\r\n* 事件监听方法: \r\n    1. 注册：`element.addEventListener(事件类型,非匿名函数名)`\r\n    2. 解绑：\r\n        * `element.addEventListener(事件类型,非匿名函数名)`\r\n        *  或  `element.detachEvent(eventNameWithOn,非匿名函数名)` **仅ie8及之前支持**\r\n\r\n**两种方法的测试**\r\n\r\n<div id=\"demoBIUBITYy\">\r\n    <button>传统注册事件</button>\r\n    <button>方法监听注册事件</button>\r\n</div>\r\n<script>\r\n    var buttons=document.querySelectorAll(\"#demoBIUBITYy>button\")\r\n    buttons[0].onclick=function(){\r\n        alert(\"传统注册事件,触发消息1\")\r\n    }\r\n    buttons[0].onclick=function(){\r\n        alert(\"传统注册事件,触发消息2\")\r\n    }\r\n    buttons[1].addEventListener(\"click\",function(){\r\n        alert(\"方法监听注册事件,触发消息1\")\r\n    })\r\n    buttons[1].addEventListener(\"click\",function(){\r\n        alert(\"方法监听注册事件,触发消息2\")\r\n    })\r\n</script>\r\n\r\n```html\r\n<div id=\"demoBIUBITYy\">\r\n    <button>传统注册事件</button>\r\n    <button>方法监听注册事件</button>\r\n</div>\r\n<script>\r\n    var buttons=document.querySelectorAll(\"#demoBIUBITYy>button\")\r\n    buttons[0].onclick=function(){\r\n        alert(\"传统注册事件,触发消息1\")\r\n    }\r\n    buttons[0].onclick=function(){\r\n        alert(\"传统注册事件,触发消息2\")\r\n    }\r\n    \r\n    buttons[1].addEventListener(\"click\",function(){\r\n        alert(\"方法监听注册事件,触发消息1\")\r\n    })\r\n    buttons[1].addEventListener(\"click\",function(){\r\n        alert(\"方法监听注册事件,触发消息2\")\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n**封装兼容性事件注册函数**\r\n```js\r\n    function myAddEventListener(element,eventName,callback)\r\n    {\r\n        if(document.addEventListener)//兼容性处理原则：首先照顾大多数浏览器，再处理特殊浏览器\r\n        {\r\n            element.addEventListener(eventName,callback);\r\n        }else if(document.attachEvent)\r\n        {\r\n            element.attachEvent(\"on\"+eventName,callback);\r\n        }else{\r\n            element[\"on\"+eventName]=callback;\r\n        }\r\n    }\r\n```\r\n\r\n**封装兼容性事件解绑函数**\r\n```js\r\n    function myAddEventListener(element,eventName,callback)\r\n    {\r\n        if(document.removeEventListener)//兼容性处理原则：首先照顾大多数浏览器，再处理特殊浏览器\r\n        {\r\n            element.addEventListener(eventName,callback);\r\n        }else if(document.detachEvent)\r\n        {\r\n            element.detachEvent(\"on\"+eventName,callback);\r\n        }else{\r\n            element[\"on\"+eventName]=null;\r\n        }\r\n    }\r\n```\r\n\r\n\r\n#### 事件委托\r\n* 时间委托也称事件代理，在JQuery中称事件委派\r\n* 对于ul>li这样结构的元素标签，实现点击li后弹出对话框，需要给所有li注册事件，li越多，访问DOM的次数也越多，这就会延长整个页面交互就绪的时间。\r\n\r\n##### 面试题：事件委托原理\r\n不是用for循环为每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用event.target属性和冒泡原理控制每个子节点\r\n\r\n**事件委托测试**\r\n\r\n<ul id=\"demoHsfweo9\">\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n</ul>\r\n<script>\r\n    var ul = document.querySelector(\"#demoHsfweo9\");\r\n    ul.addEventListener(\"click\",function(event){\r\n        for(var i=0;i<ul.children.length;i++)\r\n        {\r\n            ul.children[i].style.backgroundColor=\"\"\r\n        }\r\n        event.target.style.backgroundColor=\"pink\"\r\n    })\r\n</script>\r\n\r\n```html\r\n<ul id=\"demoHsfweo9\">\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n    <li>123</li>\r\n</ul>\r\n<script>\r\n    var ul = document.querySelector(\"#demoHsfweo9\");\r\n    ul.addEventListener(\"click\",function(event){\r\n        for(var i=0;i<ul.children.length;i++)\r\n        {\r\n            ul.children[i].style.backgroundColor=\"\"\r\n        }\r\n        event.target.style.backgroundColor=\"pink\"\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 事件对象\r\n```js\r\nelement.onclick=function(event){\r\n    console.log(event)\r\n}\r\n```\r\n* 事件对象代表了事件的状态，如键盘按下的状态，鼠标的位置，鼠标的按钮状态\r\n* 事件对象是事件处理函数的第一个形参获取到的对象\r\n* 事件对象只有事件发生才会存在，是系统自动创建并传递的\r\n* 事件对象是与事件相关的一系列数据的集合，\r\n    * 如鼠标点击事件发生后，事件对象中就包含鼠标的坐标信息\r\n* 事件对象的形参名可以自定义\r\n* 兼容性问题：ie678需要通过window.event来获取事件对象\r\n    * 兼容性写法 `event=event||window.event`\r\n  \r\n#### 事件对象的属性和方法\r\n1. **获取的是触发事件的元素对象** `event.target` \r\n    * 与`this`的区别：this永远指向被绑定事件的元素\r\n    * 简单来说：对于click事件，this返回的是绑定该事件的元素，target返回的是被点击的元素\r\n    * `event.currentTarget` 和 `this` 的值一致\r\n    * 兼容性问题：**ie678**仅支持`event.srcElement`属性\r\n    * 兼容性写法：\r\n        1. `var e=event||window.event;` \r\n        1. `var target=e.target||e.srcElement`\r\n1. **获取事件类型** `event.type` ，不带on\r\n1. **阻止默认事件默认行为** `event.preventDefault()` dom标准函数，阻止默认事件默认行为，如不让链接跳转\r\n    * 兼容性问题：\r\n        * **ie678** 调用该属性：`e.returnValue;`\r\n        * 新旧浏览器通用写法： return false; 但只能用于传统的注册方式\r\n1. **阻止冒泡** `event.stopPropagation()` dom标准方法 直译为停止传播\r\n    * 兼容性问题：ie678仅支持 event.cancelBubble=true 直译为取消冒泡\r\n\r\n\r\n### 鼠标事件对象\r\n#### 获取鼠标在页面中的坐标\r\n* 鼠标相关事件能获取到坐标\r\n* `event.clientX` 鼠标相对于**浏览器窗口可视区域**的X坐标,**左上角为(0,0)**,无论页面是否拖动\r\n* `event.clientY`\r\n* `event.pageX` 鼠标相对于**整个html文档页面**的X坐标 **IE678不支持** \r\n* `event.pageY`\r\n* `event.screenX` 鼠标相对于**电脑屏幕**的X坐标\r\n* `event.screenY`\r\n\r\n* 画了张图：\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-02-22-22-00.png)\r\n\r\n#### 案例：拖拽移动元素\r\n\r\n<div id=\"demoKjowejf9\" style=\"position: fixed; background-color:skyblue;width:100px;height:100px; cursor:move;\"></div>\r\n<script>\r\n    var demoKjowejf9=document.querySelector(\"#demoKjowejf9\")\r\n    function move(event){\r\n        // console.log(event.target);\r\n        demoKjowejf9.style.left=event.clientX - parseInt(demoKjowejf9.style.width)/2  +\"px\"\r\n        demoKjowejf9.style.top=event.clientY -  parseInt(demoKjowejf9.style.height)/2  +\"px\"\r\n    }\r\n    demoKjowejf9.addEventListener(\"mousedown\",function(event){\r\n        // console.log(event);\r\n        document.addEventListener(\"mousemove\",move)\r\n    })\r\n    demoKjowejf9.addEventListener(\"mouseup\",function(event){\r\n        // console.log(event);\r\n        document.removeEventListener(\"mousemove\",move)\r\n    })\r\n</script>\r\n\r\n```html\r\n<div id=\"demoKjowejf9\" style=\"position: fixed; background-color:skyblue;width:100px;height:100px; cursor:move;\"></div>\r\n<script>\r\n    var demoKjowejf9=document.querySelector(\"#demoKjowejf9\")\r\n    function move(event){\r\n        // console.log(event.target);\r\n        demoKjowejf9.style.left=event.clientX - parseInt(demoKjowejf9.style.width)/2  +\"px\"\r\n        demoKjowejf9.style.top=event.clientY -  parseInt(demoKjowejf9.style.height)/2  +\"px\"\r\n    }\r\n    demoKjowejf9.addEventListener(\"mousedown\",function(event){\r\n        // console.log(event);\r\n        document.addEventListener(\"mousemove\",move)\r\n    })\r\n    demoKjowejf9.addEventListener(\"mouseup\",function(event){\r\n        // console.log(event);\r\n        document.removeEventListener(\"mousemove\",move)\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n\r\n### 键盘事件对象\r\n触发事件名\r\n* 按键事件执行顺序为down->press->up\r\n* `element.onkeyup` 键盘弹起 松开按键时会触发一次\r\n* `element.onkeydown` 键盘按下 按下后会一直不断触发\r\n* `element.onkeypress` 键盘按下，按下后会一直不断触发 但不能识别功能键，如ctrl shift\r\n键盘事件对象属性\r\n* `event.key` 按键值，低版本浏览器不支持\r\n* `event.keyCode` 按键ASCII值\r\n* `keyup` 和 `keydown` 事件不区分字母大小写，a和A都是65\r\n* `keypress` 事件区分字母大小写，a是97 A是65\r\n\r\n#### 案例：使输入框获得焦点\r\n\r\n<input type=\"text\" id=\"demoNFOEWFH1234\">\r\n<script>\r\n    var demoNFOEWFH1234 = document.querySelector(\"#demoNFOEWFH1234\")\r\n    document.addEventListener(\"keyup\",function(e){//用keyup可以避免字符被输入进文本框\r\n        // console.log(e.keyCode);\r\n        if(e.keyCode==83)\r\n        {\r\n            demoNFOEWFH1234.focus();//使输入框获得焦点\r\n        }\r\n    })\r\n</script>\r\n\r\n```html\r\n<input type=\"text\" id=\"demoNFOEWFH1234\">\r\n<script>\r\n    var demoNFOEWFH1234 = document.querySelector(\"#demoNFOEWFH1234\")\r\n    document.addEventListener(\"keyup\",function(e){//用keyup可以避免字符被输入进文本框\r\n        // console.log(e.keyCode);\r\n        if(e.keyCode==83)\r\n        {\r\n            demoNFOEWFH1234.focus();//使输入框获得焦点\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n#### 案例：放大显示输入内容\r\n\r\n注意对于文本框来说，keydown keypress事件发生时，文字还未填入文本框中\r\nkeyup事件发生时，文字已经落入文本框\r\n\r\n<style>\r\n     #demo123WEFWF{\r\n        position: relative;\r\n     }\r\n    #demo123WEFWF input{\r\n        padding: 0;\r\n        margin-top: 0px;\r\n        height: 20px;\r\n        width: 200px;\r\n        box-sizing: border-box;\r\n        outline: none;\r\n        /* height: 50px; */\r\n    }\r\n    #demo123WEFWF div{\r\n        box-sizing: border-box;\r\n        display: none;\r\n        margin-bottom: 8px;\r\n        padding-left: 10px;\r\n        height:40px;\r\n        width: 200px;\r\n        background-color: white;\r\n        box-shadow: 0 0 8px gray;\r\n        line-height: 40px;\r\n        font-size: 30px;\r\n\r\n        word-break: keep-all;\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n    }\r\n    #demo123WEFWF div::-webkit-scrollbar{\r\n    /* 清除滚动条 */\r\n        /* display: none; */\r\n        height: 2px;\r\n    }\r\n    #demo123WEFWF div::-webkit-scrollbar-thumb{\r\n        /* height: 3px; */\r\n        background-color: gray;\r\n    }\r\n    #demo123WEFWF::after{\r\n        position:absolute;\r\n        top: 40px;\r\n        left: 10px;\r\n        display: block;\r\n        content: \"\";\r\n        width: 0;\r\n        height: 0;\r\n        border-top: 5px solid white;\r\n        border-bottom: 5px solid transparent;\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n    }\r\n</style>\r\n<div id=\"demo123WEFWF\">\r\n    <div></div>\r\n    <input type=\"text\" >\r\n</div>\r\n<script>\r\n    var demo123WEFWF = document.querySelector(\"#demo123WEFWF\")\r\n    var input = demo123WEFWF.querySelector(\"input\")\r\n    var div = demo123WEFWF.querySelector(\"div\")\r\n    input.addEventListener(\"keyup\",function(event){\r\n        if(this.value==\"\")\r\n        {\r\n            div.style.display=\"none\"\r\n        }else{\r\n            div.style.display=\"block\"\r\n            div.innerHTML=this.value;\r\n            div.scrollLeft =div.scrollWidth;//使滚动条右对齐，以始终显示最新内容\r\n        }\r\n    })\r\n    input.addEventListener(\"focus\",function(){//获得焦点后显示盒子\r\n        if(this.value!=\"\")\r\n            div.style.display=\"block\"\r\n    })\r\n    input.addEventListener(\"blur\",function(){//失去焦点后隐藏盒子\r\n        div.style.display=\"none\"\r\n    })\r\n</script>\r\n\r\n```html\r\n<style>\r\n     #demo123WEFWF{\r\n        position: relative;\r\n     }\r\n    #demo123WEFWF input{\r\n        padding: 0;\r\n        margin-top: 0px;\r\n        height: 20px;\r\n        width: 200px;\r\n        box-sizing: border-box;\r\n        outline: none;\r\n        /* height: 50px; */\r\n    }\r\n    #demo123WEFWF div{\r\n        box-sizing: border-box;\r\n        display: none;\r\n        margin-bottom: 8px;\r\n        padding-left: 10px;\r\n        height:40px;\r\n        width: 200px;\r\n        background-color: white;\r\n        box-shadow: 0 0 8px gray;\r\n        line-height: 40px;\r\n        font-size: 30px;\r\n\r\n        word-break: keep-all;\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n    }\r\n    #demo123WEFWF div::-webkit-scrollbar{\r\n    /* 清除滚动条 */\r\n        /* display: none; */\r\n        height: 2px;\r\n    }\r\n    #demo123WEFWF div::-webkit-scrollbar-thumb{\r\n        /* height: 3px; */\r\n        background-color: gray;\r\n    }\r\n    #demo123WEFWF::after{\r\n        position:absolute;\r\n        top: 40px;\r\n        left: 10px;\r\n        display: block;\r\n        content: \"\";\r\n        width: 0;\r\n        height: 0;\r\n        border-top: 5px solid white;\r\n        border-bottom: 5px solid transparent;\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n    }\r\n</style>\r\n<div id=\"demo123WEFWF\">\r\n    <div></div>\r\n    <input type=\"text\" >\r\n</div>\r\n<script>\r\n    var demo123WEFWF = document.querySelector(\"#demo123WEFWF\")\r\n    var input = demo123WEFWF.querySelector(\"input\")\r\n    var div = demo123WEFWF.querySelector(\"div\")\r\n    input.addEventListener(\"keyup\",function(event){\r\n        if(this.value==\"\")\r\n        {\r\n            div.style.display=\"none\"\r\n        }else{\r\n            div.style.display=\"block\"\r\n            div.innerHTML=this.value;\r\n            div.scrollLeft =div.scrollWidth;//使滚动条右对齐，以始终显示最新内容\r\n        }\r\n    })\r\n    input.addEventListener(\"focus\",function(){//获得焦点后显示盒子\r\n        if(this.value!=\"\")\r\n            div.style.display=\"block\"\r\n    })\r\n    input.addEventListener(\"blur\",function(){//失去焦点后隐藏盒子\r\n        div.style.display=\"none\"\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 操作元素\r\n### 修改元素内容\r\n* `element.innerText` \r\n    * IE发起的标准\r\n    * 写入的字符串被当成纯文本 \r\n    * 读取时会过滤掉html标签、空格、换行\r\n* `element.innerHtml`\r\n    * W3C发起的标准\r\n    * 写入的文本有html标签则会解析 \r\n    * 读取时保留html标签、空格、换行\r\n\r\n**修改元素内容示例**\r\n\r\n<button id=\"btn\">修改元素内容</button>\r\n<p id=\"textBox1\"></p>\r\n<p id=\"textBox2\"></p>\r\n<script>\r\n    var btn=document.getElementById(\"btn\")\r\n    var textBox1=document.getElementById(\"textBox1\")\r\n    btn.onclick = function(){\r\n        var date=new Date()\r\n        console.log(date);\r\n        //写入纯文本\r\n        textBox1.innerText='<strong>' + date + \"</strong>\"\r\n        //写入可包含html标签的文本\r\n        textBox2.innerHTML='<strong>' + date + \"</strong>\"\r\n    }\r\n</script>\r\n\r\n```html\r\n    <button id=\"btn\">修改元素内容</button>\r\n    <p id=\"textBox1\"></p>\r\n    <p id=\"textBox2\"></p>\r\n    <script>\r\n        var btn=document.getElementById(\"btn\")\r\n        var textBox1=document.getElementById(\"textBox1\")\r\n        btn.onclick = function(){\r\n            var date=new Date()\r\n            console.log(date);\r\n            //写入纯文本\r\n            textBox1.innerText='<strong>' + date + \"</strong>\"\r\n            //写入可包含html标签的文本\r\n            textBox2.innerHTML='<strong>' + date + \"</strong>\"\r\n        }\r\n    </script>\r\n```\r\n\r\n\r\n### 修改元素属性\r\n获取、修改标签内置属性\r\n* `element.src`\r\n* `element.title`\r\n* `element.herf`\r\n* `element.id`\r\n* `element.alt`\r\n* `element.display`\r\n\r\n获取、修改标签自定义属性\r\n* `element.getAttribute(\"标签内置属性名\")`\r\n* `element.getAttribute(\"自定义属性名\")`\r\n* `element.setAttribute(\"标签内置属性名\",\"属性值\")`\r\n* `element.setAttribute(\"自定义属性名\",\"属性值\")`\r\n* H5新增方法:\r\n    * h5规定自定义属性以`data-`开头，下述方法只能获取以这种方式命名的属性\r\n    * `element.dataset.index` 获取的是`data-index`属性 \r\n    * `element.dataset[\"index\"]` 获取的是`data-index`属性\r\n    * `element.dataset.listName` 获取的是`data-list-name`属性 \r\n\r\n移除属性\r\n* `element.removeAttribute(\"属性名\")`\r\n\r\n```html\r\n<div 自定义属性名=\"属性值\"></div>\r\n<script>\r\n    var div=document.querySelector(\"div\")\r\n    console.log(div.getAttribute(\"自定义属性名\"))\r\n    div.setAttribute(\"自定义属性名\",\"属性值\")\r\n</script>\r\n\r\n```\r\n\r\n### 修改元素样式\r\n* `element.style` **行内样式属性** 优先级较高\r\n    * `element.style.backgroundColor=\"pink\"` 修改背景颜色，驼峰命名法\r\n    * `element.style.fontSize` \r\n    * `element.style.width` \r\n  \r\n### 修改元素类名\r\n* `element.ClassName` **类名样式属性**\r\n    * 因为class是保留字，所以不能使用，名为ClassName\r\n    * `element.ClassName=\"类名1 类名2\"` 修改背景颜色，驼峰命名法\r\n\r\n### 单标签(表单)元素属性的修改\r\n* 对于`input`等的单标签，需通过`element.value`更改标签内容\r\n* element.type\r\n* element.value\r\n* element.value.length\r\n* element.checked\r\n* element.selected\r\n* element.disabled\r\n\r\n\r\n### 操作元素示例\r\n\r\n\r\n\r\n**修改单标签元素内容**\r\n\r\n<input id=\"input2\" type=\"text\" value=\"请输入内容\" style=\"color: #999;\">\r\n<button id=\"btn2\">提交</button>\r\n<script>\r\n    var btn2=document.getElementById(\"btn2\")\r\n    var input2=document.getElementById(\"input2\")\r\n    btn2.onclick = function(){//点击按钮后禁用输入框和按钮\r\n        //this 表示函数的调用者，也就是btn2\r\n        this.disabled=true\r\n        input2.disabled=true\r\n        input2.value+=\" 数据已锁定\"\r\n    }\r\n    input2.onfocus=function(){//点击后获得焦点 清空输入框默认值\r\n        if(this.value==\"请输入内容\")\r\n            this.value=\"\"\r\n        this.style.color=\"#333\"\r\n    }\r\n    input2.onblur=function(){//失去焦点后 若输入框为空 填写默认值\r\n        if(this.value==\"\")\r\n            this.value=\"请输入内容\"\r\n        this.style.color=\"#999\"\r\n    }\r\n</script>\r\n\r\n```html\r\n<input id=\"input2\" type=\"text\" value=\"请输入内容\" style=\"color: #999;\">\r\n<button id=\"btn2\">提交</button>\r\n<script>\r\n    var btn2=document.getElementById(\"btn2\")\r\n    var input2=document.getElementById(\"input2\")\r\n    btn2.onclick = function(){//点击按钮后禁用输入框和按钮\r\n        //this 表示函数的调用者，也就是btn2\r\n        this.disabled=true\r\n        input2.disabled=true\r\n        input2.value+=\" 数据已锁定\"\r\n    }\r\n    input2.onfocus=function(){//点击后获得焦点 清空输入框默认值\r\n        if(this.value==\"请输入内容\")\r\n            this.value=\"\"\r\n        this.style.color=\"#333\"\r\n    }\r\n    input2.onblur=function(){//失去焦点后 若输入框为空 填写默认值\r\n        if(this.value==\"\")\r\n            this.value=\"请输入内容\"\r\n        this.style.color=\"#999\"\r\n    }\r\n</script>\r\n```\r\n\r\n**密码框明文密文显示切换**\r\n\r\n<input id=\"input3\" type=\"password\" value=\"密码123\">\r\n<button id=\"btn3\">切换显示方式</button>\r\n<script>\r\n    var btn3=document.getElementById(\"btn3\")\r\n    var input3=document.getElementById(\"input3\")\r\n    btn3.onclick = function(){//点击按钮后显示明文密码\r\n        if(input3.type==\"password\")\r\n            input3.type=\"text\"\r\n        else\r\n            input3.type=\"password\"\r\n    }\r\n</script>\r\n\r\n```html\r\n<input id=\"input3\" type=\"password\" value=\"密码123\">\r\n<button id=\"btn3\">切换显示方式</button>\r\n<script>\r\n    var btn3=document.getElementById(\"btn3\")\r\n    var input3=document.getElementById(\"input3\")\r\n    btn3.onclick = function(){//点击按钮后显示明文密码\r\n        if(input3.type==\"password\")\r\n            input3.type=\"text\"\r\n        else\r\n            input3.type=\"password\"\r\n    }\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n## 节点操作\r\n* 节点类型 `node.nodeType`\r\n    * 元素节点：nodeType=1\r\n    * 属性节点：nodeType=2\r\n    * 文本节点：nodeType=3 包含文本空格换行等...）\r\n* 节点名 `node.nodeName`\r\n* 节点值 `node.nodeValue`\r\n* **获取父节点** `node.parentNode` 没有父节点返回空\r\n* **获取子节点** `node.childNodes` （标准） 包含元素子节点间的换行 空格等 可以用for循环遍历所有的子节点提取出节点类型为文本节点的节点 但一般不使用这种方式\r\n* **获取子元素节点** `node.children` （非标准，但已得到各浏览器支持）是一个只读属性\r\n* 第一个子节点 `node.firstChild` 包括文本节点\r\n* 最后一个子节点 `node.lastChild` 包括文本节点\r\n* 第一个子元素节点 `node.firstElementChild` 找不到返回null 存在兼容性问题ie678不支持\r\n* 最后一个子元素节点 `node.lastElementChild` 找不到返回null 存在兼容性问题\r\n* 解决兼容性的实际开发写法 \r\n    *  第一个子元素节点 `node.children[0]`\r\n    * 最后一个子元素节点 `node.children[node.children.length - 1 ]`\r\n* **获取下一个兄弟节点** `node.nextSibling`\r\n* **获取前一个兄弟节点** `node.previousSibling`\r\n* **获取下一个兄弟元素节点** `node.nextElementSibling` ie678不支持\r\n* **获取前一个兄弟元素节点** `node.previousElementSibling` ie678不支持\r\n* **兼容性获取兄弟元素节点**\r\n    ```js\r\n    function getNextElementSibling(node)\r\n    {\r\n        for(var i=0;i<node.children.length;i++)\r\n        {\r\n            if(node.children[i].nodeType==1)\r\n            {\r\n                return node.children[i]\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    ```\r\n* **创建元素节点** `document.createElement(\"标签名\")`\r\n* **附加子节点** node.appendChild(newNode)\r\n* **在某个子元素之前附加子节点** node.insertBefore(newNode,基准元素)\r\n\r\n* **删除节点** `node.removeChild(待删除的子节点)` 返回删除的节点\r\n\r\n* **克隆节点** `待克隆节点Node.cloneNode()` 参数为空或为false是浅拷贝，没有元素内容；参数为true是深拷贝\r\n\r\n* `document.write(\"<div></div>\")` 直接将n内容写入页面的内容流，**如果文档流已经执行完毕，执行该语句会导致页面全部重绘**\r\n\r\n* 创建元素的效率问题（经典面试题）\r\n    * 方法1\r\n        * `document.write(\"<div></div>\")` **如果文档流已经执行完毕，执行该语句会导致页面全部重绘**\r\n    * 方法2\r\n        * `node.appendChild(document.createElement(\"div\"))` **效率高** 循环执行1000次耗时17ms\r\n    * 方法3\r\n        * `node.innerHtml+=\"<div></div>\"`  **效率低** 循环执行1000次耗时3s 因为要拼接字符串\r\n    * 方法4\r\n        1. `list=[];` \r\n        2. `list.push(\"<div>循环执行1000次</div>\");`\r\n        3. `node.innerHtml=list.join(\"\")` **效率最高** 耗时8ms 不用拼接字符串\r\n\r\n\r\n## 元素偏移量offset系列属性\r\n* 可以动态的获取元素的**位置**，**大小**\r\n* 获取的元素**位置**偏移量是相对于带有定位属性的父元素的，若所有父元素都没有定位属性则相对于body\r\n* 获取的元素**大小**，也就是宽高，包含**width/height + padding + border**\r\n* 返回的数值**没有单位**\r\n* 是一个**只读**属性\r\n\r\n**常用属性**\r\n* `element.offsetParent` 返回该元素**带有定位属性的父级**，如果找不到则返回body\r\n* `element.offsetTop` 返回元素的上偏移（相对于offsetParent）\r\n* `element.offsetLeft` 返回元素的左偏移（相对于offsetParent）\r\n* `element.offsetWidth` 返回元素的宽度（包含width padding border）\r\n* `element.offsetHeight` 返回元素的宽度（包含height padding border）\r\n\r\noffset和style属性的区别\r\n* offset得到的是元素盒子的宽高（包含padding border），style得到的是元素行内样式中设置的宽高（不包含padding border）\r\n* offset没有单位 style有单位\r\n* offset是只读属性 style是可读写属性\r\n\r\n\r\n**商品细节展示**\r\n\r\n效果图:\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-05-04-58-49.png)\r\n\r\n```html\r\n<!-- div#demoOHdfn9e的父级需为body -->\r\n<style>\r\n    #demoOHdfn9e{\r\n        position: relative;\r\n        margin: 0;\r\n        width: 400px;\r\n        height: 400px;\r\n        background: url(./images/jsWebApis学习笔记之DOM/2022-07-05-04-19-00.png);\r\n        background-size: contain;\r\n    }\r\n    #demoOHdfn9e .mask{\r\n        display: none;\r\n        position: absolute;\r\n        width: 200px;\r\n        height: 200px;\r\n        background-color: gold;\r\n        opacity: 0.5;\r\n        cursor: move;\r\n    }\r\n    #demoOHdfn9e .big{\r\n        display: none;\r\n        position: absolute;\r\n        left: 100%;\r\n        top: 0;\r\n        width: 500px;\r\n        height: 500px;\r\n        overflow: hidden;\r\n    }\r\n    #demoOHdfn9e .big img{\r\n        position: absolute;\r\n\r\n    }\r\n</style>\r\n<div id=\"demoOHdfn9e\">\r\n    <div class=\"mask\"></div>\r\n    <div class=\"big\"><img src=\"/images/jsWebApis学习笔记之DOM/2022-07-05-04-19-00.png\" alt=\"\"></div>\r\n</div>\r\n<script>\r\n    var demoOHdfn9e = document.querySelector(\"#demoOHdfn9e\")\r\n    var mask = document.querySelector(\"#demoOHdfn9e>.mask\")\r\n    var big = document.querySelector(\"#demoOHdfn9e>.big\")\r\n    var img = document.querySelector(\"#demoOHdfn9e>.big>img\")\r\n    function updataPos(e){//更新子盒子的位置\r\n            //鼠标相对于父级盒子的坐标\r\n            var innerMousePosX = e.pageX - demoOHdfn9e.offsetLeft\r\n            var innerMousePosY = e.pageY - demoOHdfn9e.offsetTop\r\n            //计算子盒子相对于父盒子的偏移\r\n            var newMaskPosX = innerMousePosX-mask.offsetWidth/2\r\n            var newMaskPosY = innerMousePosY-mask.offsetHeight/2\r\n            //限制小盒子的移动范围\r\n            if(newMaskPosX < 0)\r\n            {\r\n                newMaskPosX=0\r\n            }else if(demoOHdfn9e.offsetWidth-mask.offsetWidth < newMaskPosX )\r\n            {\r\n                newMaskPosX=demoOHdfn9e.offsetWidth-mask.offsetWidth\r\n            }\r\n            if( newMaskPosY < 0 )\r\n            {\r\n                newMaskPosY= 0\r\n            }\r\n            else if(demoOHdfn9e.offsetHeight-mask.offsetHeight < newMaskPosY)\r\n            {\r\n                newMaskPosY=demoOHdfn9e.offsetHeight-mask.offsetHeight\r\n            }\r\n            mask.style.left=newMaskPosX + \"px\";\r\n            mask.style.top=newMaskPosY + \"px\"\r\n            //根据比例计算大图的宽高\r\n            img.style.width=demoOHdfn9e.offsetWidth * big.offsetWidth / mask.offsetWidth + \"px\"\r\n            img.style.height=demoOHdfn9e.offsetHeight * big.offsetHeight / mask.offsetHeight + \"px\"\r\n            //根据比例移动大图\r\n            img.style.left = - newMaskPosX * img.offsetWidth / demoOHdfn9e.offsetWidth  + \"px\"\r\n            img.style.top = - newMaskPosY * img.offsetHeight / demoOHdfn9e.offsetHeight + \"px\"\r\n        }\r\n    demoOHdfn9e.addEventListener(\"mouseenter\",function(e){\r\n        mask.style.display=\"block\";\r\n        big.style.display=\"block\";\r\n        demoOHdfn9e.addEventListener(\"mousemove\",updataPos);\r\n    })\r\n    demoOHdfn9e.addEventListener(\"mouseleave\",function(){\r\n        mask.style.display=\"none\";\r\n        big.style.display=\"none\";\r\n        demoOHdfn9e.removeEventListener(\"mousemove\",updataPos);\r\n    })\r\n</script>\r\n```\r\n## 元素可视区client系列属性\r\n* client可获得元素的大小（内容+padding），边框的大小\r\n* `element.clientTop` 上边框的大小\r\n* `element.clientLeft` 左边框的大小\r\n* `element.clientWidth` 内容区域+padding的宽\r\n* `element.clientHeight` 内容区域+padding的高\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-05-06-25-04.png)\r\n\r\n\r\n## 元素滚动scroll系列属性\r\n\r\n* element.scrollTop 被卷去的上侧边距 (没有bottom)\r\n* element.scrollLeft 被卷去的左侧边距 （没有right）\r\n* element.scrollWidth 自身实际宽度\r\n* element.scrollHeight 自身实际高度\r\n* 滚动事件`element.onscroll`\r\n\r\n\r\n**草图**\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-05-20-14-21.png)\r\n\r\n\r\n**测试**\r\n\r\n<div id=\"demo1237hf834r9\">\r\n    内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n</div>\r\n<p id=\"demoNDNDURNO\"></p>\r\n<style>\r\n    #demo1237hf834r9{\r\n        width: 200px;\r\n        height: 200px;\r\n        overflow: auto;\r\n        word-break: keep-all;\r\n    }\r\n</style>\r\n<script>\r\n    var demo1237hf834r9 = document.querySelector(\"#demo1237hf834r9\")\r\n    var demoNDNDURNO = document.querySelector(\"#demoNDNDURNO\")\r\n    demo1237hf834r9.addEventListener(\"scroll\",function(){\r\n        demoNDNDURNO.innerHTML=\r\n        \"scrollTop:\" + demo1237hf834r9.scrollTop + \"<br>\" +\r\n        \"scrollLeft:\" + demo1237hf834r9.scrollLeft + \"<br>\" +\r\n        \"scrollWidth:\" + demo1237hf834r9.scrollWidth + \"<br>\" +\r\n        \"scrollHeight:\" + demo1237hf834r9.scrollHeight;\r\n    })\r\n</script>\r\n\r\n\r\n```html\r\n<div id=\"demo1237hf834r9\">\r\n    内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n    容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n</div>\r\n<p id=\"demoNDNDURNO\"></p>\r\n<style>\r\n    #demo1237hf834r9{\r\n        width: 200px;\r\n        height: 200px;\r\n        overflow: auto;\r\n        word-break: keep-all;\r\n    }\r\n</style>\r\n<script>\r\n    var demo1237hf834r9 = document.querySelector(\"#demo1237hf834r9\")\r\n    var demoNDNDURNO = document.querySelector(\"#demoNDNDURNO\")\r\n    demo1237hf834r9.addEventListener(\"scroll\",function(){\r\n        demoNDNDURNO.innerHTML=\r\n        \"scrollTop:\" + demo1237hf834r9.scrollTop + \"<br>\" +\r\n        \"scrollLeft:\" + demo1237hf834r9.scrollLeft + \"<br>\" +\r\n        \"scrollWidth:\" + demo1237hf834r9.scrollWidth + \"<br>\" +\r\n        \"scrollHeight:\" + demo1237hf834r9.scrollHeight;\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n## 页面window.scroll\r\n* 页面被卷去的头部：window.pageYoffset\r\n* 页面被卷去的左侧：window.pageXoffset\r\n* ![](./images/jsWebApis学习笔记之DOM/2022-07-05-21-52-44.png)\r\n\r\n\r\n**案例测试**\r\n\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-06-00-26-26.png)\r\n\r\n```html\r\n<body>\r\n<div id=\"demofowefj3490\">\r\n    侧边栏测试 \r\n</div>\r\n<div style=\"margin: 0 auto; width:1000px;height: 2000px; background-color: pink;\">主体内容</div>\r\n<style>\r\n    #demofowefj3490{\r\n        position: absolute;\r\n        bottom: 200px;\r\n        right: 50px;\r\n        width: 50px;\r\n        height: 200px;\r\n        background-color: skyblue;\r\n    }\r\n</style>\r\n<script>\r\n    var demofowefj3490 = document.querySelector(\"#demofowefj3490\")\r\n    var offsetTop = demofowefj3490.offsetTop \r\n    document.addEventListener(\"scroll\",function()\r\n    {\r\n        if(window.pageYOffset >= offsetTop)\r\n        {\r\n            demofowefj3490.style.position = \"fixed\";\r\n            demofowefj3490.style.top = \"0\";\r\n        }else\r\n        {\r\n            demofowefj3490.style.position = \"absolute\";\r\n            demofowefj3490.style.top = \"\";\r\n        }\r\n    })\r\n</script>\r\n</body>\r\n```\r\n\r\n## offset、client、scroll三系列总结\r\n* offsetWidth 元素的宽度，包含边框\r\n* clientWidth 元素的宽度，content+padding部分的宽度；不包含边框；\r\n* scrollWidth 元素内容的实际宽度，大于等于content的宽度\r\n* offset主要用来获取在页面中的偏移位置\r\n* client主要用来获取元素的宽高\r\n* offset主要用来获取被滚动条卷去的内容部分的宽高\r\n* 获取整个页面在窗口中的滚动距离用window.pageYOffset\r\n![](./images/jsWebApis学习笔记之DOM/2022-07-06-00-35-41.png)\r\n\r\n## dom核心知识点总结\r\n### 创建\r\n* `document.write()`\r\n* `element.innerHTML`  \r\n* `document.createElement()`  \r\n\r\n### 增\r\n* `node.appendChild()`\r\n* `node.insertBefore()`\r\n\r\n### 删\r\n* `node.removeChild(childNode)`\r\n\r\n### 改\r\n修改元素属性\r\n* `element.src`\r\n* `element.href`\r\n* `element.title`\r\n\r\n修改普通元素内容\r\n* `element.innerHTML`\r\n* `element.innerText`\r\n\r\n修改表单元素\r\n* `element.value`\r\n* `element.type`\r\n* `element.disabled`\r\n* 注意： `element.active` 似乎不存在\r\n\r\n修改元素样式\r\n* `element.style`\r\n* `element.className`\r\n\r\n### 查\r\nDOM的API(古老用法不推荐)\r\n* `document.getElementById()`\r\n* `document.getElementsByTagName()`\r\n\r\nH5的新方法(提倡)\r\n* `document.querySelector()`\r\n* `document.querySelectorAll()`\r\n\r\n利用节点关系获取元素\r\n* `node.parentNode`\r\n* `node.children`\r\n* `node.previousElementSibling`\r\n* `node.nextElementSibling`\r\n\r\n### 属性操作\r\n主要针对于自定义属性\r\n* `element.setAttribute(属性名,属性值)`\r\n* `element.getAttribute(属性名)`\r\n* `element.removeAttribute(属性名)`\r\n\r\n### 事件操作\r\n* `element.onclick` 鼠标点击\r\n* `element.onfocus` 获得鼠标焦点\r\n* `element.onblur` 失去鼠标焦点\r\n* `element.onmouseover` 鼠标经过\r\n* `element.onmouseout` 鼠标离开\r\n* `element.onmousemove` 鼠标移动\r\n* `element.onmouseup` 鼠标弹起触发\r\n* `element.onmousedown` 鼠标按下触发\r\n* `element.onkeyup` 键盘弹起 松开按键时会触发一次\r\n* `element.onkeydown` 键盘按下 按下后会一直不断触发\r\n* `element.onkeypress` 键盘按下，按下后会一直不断触发 但不能识别功能键，如ctrl shift\r\n* 按键事件执行顺序为down->press->up\r\n\r\n\r\n## 一些案例\r\n\r\n### 全选框\r\n\r\n<table id=\"tb1\" >\r\n    <thead>\r\n        <tr style=\"background-color: rgb(174, 174, 174);\">\r\n            <td><input type=\"checkbox\">全选</td><td>商品名称</td><td>价钱</td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<script>\r\n    var tb1InputMaster=document.querySelector(\"#tb1>thead input\")\r\n    var tb1_btOthers=document.querySelectorAll(\"#tb1>tbody input\")\r\n    console.log(tb1InputMaster)\r\n    tb1InputMaster.onclick=function(){\r\n        if(this.checked){\r\n            for(var i = 0;i<tb1_btOthers.length;i++)\r\n            {\r\n                tb1_btOthers[i].checked=true;\r\n            }\r\n        }else{\r\n            for(var i = 0;i<tb1_btOthers.length;i++)\r\n            {\r\n                tb1_btOthers[i].checked=false;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n```html\r\n<table id=\"tb1\" >\r\n    <thead>\r\n        <tr style=\"background-color: rgb(174, 174, 174);\">\r\n            <td><input type=\"checkbox\">全选</td><td>商品名称</td><td>价钱</td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n        <tr>\r\n            <td><input type=\"checkbox\"></td><td>XXX</td><td>123元</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<script>\r\n    var tb1InputMaster=document.querySelector(\"#tb1>thead input\")\r\n    var tb1_btOthers=document.querySelectorAll(\"#tb1>tbody input\")\r\n    console.log(tb1InputMaster)\r\n    tb1InputMaster.onclick=function(){\r\n        if(this.checked){\r\n            for(var i = 0;i<tb1_btOthers.length;i++)\r\n            {\r\n                tb1_btOthers[i].checked=true;\r\n            }\r\n        }else{\r\n            for(var i = 0;i<tb1_btOthers.length;i++)\r\n            {\r\n                tb1_btOthers[i].checked=false;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n### tab栏切换制作 \r\n\r\n![](./images/jsWebApis学习笔记之DOM/2022-06-30-10-37-10.png)\r\n\r\n```html\r\n<style>\r\n    #lableBox{\r\n        margin: 0 auto;\r\n        width: 600px;\r\n        height: 600px;\r\n        background-color: gray;\r\n    }\r\n    #lableBox ul{\r\n        margin: 0;\r\n        padding: 0;\r\n        list-style: none;\r\n    }\r\n    #lableBox .head ul{\r\n        display: flex;\r\n        justify-content: space-evenly;\r\n        align-items: center;\r\n        background-color: green;\r\n    }\r\n    #lableBox .head li{\r\n        flex: 1;\r\n        text-align: center;\r\n        /* background-color: red; */\r\n    }\r\n    .current{\r\n        background-color: red;\r\n    }\r\n    #lableBox .body li{\r\n        display: none;\r\n    }\r\n</style>\r\n<div id=\"lableBox\">\r\n    <div class=\"head\">\r\n        <ul>\r\n            <li class=\"current\" index=\"\">标签1</li>\r\n            <li class=\"\" index=\"\">标签2</li>\r\n            <li class=\"\" index=\"\">标签3</li>\r\n            <li class=\"\" index=\"\">标签4</li>\r\n            <li class=\"\" index=\"\">标签5</li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"body\">\r\n        <ul>\r\n            <li style=\"display: block;\">内容1</li>\r\n            <li>内容2</li>\r\n            <li>内容3</li>\r\n            <li>内容4</li>\r\n            <li>内容5</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n<script>\r\n    var lables=document.querySelectorAll(\"#lableBox .head li\")\r\n    var items=document.querySelectorAll(\"#lableBox .body li\")\r\n\r\n    for(var i=0;i<lables.length;i++)//给li添加序号\r\n    {\r\n        lables[i].setAttribute(\"index\",i)\r\n    }\r\n\r\n\r\n    for(var i=0;i<lables.length;i++)\r\n    {\r\n        lables[i].onclick=function(){\r\n\r\n            for(var i=0;i<lables.length;i++)//设置所有标签背景色为空\r\n            {\r\n                lables[i].className=\"\"\r\n            }\r\n\r\n            this.className=\"current\"//设置选中的标签背景色为红色\r\n\r\n\r\n            for(var i=0;i<items.length;i++)//设置所有内容为不显示\r\n            {\r\n                items[i].style.display=\"none\"\r\n            }\r\n\r\n            items[this.getAttribute(\"index\")].style.display=\"block\"//根据选中标签索引显示内容\r\n        }\r\n    }\r\n\r\n</script>\r\n```\r\n\r\n\r\n### 新浪下拉菜单\r\n\r\n<style>\r\n    #demoQWRWEFE *,\r\n    #demoQWRWEFE *::after,\r\n    #demoQWRWEFE *::before\r\n    {\r\n        padding: 0;\r\n        margin: 0;\r\n        content: \"\";\r\n        list-style: none;\r\n    }\r\n    #demoQWRWEFE{\r\n        margin: 0 auto;\r\n        width: 500px;\r\n        /* height: 50px; */\r\n        background-color: red;\r\n    }\r\n    #demoQWRWEFE>ul{\r\n        display: flex;\r\n        justify-content: space-evenly;\r\n        align-items: center;\r\n    }\r\n    #demoQWRWEFE>ul>li{\r\n        flex: 1;\r\n        position: relative;\r\n        /* height: 50px; */\r\n        text-align: center;\r\n        background-color: green;\r\n        border: 1px solid gray;\r\n    }\r\n    #demoQWRWEFE>ul>li:hover{\r\n        background-color: rgb(1, 112, 1);\r\n    }\r\n    #demoQWRWEFE>ul>li>ul{\r\n        z-index:10;\r\n        display: none;\r\n        position: absolute;\r\n        top:100%;\r\n        left: 0;\r\n        width: 100px;\r\n        background-color: rgb(222, 222, 222);\r\n    }\r\n    #demoQWRWEFE>ul>li>ul>li:hover{\r\n        background-color: rgb(131, 131, 131);\r\n    }\r\n</style>\r\n<div id=\"demoQWRWEFE\">\r\n    <ul>\r\n        <li>\r\n            <span>标签1</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签2</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签3</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签4</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签5</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签6</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n<script>\r\n    var demoQWRWEFE=document.querySelector(\"#demoQWRWEFE\")\r\n    var lis = demoQWRWEFE.children[0].children\r\n    for(var i=0;i<lis.length;i++ )\r\n    {   \r\n        //注意是给li添加事件 而不是给 li>span 和 li>ul 分别添加事件 否则会有bug\r\n        lis[i].onmouseover=function(){\r\n            for(var i=0;i<lis.length;i++ ){\r\n                lis[i].children[1].style.display=\"\"\r\n            }\r\n            this.children[1].style.display=\"block\"\r\n        }\r\n        lis[i].onmouseout=function(){\r\n            for(var i=0;i<lis.length;i++ ){\r\n                lis[i].children[1].style.display=\"\"\r\n            }\r\n        }\r\n    }\r\n    \r\n</script>\r\n\r\n```html\r\n<style>\r\n    #demoQWRWEFE *,\r\n    #demoQWRWEFE *::after,\r\n    #demoQWRWEFE *::before\r\n    {\r\n        padding: 0;\r\n        margin: 0;\r\n        content: \"\";\r\n        list-style: none;\r\n    }\r\n    #demoQWRWEFE{\r\n        margin: 0 auto;\r\n        width: 500px;\r\n        /* height: 50px; */\r\n        background-color: red;\r\n    }\r\n    #demoQWRWEFE>ul{\r\n        display: flex;\r\n        justify-content: space-evenly;\r\n        align-items: center;\r\n    }\r\n    #demoQWRWEFE>ul>li{\r\n        flex: 1;\r\n        position: relative;\r\n        /* height: 50px; */\r\n        text-align: center;\r\n        background-color: green;\r\n        border: 1px solid gray;\r\n    }\r\n    #demoQWRWEFE>ul>li:hover{\r\n        background-color: rgb(1, 112, 1);\r\n    }\r\n    #demoQWRWEFE>ul>li>ul{\r\n        display: none;\r\n        position: absolute;\r\n        top:100%;\r\n        left: 0;\r\n        width: 100px;\r\n        background-color: rgb(222, 222, 222);\r\n    }\r\n    #demoQWRWEFE>ul>li>ul>li:hover{\r\n        background-color: rgb(131, 131, 131);\r\n    }\r\n</style>\r\n<div id=\"demoQWRWEFE\">\r\n    <ul>\r\n        <li>\r\n            <span>标签1</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签2</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签3</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签4</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签5</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            <span>标签6</span>\r\n            <ul>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n                <li>123</li>\r\n            </ul>\r\n        </li>\r\n        \r\n    </ul>\r\n</div>\r\n\r\n<script>\r\n    var demoQWRWEFE=document.querySelector(\"#demoQWRWEFE\")\r\n    var lis = demoQWRWEFE.children[0].children\r\n    for(var i=0;i<lis.length;i++ )\r\n    {   \r\n        //注意是给li添加事件 而不是给 li>span 和 li>ul 分别添加事件 否则会有bug\r\n        lis[i].onmouseover=function(){\r\n            for(var i=0;i<lis.length;i++ ){\r\n                lis[i].children[1].style.display=\"\"\r\n            }\r\n            this.children[1].style.display=\"block\"\r\n        }\r\n        lis[i].onmouseout=function(){\r\n            for(var i=0;i<lis.length;i++ ){\r\n                lis[i].children[1].style.display=\"\"\r\n            }\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n\r\n### 简单留言发布案例实现\r\n<style>\r\n    #demoQweqdqw{\r\n        margin: 0 auto;\r\n        width: 500px;\r\n        height: 500px;\r\n        background-color: gray;\r\n    }\r\n    #demoQweqdqw textarea{\r\n        display: block;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 1px solid gray;\r\n        outline: none;\r\n        box-sizing: border-box;\r\n        width: 100% !important;\r\n        min-height:100px;\r\n    }\r\n    #demoQweqdqw>button{\r\n        float: right;\r\n        display: block;\r\n        height: 20px;\r\n    }\r\n    #demoQweqdqw ul{\r\n        margin-top: 50px;\r\n        padding: 0;\r\n    }\r\n    #demoQweqdqw li{\r\n        position: relative;\r\n        list-style: none;\r\n        background-color: #fff;\r\n        margin:10px 5px;\r\n        padding-bottom:20px;\r\n        word-break: break-all;\r\n    }\r\n    #demoQweqdqw li>button{\r\n        position: absolute;\r\n        right: 0px;\r\n        bottom: 0;\r\n        float:inline-end;\r\n    }\r\n</style>\r\n<div id=\"demoQweqdqw\">\r\n    <h3>简易评论框</h3>\r\n    发表评论：\r\n    <textarea ></textarea>\r\n    <button>发布评论</button>\r\n    <ul>\r\n    </ul>\r\n</div>\r\n\r\n<script>\r\n    var textarea=document.querySelector(\"#demoQweqdqw>textarea\")\r\n    var button=document.querySelector(\"#demoQweqdqw>button\")\r\n    var ul=document.querySelector(\"#demoQweqdqw>ul\")\r\n\r\n    button.onclick=function(){\r\n        var temp=document.createElement(\"li\")\r\n        console.log(textarea.value);\r\n        if(textarea.value!='')\r\n        {\r\n            temp.innerHTML=textarea.value + \"<button>删除评论</button>\"\r\n            temp.querySelector(\"button\").onclick=function(){\r\n                ul.removeChild(this.parentNode)\r\n            }\r\n            ul.appendChild(temp)\r\n\r\n            textarea.value=\"\"\r\n        }\r\n    }\r\n</script>\r\n\r\n### 动态生成表格\r\n\r\n<style>\r\n    #demoNQEUH123{\r\n        width: 500px;\r\n        margin: 100px auto;\r\n        border-collapse: collapse;\r\n        text-align: center;\r\n    }\r\n    #demoNQEUH123 td,\r\n    #demoNQEUH123 th{\r\n        border: 1px solid #333;\r\n    }\r\n    #demoNQEUH123 thead tr{\r\n        height: 40px;\r\n        background-color: #ccc;\r\n    }\r\n\r\n</style>\r\n<table id=\"demoNQEUH123\">\r\n    <thead>\r\n        <tr>\r\n            <th>姓名</th>\r\n            <th>科目</th>\r\n            <th>成绩</th>\r\n            <th>操作</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <!-- <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr> -->\r\n    </tbody>\r\n</table>\r\n<script>\r\n    var datas=[\r\n        {\r\n            name:\"dyg\",\r\n            class:\"javascript\",\r\n            score:99.9,\r\n        },\r\n        {\r\n            name:\"kkk\",\r\n            class:\"javascript\",\r\n            score:95.9,\r\n        },\r\n        {\r\n            name:\"jjj\",\r\n            class:\"javascript\",\r\n            score:92.9,\r\n        }\r\n    ];\r\n    var tbody=document.querySelector(\"#demoNQEUH123>tbody\")\r\n    for(var i=0;i<datas.length;i++)\r\n    {\r\n        var tempTr=document.createElement(\"tr\")\r\n        for(key in datas[i])\r\n        {\r\n            console.log(key);\r\n            tempTr.innerHTML+=\"<td>\" + datas[i][key] + \"</td>\";\r\n        }\r\n        tempTr.innerHTML+=\"<td>\" + \"<a href='javascript:;'>删除数据</a>\" + \"</td>\";\r\n        tempTr.querySelector(\"a\").onclick=function(){\r\n            this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode)\r\n        }\r\n        tbody.appendChild(tempTr)              \r\n    }\r\n</script>\r\n\r\n```html\r\n<style>\r\n    #demoNQEUH123{\r\n        width: 500px;\r\n        margin: 100px auto;\r\n        border-collapse: collapse;\r\n        text-align: center;\r\n    }\r\n    #demoNQEUH123 td,\r\n    #demoNQEUH123 th{\r\n        border: 1px solid #333;\r\n    }\r\n    #demoNQEUH123 thead tr{\r\n        height: 40px;\r\n        background-color: #ccc;\r\n    }\r\n\r\n</style>\r\n<table id=\"demoNQEUH123\">\r\n    <thead>\r\n        <tr>\r\n            <th>姓名</th>\r\n            <th>科目</th>\r\n            <th>成绩</th>\r\n            <th>操作</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <!-- <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dyg</td>\r\n            <td>javascript</td>\r\n            <td>99.9</td>\r\n            <td>删除</td>\r\n        </tr> -->\r\n    </tbody>\r\n</table>\r\n<script>\r\n    var datas=[\r\n        {\r\n            name:\"dyg\",\r\n            class:\"javascript\",\r\n            score:99.9,\r\n        },\r\n        {\r\n            name:\"kkk\",\r\n            class:\"javascript\",\r\n            score:95.9,\r\n        },\r\n        {\r\n            name:\"jjj\",\r\n            class:\"javascript\",\r\n            score:92.9,\r\n        }\r\n    ];\r\n    var tbody=document.querySelector(\"#demoNQEUH123>tbody\")\r\n    for(var i=0;i<datas.length;i++)\r\n    {\r\n        var tempTr=document.createElement(\"tr\")\r\n        for(key in datas[i])\r\n        {\r\n            console.log(key);\r\n            tempTr.innerHTML+=\"<td>\" + datas[i][key] + \"</td>\";\r\n        }\r\n        tempTr.innerHTML+=\"<td>\" + \"<a href='javascript:;'>删除数据</a>\" + \"</td>\";\r\n        tempTr.querySelector(\"a\").onclick=function(){\r\n            this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode)\r\n        }\r\n        tbody.appendChild(tempTr)              \r\n    }\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n### 实例：防止复制内容\r\n\r\n#### 禁止鼠标右键菜单\r\n```html\r\n<div id=\"demowoejf923fe\">\r\n    这是一段不能直接复制的文字\r\n</div>\r\n<script>\r\n    var div = document.querySelector(\"#demowoejf923fe\");\r\n    div.addEventListener(\"contextmenu\",function(event){\r\n        event.preventDefault()\r\n    });\r\n</script>\r\n```\r\n\r\n\r\n#### 禁止鼠标选中文字\r\n```html\r\n<div id=\"demoGEOJweoir932\">\r\n    这是一段不能直接复制的文字\r\n</div>\r\n<script>\r\n    var div = document.querySelector(\"#demoGEOJweoir932\");\r\n    // div.addEventListener(\"contextmenu\",function(event){\r\n    //     event.preventDefault()\r\n    // });\r\n    div.addEventListener(\"selectstart\",function(event){\r\n        event.preventDefault()\r\n    });\r\n</script>\r\n```\r\n\r\n#### 禁止f12键\r\n```js\r\ndocument.addEventListener(\"keydown\",function(event){\r\n    if(event.keyCode==123)\r\n    {\r\n        event.preventDefault()\r\n    }\r\n})\r\n```\r\n\r\n\r\n\r\n### 实例：阻止链接跳转\r\n```html\r\n//两种方法\r\n<a href=\"javascript:;\"></a>\r\n<a href=\"javascript:void(0);\"></a>\r\n```"}