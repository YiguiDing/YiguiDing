{"shortInfo":{"title":"indexedDB学习笔记","date":"2022-07-17T06:49:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["indexedDB"],"hideAtIndex":true,"categories":"笔记","id":699480446,"countWords":2693,"readSeconds":269.3,"assetsbaseUrl":"/self_server/assets/"},"content":"# indexedDB学习笔记\r\n\r\n**特点**\r\n* **存储容量大**\r\n  * IndexedDB主要用来客户端存储大量数据而生的，\r\n  * cookie、localstorage等存储方式都有存储大小限制。\r\n* **非关系型数据库(NoSql)**，以键值对的形式存储数据\r\n* **只能通过主键、索引、游标方式查询数据**\r\n* **持久化存储**，清除浏览器缓存不会清除其数据\r\n  * cookie、localStorage、sessionStorage会清除数据\r\n* **异步操作**，IndexedDB操作时不会锁死浏览器，而localstorage是同步的\r\n* **支持事务transaction**，一系列的操作步骤中，若有一步失败，整个操作都会取消\r\n* **同源策略**，网页只能访问自身域名下的数据库\r\n\r\n**重要概念**\r\n* **事务 transaction**\r\n    * 对数据库进行一系列操作时，若有一步失败，则会回滚到最初始的状态，确保数据的一致性\r\n* **仓库 objectStore** ，可以把仓库理解为表\r\n* **索引 index**\r\n    * 可在创建store时创建索引\r\n    * 查询时可通过索引来筛选\r\n    * 插入数据时，索引字段不能为空\r\n* **游标 cursor**\r\n    * 游标是IndexedDB数据库新的概念\r\n    * 概念类似c的指针，\r\n    * 作用类似Python的生成器\r\n\r\n\r\n\r\n## 打开数据库\r\n```js\r\n/**\r\n * 打开数据库\r\n * @param {object} dbName 数据库的名字\r\n * @param {string} storeName 仓库名称\r\n * @param {string} version 所创建的数据库的版本号\r\n * @return {object} 该函数会返回一个数据库实例\r\n */\r\n\r\nfunction openDB(dbName, version = 1) {\r\n  return new Promise((resolve, reject) => { //返回promise对象使得可以链式调用\r\n    //  兼容浏览器\r\n    var indexedDB =\r\n      window.indexedDB ||\r\n      window.mozIndexedDB ||\r\n      window.webkitIndexedDB ||\r\n      window.msIndexedDB;\r\n    let db;//用于存储数据库实例\r\n    // 打开数据库，若没有则会创建\r\n    const request = indexedDB.open(dbName, version);\r\n    // 数据库打开成功的回调（连接成功或创建成功）\r\n    request.onsuccess = function (event) {\r\n      db = event.target.result; // db数据库对象实例,包含了很多增删查改的操作\r\n      console.log(\"数据库打开成功\");\r\n      resolve(db);//返回给外部调用者\r\n    };\r\n    // 数据库打开失败的回调（连接或创建失败）\r\n    request.onerror = function (event) {\r\n      console.log(\"数据库打开报错\");\r\n    };\r\n    // 数据库创建或版本号有更新时候的回调，数据内容的更新不会触发该回调\r\n    request.onupgradeneeded = function (event) {\r\n      // 数据库创建或升级的时候会触发\r\n      console.log(\"onupgradeneeded\");\r\n      db = event.target.result; // 获取数据库对象\r\n      // 创建存储库\r\n      var objectStore;\r\n      objectStore = db.createObjectStore(\"users\", {//概念对应于sql数据库的表的名称\r\n        keyPath: \"userID\", // 指定userID为主键\r\n        // autoIncrement: true // 实现自增\r\n      });\r\n      // 通过主键仅能查询一条数据，通过索引能查询多条满足指定条件的数据，如查询userSex:男\r\n      // 创建索引，在后面查询数据的时候可以根据索引查，若不创建，则只能根据主键来查询\r\n      objectStore.createIndex(\"userID\", \"userID\", { unique: true }); // 主键应当唯一，unique\r\n      objectStore.createIndex(\"userName\", \"userName\", { unique: false }); \r\n      objectStore.createIndex(\"userSex\", \"userSex\", { unique: false });\r\n      objectStore.createIndex(\"userAge\", \"userAge\", { unique: false });\r\n    };\r\n  });\r\n}\r\n```\r\n\r\n**使用**\r\n```js\r\n\r\n/* \r\n    由于openDB返回的是promise对象,是异步的，所以这么写是错误的：\r\n        let db = openDB(\"test\",1);\r\n        console.log(db)\r\n*/\r\n// 正确写法应该使用链式方法调用\r\nlet db;\r\nopenDB(\"test\",1).then((db)=>{ //链式方法调用，并接收值\r\n    db=db\r\n    console.log(db)\r\n    // 后续代码必须写在这个里面，但是也可以使用wait方法将该异步操作变同步操作\r\n\r\n    // 后续代码.....\r\n\r\n\r\n\r\n})\r\n    console.log(db); //报错，因为上述的函数返回的是promise对象，是异步的，\r\n\r\n```\r\n\r\n\r\n## 新增数据\r\n```js\r\n/**\r\n * 新增数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} data 数据 必须是一个对象，必须包含主键、索引\r\n */\r\nfunction addData(db, storeName, data) {\r\n  var request = db\r\n    //这里写成了链式调用的形式，也可以不这样写\r\n    //插入数据需要通过事务transaction来操作，\r\n    //事务的第一个参数是一个列表\r\n    .transaction([storeName], \"readwrite\") // 参数分别是：事务对象（指定表格名称） 和  操作模式（\"只读\"或\"读写\"）\r\n    .objectStore(storeName) // 仓库对象\r\n    .add(data);\r\n\r\n  request.onsuccess = function (event) {\r\n    console.log(\"数据写入成功\");\r\n  };\r\n\r\n  request.onerror = function (event) {\r\n    console.log(\"数据写入失败\");\r\n  };\r\n}\r\n```\r\n\r\n**使用**\r\n```js\r\nlet data={\r\n    \"主键名\":\"主键值\"， //可以使用UUID作为主键值，主键必须存在\r\n    \"索引名1\":\"索引1值\",\r\n    \"索引名2\":\"索引2值\",\r\n    \"索引名3\":\"索引3值\",\r\n    \"其他键名\":\"其他键值\" // 可以第一次插入的data有3个键值对，第二次插入的数据有4个键值对，可以不一致\r\n}\r\naddData(db, \"storeName\", data)\r\n\r\n```\r\n\r\n\r\n## 通过主键读取数据\r\n```js\r\n/**\r\n * 通过主键读取数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} key 主键值\r\n */\r\nfunction getDataByKey(db, storeName, key) {\r\n  return new Promise((resolve, reject) => {\r\n    var transaction = db.transaction([storeName]); // 创建事务\r\n    var objectStore = transaction.objectStore(storeName); // 仓库对象\r\n    var request = objectStore.get(key); // 通过主键获取数据\r\n\r\n    request.onerror = function (event) {\r\n      console.log(\"事务失败\");\r\n    };\r\n\r\n    request.onsuccess = function (event) {\r\n      console.log(\"主键查询结果: \", request.result);\r\n      resolve(request.result);\r\n    };\r\n  });\r\n}\r\n```\r\n\r\n**使用**\r\n```js\r\n\r\ngetDataByKey(db, \"storeName\", \"主键值\").then((result)=>{\r\n    console.log(result)\r\n})\r\n\r\n```\r\n\r\n\r\n## 通过游标读取数据\r\n```js\r\n/**\r\n * 通过游标读取数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n */\r\nfunction cursorGetData(db, storeName) {\r\n  let list = [];\r\n  var store = db\r\n    .transaction(storeName, \"readwrite\") // 事务\r\n    .objectStore(storeName); // 仓库对象\r\n  var request = store.openCursor(); // 指针对象，初始化一个游标\r\n\r\n  // 游标开启成功，逐行读数据\r\n  request.onsuccess = function (e) {\r\n    var cursor = e.target.result;\r\n    if (cursor) {// 必须要检查 因为需要判断是否为游标已经走到了末尾\r\n        // 放入列表；\r\n            // 可以在此通过条件判断来筛选出想要的数据,但这里效率会非常低，因为会遍历所有表项，要想筛选，应该先通过索引来筛选\r\n            //这里没有进行判断，所以获取到的是整张表，但若要想获取整张表 可以用db.transaction().objectStore().getAll()\r\n        list.push(cursor.value); \r\n        cursor.continue(); // 遍历了存储对象中的所有内容\r\n    } else {\r\n      console.log(\"游标读取的数据：\", list); //获取到值，\r\n      // 这里没有用promise，但是indexedDB本身就是异步的，且这是一个事件处理函数，推测仍然不能使用return，具体如何获取返回值应该可以参考之前的代码\r\n    }\r\n  };\r\n}\r\n```\r\n\r\n**使用**\r\n```js\r\n\r\n// 因为内部没有写判断条件，所以获取的是整张表的数据\r\ncursorGetData(db, \"storeName\", \"主键值\");// 异步函数\r\n\r\n```\r\n\r\n\r\n## 通过索引读取数据\r\n```js\r\n/**\r\n * 通过索引读取数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} indexName 索引名称\r\n * @param {string} indexValue 索引值\r\n */\r\nfunction getDataByIndex(db, storeName, indexName, indexValue) {\r\n  var store = db.transaction(storeName, \"readwrite\").objectStore(storeName);\r\n  var request = store.index(indexName).get(indexValue);\r\n  request.onerror = function () {\r\n    console.log(\"事务失败\");\r\n  };\r\n  request.onsuccess = function (e) {\r\n    var result = e.target.result;\r\n    console.log(\"索引查询结果：\", result);\r\n  };\r\n}\r\n```\r\n\r\n**使用**\r\n```js\r\n\r\n// 获取的是第一条满足条件的数据\r\ngetDataByIndex(db, \"storeName\", \"索引键名\", \"索引键值\");// 异步函数\r\n\r\n```\r\n\r\n\r\n\r\n## 通过索引和游标查询记录\r\n```js\r\n/**\r\n * 通过索引和游标查询记录\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} indexName 索引名称\r\n * @param {string} indexValue 索引值\r\n */\r\nfunction cursorGetDataByIndex(db, storeName, indexName, indexValue) {\r\n  let list = [];\r\n  var store = db.transaction(storeName, \"readwrite\").objectStore(storeName); // 仓库对象\r\n  var request = store\r\n    .index(indexName) // 索引对象\r\n    .openCursor( \r\n        IDBKeyRange.only(indexValue) //表示查询所有值等于(only) indexValue的游标\r\n        ); //此时拿到的游标就是索引为指定值的表项了\r\n  request.onsuccess = function (e) {\r\n    var cursor = e.target.result;\r\n    if (cursor) { // 必须要检查\r\n      list.push(cursor.value);\r\n      cursor.continue(); // 遍历了存储对象中的所有内容\r\n    } else {\r\n      console.log(\"游标索引查询结果：\", list);\r\n    }\r\n  };\r\n  request.onerror = function (e) {};\r\n}\r\n```\r\n\r\n\r\n**使用**\r\n```js\r\n\r\n// 获取的是所有满足条件的数据\r\ngetDataByIndex(db, \"storeName\", \"索引键名\", \"索引键值\");// 异步函数\r\n\r\n// 获取所有age=5的表项\r\ngetDataByIndex(db, \"storeName\", \"age\", \"5\");// 异步函数\r\n\r\n```\r\n\r\n## 通过索引和游标分页查询记录\r\n如果一个数据库有十万条数据，浏览器的页面不可能全部渲染出来，需要做成分页的形式，点击第几页再渲染第几页的内容\r\n\r\n* advance 该函数可以让我们的游标跳过多少条开始查询。\r\n\r\n```js\r\n/**\r\n * 通过索引和游标分页查询记录\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} indexName 索引名称\r\n * @param {string} indexValue 索引值\r\n * @param {number} page 页码\r\n * @param {number} pageSize 查询条数\r\n */\r\nfunction cursorGetDataByIndexAndPage(\r\n  db,\r\n  storeName,\r\n  indexName,\r\n  indexValue,\r\n  page,//查询的是第几页的内容，从1开始\r\n  pageSize\r\n) {\r\n  let list = [];\r\n  let counter = 0; // 计数器\r\n  let advanced = true; // 是否跳过多少条查询\r\n  var store = db.transaction(storeName, \"readwrite\").objectStore(storeName); // 仓库对象\r\n  var request = store\r\n    .index(indexName) // 索引对象\r\n    .openCursor(IDBKeyRange.only(indexValue)); // 指针对象\r\n  request.onsuccess = function (e) {\r\n    var cursor = e.target.result;\r\n    if (page > 1 && advanced) { //判断是否需要跳过多少条开始查询，其实判断page>=1也可以\r\n      advanced = false;\r\n      cursor.advance((page - 1) * pageSize); // 跳过多少条\r\n      return;\r\n    }\r\n    if (cursor) {\r\n      // 必须要检查\r\n      list.push(cursor.value);\r\n      counter++;\r\n      if (counter < pageSize) {\r\n        cursor.continue(); // 遍历了存储对象中的所有内容\r\n      } else {\r\n        cursor = null;\r\n        console.log(\"分页查询结果\", list);\r\n      }\r\n    } else {\r\n      console.log(\"分页查询结果\", list);\r\n    }\r\n  };\r\n  request.onerror = function (e) {};\r\n}\r\n```\r\n\r\n\r\n**使用**\r\n```js\r\n\r\n// 获取的是所有满足条件的数据的指定页码的指定条数\r\ncursorGetDataByIndexAndPage(db, \"storeName\", \"索引键名\", \"索引键值\",页码，条数);\r\n\r\n// 获取的是age=5的第二页中的数据，每页有10条数据\r\ngetDataByIndex(db, \"storeName\", \"age\", \"5\",2,10);\r\n\r\n```\r\n\r\n## 更新数据\r\n```js\r\n/**\r\n * 更新数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {object} data 数据\r\n */\r\nfunction updateDB(db, storeName, data) {\r\n  var request = db\r\n    .transaction([storeName], \"readwrite\") // 事务对象\r\n    .objectStore(storeName) // 仓库对象\r\n    .put(data);//若有该数据则更新该数据，若没有则添加该数据\r\n\r\n  request.onsuccess = function () {\r\n    console.log(\"数据更新成功\");\r\n  };\r\n\r\n  request.onerror = function () {\r\n    console.log(\"数据更新失败\");\r\n  };\r\n}\r\n```\r\n\r\n## 通过主键删除数据\r\n```js\r\n/**\r\n * 通过主键删除数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {object} id 主键值\r\n */\r\nfunction deleteDB(db, storeName, id) {\r\n  var request = db\r\n    .transaction([storeName], \"readwrite\")\r\n    .objectStore(storeName)\r\n    .delete(id);\r\n\r\n  request.onsuccess = function () {\r\n    console.log(\"数据删除成功\");\r\n  };\r\n\r\n  request.onerror = function () {\r\n    console.log(\"数据删除失败\");\r\n  };\r\n}\r\n```\r\n\r\n## 通过索引和游标删除指定的数据\r\n```js\r\n/**\r\n * 通过索引和游标删除指定的数据\r\n * @param {object} db 数据库实例\r\n * @param {string} storeName 仓库名称\r\n * @param {string} indexName 索引名\r\n * @param {object} indexValue 索引值\r\n */\r\nfunction cursorDelete(db, storeName, indexName, indexValue) {\r\n  var store = db.transaction(storeName, \"readwrite\").objectStore(storeName);\r\n  var request = store\r\n    .index(indexName) // 索引对象\r\n    .openCursor(IDBKeyRange.only(indexValue)); // 指针对象\r\n  request.onsuccess = function (e) {\r\n    var cursor = e.target.result;\r\n    var deleteRequest;\r\n    if (cursor) {\r\n      deleteRequest = cursor.delete(); // 请求删除当前项\r\n      deleteRequest.onerror = function () {\r\n        console.log(\"游标删除该记录失败\");\r\n      };\r\n      deleteRequest.onsuccess = function () {\r\n        console.log(\"游标删除该记录成功\");\r\n      };\r\n      cursor.continue(); //游标移动到下一个，以便删除所有匹配数据\r\n    }\r\n  };\r\n  request.onerror = function (e) {};\r\n}\r\n```\r\n\r\n## 关闭数据库\r\n```js\r\n/**\r\n * 关闭数据库\r\n * @param {object} db 数据库实例\r\n */\r\nfunction closeDB(db) {\r\n  db.close();\r\n  console.log(\"数据库已关闭\");\r\n}\r\n```\r\n\r\n\r\n## 删除数据库\r\n\r\n```js\r\n/**\r\n * 删除数据库\r\n * @param {object} dbName 数据库名称\r\n */\r\nfunction deleteDBAll(dbName) {\r\n  console.log(dbName);\r\n  let deleteRequest = window.indexedDB.deleteDatabase(dbName);\r\n  deleteRequest.onerror = function (event) {\r\n    console.log(\"删除失败\");\r\n  };\r\n  deleteRequest.onsuccess = function (event) {\r\n    console.log(\"删除成功\");\r\n  };\r\n}\r\n```"}