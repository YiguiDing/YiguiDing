{"shortInfo":{"title":"Ajax学习笔记","date":"2022-08-26T15:42:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["Ajax","前端"],"categories":"笔记","hideAtIndex":true,"id":4042505685,"countWords":3807,"readSeconds":380.7,"assetsbaseUrl":"/self_server/assets/"},"content":"# Ajax学习笔记\r\n\r\n## 目录\r\n- [Ajax学习笔记](#ajax学习笔记)\r\n  - [目录](#目录)\r\n  - [尝试封装AJAX](#尝试封装ajax)\r\n  - [HTTP协议](#http协议)\r\n    - [请求报文格式](#请求报文格式)\r\n    - [响应报文格式](#响应报文格式)\r\n  - [AJAX](#ajax)\r\n    - [XMLHttpRequest对象](#xmlhttprequest对象)\r\n    - [核心API](#核心api)\r\n  - [通过express框架启动一个后端服务](#通过express框架启动一个后端服务)\r\n  - [ajax请求基本流程\\_demo1](#ajax请求基本流程_demo1)\r\n  - [GET请求中通过URL传递参数\\_demo2](#get请求中通过url传递参数_demo2)\r\n    - [方法1](#方法1)\r\n    - [方法2](#方法2)\r\n  - [POST请求中通过传递参数\\_demo3](#post请求中通过传递参数_demo3)\r\n    - [解析发送的文本](#解析发送的文本)\r\n    - [解析url格式数据(a=123\\&b=321)](#解析url格式数据a123b321)\r\n  - [ajax设置请求头](#ajax设置请求头)\r\n  - [ajax设置响应体数据类型](#ajax设置响应体数据类型)\r\n  - [nodemon](#nodemon)\r\n  - [ie缓存问题的解决](#ie缓存问题的解决)\r\n  - [处理超时和网络异常](#处理超时和网络异常)\r\n  - [中途手动取消请求](#中途手动取消请求)\r\n  - [防止用户多次点击导致频繁发送相同请求](#防止用户多次点击导致频繁发送相同请求)\r\n  - [jquery中的ajax](#jquery中的ajax)\r\n  - [ajax工具库:axios](#ajax工具库axios)\r\n  - [window.fetch()原生ajax接口](#windowfetch原生ajax接口)\r\n\r\n\r\n## 尝试封装AJAX\r\n```js\r\nfunction Ajax(method,url,headers,data,callBack){\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(method,url,true);\r\n    for(keyName in headers){\r\n        xhr.response.setRequestHeader(keyName,headers[keyName]);\r\n    }\r\n    xhr.send(data);\r\n    xhr.onreadystatechange = function(){\r\n        if(xhr.readyState==4){\r\n            if(xhr.status>=200 && xhr.status<300){\r\n                callBack(xhr.response);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nAjax(\"GET\",\"http://127.0.0.1:8000/demo1\",null,null,result=>{\r\n    console.log(\"接受到的响应体内容为：\"+result);\r\n})\r\n```\r\n**测试**\r\n\r\n![图 13](./images/Ajax学习笔记/945373296dffc7f9789eeb8c525ad63633da961a5eab5363d36541742d684a7c.png)  \r\n\r\n\r\n## HTTP协议\r\nHTTP(**H**yper **T**ext **T**ransport **P**rotocol),超文本传输协议,请求-响应协议,通常运行在TCP上\r\n\r\n### 请求报文格式\r\n\r\n1. 请求行\r\n   * **请求方法**+**空格**+**URL**+**空格**+**协议版本**+**回车换行(CRLF)**\r\n   * 示例:\r\n      ```\r\n      GET /index.html HTTP/1.1\\r\\n\r\n      ```\r\n2. 请求头\r\n   * **键名**+**冒号**+**空格**+**键值**+**回车换行**\r\n   * 示例:\r\n      ```\r\n      host:baidu.com\\r\\n\r\n      user-Agent:chrome\\r\\n\r\n      ```\r\n   * ![](./images/Ajax学习笔记/2022-11-28-14-32-07.png) \r\n\r\n3. 空行(CRLF)\r\n   * `CR`: `Carriage Return`,回车符号,`0x0d`,`\\r`\r\n   * `LF`: `Line Feed`,换行符,`0x0a`,`\\n`\r\n   * 示例:\r\n        ```\r\n        \\r\\n\r\n        ```\r\n4. 报文主体\r\n   * 数据部分\r\n   * 示例:\r\n        ```\r\n        hello world!\r\n        ```\r\n\r\n**完整示例**\r\n```\r\nGET /index.html HTTP/1.1\r\nhost: baidu.com\r\nuser-Agent: chrome\r\n\r\nhello world!\r\n```\r\n\r\n![图 7](./images/Ajax学习笔记/9e9779c97ad0448a3deae16470deb3e75aa96fdc763ec4e298b1f12ae3e6667f.png)  \r\n\r\n\r\n\r\n### 响应报文格式\r\n1. 响应行\r\n   * **协议版本**+空格+**状态码**+空格+**状态字符串**+回车换行(CRLF)\r\n   * 示例:\r\n        ```\r\n        HTTP/1.1 200 OK\\r\\n\r\n        ```\r\n    * 状态码 ![](./images/Ajax学习笔记/2022-11-28-15-12-28.png)\r\n   * ![](./images/Ajax学习笔记/2022-11-28-15-20-17.png)\r\n2. 响应头\r\n   * **键名**+**冒号**+**空格**+**键值**+回车换行\r\n   * 示例:\r\n        ```\r\n        host:baidu.com\\r\\n\r\n        user-Agent:chrome\\r\\n\r\n        ```\r\n    * ![](./images/Ajax学习笔记/2022-11-28-15-10-05.png)\r\n\r\n3. 空行(CRLF)\r\n   * `CR`: `Carriage Return`,回车符号,`0x0d`,`\\r`\r\n   * `LF`: `Line Feed`,换行符,`0x0a`,`\\n`\r\n   * 示例:\r\n        ```\r\n        \\r\\n\r\n        ```\r\n4. 报文主体\r\n   * 数据部分\r\n   * 示例:\r\n        ```\r\n        hello world!\r\n        ```\r\n\r\n\r\n**完整示例**\r\n```\r\nHTTP/1.1 200 OK\r\nhost: baidu.com\r\nuser-Agent: chrome\r\n\r\n<html>\r\n   <head>\r\n   </head>\r\n   <body>\r\n        hello world!\r\n   </body>\r\n</html>\r\n```\r\n\r\n![图 6](./images/Ajax学习笔记/7e6ba87309410398b0889fc2d15a82345d154c6abc5d202f6c986440b20aafb2.png)  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## AJAX\r\n**Ajax**即`Asynchronous Javascript And XML`（异步JavaScript和XML）\r\n\r\n### XMLHttpRequest对象\r\n\r\n使用 JavaScript 向服务器提出请求并处理响应而不阻塞用户核心对象是**XMLHttpRequest**。\r\n通过这个对象， JavaScript 可在不重载页面的情况与 Web 服务器交换数据，即在不需要刷新页面的情况下，就可以产生局部刷新的效果。\r\n\r\n\r\n[完整API: https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\r\n\r\n### 核心API\r\n* `xhr=new XMLHttpRequest();` 创建 XMLHttpRequest 对象\r\n* `xhr.open(method,url,async)`  规定请求的类型、URL 以及是否异步处理请求。\r\n    * **method** ： 请求的类型；GET 或 POST\r\n    * **url** ： 文件在服务器上的位置\r\n    * **async** ： true（用于**异步**的**AJAX**）或 false（同步）\r\n* `setRequestHeader(header,value)` 向请求添加 HTTP 头。\r\n    * **header** : 规定头的名称\r\n    * **value** : 规定头的值\r\n* `xhr.send(string)` 将请求发送到服务器。\r\n  * **string** ： 仅用于 POST 请求\r\n* `xhr.readyState` 存有 **XMLHttpRequest** 的状态。从 0 到 4 发生变化。\r\n    * **0**: 请求未初始化\r\n    * **1**: 服务器连接已建立\r\n    * **2**: 请求已接收\r\n    * **3**: 请求处理中\r\n    * **4**: 请求已完成，且响应已就绪\r\n* `xhr.status` 响应报文的状态码\r\n  * **2XX**: 成功\r\n  * **4XX**: 失败\r\n* `xhr.onreadystatechange=function(){}`  每当 readyState 属性改变时，就会调用该函数。\r\n  *  onreadystatechange 事件被触发 4 次（0 - 4）, 分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。\r\n\r\n## 通过express框架启动一个后端服务\r\n\r\n**安装node,npm express**\r\n```\r\n# 安装nodejs npm\r\napt-get install nodejs npm\r\n# 初始化\r\nnpm init --yes\r\n# 安装express\r\nnpm install express\r\n# 编辑testExpress.js\r\n# 执行testExpress.js\r\nnode testExpress.js\r\n```\r\n\r\n\r\n**testExpress.js**\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.get(\"/\",(request,response)=>{\r\n    //设置响应\r\n    response.send(\"Hello Express!!\");\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n\r\n## ajax请求基本流程_demo1\r\n**效果**\r\n![图 8](./images/Ajax学习笔记/c80dd76911ec613aedcb083ac3297b459df84dfdfa67fd602aa2a5b614906e01.png)  \r\n\r\n**前端代码**\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n    <style>\r\n        #result1{\r\n            width: 200px;\r\n            height: 100px;\r\n            border: 1px solid black;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <button id=\"btn1\">点击发送请求</button>\r\n    <div id=\"result1\"></div>\r\n    <script>\r\n        var btn1 = document.getElementById(\"btn1\")\r\n        var result1 = document.getElementById(\"result1\")\r\n        btn1.onclick=function(){\r\n            //ajax部分\r\n            //1. 创建xhr对象\r\n            const xhr = new XMLHttpRequest();\r\n            //2. 初始化:设置请求方法和url\r\n            xhr.open(\"GET\",\"http://127.0.0.1:8000/demo1\")\r\n            //3. 发送\r\n            xhr.send();\r\n            //4. 事件绑定:绑定处理返回结果的函数\r\n            xhr.onreadystatechange = function(){\r\n                // 4.1 判断readyState状态\r\n                if(xhr.readyState==4){\r\n                    //onreadystatechange事件会在readyState值改变后触发\r\n                    //xhr.readyState\r\n                        // 0 初始值 \r\n                        // 1 open方法调用完毕 \r\n                        // 2 send方法调用完毕 \r\n                        // 3 接收到服务端返回的部分结果 \r\n                        // 4 接收到服务端返回的所有结果\r\n\r\n                        //4.2 判断响应报文头状态码\r\n                        if(xhr.status>=200 && xhr.status<300){\r\n                            //xhr.status\r\n                                // 2xx 成功\r\n                                // 4xx 失败\r\n                                // 5xx\r\n                            //获取响应头的数据\r\n                            console.log(xhr.status);//状态码 \r\n                            console.log(xhr.statusText);//状态字符串 \r\n                            console.log(xhr.getAllResponseHeaders());//所有响应头\r\n                            console.log(xhr.response);//响应体 \r\n                            //将响应体内容写入页面\r\n                            result1.innerHTML=xhr.response;\r\n                        }\r\n                }\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n**后端代码**\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.get(\"/demo1\",(request,response)=>{\r\n    //设置响应头\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");//允许跨域,若没有,则当以文件方式打开前端页面或访问前端页面的域名或端口与服务端不一致时,响应报文会被浏览器拦截\r\n    //设置响应体\r\n    response.send(\"Hello Express!!\");\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n\r\n## GET请求中通过URL传递参数_demo2\r\n\r\n### 方法1\r\n**效果**\r\n![图 10](./images/Ajax学习笔记/5799fdd3638eeafab6bd0e8e64bb485e8591fa5169403576c7667c0355e92552.png)  \r\n\r\n\r\n**前端关键代码**\r\n```js\r\nxhr.open(\"GET\",\"http://127.0.0.1:8000/demo2?a=1&b=2&c=3\")\r\n```\r\n\r\n**后端关键代码**\r\n```js\r\napp.get(\"/demo2\",(request,response)=>{\r\n    response.send(request.query);//request.query 中存放着传递过来的键值对\r\n})\r\n```\r\n\r\n### 方法2\r\n**效果**\r\n![图 9](./images/Ajax学习笔记/a46234cd8cc372a024311518512f464cf9f55890f682bf289fd65fd6ceae0bc7.png)  \r\n\r\n**前端关键代码**\r\n```js\r\nxhr.open(\"GET\",\"http://127.0.0.1:8000/demo2/1/2/3\")\r\n```\r\n\r\n**后端关键代码**\r\n```js\r\napp.get(\"/demo2/:a/:b/:c\",(request,response)=>{\r\n    response.send(request.params);//request.params 中存放着传递过来的键值对\r\n})\r\n```\r\n\r\n\r\n## POST请求中通过传递参数_demo3\r\n\r\n### 解析发送的文本\r\n![图 12](./images/Ajax学习笔记/a8a5ba527782e970517f95f4fdac198f1bf20d571463bf6e923ce8732e8fabd6.png)  \r\n\r\n**前端关键代码**\r\n```js\r\nxhr.open(\"POST\",\"http://127.0.0.1:8000/demo3\")\r\nxhr.send(\"hello server\")\r\n```\r\n\r\n**后端关键代码**\r\n```js\r\n//引入中间件,用于获取request.body内容\r\nconst bodyParser = require('body-parser');\r\n// 解析 text\r\napp.use(bodyParser.text());\r\n\r\n//创建路由\r\napp.post(\"/demo3\",(request,response)=>{\r\n    //设置响应头\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");\r\n    //设置响应体\r\n    response.send(\"你发送的数据是:\" + request.body);\r\n})\r\n```\r\n\r\n### 解析url格式数据(a=123&b=321)\r\n![图 11](./images/Ajax学习笔记/ec47983f998ddd778f3a164385b3509c609b73a02e5a34b4dfd32228a35bd5ad.png)  \r\n\r\n**前端关键代码**\r\n```js\r\nxhr.open(\"POST\",\"http://127.0.0.1:8000/demo3\")\r\n//设置请求头\r\nxhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\")\r\nxhr.send(\"a=123&b=321\")\r\n```\r\n**后端关键代码**\r\n```js\r\n//引入中间件,用于获取request.body内容\r\nconst bodyParser = require('body-parser');\r\n// 解析 application/x-www-form-urlencoded //也就是解析a=1&b=2 这种url格式的数据\r\napp.use(bodyParser.urlencoded({ extended: false })) \r\n        // extended: false 方法内部使用querystring模块处理请求参数的格式\r\n        // extended: true 方法内部使用第三方模块qs模块请求参数的格式\r\n\r\n//创建路由\r\napp.post(\"/demo3\",(request,response)=>{\r\n    //设置响应头\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");//允许跨域\r\n    //设置响应体\r\n    response.send(\"你发送的数据是:\" + JSON.stringify(request.body));\r\n})\r\n```\r\n\r\n\r\n## ajax设置请求头\r\n* `xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\")`// for A=123&B=321\r\n* `xhr.setRequestHeader(\"Name\",\"dyg\")`// **自定义请求头**\r\n    * `response.setHeader(\"Access-Control-Allow-Headers\",\"*\")` 发送带有自定义请求头的请求需要在服务端设置响应头为允许自定义响应头 \r\n    * 发送带有自定义请求头的请求报文时,会先发送一个`OPTIONS`类型的请求验证自定义请求头是否可用,服务器需要\r\n需要处理该`OPTIONS`类型的请求\r\n\r\n\r\n## ajax设置响应体数据类型\r\n\r\n**手动数据类型转换**\r\n* `jsOBJ = JSON.parse(xhr.response) ` 实现手动数据类型转换 `string->obj`\r\n\r\n**自动数据类型转换**\r\n* `xhr.responseType = \"json\"` 实现自动数据类型转换 一般写在`xhr`对象创建之后\r\n\r\n\r\n## nodemon\r\n**用于实现服务端代码改变后自动重启**\r\n\r\n```bash\r\nnpm i nodemon -g\r\n```\r\n\r\n## ie缓存问题的解决\r\nie浏览器会将相同地址的服务端响应报文存入缓存,在第二次客户端发送同样的请求时,ie浏览器会将缓存中的数据作为第二次的响应报文,带来的问题是不能获取服务端相同地址上的最新数据.\r\n\r\n**前端关键代码**\r\n```js\r\nxhr.open(\"POST\",\"http://127.0.0.1:8000/demo3&date=\"+Date.now() )\r\n```\r\n\r\n\r\n## 处理超时和网络异常\r\n```js\r\nconst xhr = new XMLHttpRequest();\r\n//当请求超时后,会将请求的status状态由pending改为canceled\r\nxhr.timeout =  2000;\r\n// 设置超时的回调函数\r\nxhr.ontimeout = function(){\r\n    alert(\"网络超时,请稍后重试\")\r\n}\r\nxhr.onterror = function(){//网络异常时status状态为failed\r\n    alert(\"网络异常,请稍后重试\")\r\n}\r\nxhr.open(\"GET\",\"http://127.0.0.1:8000/demo1\")\r\n\r\n```\r\n\r\n\r\n## 中途手动取消请求\r\n\r\n**取消请求**\r\n```js\r\nxhr.abort   ();\r\n```\r\n\r\n\r\n**客户端**\r\n```html\r\n  <button id=\"btn4_1\">点击发送请求</button>\r\n  <button id=\"btn4_2\">点击取消请求</button>\r\n  <script>\r\n      var btn4_1 = document.getElementById(\"btn4_1\")\r\n      var btn4_2 = document.getElementById(\"btn4_2\")\r\n      let xhr = null;\r\n      btn4_1.onclick=function(){\r\n          xhr = new XMLHttpRequest();\r\n          xhr.open(\"POST\",\"http://127.0.0.1:8000/demo4\")\r\n          xhr.send(\"hello server\");\r\n      }\r\n      btn4_2.onclick = function(){\r\n          xhr.abort();\r\n      }\r\n  </script>\r\n```\r\n\r\n**服务端**\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.post(\"/demo4\",(request,response)=>{\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");\r\n    setTimeout(()=>{\r\n        response.send(\"你发送的数据是:\" + request.body);\r\n    },3000)\r\n\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n\r\n## 防止用户多次点击导致频繁发送相同请求\r\n\r\n\r\n![图 1](./images/Ajax学习笔记/faa475ec71e77bd72eb7aa7ee2390631b37b70329f1a081519f6aed8e3f9b3e4.png)  \r\n\r\n**客户端**\r\n```html\r\n  <button id=\"btn5\">点击发送请求</button>\r\n  <script>\r\n      var btn5 = document.getElementById(\"btn5\")\r\n      btn5.onclick=function(){\r\n          var self = this\r\n          if(self.isSending == true)//判断是否正在发送请求\r\n          {\r\n              self.xhr.abort();//取消正在发送的请求\r\n          }\r\n          self.xhr = new XMLHttpRequest();\r\n          self.isSending = true;//创建标志为,记录为正在发送请求\r\n          self.xhr.open(\"POST\",\"http://127.0.0.1:8000/demo5\")\r\n          self.xhr.send(\"hello server\");\r\n          self.xhr.onreadystatechange = function(){\r\n              if(self.xhr.readyState==4){\r\n                  self.isSending = false;//改变标志位\r\n              }\r\n          }\r\n      }\r\n  </script>\r\n```\r\n\r\n**服务端**\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.post(\"/demo5\",(request,response)=>{\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");//允许跨域,若没有,则当以文件方式打开前端页面或访问前端页面的域名或端口与服务端不一致时,响应报文会被浏览器拦截\r\n    setTimeout(()=>{\r\n        response.send(\"你发送的数据是:\" + request.body);\r\n    },3000)\r\n\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n\r\n## jquery中的ajax\r\n* `$.get(url,{a:1,b:2},function(data){},\"json\")`\r\n* `$.post(url,{a:1,b:2},function(data){},\"json\")`\r\n\r\n```html\r\n    <!-- jquery库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n    <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n    <button id=\"btn6-1\">点击发送GET请求</button>\r\n    <button id=\"btn6-2\">点击发送POST请求</button>\r\n    <button id=\"btn6-3\">通用方法</button>\r\n    <script>\r\n        $(\"#btn6-1\").click(function(){\r\n            // $.get(url,data,function(data){\r\n            $.get(\"http://127.0.0.1:8000/demo6\",{a:1,b:2},function(data){\r\n                console.log(data)\r\n            })\r\n        })\r\n        $(\"#btn6-2\").click(function(){\r\n            $.post(\"http://127.0.0.1:8000/demo6\",{a:1,b:2},function(data){\r\n                console.log(data)\r\n            })\r\n        })\r\n        $(\"#btn6-3\").click(function(){\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: \"http://127.0.0.1:8000/demo6\",\r\n                headers: {\r\n                    a:100,\r\n                    b:200,\r\n                },\r\n                data: {a:1,b:2},\r\n                dataType: \"json\",//可将字符串类型的data自动转换为json\r\n                success: function(data){ console.log(data) },\r\n                timeout: 2000,\r\n                error: function(){ console.log(\"出错了\") },//超时或网络异常的错误回调函数\r\n            })\r\n        })\r\n```\r\n\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.all(\"/demo6\",(request,response)=>{\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");\r\n    response.setHeader(\"access-control-allow-headers\",\"*\");\r\n    response.send(\"hello client\");\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n## ajax工具库:axios\r\n**get**\r\n```js\r\naxios.get('http://127.0.0.1:8000/demo7',{\r\n    params: {\r\n        name:\"DingYigui\",\r\n        id:123\r\n    },\r\n    headers:{\r\n        test:321\r\n    }\r\n})\r\n.then(function (response) {\r\n    console.log(response);\r\n})\r\n.catch(function (error) {\r\n    console.log(error);\r\n})\r\n.then(function () {\r\n    // always executed\r\n});\r\n```\r\n\r\n**post**\r\n```html\r\n<!-- jquery库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n<script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n<!-- axios 库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n<script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js\"></script>\r\n<button id=\"btn7-1\">点击使用axios(config)发送请求</button>\r\n<button id=\"btn7-2\">点击使用axios.get(url[, config])发送请求</button>\r\n<button id=\"btn7-3\">点击使用axios.post(url[, data[, config]])发送请求</button>\r\n<script>\r\n    $(\"#btn7-1\").click(function(){\r\n        //axios(config)\r\n        axios({\r\n            method: 'get',\r\n            url:\"http://127.0.0.1:8000/demo7\",\r\n            params: {//url格式数据\r\n                name:\"DingYigui\",\r\n                id:123\r\n            },\r\n            headers:{//报头\r\n                test:321\r\n            },\r\n            data:{\r\n                a:123,\r\n                b:321\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n        });\r\n    })\r\n    $(\"#btn7-2\").click(function(){\r\n        // axios.get(url[, config])\r\n        axios.get('http://127.0.0.1:8000/demo7',{\r\n            params: {\r\n                name:\"DingYigui\",\r\n                id:123\r\n            },\r\n            headers:{\r\n                test:321\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n        });\r\n    })\r\n    $(\"#btn7-3\").click(function(){\r\n        // axios.post(url[, data[, config]])\r\n        axios.post('http://127.0.0.1:8000/demo7',{a:123,b:321},{\r\n            params: {//url格式数据\r\n                name:\"DingYigui\",\r\n                id:123\r\n            },\r\n            headers:{//报头\r\n                test:321\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n        });\r\n    })\r\n</script>\r\n```\r\n\r\n## window.fetch()原生ajax接口\r\n\r\n\r\n```html\r\n  <!-- jquery库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n  <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n  <!-- axios 库 ,crossorigin=\"anonymous\"表示不携带当前页面的cookie -->\r\n  <script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js\"></script>\r\n  <button id=\"btn8\">点击使用fetch(url,config)发送请求</button>\r\n  <script>\r\n      $(\"#btn8\").click(function(){\r\n          url = \"http://127.0.0.1:8000/demo8\"\r\n          config = {\r\n              method:\"POST\",\r\n              headers: {\r\n                  name: \"DYG\"\r\n              },\r\n              body: \"username=admin&passwd=admin\"\r\n          }\r\n          fetch(url,config)\r\n          .then(response=>{\r\n              console.log(response)\r\n            //   return response.json() //可以解析为json对象\r\n              return response.text()\r\n          })\r\n          .then(body=>{\r\n              console.log(body)\r\n          })\r\n      })\r\n```\r\n\r\n\r\n```js\r\n//引入express\r\nconst express = require('express');\r\n\r\n//创建应用对象\r\nconst app = express();\r\n\r\n//创建路由\r\napp.post(\"/demo4\",(request,response)=>{\r\n    response.setHeader(\"access-control-allow-origin\",\"*\");//允许跨域,若没有,则当以文件方式打开前端页面或访问前端页面的域名或端口与服务端不一致时,响应报文会被浏览器拦截\r\n    setTimeout(()=>{\r\n        response.send(\"你发送的数据是:\" + request.body);\r\n    },3000)\r\n\r\n})\r\n\r\n//监听端口\r\napp.listen(8000,()=>{\r\n    console.log(\"服务已启动,8000端口监听中...\")\r\n})\r\n```\r\n\r\n\r\n"}