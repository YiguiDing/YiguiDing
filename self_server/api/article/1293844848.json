{"shortInfo":{"title":"TypeScript学习笔记","date":"2022-12-27T04:17:00.000Z","cover":"\\self_server\\assets\\images\\typescript学习笔记\\2022-12-12-12-04-49.png","tags":["笔记"],"categories":"笔记","id":1293844848,"countWords":4403,"readSeconds":440.3,"assetsbaseUrl":"/self_server/assets/"},"content":"# TypeScript学习笔记\r\n\r\n## 目录\r\n- [TypeScript学习笔记](#typescript学习笔记)\r\n  - [目录](#目录)\r\n  - [什么是TypeScript](#什么是typescript)\r\n  - [基本使用](#基本使用)\r\n    - [安装Typescript编译器tsc](#安装typescript编译器tsc)\r\n    - [编写代码、编译、执行](#编写代码编译执行)\r\n    - [使用ts-node简化ts执行步骤](#使用ts-node简化ts执行步骤)\r\n  - [js原生类型注解](#js原生类型注解)\r\n    - [**数组类型的两种特有写法**](#数组类型的两种特有写法)\r\n    - [**函数形参、返回值的类型、void类型**](#函数形参返回值的类型void类型)\r\n    - [**函数类型**](#函数类型)\r\n    - [**函数形参的可选参数**](#函数形参的可选参数)\r\n    - [**对象类型**](#对象类型)\r\n  - [ts新增类型](#ts新增类型)\r\n    - [**联合类型**](#联合类型)\r\n    - [**类型别名**](#类型别名)\r\n    - [**接口**](#接口)\r\n    - [**元组**](#元组)\r\n    - [**字面量类型**](#字面量类型)\r\n    - [**枚举类型**](#枚举类型)\r\n    - [**类型推论**](#类型推论)\r\n    - [**类型断言**](#类型断言)\r\n    - [**any类型**](#any类型)\r\n    - [**ts的typeof运算符**](#ts的typeof运算符)\r\n  - [ts高级类型](#ts高级类型)\r\n    - [**class类**](#class类)\r\n    - [**类-extends继承**](#类-extends继承)\r\n    - [**类-implements实现接口**](#类-implements实现接口)\r\n    - [**类的访问修饰符public protected private**](#类的访问修饰符public-protected-private)\r\n    - [**readonly只读属性**](#readonly只读属性)\r\n    - [**类型兼容性**](#类型兼容性)\r\n      - [**类的类型兼容性**](#类的类型兼容性)\r\n      - [**接口的类型兼容性**](#接口的类型兼容性)\r\n      - [**函数的类型兼容性**](#函数的类型兼容性)\r\n    - [**交叉类型**](#交叉类型)\r\n    - [**交叉类型和继承的区别**](#交叉类型和继承的区别)\r\n    - [**泛型函数**](#泛型函数)\r\n    - [**泛型类型收缩**](#泛型类型收缩)\r\n    - [**多个泛型类型的支持和keyof的使用**](#多个泛型类型的支持和keyof的使用)\r\n    - [**泛型接口**](#泛型接口)\r\n    - [**类的泛型**](#类的泛型)\r\n    - [**泛型工具类型 `Partial` `Readonly` `Pick` `Record`**](#泛型工具类型-partial-readonly-pick-record)\r\n    - [**索引签名类型**](#索引签名类型)\r\n    - [**映射类型**](#映射类型)\r\n    - [**利用映射类型实现Partial**](#利用映射类型实现partial)\r\n    - [**索引查询类型**](#索引查询类型)\r\n  - [**类型声明文件**](#类型声明文件)\r\n    - [**第三方库的类型声明文件的使用**](#第三方库的类型声明文件的使用)\r\n    - [**自定义类型声明文件的使用**](#自定义类型声明文件的使用)\r\n    - [**给已有js文件编写类型声明文件**](#给已有js文件编写类型声明文件)\r\n\r\n\r\n## 什么是TypeScript\r\n* TypeScript是JavaScript的超集\r\n* `TypeScript = Type + JavaScript` 即在js的基础上增加了类型支持\r\n* TypeScript由微软开发，是开源的\r\n\r\n![](./images/typescript学习笔记/2022-12-12-12-06-11.png)\r\n\r\n**为什么要为js添加类型支持**\r\n* 原生js是动态类型编程语言，\r\n  * 执行期间做类型检查，\r\n  * 类型错误只有在代码运行时才能发现（bug晚发现），\r\n  * bug难找，难改，开发效率低。\r\n* typescript是静态类型编程语言，\r\n  * 编译期间做类型检查，\r\n  * 类型错误在代码编写时(配合开发工具)，编译时就能发现（bug早发现），\r\n  * bug好找，好改，开发效率高。\r\n\r\n**ts优势**\r\n![](./images/typescript学习笔记/2022-12-12-12-19-18.png)\r\n\r\n\r\n**类型注解**\r\n* 为变量添加类型约束，约束变量age类型为number，\r\n* 若赋值为非number类型则报错\r\n\r\n## 基本使用\r\n### 安装Typescript编译器tsc\r\n\r\n![](./images/typescript学习笔记/2022-12-12-12-27-12.png)\r\n\r\n```bash\r\nnpm i -g typescript\r\ntsc -v\r\n```\r\n\r\n![](./images/typescript学习笔记/2022-12-12-12-26-10.png)\r\n\r\n### 编写代码、编译、执行\r\n![](./images/typescript学习笔记/2022-12-12-12-30-48.png)\r\n\r\n### 使用ts-node简化ts执行步骤\r\n> 注意：需要package.json文件 否则报错\r\n\r\n![](./images/typescript学习笔记/2022-12-12-12-34-03.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n## js原生类型注解\r\n\r\n**js原生类型:`number string boolean null undefined symbol`**\r\n```ts\r\nvar a:number=1;\r\nvar b:string=\"1\";\r\nvar c:boolean=true;\r\nvar d:null=null;\r\nvar e:undefined=undefined;\r\nvar f:symbol=Symbol(1);\r\n\r\nconsole.log(a);\r\nconsole.log(b);\r\nconsole.log(c);\r\nconsole.log(d);\r\nconsole.log(e);\r\nconsole.log(f);\r\n// output:\r\n1\r\n1        \r\ntrue     \r\nnull     \r\nundefined\r\nSymbol(1)\r\n```\r\n\r\n\r\n**js原生对象类型:`object`**\r\n```ts\r\nvar g:object=[];\r\nvar h:object={};\r\nvar i:object=function a(){};\r\nvar j:object=function (){};\r\nvar k:object=()=>{};\r\n\r\nconsole.log(g);\r\nconsole.log(h);\r\nconsole.log(i);\r\nconsole.log(j);\r\nconsole.log(k);\r\n// output\r\n[]\r\n{}\r\n[Function: a]\r\n[Function: j]\r\n[Function: k]\r\n```\r\n\r\n### **数组类型的两种特有写法**\r\n```ts\r\n// 数组类型的两种写法\r\nvar l:number[] = [1,2,3]\r\nvar m:Array<number> = [1,2,3]\r\nconsole.log(l);\r\nconsole.log(m);\r\n// output\r\n[ 1, 2, 3 ]\r\n[ 1, 2, 3 ]\r\n```\r\n\r\n### **函数形参、返回值的类型、void类型**\r\n```ts\r\nfunction funA(a:number,b:number):number{\r\n    return a+b;\r\n}\r\n\r\nvar funB = (a:number,b:number):number =>{// 箭头函数的返回值类型的写法\r\n    return a+b;\r\n}\r\n\r\nvar funC = (a:number,b:number):void =>{//void无返回值类型\r\n  console.log(a+b)\r\n}\r\n```\r\n\r\n### **函数类型**\r\n```ts\r\nvar funC: (a:number,b:number)=>number = (a,b)=>a+b;\r\nvar funC: (a:number,b:number)=>number = function fun(a,b){return a+b};\r\n```\r\n\r\n### **函数形参的可选参数**\r\n```ts\r\nfunction mySlice(start?:number,end?:number):void{\r\n\r\n}\r\n```\r\n\r\n### **对象类型**\r\n```ts\r\nvar obj:{\r\n    name:string;  // ;号可以去掉\r\n    age:number; isUser?:boolean; // 中间的分号不能去掉\r\n    sayHi():void;\r\n    greet?:(name:string)=>void // ?号 表示可选参数\r\n} = {\r\n    name:\"hahahah\",\r\n    age:18,\r\n    sayHi(){}\r\n}\r\n```\r\n\r\n## ts新增类型\r\n\r\n**ts新增类型**\r\n* 联合类型 `|`\r\n* 自定义类型（类型别名）\r\n* 接口\r\n* 元祖\r\n* 字面量类型\r\n* 枚举类型\r\n* void\r\n* any\r\n\r\n### **联合类型**\r\n```ts\r\n// 联合类型\r\nvar a: number|string;\r\n```\r\n\r\n### **类型别名**\r\n```ts\r\n// 类型别名\r\ntype myType = Arrary<number|string>;\r\n```\r\n\r\n\r\n### **接口**\r\n```ts\r\n// 接口\r\ninterface IPerson {\r\n    name:string;\r\n    age:number;\r\n    sayHi():void;\r\n}\r\nvar personA:IPerson;\r\n// 接口继承接口\r\ninterface Point2D{x:number;y:number;}\r\ninterface Point3D extends Point2D {z:number}\r\n```\r\n\r\n\r\n### **元组**\r\n```ts\r\n// 元组\r\nvar position:[number,number] = [0.5,1.4];\r\nvar position:[number,number,string] = [0.5,1.4,\"2d\"];\r\n```\r\n\r\n### **字面量类型**\r\n```ts\r\n// 字面量类型\r\nvar aaa = \"stringA\";   // aaa 的 类型 为 string 即 字符串类型\r\nconst bbb = \"stringB\"; // bbb 的 类型 为 \"stringB\" 即 字面量类型\r\nvar ccc:\"stringC\"|\"stringD\" = \"stringC\" // ccc 的 类型为 两个字面量类型之一\r\nfunction changeDirection(direction:\"up\"|\"down\"|\"left\"|\"right\"){ // 字面量类型的应用\r\n    switch(direction){\r\n        case \"up\":\r\n            ;\r\n        case \"down\":\r\n            ;\r\n        case \"left\":\r\n            ;\r\n        case \"right\":\r\n            ;\r\n    }\r\n}\r\nchangeDirection(\"down\");\r\n```\r\n\r\n### **枚举类型**\r\n```ts\r\n// 枚举类型\r\n// enum Direction{Up=\"up\",Down=\"down\",Left=\"left\",Right=\"right\"};// 字符串枚举，没有自增长行为，需依次赋值\r\nenum Direction{Up=0,Down,Left,Right};// 数字枚举，有自增长行为，第一个为0后续依次+1\r\nfunction changeDirection(direction:Direction){// 作用\r\n    switch(direction){\r\n        case Direction.Up:\r\n        case Direction.Down:\r\n        case Direction.Left:\r\n        case Direction.Right:\r\n    }\r\n    console.log(direction);\r\n}\r\nchangeDirection(Direction.Down);\r\n// 枚举原理1\r\nenum Direction{Up=0,Down,Left,Right};// 数字枚举，有自增长行为，第一个为0后续依次+1\r\n// 编译后：\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[Direction[\"Up\"] = 0] = \"Up\";\r\n    Direction[Direction[\"Down\"] = 1] = \"Down\";\r\n    Direction[Direction[\"Left\"] = 2] = \"Left\";\r\n    Direction[Direction[\"Right\"] = 3] = \"Right\";\r\n})(Direction || (Direction = {}));\r\n// 输出\r\nconsole.log(Direction);\r\n// output\r\n{\r\n    '0': 'Up',\r\n    '1': 'Down',\r\n    '2': 'Left',\r\n    '3': 'Right',\r\n    Up: 0,\r\n    Down: 1,\r\n    Left: 2,\r\n    Right: 3\r\n}\r\n// 编译原理2\r\n// 编译前：\r\nenum Direction{Up=\"up\",Down=\"down\",Left=\"left\",Right=\"right\"};// 字符串枚举，没有自增长行为，需依次赋值\r\n// 编译后：\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[\"Up\"] = \"up\";\r\n    Direction[\"Down\"] = \"down\";\r\n    Direction[\"Left\"] = \"left\";\r\n    Direction[\"Right\"] = \"right\";\r\n})(Direction || (Direction = {}));\r\n// 输出\r\nconsole.log(Direction);\r\n// output:\r\n// { Up: 'up', Down: 'down', Left: 'left', Right: 'right' }\r\n```\r\n\r\n### **类型推论**\r\n```ts\r\nlet a=123;//声明变量时赋初值，变量a将自带类型\r\na=\"123\"; // 报错\r\nlet b;b=1;\r\nb=\"1\" // 不报错\r\n\r\n\r\n//----------------------------------------\r\nfunction funA(a:number,b:number){\r\n  return a+b; //函数返回值将自动推断为number\r\n}\r\nlet c:string = funA(1,2); // 报错 \r\n```\r\n\r\n### **类型断言**\r\n```ts\r\nvar alink = document.querySelector(\"a\") as HTMLAnchorElement // 写法1\r\nvar alink = <HTMLAnchorElement> document.querySelector(\"a\")  // 写法2\r\n\r\nalink.href = \"https://baidu.com\"\r\n```\r\n\r\n### **any类型**\r\n```ts\r\nvar a: any ={kkk:123}; // a是any类型\r\nvar b;              // b是any类型\r\nfunction c(d){      // d是any类型\r\n    return d;\r\n}\r\n```\r\n\r\n### **ts的typeof运算符**\r\n```ts\r\n    interface Person{name:string,age:number};\r\n    var personA:Person;\r\n    var personB: typeof personA; // typeof支持变量        personB 的 类型 和 personA 一致\r\n    var age: typeof personA.age; // typeof支持对象的属性  \r\n    var result: typeof funA(a,b);// typeof不支持上述两种之外的其他形式的类型\r\n```\r\n\r\n\r\n\r\n## ts高级类型\r\n* class类\r\n* 类型兼容性\r\n* 交叉类型\r\n* 泛型和keyof\r\n* 索引签名类型和索引查询类型\r\n* 映射类型\r\n\r\n### **class类**\r\n```ts\r\nclass Person{\r\n    name:string;  // 未初始化,有类型\r\n    age=0; // 初始化，有类型\r\n    gender // any类型\r\n    constructor(name:string,age:number,gender){// 构造函数不需要返回值类型\r\n        this.name=name;\r\n        this.age=age;\r\n        this.gender=gender;\r\n    }\r\n    getName():string{\r\n        return this.name\r\n    }\r\n    setName(name:string):void{\r\n        this.name=name\r\n    }\r\n}\r\nconst person = new Person(\"dyg\",18,\"男\");\r\nperson.name\r\n```\r\n\r\n### **类-extends继承**\r\n```ts\r\n(()=>{\r\n    \r\n    class Animal{\r\n        name:string;\r\n        age:number;\r\n        constructor(name:string,age:number){\r\n            this.name = name\r\n            this.age = age\r\n        }\r\n    }\r\n\r\n    class Dog extends Animal{ // extends是js自带的关键字\r\n        constructor(name:string,age:number){\r\n            super(name,age);\r\n        }\r\n        bark(){\r\n            console.log(\"汪汪汪\");\r\n        }\r\n    }\r\n\r\n    const dog = new Dog(\"??\",12);\r\n    dog.bark();\r\n\r\n})();\r\n```\r\n\r\n### **类-implements实现接口**\r\n```ts\r\n(()=>{\r\n    interface Animal{\r\n        name:string\r\n        age:number\r\n        gender:'雌'|\"雄\"\r\n        bark():void\r\n    }\r\n    class Dog implements Animal{\r\n        name: string;\r\n        age: number;\r\n        gender: \"雌\" | \"雄\";\r\n        constructor(name:string,age:number,gender:\"雌\" | \"雄\"){\r\n            this.name = name;\r\n            this.age = age;\r\n            this.gender = gender;\r\n        }\r\n        bark(): void {\r\n            console.log(\"汪汪汪\");\r\n        }\r\n    }\r\n\r\n    const dog = new Dog(\"xxx\",10,'雄');\r\n})();\r\n```\r\n\r\n### **类的访问修饰符public protected private**\r\n```ts\r\n(()=>{\r\n    class Example{\r\n        public name:string; // 在类的外部可见 （实例对象可以访问到）。此外，public是默认的 也可以省略\r\n        protected age:number; // 在本类、子类的内部可见（实例对象无法访问到）\r\n        private gender:string; // 在本类的内部可见 （实例对象无法访问到，子类无法访问到）\r\n        constructor(name:string,age:number,gender:string){\r\n            this.name=name;\r\n            this.age=age;\r\n            this.gender=gender;\r\n        }\r\n        private __myFun__() {// 私有函数\r\n            console.log(\"这是一个内部辅助函数\");\r\n        }\r\n    }\r\n})();\r\n```\r\n\r\n### **readonly只读属性**\r\n```ts\r\n(()=>{\r\n    class Example{\r\n      readonly age:number = 0; // 1. 经 readonly 修饰的属性，有注解，只能在 变量赋初始值 和 constructor中 赋值\r\n        readonly height = 170; // 2. 经 readonly 修饰的属性 ，不加注解，则为字面量类型\r\n        // 3. 接口 和 对象 中都可以使用readonly关键字修饰\r\n        constructor(age:number) {\r\n            this.age = age\r\n            this.height = 171 // 报错\r\n        }\r\n        fun(){\r\n            this.age = 123; // 报错\r\n        }\r\n    }\r\n\r\n    const example = new Example(1);\r\n    example.age = 1;// 报错，无法修改\r\n\r\n})();\r\n```\r\n\r\n### **类型兼容性**\r\n**两种类型系统**\r\n + 结构化类型系统(structural type system) \r\n   + 也叫鸭子类型(duck typing) \r\n   + 对于对象类型来说：如果y的成员至少与x相同，则x兼容y（成员多的可以赋值给成员少的）\r\n   + typescript \r\n + 标明类型系统(Nominal Type System)\r\n    + c# java\r\n\r\n#### **类的类型兼容性**\r\n```ts\r\n(()=>{\r\n    class Point{x:number;y:number};\r\n    class Point2D{x:number;y:number};\r\n    class Point3D{x:number;y:number;z:number};\r\n\r\n    const point1:Point = new Point2D(); // Point2D 向下兼容 Point\r\n    const point2:Point = new Point3D(); // Point3D 向下兼容 Point\r\n})();\r\n```\r\n\r\n#### **接口的类型兼容性**\r\n```ts\r\n(()=>{\r\n    interface Animal{type:string;age:number;gender:string};\r\n    interface Human extends Animal{name:string};\r\n\r\n    let humanA:Human = {\r\n        name: \"\",\r\n        type: \"\",\r\n        age: 0,\r\n        gender: \"\"\r\n    }\r\n\r\n    let animalA:Animal = humanA; // Human 向下兼容 Animal\r\n})();\r\n\r\n\r\n(()=>{\r\n    interface Point1D{x:number}\r\n    interface Point2D{x:number;y:number;}\r\n    interface Point3D{x:number;y:number;z:number}\r\n\r\n    let p3:Point3D = {x:1,y:2,z:3}; // \r\n    let p2:Point2D = p3;            // Point3D 向下兼容 Point2D\r\n    let p1:Point1D = p3;            // Point2D 向下兼容 Point1D\r\n})();\r\n```\r\n\r\n#### **函数的类型兼容性**\r\n* 形式参数少的可以赋值给形式参数多的\r\n```ts\r\n(()=>{\r\n    function SumA(numA:number,numB:number,numC:number){\r\n        return numA+numB+numC;\r\n    }\r\n    function SumB(numA:number,numB:number){\r\n        return numA+numB;\r\n    }\r\n    var funA:(numA:number,numB:number,numC:number)=>number;\r\n    funA=SumA;// funA 兼容 SumA\r\n    funA=SumB;// funA 兼容 SumB\r\n})();\r\n```\r\n\r\n* 函数形式参数相同位置的参数类型要相同或兼容\r\n```ts\r\n// 要相同\r\n(()=>{\r\n    type fun1 = (num:number)=>void;   \r\n    type fun2 = (num:number)=>void;   \r\n\r\n    var f1:fun1;\r\n    var f2:fun2;\r\n    f1 = f2;        // 形式参数相同位置的参数类型要相同\r\n    f2 = f1;\r\n})();\r\n\r\n// 要兼容\r\n(()=>{\r\n    interface Point2D{x:number;y:number};\r\n    interface Point3D{x:number;y:number;z:number};\r\n    type fun2 = (position:Point2D)=>void;   \r\n    type fun3 = (position:Point3D)=>void;   \r\n\r\n    var f2:fun2=(pos:Point2D)=>{return};\r\n    var f3:fun3=(pos:Point3D)=>{return};\r\n\r\n    // f3 = f2; // fun3 兼容 fun2 类型，可理解为将对象属性展开为函数形式参数，形式参数少的可以赋值给形式参数多的\r\n    f2 = f3; // 严格模式会报错，同上，理解为将对象属性拆开为函数形式参数，有3个形式参数的函数不能赋值给有2个的\r\n})();\r\n```\r\n\r\n* 函数的返回值类型：遵循一般类型的规则\r\n```ts\r\n\r\n(()=>{\r\n    interface Point2D{x:number;y:number};\r\n    interface Point3D{x:number;y:number;z:number};\r\n    \r\n    type fun2 = (position:Point2D)=>Point2D;   \r\n    type fun3 = (position:Point2D)=>Point3D;   \r\n    \r\n    var f2:fun2=(pos:Point2D)=>{return pos};\r\n    var f3:fun3=(pos:Point2D)=>{return {...pos,z:100}};\r\n\r\n    f2 = f3; // 兼容   对象元素多的可以赋值给少的\r\n    f3 = f2; // 不兼容 对象元素少的不能赋值给多的\r\n\r\n})();\r\n```\r\n\r\n### **交叉类型**\r\n```ts\r\n(()=>{\r\n    interface Person{name:string};\r\n    interface Contact{phone:string};\r\n\r\n    type PersonDetail = Person & Contact; // 交叉类型就是将两个类型复合\r\n\r\n    var personDetail: PersonDetail = {\r\n        name:\"dyg\",\r\n        phone:\"123\"\r\n    }\r\n\r\n})();\r\n```\r\n\r\n### **交叉类型和继承的区别**\r\n```ts\r\n// 1.\r\n(()=>{\r\n    interface A{a:number};\r\n    interface B extends A{\r\n        a:string // 报错\r\n    }\r\n})();\r\n\r\n// 2.\r\n(()=>{\r\n    interface A{a:number};\r\n    interface B{a:string};\r\n    type C = A & B; // a 将变为 never类型 表示永远不存在的值的类型\r\n    var a:A = {a:1}\r\n    var b:B = {a:\"1\"}\r\n    var c:C = {a:1}  // 报错\r\n})();\r\n\r\n// 3.\r\n(()=>{\r\n    interface A{fun:()=>void};\r\n    interface B{fun:(num:number)=>void};\r\n    type C = A & B; // fun的类型将变为： (()=>void) && ((num:number)=>void) 类型\r\n    var c:C = {fun:()=>{return}}\r\n    c.fun() // 方法的重载\r\n    c.fun(123) // 方法的重载\r\n})();\r\n```\r\n\r\n### **泛型函数**\r\n```ts\r\n(()=>{\r\n    // 泛型函数\r\n    function echo<voiceType>(voice:voiceType):voiceType{\r\n        return voice\r\n    }\r\n\r\n    // 泛型函数的调用\r\n    echo<string>(\"你好!\");\r\n    echo<number>(12345);\r\n\r\n    // 简化版的泛型函数调用\r\n    echo(\"你好！\"); // 简化后 voiceType 将被自动推断为字面量类型\r\n    echo(12345);\r\n\r\n})();\r\n```\r\n\r\n### **泛型类型收缩**\r\n```ts\r\n(()=>{\r\n    // 泛型类型的收缩\r\n    // 1.指定更加明确的类型\r\n        // function myEcho<voiceType>(voice:voiceType[]):voiceType[]{\r\n        //     console.log(voice.length);\r\n        //     return voice\r\n        // }\r\n    // 2.添加类型收缩约束\r\n    interface LengthAble{length:number}\r\n    function echo<voiceType extends LengthAble>(voice:voiceType):voiceType{\r\n        console.log(voice.length);\r\n        return voice\r\n    }\r\n\r\n    // 泛型函数的调用\r\n    echo<string>(\"你好!\");\r\n    echo<number[]>([1,2,3,4,5]);\r\n\r\n    // 简化版的泛型函数调用\r\n    echo(\"你好！\"); // 简化后 voiceType 将被自动推断为字面量类型\r\n    echo([1,2,3,4,5]); // \r\n    echo({length:1,msg:\"hahahah\"});\r\n\r\n})();\r\n```\r\n\r\n\r\n### **多个泛型类型的支持和keyof的使用**\r\n```ts\r\n(()=>{\r\n    // 多个泛型类型\r\n    function hash<typeKey,typeValue>(key:typeKey,value:typeValue):typeValue{\r\n        return value\r\n    }\r\n    // keyof \r\n    function getValue<typeObj,typeKey extends keyof typeObj>(obj:typeObj,key:typeKey):any{\r\n        return obj[key]\r\n    }\r\n})();\r\n```\r\n\r\n### **泛型接口**\r\n```ts\r\n(()=>{\r\n    // 接口泛型,注意接口没有类型推断机制,使用泛型接口需显式指定类型\r\n    interface IdFuncs<IdType>{\r\n        id:(value:IdType)=>IdType;\r\n        ids:()=>IdType[];\r\n    }\r\n    var obj:IdFuncs<number> = {\r\n        id(value:number) {return value },\r\n        ids():number[] { return [1,2,3] }\r\n    }\r\n})();\r\n\r\n(()=>{\r\n    interface MapItem<keyType,ValueType>{\r\n        key:keyType;\r\n        value:ValueType;\r\n    }\r\n    var item:MapItem<string,number[]> = {\r\n        key: \"123\",\r\n        value: [1,2,3]\r\n    }\r\n})();\r\n```\r\n\r\n### **类的泛型**\r\n```ts\r\n(()=>{\r\n\r\n    class ExampleClass<Type>{\r\n        default:Type;\r\n        constructor(value:Type){\r\n            this.default = value\r\n        }\r\n        set(value:Type):void{\r\n            this.default = this.default\r\n        }\r\n        get(){\r\n            return this.default;\r\n        }\r\n    }\r\n\r\n    var ex = new ExampleClass(123); // 类的泛型支持类型推断,在构造函数的形式参数使用了泛型类的所有类型变量的情况下可以省略类型推断\r\n    ex.set(321)\r\n    ex.get()\r\n\r\n})();\r\n```\r\n\r\n\r\n### **泛型工具类型 `Partial` `Readonly` `Pick` `Record`**\r\n```ts\r\n(()=>{\r\n\r\n    // 泛型工具类型 : Partial Readonly \r\n    interface Props{\r\n        id:string;\r\n        title:string;\r\n        children:number[];\r\n    }\r\n    type PartialProps = Partial<Props>; // 创建新类型 使得所有属性变成可选类型，即不是必须的\r\n    type ReadonlyProps = Readonly<Props>; // 创建新类型 使得所有属性变成只读类型\r\n    type PickProps = Pick<Props,\"id\"|\"title\"> // 创建新类型 从原类型中选择一组属性构造新类型\r\n    type RecordObj = Record<\"id\"|\"hash\",string[]>; // 创建记录类型 键名不同，键值相同\r\n\r\n    var p1:Props = {\r\n        id: \"\",\r\n        title: \"\",\r\n        children: [],\r\n    }\r\n    var p2:PartialProps = {\r\n        // 可以没有\r\n    }\r\n    var p3:ReadonlyProps = {\r\n        id: \"\",\r\n        title: \"\",\r\n        children: [],\r\n    }\r\n    // p3.id = \"123\" // 报错\r\n    var  p4:PickProps = {\r\n        id: \"\",\r\n        title: \"\"\r\n    }\r\n    var p5:RecordObj = {\r\n        id: [\"123\",\"1111\"],\r\n        hash: [\"12132\",\"11211\"]\r\n    }\r\n\r\n})();\r\n\r\n```\r\n\r\n### **索引签名类型**\r\n```ts\r\n(()=>{\r\n    // 索引签名类型：用于无法确定对象中具体的属性名或者说属性个数任意的场景\r\n    interface AnyObj {\r\n        [key:string]:number;// 类型为字符串的键 的值 为number类型\r\n    }\r\n    var obj1:AnyObj = {\r\n        a:1,\r\n        ab:12,\r\n        abc:123,\r\n    }\r\n\r\n    interface myArray<T>{\r\n        [index:number]:T// 类型为number的键 的值为 T类型\r\n    }\r\n    var myarry:myArray<number> = [1,2,3];\r\n    myarry[0]\r\n\r\n})();\r\n```\r\n\r\n\r\n### **映射类型**\r\n```ts\r\n(() => {\r\n    // 映射类型：\r\n    // + 映射类型基于索引签名，所以也使用了[]符号\r\n    // + key in PropKeys 表示 key可以是联合类型中的任意一个\r\n    // + 映射类型只能在类型别名中使用，不能在接口中使用\r\n    // + type1 和 type2 type3 等效\r\n    type Type1 = { a: number; b: number; c: number }\r\n    type PropKeys = \"a\" | \"b\" | \"c\";\r\n    type Type2 = { [key in PropKeys]: number }\r\n    type Type3 = { [key in keyof Type1]: number }\r\n})();\r\n```\r\n\r\n### **利用映射类型实现Partial**\r\n```ts\r\n(() => {\r\n    // Partial实现原理\r\n    type Partial<T> = {\r\n        [Key in keyof T]?: T[Key]\r\n    }\r\n})();\r\n```\r\n\r\n### **索引查询类型**\r\n```ts\r\n(() => {\r\n    // 索引查询类型\r\n    type Parps = { a: number; b: string; c: boolean };\r\n    type TypeA = Parps[\"a\"] // 查询Parps中a属性的类型 即number类型\r\n    type TypeAB = Parps[\"a\" | \"b\"] // 即为 number | string 类型\r\n    type TypeABC = Parps[keyof Parps] // 即为 number | string | boolean 类型\r\n})();\r\n```\r\n\r\n## **类型声明文件**\r\n\r\nTS中有两种文件类型:\r\n* 1.ts文件\r\n  * 1.既包含类型信息又可执行代码。\r\n  * 2.可以被编译为.js文件，然后，执行代码。3.用途:编写程序代码的地方。\r\n* 2.d.ts文件。 \r\n  * 1．只包含类型信息的类型声明文件。\r\n  * 2．不会生成.js 文件，仅用于提供类型信息。3.用途:为JS提供类型信愈。\r\n* 总结: \r\n  * .ts是 implementation(代码实现文件）; \r\n  * .d.ts是declaration(类型声明文件)。如果要为JS库提供类型信息，要使用.d.ts 文件。\r\n\r\n### **第三方库的类型声明文件的使用**\r\n* 第三方库会自带 index.d.ts 文件 文件的路径由 package.json 的typing或types字段给出\r\n* 第三库如果没有自带类型声明文件，可以使用由DefinitelyTyped提供的类型声明文件，\r\n  * 下载方式为 `npm i --save-dev @types/第三方库名`\r\n\r\n### **自定义类型声明文件的使用**\r\n```ts\r\n// 文件mytypes.d.ts\r\ntype A = string | number;\r\nexport { A }//导出声明的类型\r\n\r\n// 文件index.ts\r\nimport {A} from \"./myTypes\" // 导入声明的类型\r\nvar a:A = \"123\"\r\n```\r\n\r\n\r\n### **给已有js文件编写类型声明文件**\r\n* ts引入js文件时，会引入同名的.d.ts文件\r\n* declare关键字：用于类型声明，声明一个已经存在的变量的类型\r\n* 对于type interface等的ts独有的类型，声明可以省略declare关键字\r\n* 对于let function等的类型 声明不能省略declare关键字\r\n```ts\r\ndeclare let count:number;// 为已有全局变量做类型声明\r\ndeclare function add(a:number,b:number):number;// 为已有函数做类型声明\r\ndeclare type A = string | number\r\ndeclare interface OBJ{};\r\nexport {count,OBJ,add,A}\r\n```\r\n\r\n\r\n\r\n\r\n<style>\r\n    gold{\r\n        color:black;\r\n        background-color:gold;\r\n    }\r\n    green{\r\n        color:white;\r\n        background-color:green;\r\n    }\r\n    warn{\r\n        color:white;\r\n        background-color:red;\r\n    }\r\n</style>"}