{"shortInfo":{"title":"自动写入文字动态效果函数的实现","date":"2022-10-03T12:26:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["vue"],"hideAtIndex":true,"categories":"前端","id":2050704433,"countWords":1166,"readSeconds":116.6,"assetsbaseUrl":"/self_server/assets/"},"content":"# 自动写入文字动态效果函数的实现\r\n\r\n**代码**\r\n```js\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nexport const autoTyping = async function(DomElement, start_TextString ,ended_TextString,interval=150) {\r\n    return new Promise(async(TypingResolve,TypingReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function WriteCharOnce(){\r\n                return new Promise((WriteCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (index < ended_TextString.length) {\r\n                            let char = ended_TextString[index++]\r\n                            DomElement.innerText += (char == ' ') ? '\\xa0' : char; //空格无法直接拼接,需要转移\r\n                            WriteCharOnceResolve('isTyping')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            WriteCharOnceResolve('done') //WriteCharOnce 的 done\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await WriteCharOnce() == 'isTyping');\r\n            TypingResolve('done') //autoTyping 的 done\r\n        } else {\r\n            TypingReject('in_use');\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nexport const autoBackSpacing = async function(DomElement, start_TextString ,ended_TextString='',interval=150) {\r\n    return new Promise(async(BackSpaceResolve,BackSpaceReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function BackSpaceCharOnce(){\r\n                return new Promise((BackSpaceCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (DomElement.innerText.length != 0 && DomElement.innerText!=ended_TextString ) {\r\n                            DomElement.innerText = DomElement.innerText.substring(0,DomElement.innerText.length-1) //删除最后一个字符\r\n                            BackSpaceCharOnceResolve('isBackSpacing')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            BackSpaceCharOnceResolve('done')\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await BackSpaceCharOnce() == 'isBackSpacing');\r\n            BackSpaceResolve('done');\r\n        } else {\r\n            BackSpaceReject('in_use');\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * \r\n * @param {延迟时间} timeout 500\r\n * @returns Promise对象\r\n */\r\nexport const waitMs = function(timeout){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(() => {\r\n            resolve('done');\r\n        }, timeout);\r\n    });\r\n}\r\n```\r\n\r\n**测试代码**\r\n\r\n<span id=\"span\" data-value=\"在绝望中坚持真理,在荒诞中奋起抵抗.\" ></span><span class=\"_\">_</span>\r\n<br>\r\n<button id=\"btn\">点击测试效果</button>\r\n<script>\r\nlet span = document.querySelector(\"#span\")\r\nlet btn = document.querySelector(\"#btn\")\r\nbtn.addEventListener('click',async ()=>{\r\n    try{\r\n        await autoTyping(span,'',span.dataset['value'],150)\r\n        await waitMs(2000)\r\n        await autoBackSpacing(span,span.dataset['value'],'',50)\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n})\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\n    async function autoTyping(DomElement, start_TextString ,ended_TextString,interval=150) {\r\n    return new Promise(async(TypingResolve,TypingReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function WriteCharOnce(){\r\n                return new Promise((WriteCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (index < ended_TextString.length) {\r\n                            let char = ended_TextString[index++]\r\n                            DomElement.innerText += (char == ' ') ? '\\xa0' : char; //空格无法直接拼接,需要转移\r\n                            WriteCharOnceResolve('isTyping')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            WriteCharOnceResolve('done') //WriteCharOnce 的 done\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await WriteCharOnce() == 'isTyping');\r\n            TypingResolve('done') //autoTyping 的 done\r\n        } else {\r\n            TypingReject('in_use');\r\n        }\r\n    });\r\n}\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nasync function autoBackSpacing(DomElement, start_TextString ,ended_TextString='',interval=150) {\r\n    return new Promise(async(BackSpaceResolve,BackSpaceReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function BackSpaceCharOnce(){\r\n                return new Promise((BackSpaceCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (DomElement.innerText.length != 0 && DomElement.innerText!=ended_TextString ) {\r\n                            DomElement.innerText = DomElement.innerText.substring(0,DomElement.innerText.length-1) //删除最后一个字符\r\n                            BackSpaceCharOnceResolve('isBackSpacing')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            BackSpaceCharOnceResolve('done')\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await BackSpaceCharOnce() == 'isBackSpacing');\r\n            BackSpaceResolve('done');\r\n        } else {\r\n            BackSpaceReject('in_use');\r\n        }\r\n    });\r\n}\r\n/**\r\n * \r\n * @param {延迟时间} timeout 500\r\n * @returns Promise对象\r\n */\r\nfunction waitMs(timeout){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(() => {\r\n            resolve('done');\r\n        }, timeout);\r\n    });\r\n}\r\n</script>\r\n\r\n<style>\r\n._{\r\n    display: inline-block;\r\n    margin-left: 5px;\r\n    animation: dash_flash 0.7s ease infinite;\r\n}\r\n@keyframes dash_flash {\r\n    /* 定义动画 */\r\n    from{opacity: 0;}\r\n    to{opacity: 1;}\r\n}\r\n</style>\r\n\r\n\r\n```html\r\n<span id=\"span\" data-value=\"在绝望中坚持真理,在荒诞中奋起抵抗.\" ></span><span class=\"_\">_</span>\r\n<br>\r\n<button id=\"btn\">点击测试</button>\r\n<script>\r\nlet span = document.querySelector(\"#span\")\r\nlet btn = document.querySelector(\"#btn\")\r\nbtn.addEventListener('click',async ()=>{\r\n    try{\r\n        await autoTyping(span,'',span.dataset['value'])\r\n        await waitMs(2000)\r\n        await autoBackSpacing(span,span.dataset['value'],'')\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n})\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\n    async function autoTyping(DomElement, start_TextString ,ended_TextString,interval=150) {\r\n    return new Promise(async(TypingResolve,TypingReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function WriteCharOnce(){\r\n                return new Promise((WriteCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (index < ended_TextString.length) {\r\n                            let char = ended_TextString[index++]\r\n                            DomElement.innerText += (char == ' ') ? '\\xa0' : char; //空格无法直接拼接,需要转移\r\n                            WriteCharOnceResolve('isTyping')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            WriteCharOnceResolve('done') //WriteCharOnce 的 done\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await WriteCharOnce() == 'isTyping');\r\n            TypingResolve('done') //autoTyping 的 done\r\n        } else {\r\n            TypingReject('in_use');\r\n        }\r\n    });\r\n}\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nasync function autoBackSpacing(DomElement, start_TextString ,ended_TextString='',interval=150) {\r\n    return new Promise(async(BackSpaceResolve,BackSpaceReject)=>{\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function BackSpaceCharOnce(){\r\n                return new Promise((BackSpaceCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (DomElement.innerText.length != 0 && DomElement.innerText!=ended_TextString ) {\r\n                            DomElement.innerText = DomElement.innerText.substring(0,DomElement.innerText.length-1) //删除最后一个字符\r\n                            BackSpaceCharOnceResolve('isBackSpacing')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            BackSpaceCharOnceResolve('done')\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await BackSpaceCharOnce() == 'isBackSpacing');\r\n            BackSpaceResolve('done');\r\n        } else {\r\n            BackSpaceReject('in_use');\r\n        }\r\n    });\r\n}\r\n/**\r\n * \r\n * @param {延迟时间} timeout 500\r\n * @returns Promise对象\r\n */\r\nfunction waitMs(timeout){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(() => {\r\n            resolve('done');\r\n        }, timeout);\r\n    });\r\n}\r\n</script>\r\n\r\n<style>\r\n._{\r\n    display: inline-block;\r\n    margin-left: 5px;\r\n    animation: dash_flash 0.7s ease infinite;\r\n}\r\n@keyframes dash_flash {\r\n    /* 定义动画 */\r\n    from{opacity: 0;}\r\n    to{opacity: 1;}\r\n}\r\n</style>\r\n```\r\n"}