{"shortInfo":{"title":"vue3学习笔记","date":"2022-09-07T15:37:00.000Z","cover":"\\self_server\\assets\\images\\index\\2022-12-04-01-15-41.png","tags":["vue3","学习笔记"],"categories":"前端","id":4039877874,"countWords":14331,"readSeconds":1433.1,"assetsbaseUrl":"/self_server/assets/"},"content":"# vue3学习笔记\r\n## 目录\r\n- [vue3学习笔记](#vue3学习笔记)\r\n  - [目录](#目录)\r\n  - [简介](#简介)\r\n  - [基本用法](#基本用法)\r\n  - [指令](#指令)\r\n    - [内容渲染指令](#内容渲染指令)\r\n    - [属性绑定指令](#属性绑定指令)\r\n    - [事件绑定指令](#事件绑定指令)\r\n    - [双向绑定指令](#双向绑定指令)\r\n    - [条件渲染指令](#条件渲染指令)\r\n    - [列表渲染指令](#列表渲染指令)\r\n    - [vue2过滤器](#vue2过滤器)\r\n    - [综合案例实现](#综合案例实现)\r\n  - [组件](#组件)\r\n    - [SPA概念](#spa概念)\r\n    - [Vite构建工具](#vite构建工具)\r\n    - [Vite基本使用](#vite基本使用)\r\n    - [注册全局组件](#注册全局组件)\r\n    - [注册局部组件](#注册局部组件)\r\n    - [组件案例](#组件案例)\r\n  - [computed属性](#computed属性)\r\n  - [触发自定义事件](#触发自定义事件)\r\n  - [父子组件间数据传递-props属性](#父子组件间数据传递-props属性)\r\n    - [props基本使用](#props基本使用)\r\n    - [数据合法性验证](#数据合法性验证)\r\n  - [父子组件间数据的双向同步](#父子组件间数据的双向同步)\r\n    - [v-bind:单向绑定数据](#v-bind单向绑定数据)\r\n    - [v-model双向绑定父子组件间数据](#v-model双向绑定父子组件间数据)\r\n  - [`todoList案例实现`](#todolist案例实现)\r\n  - [watch监听器](#watch监听器)\r\n  - [生命周期钩子函数](#生命周期钩子函数)\r\n  - [组件间数据共享](#组件间数据共享)\r\n    - [父子关系组件间数据共享](#父子关系组件间数据共享)\r\n    - [后代关系组件间数据共享](#后代关系组件间数据共享)\r\n    - [兄弟关系组件间数据共享](#兄弟关系组件间数据共享)\r\n    - [VueX全局数据共享](#vuex全局数据共享)\r\n      - [概念](#概念)\r\n      - [vuex原理](#vuex原理)\r\n      - [基本使用](#基本使用)\r\n      - [vueX的模块化](#vuex的模块化)\r\n    - [Pinia](#pinia)\r\n      - [1、简单例子](#1简单例子)\r\n      - [2、购物车案例](#2购物车案例)\r\n    - [总结](#总结)\r\n  - [lodash节流防抖:throttle()](#lodash节流防抖throttle)\r\n  - [axios](#axios)\r\n    - [全局配置axios](#全局配置axios)\r\n    - [axios的拦截器](#axios的拦截器)\r\n    - [axios配置nprogress进度条](#axios配置nprogress进度条)\r\n  - [`购物车案例实现`](#购物车案例实现)\r\n  - [DOM的引用---ref属性](#dom的引用---ref属性)\r\n  - [DOM更新时机及nextTick()](#dom更新时机及nexttick)\r\n  - [动态组件component](#动态组件component)\r\n  - [插槽Slot](#插槽slot)\r\n  - [自定义的指令Directives](#自定义的指令directives)\r\n  - [表格案例实现](#表格案例实现)\r\n  - [路由](#路由)\r\n    - [路由原理](#路由原理)\r\n    - [基本使用:声明式导航](#基本使用声明式导航)\r\n    - [基本使用:编程式导航](#基本使用编程式导航)\r\n    - [导航守卫](#导航守卫)\r\n  - [登陆案例实现](#登陆案例实现)\r\n  - [vue-cli脚手架](#vue-cli脚手架)\r\n  - [vue组件库](#vue组件库)\r\n    - [element UI](#element-ui)\r\n  - [vue-cli的proxy代理服务](#vue-cli的proxy代理服务)\r\n  - [transition动画组件](#transition动画组件)\r\n  - [swiper在vue中的使用](#swiper在vue中的使用)\r\n  - [根据页面滚动位置改变盒子高度(存在兼容性问题)](#根据页面滚动位置改变盒子高度存在兼容性问题)\r\n\r\n\r\n------------------------------------------------------------------------------------------\r\n## 简介\r\nvue是一套用于**构建用户界面**的**前端框架**\r\n\r\n**vue全家桶**\r\n* vue 核心库\r\n* vue-router 路由方案\r\n* vuex 状态管理方案\r\n* vue组件库 快速搭建页面UI效果的方案\r\n\r\n**vue辅助开发工具**\r\n* vue-cli (npm全局包,一键生成工程化vue项目-基于webpack,大而全)\r\n* vite (npm全局包,一键生成工程化vue项目,小而巧)\r\n* vue-devtools 浏览器插件:辅助调试工具\r\n* vetur VScode插件:语法高亮和智能提示\r\n\r\n------------------------------------------------------------------------------------------\r\n\r\n## 基本用法\r\n\r\n\r\n**vue3基本使用**\r\n```js\r\n<script src=\"https://unpkg.com/vue@next\"></script>\r\n<div id=\"demo_1\">{{ test1 }}</div>\r\n<script>\r\n    const test1 = {\r\n        data() {\r\n            return {\r\n                test1 : \"hello world!!!\"\r\n            }\r\n        }\r\n    }\r\n    Vue.createApp(test1).mount('#demo_1')\r\n</script>\r\n```\r\n\r\n**Vue2基本使用**\r\n```js\r\n<script src=\"https://unpkg.com/vue@2.6.14/dist/vue.min.js\"></script>\r\n<div id=\"demo_1\">{{ test1 }}</div>\r\n<script>\r\n    const vm = new Vue({\r\n        el:\"#demo_1\",\r\n        data:{\r\n            test1:\"hello world!!!\",\r\n            count:123\r\n            methods:{\r\n                addAcount(){\r\n                    //this指向vm,可以访问到data中的属性\r\n                    this.count+=1;\r\n                }\r\n            }\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n------------------------------------------------------------------------------------------\r\n\r\n## 指令\r\n**分类**\r\n* 内容渲染指令\r\n* 属性绑定指令\r\n* 事件绑定指令\r\n* 双向绑定指令\r\n* 条件渲染指令\r\n* 列表渲染指令\r\n\r\n\r\n### 内容渲染指令\r\n```html\r\n语法格式: \r\n    {{ 变量名 }}        插值表达式\r\n    v-text=\"变量名\"     内容渲染指令(纯文本)\r\n    v-html=\"变量名\"     内容渲染指令(html)\r\n\r\n示例:\r\n<p >用户名: {{ username }}</p>\r\n<p v-text=\"test1\">原内容将被覆盖</p>\r\n<p v-html=\"test2\">原内容将被覆盖</p>\r\n\r\n\r\n<!-- 支持js表达式 -->\r\n<p>{{ number + 1 }}</p>\r\n<p>{{ ok ? 'YES' : 'NO' }}</p>\r\n<p>{{ message.split('').reverse().join('') }}</p>\r\n<div :id=\"`list-${id}`\"></div>\r\n<p>{{user.name}}</p>\r\n```\r\n\r\n\r\n### 属性绑定指令\r\n```html\r\n语法格式:   v-bind:属性名=\"变量名\"\r\n简写:       :属性名=\"变量名\"\r\n\r\n示例:\r\n    <img v-bind:src=\"imgSrc\" :alt=\"imgText\"  >\r\n```\r\n\r\n\r\n`v-bind:class` 和 `v-bind:style` 的绑定\r\n```html\r\n<template>\r\n  \r\n  <div class=\"defalutClassName\" :class=\"isClssNameA ? 'ClssNameA' : '' \">测试文字</div>\r\n  <div class=\"defalutClassName\" :class=\"[isClssNameA ? 'ClssNameA' : '' ,isClssNameB ? 'ClssNameB' : '' ]\">测试文字</div>\r\n  <div class=\"defalutClassName\" :class=\"classList\">测试文字</div>\r\n\r\n  <div class=\"defalutClassName\" :style=\"'color:' + isActive\">测试文字</div>\r\n  <div class=\"defalutClassName\" :style=\"{color:isActive,fontSize:fSize + 'px','background-color':bgcolor}\">测试文字</div><!-- fontSize和‘font-size‘等效 ‘background-color’和backgroundColor等效 -->\r\n  <div class=\"defalutClassName\" :style=\"styleObj\">测试文字</div>\r\n\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      isClssNameA: true,\r\n      isClssNameB: true,\r\n      isActive: \"skyblue\",\r\n      fSize: 15,\r\n      bgcolor: \"pink\",\r\n      classList: [\r\n        \"ClssNameA\",\r\n        \"ClssNameB\",\r\n      ],\r\n      styleObj: {\r\n        color: \"red\",\r\n        fontSize: \"15px\",           //fontSize和'font-size'等效\r\n        'background-color': 'pink'\r\n      }\r\n    }\r\n  },\r\n}\r\n</script>\r\n<style>\r\n.defalutClassName {\r\n  color: red;\r\n}\r\n\r\n.ClssNameA {\r\n  font-size: 15px;\r\n}\r\n\r\n.ClssNameB {\r\n  background-color: pink;\r\n}\r\n</style>\r\n```\r\n\r\n\r\n### 事件绑定指令\r\n```html\r\n语法格式:   v-on:事件名称.事件修饰符号=\"事件处理函数名 或 js表达式\"\r\n简写:       @事件名称.事件修饰符号=\"事件处理函数名 或 js表达式\"\r\n\r\n事件修饰符号\r\n    .prevent    阻止默认行为,如阻止点击超链接跳转\r\n    .stop       阻止事件冒泡\r\n    .capture    以捕获方式(从外到内)触发当前事件,浏览器默认以冒泡方式(从内到外)触发事件\r\n    .once       绑定的事件只触发一次\r\n    .self       只在event.target==this时触发\r\n\r\n按键事件修饰符\r\n    .enter      示例: @keyup.enter=\"事件处理函数名\"\r\n    .esc      \r\n\r\n示例:\r\n    <button v-on:click.self=\"addCount\"> +1 </button>\r\n    <button @click.self=\"count += 1\"> +1 </button>\r\n    <button @click.self=\"addCountA()\"> +1 </button> <!-- 事件处理函数的第一个形参默认是事件对象 -->\r\n    <button @click.self=\"addCountB(5,$event)\"> +1 </button> <!-- 若第一个形式参数的位置被占用,可手动传入事件对象$event -->\r\n\r\n\r\n```\r\n\r\n\r\n### 双向绑定指令\r\n```html\r\n语法格式:   v-model.修饰符=\"变量名\"\r\n\r\n修饰符:\r\n    .number     自动将输入表单的数据转换为数字\r\n    .trim       自动过滤输入数据的字符串首尾的空格\r\n    .lazy       仅在\"change\"事件触发时(失去焦点)写入用户输入的数据,而非\"input\"事件触发时\r\n\r\n注意:   双向绑定指令只能配合html的表单元素使用\r\n\r\n示例:\r\n    <input v-model=\"username\">\r\n    <input v-model.number=\"age\">\r\n```\r\n\r\n\r\n### 条件渲染指令\r\n```html\r\n语法格式:\r\n    v-if=\"布尔值 或 变量名\"\r\n        v-else-if=\"布尔值 或 变量名\"\r\n        v-else\r\n    v-show=\"布尔值 或 变量名\"\r\n\r\n区别:\r\n    原理区别\r\n        v-if是动态的添加和删除DOM元素\r\n        v-show是动态的修改DOM元素的CSS的display:none;属性\r\n    性能区别\r\n        在两者都在初始时不渲染,需要频繁切换是否渲染时,\r\n        v-show具有更高初始渲染开销,\r\n        v-if具有更高的切换开销,\r\n\r\n示例:\r\n    <button @click=\"flag=!flag\">change flag</button>\r\n    <div v-if=\"flag\">div1</div>\r\n    <div v-show=\"!flag\">div2</div>\r\n```\r\n\r\n### 列表渲染指令\r\n\r\n```html\r\n语法格式:\r\n    v-for=\"item in items\"\r\n    v-for=\"(item,index) in items\"\r\n\r\n示例:\r\n    <li v-for=\"userName in userNameS\">{{userName}}</li>\r\n    <li v-for=\"(userName,i) in userNameS\">索引号是:{{i}},用户名是:{{userName}}</li>\r\n\r\n注意:\r\n    在vue2中,可以使用  :id=\"字符串 或 数值 的变量名\"   属性防止列表渲染内容紊乱\r\n    <li v-for=\"(userInfo,i) in userInfoS\" :id=\"userInfo.userId\">索引号是:{{i}},用户名是:{{userInfo}}</li>\r\n```\r\n\r\n\r\n### vue2过滤器\r\n过滤器仅在vue1 vue2中支持,vue3中建议使用`计算属性`或`方法`来代替\r\n```html\r\n<script src=\"https://unpkg.com/vue@2.6.14/dist/vue.min.js\"></script>\r\n<div id=\"demo_1\">\r\n    <p>{{text | capitalize | maxLength }}</p>\r\n    <p>{{text | capitalize | maxLength(20) }}</p>\r\n</div>\r\n<script>\r\n//定义全局过滤器(公有过滤器)\r\n    Vue.filter(\"maxLength\", (data, maxLength = 10) => { //第一个默认为接收到的参数,之后的参数为可选参数,可以接收到\r\n        if (data.length <= maxLength) return data\r\n        else return data.slice(0, maxLength) + \"......\"\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: \"#demo_1\",\r\n        data: {\r\n            text: \"dingyiguidingyiguidingyiguidingyigui\"\r\n        },\r\n//定义局部过滤器(私有过滤器)\r\n        filters: {\r\n            capitalize(data) {\r\n                return data.charAt(0).toUpperCase() + data.slice(1)\r\n            }\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n### 综合案例实现\r\n\r\n**实现效果**\r\n![图 4](./images/vue3学习笔记/f5d86ec4438a1f6a0466d8b303e7b459e32831edc61ba091681e037cedc8c0f3.png)  \r\n\r\n\r\n**源代码**\r\n```html\r\n<!-- <script src=\"./lib/vue@2.6.14.min.js\"></script> -->\r\n<link href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.1.0/css/bootstrap.css\" rel=\"stylesheet\">\r\n<script src=\"https://unpkg.com/vue@2.6.14/dist/vue.js\"></script>\r\n<div id=\"app\" class=\"container container-fluid\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">添加品牌</div>\r\n        <div class=\"card-body row\">\r\n            <div class=\"input-group col\">\r\n                <span class=\"input-group-text\">品牌名称</span>\r\n                <!-- v-model.trim=\"tempBrand.name\" 双向绑定 -->\r\n                <!-- @keyup.esc=\"tempBrand.name=``\"键盘esc弹出事件发生后执行 tempBrand.name=`` -->\r\n                <!-- @keyup.enter=\"addItem\"     键盘enter弹出事件事件发生后调用addItem() -->\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"请输入品牌名称\" v-model.trim=\"tempBrand.name\"\r\n                    @keyup.esc=\"tempBrand.name=``\" @keyup.enter=\"addItem\">\r\n                <!-- @click=\"addItem\"点击事件发生后调用addItem() -->\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" @click=\"addItem\">添加</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <table class=\"table table-striped\">\r\n        <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">品牌名称</th>\r\n                <th scope=\"col\">状态</th>\r\n                <th scope=\"col\">创建时间</th>\r\n                <th scope=\"col\">操作</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <!-- :id=\"`item_${item.id}`\" 控制防止vue2中列表顺序渲染紊乱 -->\r\n            <tr v-for=\"item in brandList\" :id=\"`item_${item.id}`\">\r\n                <th scope=\"row\">{{item.id}}</th>\r\n                <th>{{item.name}}</th>\r\n                <th>\r\n                    <div class=\"form-check form-switch\">\r\n                        <!-- v-model控制双向绑定更新数据 -->\r\n                        <input class=\"form-check-input\" :id=\"`item_check_${item.id}`\" type=\"checkbox\" role=\"switch\"\r\n                            v-model=\"item.status\">\r\n                        <!-- v-if=\"item.status\"控制是否显示 -->\r\n                        <!-- :for=\"`item_check_${item.id}`\" 绑定到指定id,表示点击该元素就相当于点击带有#id的元素 -->\r\n                        <label v-if=\"item.status\" class=\"form-check-label\"\r\n                            :for=\"`item_check_${item.id}`\">已启用</label>\r\n                        <label v-else class=\"form-check-label\" :for=\"`item_check_${item.id}`\">已禁用</label>\r\n                    </div>\r\n                </th>\r\n                <th>{{item.time}}</th>\r\n                <!-- removeItemById(item.id)控制删除项目 -->\r\n                <th><a href=\"\" @click.prevent=\"removeItemById(item.id)\">删除</a></th>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<script>\r\n    const vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            tempBrand: { name: \"\" },//用于临时存储数据\r\n            nextId: 4,\r\n            brandList: [\r\n                { id: 1, name: \"华为\", status: true, time: new Date() },\r\n                { id: 2, name: \"小米\", status: false, time: new Date() },\r\n                { id: 3, name: \"苹果\", status: true, time: new Date() },\r\n            ]\r\n        },\r\n        methods: {\r\n            removeItemById(targetId) {//根据id删除数据\r\n                this.brandList.splice(this.brandList.findIndex((item) => item.id == targetId), 1)\r\n            },\r\n            addItem() {\r\n                if (!this.tempBrand.name) return alert(\"名称不能为空!!!\")\r\n                this.brandList.push({\r\n                    id: this.nextId,\r\n                    name: this.tempBrand.name,\r\n                    status: true,\r\n                    time: new Date()\r\n                })\r\n                this.tempBrand = { name: \"\" }//清空\r\n                this.nextId++       //自增id\r\n            }\r\n        }\r\n    })\r\n</script>\r\n```\r\n--------------------------------------------------------------------\r\n\r\n## 组件\r\n\r\n\r\n\r\n### SPA概念\r\n```markdown\r\n# SPA概念\r\nSPA(single Page Application)单页面应用程序,指一个web网站只有唯一的HTML页面,所有功能与交互仅在一个页面完成.\r\n\r\n# 特点\r\n仅在页面初始化时加载相关资源,加载完毕后单页面应用不会因用户操作而重新加载页面或跳转页面,而是利用js动态改变内容\r\n\r\n# 优缺点\r\n* 交互体验好\r\n* 前后端分离,提升开发效率\r\n* 减轻服务器压力\r\n* 首页加载慢\r\n    * 解决方案: 路由懒加载、\r\n    * 代码压缩、\r\n    * CDN加速、\r\n    * 网络传输压缩、\r\n* 不利于SEO\r\n    * 解决方案: SSR服务器渲染\r\n```\r\n\r\n\r\n-------------------------------------------------------\r\n\r\n### Vite构建工具\r\n\r\n**概念**\r\nVite是Vue官方构建工具之一,用于构建SPA单网页应用\r\n![图 1](./images/vue3学习笔记/8aedff39e3d534c60b06ac2e0020dc798b4de170836de225fc7f9fd5efc7719c.png)  \r\n\r\n**Vite使用**\r\n```bash\r\n# 使用\r\nnpm create vite@latest\r\ncd ???\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n-------------------------------------------------------\r\n\r\n\r\n**Vite项目目录结构**  \r\n* `public/` 公共静态资源\r\n* `src/`   项目源代码\r\n  * `assets/` 编写的静态资源文件(css fonts)\r\n  * `components/` 编写的自定义组件\r\n  * `App.vue` 项目根组件\r\n  * `index.css` 全局样式表文件\r\n  * `main.js` 整个项目的打包入口\r\n* `index.html` SPA页面\r\n\r\n![图 2](./images/vue3学习笔记/047ffa1d1ac7da857630d9ee4568412ed299a93bec402f00fb35dc3752181b6e.png)  \r\n\r\n-------------------------------------------------------\r\n\r\n**Vite运行流程**  \r\n通过 `main.js` 把 `App.vue` 渲染到 `index.html`\r\n* `App.vue` 写待渲染的模板结构\r\n* `index.html` 需预留el区域\r\n* `main.js` 把 `App.vue` 渲染到 `index.html` 所预留的区域中\r\n\r\n\r\n### Vite基本使用\r\n\r\n**App.vue**\r\n```html\r\n<!-- ./src/App.vue -->\r\n<template>\r\n<h1>vue根组件</h1>\r\n<p>{{count}}</p>\r\n<button @click=\"addCount\">addCount</button>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default{\r\n  name:\"AppIndex\",//组件名称\r\n  data(){\r\n    return{\r\n      count:0\r\n    }\r\n  },\r\n  methods:{\r\n    addCount(){\r\n      this.count++\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped lang=\"less\">\r\n  /* scoped属性 */\r\n        /* scoped属性表示css的作用域为局部,可以防止样式冲突 */\r\n        /* \r\n            原理是自动给所有标签添加随机属性 <h1 data-v-dwed929>vue根组件</h1>\r\n            然后利用css属性选择器:\r\n            h1[data-v-dwed929]{\r\n                color: red;\r\n            }\r\n        */\r\n  /* lang=\"less\"属性 */\r\n        /* slang=\"less\"属性表示使用的css的语言为less,默认为css */\r\n        /* (需要安装 npm install less -d) */\r\n\r\nh1{\r\n  color: red;\r\n}\r\n:deep() h1{\r\n/* h1:deep {vue3写法}  */\r\n  color: red;\r\n/* \r\n    :deep() 称为样式穿透,\r\n    style标签添加了scoped属性后,其样式无法应用于子组件,\r\n    通过样式穿透可以使得样式对子组件生效\r\n    原理是将css选择器修改为\r\n        原 h1[data-v-dwed929]{\r\n                color: red;\r\n            }\r\n        修改后\r\n            [data-v-dwed929] h1{\r\n                color: red;\r\n            }\r\n        也就是自动将交集选择器 修改为子代选择器\r\n*/\r\n}\r\n\r\n</style>\r\n```\r\n\r\n\r\n### 注册全局组件\r\n```js\r\n// ./src/main.js\r\n\r\nimport { createApp } from 'vue'\r\nimport './style.css'\r\nimport App from './App.vue'\r\nconst app = createApp(App)\r\n\r\n//1.导入待注册的组件\r\nimport demo1 from \"./components/demo1.vue\"\r\n\r\n//2.使用app.component()注册为全局组件\r\n// app.component(demo1.name,demo1)//可以直接使用组件的name属性作为注册的组件名称\r\napp.component(\"my-global-comp-demo1\",demo1)\r\n\r\n//3.在 *.vue 中 通过 <my-global-comp-demo1></my-global-comp-demo1> 的方式使用全局组件\r\n\r\n\r\napp.mount('#app')\r\n```\r\n\r\n### 注册局部组件\r\n```html\r\n<template>\r\n......\r\n<my-global-comp-demo1></my-global-comp-demo1>\r\n<!-- 3.使用注册的局部组件 -->\r\n<my-local-comp-demo2></my-local-comp-demo2>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\n//1.导入待注册的组件\r\nimport demo2 from \"./components/demo2.vue\"\r\n\r\nexport default{\r\n//2.使用components属性将其注册为局部组件\r\n    components:{\r\n      \"my-local-comp-demo2\": demo2\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\n**注册组件名称命名格式**\r\n```html\r\npascalCase命名法 帕斯卡命名法 驼峰命名法    \r\n    用驼峰命名法注册的组件在使用时,可以使用两种格式     (适用性强)\r\n        * <pascalCase></pascalCase>\r\n        * <pascal-case></pascal-case>\r\n\r\nkebab-case命名法 短横线命名法\r\n    用短横线命名法注册的组件在使用时,仅可以使用一种格式\r\n        * <pascal-case></pascal-case>\r\n```\r\n\r\n\r\n### 组件案例\r\n**`./src/components/msgBox.vue`**\r\n```html\r\n<template>\r\n    <div class=\"main\" :style=\"{color:color || 'white',backgroundColor:bgcolor || 'skyblue'}\">\r\n        {{msg}}\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    //props属性概念相当于函数的形式参数列表\r\n    // 此处相当于是组件的形式参数列表\r\n    props: [\"msg\", \"color\", \"bgcolor\"]\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.main {\r\n    text-align: center;\r\n    font-size: 20px;\r\n    height: 200px;\r\n    width: 400px;\r\n    margin: 0 auto;\r\n    box-shadow: 10px 10px gray;\r\n    padding: 10px;\r\n}\r\n</style>\r\n```\r\n\r\n**`./src/app.vue`**\r\n```html\r\n<template>\r\n<msgBox :msg=\"msg\" :color=\"color\" :bgcolor=\"bgcolor\"></msgBox>\r\n</template>\r\n\r\n<script>\r\nimport msgBox from \"./components/msgBox.vue\"\r\nexport default {\r\n  data() {\r\n    return {\r\n      msg:\"消息XXXXXXXXXXXXX\",\r\n      // color:\"skyblue\",\r\n      // bgcolor:\"pink\"\r\n    }\r\n  },\r\n  components:{\r\n    msgBox\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n</style>\r\n```\r\n\r\n\r\n## computed属性\r\n\r\n优点:\r\n计算属性会缓存结果值,节省了计算开销,只有依赖的数据源数据值发生改变时才会重新计算计算属性的结果,\r\n\r\n```js\r\n<template>\r\n    <p>名:{{firstName}}</p>\r\n    <p>姓:{{secondName}}</p>\r\n    <p>全名:{{fullName}}</p>\r\n</template>\r\n<script>\r\n    export default{\r\n        data(){\r\n            return{\r\n                firstName:\"Yigui\",\r\n                secondName:\"Ding\",\r\n            }\r\n        },\r\n        computed:{\r\n            fullName() {\r\n                return this.firstName + this.secondName\r\n            }\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n## 触发自定义事件\r\n\r\n\r\n```html\r\n<template>\r\n  <p>{{count}}</p>\r\n  <button @click=\"addCount\">count++</button>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  //1.注册事件\r\n  emits: [\"countChanged\"],\r\n  methods: {\r\n    addCount() {\r\n      this.count++\r\n      //2.触发事件,可选参数传递值\r\n      this.$emit(\"countChanged\",this.count)\r\n      //3.在组件外部监听该事件\r\n    },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n```html\r\n<template>\r\n    <!-- 3.在组件的根标签上监听事件(经测试,仅能在根标签上监听到) -->\r\n    <testEmits @countChanged=\"callbackA\" ></testEmits>\r\n</template>\r\n<script>\r\nimport testEmits from \"./components/testEmits.vue\"\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  components:{\r\n    testEmits\r\n  },\r\n  methods:{\r\n    callbackA(value){\r\n      alert('自定义事件countChanged事件触发了,接受到数据:' + value )\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n## 父子组件间数据传递-props属性\r\n* props属性概念相当于函数的形式参数列表,调用函数者可以向其中传入参数\r\n*  此处props就是是组件的形式参数列表,调用该组件时可以通过这个传入参数\r\n\r\n### props基本使用\r\n```html\r\n<template>\r\n    <!-- demo3为子组件 通过data1=\"\"属性传递值 -->\r\n    <demo3 :data1=\"title\" :this-is-data=\"context\" ></demo3>\r\n    <!-- \r\n    若thisIsData使用驼峰命名法,则此处属性名可以使用 驼峰命名法 或 短横线命名法\r\n    经测试\r\n        短横线命名法必须全小写\r\n        仅测试驼峰命名法首字母必须小写\r\n        若 props:[\"ThisIsData\"]     则可使用 ThisIsData=\"\" 或 This-Is-Data=\"\"\r\n        若 props:[\"thisIsData\"]     则可使用 this-is-data=\"\" 或 this-Is-Data=\"\"\r\n     -->\r\n</template>\r\n\r\n<script>\r\nimport demo3 from \"./components/demo3.vue\"\r\nexport default{\r\n  data(){\r\n    return{\r\n      title:\"由父组件传给子组件的标题\",\r\n      context:\"由父组件传给子组件的内容\",\r\n    }\r\n  },\r\n  components:{\r\n    demo3\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n```html\r\n<template>\r\n    <h2>标题:{{data1}}</h2>\r\n    <p>内容:{{thisIsData}}</p>\r\n</template>\r\n<script>\r\n    export default{\r\n        data(){\r\n            return{\r\n            }\r\n        },\r\n        // props指定要传入的数据\r\n        props:[\"data1\",\"thisIsData\"], //此处可以使用驼峰命名法,不能使用短横线命名法\r\n    }\r\n</script>\r\n```\r\n\r\n### 数据合法性验证\r\n```js\r\n//一般写法\r\nprops:[\"data1\",\"thisIsData\"]\r\n\r\n//类型验证\r\nprops:{\r\n    //props支持8种数据类型\r\n    \"data1\": String,        //指定数据的类型,否则报错\r\n    \"data2\": Number,\r\n    \"data3\": Boolean,\r\n    \"data4\": Array,\r\n    \"data5\": Object,\r\n    \"data6\": Date,\r\n    \"data7\": Function,\r\n    \"data8\": Symbol,\r\n}\r\n\r\n\r\n//多类型验证\r\nprops:{\r\n    \"data1\": [String,Number,Array],\r\n    \"data2\": Number,\r\n}\r\n\r\n\r\n// 必填项校验\r\nprops:{\r\n    \"id\": {\r\n        type:[Number,String],\r\n        required:true                   //id为必填属性\r\n    },\r\n    \"data1\": [String,Number,Array],\r\n}\r\n\r\n//默认值\r\nprops:{\r\n    \"id\": {\r\n        type:[Number,String],\r\n        default:0                   //id默认值为default\r\n    },\r\n    \"data1\": [String,Number,Array],\r\n}\r\n\r\n//用自定义函数验证传入值的合法性\r\nprops:{\r\n    \"msgType\": {\r\n        type:String,\r\n        validator(value){//validator函数用于验证合法性,返回值为布尔值\r\n            return [\"success\",\"warning\",\"danger\"].includes(value)\r\n        }        \r\n    },\r\n    \"data1\": [String,Number,Array],\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 父子组件间数据的双向同步\r\n\r\n### v-bind:单向绑定数据\r\n父子组件数据 --> 子组件数据\r\n```html \r\n<template>\r\n  <div>\r\n    <p>子组件的count:{{count}}</p>\r\n  <button @click=\"addCount\">count++</button>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n    }\r\n  },\r\n  props:[\"count\"],//接受参数\r\n  methods: {\r\n    addCount() {\r\n    //   this.count++ //props只读属性无法修改\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\ndiv{\r\n  border: 1px solid gray;\r\n  padding: 20px;\r\n}\r\n</style>\r\n```\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <p>父组件的count:{{count}}</p>\r\n    <button @click=\"addCount\">count++</button>\r\n    <hr>\r\n    <!-- v-bind:count=\"count\" 传递参数 -->\r\n    <updateCount v-bind:count=\"count\"></updateCount>\r\n  </div>\r\n</template>\r\n<script>\r\nimport updateCount from \"./components/updateCount.vue\"\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  components: {\r\n    updateCount\r\n  },\r\n  methods: {\r\n    addCount() {\r\n      this.count++\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  div{\r\n    border: 1px solid gray;\r\n    padding: 20px;\r\n  }\r\n</style>\r\n```\r\n\r\n\r\n### v-model双向绑定父子组件间数据\r\n父子组件数据 `<-->` 子组件数据\r\n```html\r\n<template>\r\n  <div>\r\n    <p>父组件的count:{{count}}</p>\r\n    <button @click=\"addCount\">count++</button>\r\n    <hr>\r\n    <!-- 3.使用 v-model 绑定数据 -->\r\n    <updateCount v-model:count=\"count\"></updateCount>\r\n  </div>\r\n</template>\r\n<script>\r\nimport updateCount from \"./components/updateCount.vue\"\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  components: {\r\n    updateCount\r\n  },\r\n  methods: {\r\n    addCount() {\r\n      this.count++\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  div{\r\n    border: 1px solid gray;\r\n    padding: 20px;\r\n  }\r\n  </style>\r\n```\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <p>子组件的count:{{count}}</p>\r\n  <button @click=\"addCount\">count++</button>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n    }\r\n  },\r\n  // 0. props接受参数\r\n  props:[\"count\"],\r\n  //1.注册事件      注意:若props的是一个`v-model:对象`,则传入的是一个`引用`,则可直接修改引用的`对象.属性名`,无需注册事件和触发事件\r\n  emits: [\"update:count\"],\r\n  methods: {\r\n    addCount() {\r\n      // this.count+=1 //无法修改,因为是只读属性\r\n      //2. 触发 update:count 事件 并传递 更新后的值\r\n      this.$emit(\"update:count\",this.count+1)\r\n\r\n\r\n      //3. 如果count是一个数组且watch的deep:false,则更新数据时不能这样写,\r\n            // this.count.push(\"测试数据\")\r\n            // this.$emit(\"update:count\",this.count)\r\n      //4. 如果count是一个数组且watch的deep:false,则更新数据时应该写:\r\n            // this.count.push(\"测试数据\")\r\n            // this.$emit(\"update:count\",[...this.count])\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\ndiv{\r\n  border: 1px solid gray;\r\n  padding: 20px;\r\n}\r\n</style>\r\n```\r\n\r\n\r\n## `todoList案例实现`\r\n\r\n**实现效果**\r\n\r\n![图 1](./images/vue3学习笔记/36385537577cb1b773374304f88394d27b69940b4a5bd239191222889664dab5.png)  \r\n\r\n\r\n\r\n**实现代码**  \r\n`App.vue`\r\n```html\r\n<template>\r\n  <div class=\"todolist_main\">\r\n    <todoListInput @addTask=\"addTask\"></todoListInput>\r\n    <todoListList v-bind:todoListData=\" btnStatus==1?  allTodoListData : btnStatus==2? doneTodoListData : notDoneTodoListData \"></todoListList>\r\n    <toDoListBtns v-model:btnStatus=\"btnStatus\"></toDoListBtns>\r\n  </div>\r\n</template>\r\n<script>\r\nimport todoListInput from \"./components/todoListInput.vue\"\r\nimport todoListList from \"./components/todoListList.vue\"\r\nimport toDoListBtns from \"./components/toDoListBtns.vue\"\r\nexport default {\r\n  components: {//注册子组件\r\n    todoListInput,\r\n    todoListList,\r\n    toDoListBtns\r\n  },\r\n  data() {\r\n    return {//数据\r\n      nextId: 5,//用于创建新任务\r\n      btnStatus: 1, //变化范围:[1,2,3],用于记录按钮状态\r\n      todoList: [\r\n        { id: 0, task: \"测试文字0\", done: true },\r\n        { id: 1, task: \"测试文字1\", done: true },\r\n        { id: 2, task: \"测试文字2\", done: false },\r\n        { id: 3, task: \"测试文字3\", done: true },\r\n        { id: 4, task: \"测试文字4\", done: true },\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    addTask(task) {\r\n      if(!task) return alert(\"任务名称不能为空......\")\r\n      this.todoList.push({\r\n          id: this.nextId++,\r\n          task: task,\r\n          done: false,\r\n      })\r\n    },\r\n  },\r\n  computed: {//计算属性\r\n    allTodoListData() {\r\n      return this.todoList\r\n    },\r\n    doneTodoListData() {\r\n      return this.todoList.filter(item => item.done)\r\n    },\r\n    notDoneTodoListData() {\r\n      return this.todoList.filter(item => !item.done)\r\n    }\r\n  }\r\n\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.todolist_main {\r\n  margin: 10px auto;\r\n  width: 600px;\r\n}\r\n</style>\r\n```\r\n\r\n`./components/todoListInput.vue`\r\n\r\n```html\r\n<template>\r\n      <div class=\"input-group \">\r\n      <span class=\"input-group-text\" >任务</span>\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"请填写任务信息\" v-model=\"taskName\">\r\n      <button class=\"btn btn-primary\" type=\"button\" @click=\"addTask\">添加新任务</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  emits:[\"addTask\"],//注册事件\r\n  data(){\r\n    return{\r\n      taskName:\"\"\r\n    }\r\n  },\r\n  methods:{\r\n    addTask(){\r\n      this.$emit(\"addTask\",this.taskName)//触发事件,向外部传递任务名称\r\n      this.taskName=\"\"//清空任务名称\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n`./components/todoListList.vue`\r\n```html\r\n<template>\r\n  <ul class=\"list-group\">\r\n    <li v-for=\"item in todoListData\" :key=\"item.id\"\r\n      class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n      <input class=\"form-check-input tick\" type=\"checkbox\" v-model=\"item.done\">\r\n      <span class=\"context\" :class=\"item.done ? 'ticked':''\" >{{item.task}}</span>\r\n      <span v-if=\"item.done\" class=\"badge bg-success rounded-pill status\">已完成</span>\r\n      <span v-else class=\"badge bg-warning rounded-pill status\">未完成</span>\r\n      <span class=\"badge bg-danger del\" @click=\"del(item.id)\">删除</span>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  props: {\r\n    'todoListData': {//接受待渲染的数据\r\n      type: Array,\r\n      required: true,\r\n      defult: []\r\n    }\r\n  },\r\n  methods: {\r\n    del(id) {//根据id删除数据\r\n      this.todoListData.splice(this.todoListData.filter(item => item.id == id), 1)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\nul li {\r\n  display: flex;\r\n  justify-content:flex-between;\r\n  .tick {\r\n    margin-right: 10px;\r\n  }\r\n  .context {\r\n    flex:1;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis; /* 省略号 */\r\n    &.ticked{\r\n      text-decoration: line-through green ;\r\n      font-style:italic;/* 倾斜字体 */\r\n      color: gray;\r\n    }\r\n  }\r\n  .status {\r\n    margin-left: 10px;\r\n  }\r\n  .del {\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n</style>\r\n```\r\n\r\n\r\n`./components/toDoListBtns.vue`\r\n```html\r\n<template>\r\n    <div class=\"btn-group btns\" role=\"group\">\r\n        <button type=\"button\" class=\"btn\" :class=\"btnStatus==1? 'btn-primary':'btn-secondary'\" @click=\"changeBtnStatus(1)\">全部</button>\r\n        <button type=\"button\" class=\"btn\" :class=\"btnStatus==2? 'btn-primary':'btn-secondary'\" @click=\"changeBtnStatus(2)\">已完成</button>\r\n        <button type=\"button\" class=\"btn\" :class=\"btnStatus==3? 'btn-primary':'btn-secondary'\" @click=\"changeBtnStatus(3)\">未完成</button>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    emits:[\"update:btnStatus\"],\r\n    props: {\r\n        'btnStatus': {\r\n            type: Number,\r\n            required: true,\r\n            defult: 0\r\n        }\r\n    },\r\n    methods:{\r\n        changeBtnStatus(status){\r\n            this.$emit(\"update:btnStatus\",status)//触发事件,向外传递更新被双向绑定的数据\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.btns {\r\n    width: 100%;\r\n    display: flex;\r\n    button {\r\n        flex: 1;\r\n    }\r\n}\r\n</style>\r\n```\r\n\r\n## watch监听器\r\n\r\n\r\n\r\n**语法格式**\r\n```js\r\n// 基本语法\r\nwatch:{\r\n    变量名(newValue,oldValue){\r\n\r\n    }\r\n}\r\n\r\n// immediate 选项:渲染页面完毕后便执行\r\nwatch:{\r\n    变量名:{\r\n        handler(newValue,oldValue){\r\n            //do something\r\n       },\r\n        immediate:true\r\n}\r\n\r\n// deep选项: 监听对象的属性值的变化\r\nwatch:{\r\n    对象变量名:{\r\n        handler(newValue,oldValue){\r\n            //do something\r\n       },\r\n        immediate:true,\r\n        deep:true\r\n}\r\n\r\n//监听对象中单个属性值的变化\r\nwatch:{\r\n    '对象变量名.属性名':{\r\n        handler(newValue,oldValue){\r\n            //do something\r\n       },\r\n}\r\n```\r\n\r\n**基本使用**\r\n```html\r\n<template>\r\n<input type=\"text\" v-model=\"username\">\r\n<input type=\"text\" v-model=\"email\">\r\n</template>\r\n<script>\r\n  import axios from \"axios\"\r\nexport default{\r\n  data(){\r\n    return{\r\n      username:\"DingYigui\",\r\n      email:\"\"\r\n    }\r\n  },\r\n  watch:{\r\n    async username(newValue,oldValue){//监听username变量值的修改\r\n      console.log(oldValue);\r\n      console.log(newValue);\r\n\r\n      var {data:reqBody} = await axios.get(\"https://www.domain.cn/api/finduser/\" + newValue )\r\n      console.log(reqBody);\r\n    },\r\n    email(newValue,oldValue){\r\n      console.log(newValue);\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n## 生命周期钩子函数\r\n\r\n**组件生命周期**  \r\n**在内存中创建示例对象** ---> **将实例对象渲染到页面** ---> **根据需求销毁示例对象**\r\n\r\n**生命周期函数**  \r\n最常用的是 `mounted` 、 `updated` 和 `unmounted`\r\n![图 3](./images/vue3学习笔记/4caeab7c19b84315bae6af404a5cd296332c01342b32436ff20a582f92b5fd7b.png)  \r\n\r\n**官方文档生命周期图示**\r\n![图 2](./images/vue3学习笔记/a30ce229b7e5e5454aeb56e0f7a7de0cd7a880e1df57020f5ed20bd5a8d5c5d8.png)  \r\n\r\n\r\n## 组件间数据共享\r\n**组件间关系**\r\n* 父子关系\r\n* 后代关系\r\n* 兄弟关系\r\n\r\n### 父子关系组件间数据共享\r\n**`父组件 ---> 子组件 : `**\r\n\r\n父组件通过`v-bind:`向子组件绑定待共享的数据,子组件通过`props属性`接收数据\r\n```html \r\n<template>\r\n  <div>\r\n    <p>子组件的count:{{count}}</p>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  props:[\"count\"],//接受参数\r\n}\r\n```\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <button @click=\"count++\"></button>\r\n    <!-- v-bind:count=\"count\" 传递参数 -->\r\n    <subComponent v-bind:count=\"count\"></subComponent>\r\n  </div>\r\n</template>\r\n<script>\r\nimport subComponent from \"./components/subComponent.vue\"//导入子组件\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  components: {\r\n    subComponent\r\n  },\r\n}\r\n</script>\r\n```\r\n\r\n**`父组件 <--- 子组件 : `**\r\n\r\n子组件通过`emits[\"事件名\"]`注册自定义事件,并通过`this.emit(\"事件名\",传递数据)`触发事件,父组件通过`v-on:事件名=\"处理函数\"`来监听事件,其中处理函数的形式参数为接收到的数据\r\n```html \r\n<template>\r\n  <div>\r\n    <button @click=\"addCount\"></button>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    data(){\r\n        return{\r\n            count:0\r\n        }\r\n    },\r\n  emits:[\"countUpdate\"],//注册事件\r\n  methods:{\r\n    addCount(){\r\n        this.count++\r\n        this.emit(\"countUpdate\",this.count)//触发事件,向外传递数据\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```html\r\n<template>\r\n  <div>\r\n      <subComponent @countUpdate=\"getCount\"></subComponent>//监听事件,指定处理函数\r\n        <p>从子组件获取到的gettedCount:{{gettedCount}}</p>\r\n  </div>\r\n</template>\r\n<script>\r\nimport subComponent from \"./components/subComponent.vue\"//导入子组件\r\nexport default {\r\n  data() {\r\n    return {\r\n      gettedCount: 0,\r\n    }\r\n  },\r\n  components: {\r\n    subComponent\r\n  },\r\n  methods:{\r\n    getCount(value){\r\n      this.gettedCount=value\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n**`父组件 <--> 子组件 :`**  \r\n父组件通过`v-model=\"变量名\"`向子组件绑定待共享的数据,子组件通过`emits[\"update:变量名\"]`注册数据更新事件,并通过`this.emit(\"update:变量名\",传递数据)`触发事件,父组件的变量便能自动接收到更新的数据\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <p>父组件的count:{{count}}</p>\r\n    <button @click=\"addCount\">count++</button>\r\n    <hr>\r\n    <!-- 3.使用 v-model 绑定数据 -->\r\n    <subComponent v-model:count=\"count\"></subComponent>\r\n  </div>\r\n</template>\r\n<script>\r\nimport subComponent from \"./components/subComponent.vue\"\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    }\r\n  },\r\n  components: {\r\n    subComponent\r\n  },\r\n  methods: {\r\n    addCount() {\r\n      this.count++\r\n    },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <p>子组件的count:{{count}}</p>\r\n  <button @click=\"addCount\">addCount</button>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  props:[\"count\"],\r\n  emits: [\"update:count\"],\r\n  methods: {\r\n    addCount() {\r\n      this.$emit(\"update:count\",this.count+1)//触发 update:count 事件 并传递 更新后的值\r\n    },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n### 后代关系组件间数据共享\r\n**`父组件数据 ---> 子组件数据`**  \r\n```html\r\n<template>\r\n  <p>{{count}}</p>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    inject:[\"count\"]\r\n}\r\n</script>\r\n```\r\n\r\n```html\r\n<template>\r\n  <p>{{count}}</p>\r\n  <button @click=\"count++\">count++</button>\r\n<subTempVue></subTempVue>\r\n</template>\r\n<script>\r\n  import {computed} from \"vue\"\r\n  import subTempVue from \"./components/subTemp.vue\"\r\nexport default{\r\n  data(){\r\n    return{\r\n      count:0,\r\n    }\r\n  },\r\n  components:{\r\n    subTempVue\r\n  },\r\n  provide(){\r\n    return{\r\n    //   count:this.count,  //这种方式共享的数据 当this.cout数据更新时,子组件接收到的数据将不会更新\r\n      count:computed(()=>this.count), // 这种方式能够更新\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n### 兄弟关系组件间数据共享\r\n**`父组件数据 <---> 子组件数据`**  \r\n\r\nmitt\r\n**安装mitt**\r\n```\r\nnpm i mitt\r\n```\r\n\r\n`mittEventBus.js`\r\n```js\r\nimport mitt from \"mitt\"\r\nconst bus = mitt()\r\nexport default bus\r\n```\r\n\r\n`subTemp.vue 和 subTemp2.vue`\r\n```html\r\n<template>\r\n  <p>{{count}}</p>\r\n  <button @click=\"count++\">count++</button>\r\n</template>\r\n\r\n<script>\r\nimport bus from \"./mittEventBus\"\r\nexport default{\r\n    data(){\r\n        return{\r\n            count:0\r\n        }\r\n    },\r\n    created(){\r\n        bus.on(\"countUpdate\",(value)=>{//监听事件\r\n          this.count = value\r\n        })\r\n    },\r\n    updated(){\r\n        bus.emit(\"countUpdate\",this.count)//触发事件\r\n    },\r\n}\r\n</script>\r\n```\r\n\r\n`App.vue`\r\n```html\r\n<template>\r\n<subTempVue></subTempVue>\r\n<subTemp2Vue></subTemp2Vue>\r\n</template>\r\n<script>\r\n  import subTempVue from \"./components/subTemp.vue\"\r\n  import subTemp2Vue from \"./components/subTemp2.vue\"\r\nexport default{\r\n  components:{\r\n    subTempVue,\r\n    subTemp2Vue\r\n  },\r\n}\r\n</script>\r\n```\r\n\r\n### VueX全局数据共享\r\n\r\n\r\n#### 概念\r\nvueX 可以让组件间数据共享高效清晰易维护\r\n\r\n传统共享数据方式 和 vuex共享数据方式 区别\r\n![图 4](./images/vue3学习笔记/a8fcf1f513f66d1815212170da475dc9e1893ff300ec7584c6e063c249db48ce.png)  \r\n\r\n\r\n#### vuex原理\r\n![图 1](./images/vue3学习笔记/a0d4da5f13a6d0c8aa9d4d1cf30a63caff2acca4d44447c362de4ea0362e1b2a.png)  \r\n\r\n\r\n#### 基本使用\r\n\r\n`store/index.js`\r\n```js\r\nimport { createStore } from 'vuex'\r\n\r\nconst state =function () {//state用于存储数据,在vueX4中是一个函数,在VueX3值中是一个对象\r\n    return {\r\n      count: 0 ;\r\n    }\r\n}\r\nconst actions = {//用于响应组件中的动作\r\n  // add(miniStore,value){ //第一个参数是一个阉割版的store 可认为是miniStore 也可认为是context\r\n  add({dispatch,commit,state},value){ //\r\n    commit('ADD',value)\r\n  }\r\n}\r\nconst mutations = {//用于操作数据\r\n  ADD(state,value){\r\n    state.count += value\r\n  }\r\n}\r\n\r\nconst getters = {//非必要的属性,相当于组件的计算属性\r\n  bigCount(state){\r\n    return state.count * 5.123 \r\n  }\r\n}\r\n\r\n// 创建一个新的 store 实例\r\nconst store = createStore({\r\n  actions,\r\n  mutations,\r\n  state,\r\n  getters\r\n})\r\n\r\n// 将 store 实例作为插件安装\r\nexport default store\r\n```\r\n\r\n`main.js`\r\n```js\r\nimport { createApp } from 'vue'\r\nconst app = createApp(App)\r\n\r\napp.use(store)//注册store\r\n\r\napp.mount('#app')\r\n```\r\n\r\n\r\n**组件中操作store**\r\n`someCompoment.vue`\r\n```js\r\n//修改数据\r\nthis.$store.state.dispatch('add',15)\r\n$store.state.dispatch('add',15)\r\n$store.state.commit('ADD',15)\r\n\r\n//展示数据\r\nthis.$store.state.count\r\n$store.state.count\r\n{{this.$store.state.count}}\r\n$store.getters.bigCount\r\n```\r\n\r\n**利用 `mapState` `mapGatters` 在组件中简洁的使用数据**\r\n```js\r\nimport {mapState,mapGatters} from 'vuex'\r\n\r\ncomputed:{//组件的计算属性\r\n  // 手动写计算属性\r\n  // countA : ()=>{return this.$store.state.count}, //使用: {{countA}}\r\n\r\n  // 利用mapState自动生成计算属性\r\n  ...mapState({'countA':'count', ... }),// 等效于 countA : ()=>{return this.$store.state.count}, //使用: {{countA}}\r\n  ...mapmapState(['count', ... ]), // 等效于 count : ()=>{return this.$store.state.count}         //使用: {{count}}\r\n  \r\n  // 利用mapGatters自动生成计算属性\r\n  ...mapGatters({'bigsum':'sum', ... }),// 等效于 bigsum : ()=>{return this.$store.getters.sum}  //使用: {{bigsum}}\r\n  ...mapGatters(['sum', ... ]),// 等效于 sum : ()=>{return this.$store.getters.sum}             //使用: {{sum}}\r\n}\r\n```\r\n\r\n**利用 `mapMutations` `mapActions` 在组件中简洁的使用数据**\r\n```js\r\nimport {mapActions,mapMutationss} from 'vuex'\r\nmethods:{\r\n  //派发行为 dispatch\r\n  ...mapActions({'addCount': \"add\", ... }), //等效于  addCount(value){ this.$store.dispatch('add',value) }   //使用: @click=\"addCount(value)\"\r\n  ...mapActions([\"add\", ... ]), //等效于  add(value){ this.$store.dispatch('add',value) }                     //使用: @click=\"add(value)\"\r\n\r\n  //Mutation  直接发送commit\r\n  ...mapMutations({'ADDCount':\"ADD\", ... }), //等效于  addCount(value){ this.$store.commit('ADD',value) }    //使用: @click=\"ADDCount(value)\"\r\n  ...mapMutations(['ADD', ... ]), //等效于  ADD(value){ this.$store.commit('ADD',value) }                   //使用: @click=\"ADD(value)\"\r\n}\r\n```\r\n\r\n#### vueX的模块化\r\n\r\n`countAbout.js`子模块\r\n```js\r\nconst state =function () {\r\n    return {\r\n      count: 0 ;\r\n    }\r\n}\r\nconst actions = {\r\n  add({dispatch,commit,state},value){\r\n    commit('ADD',value)\r\n  }\r\n}\r\nconst mutations = {\r\n  ADD(state,value){\r\n    state.count += value\r\n  }\r\n}\r\nconst getters = {\r\n  bigCount(state){\r\n    return state.count * 5.123 \r\n  }\r\n}\r\n\r\nconst countAbout = { //子模块对象\r\n  namespaced:true,//启用命名空间 启用后可以使用这种格式的mapState :    `...mapState('countAbout',['count', ... ])`\r\n  state,\r\n  actions,\r\n  mutations,\r\n  getters,\r\n}\r\n\r\nexport default countAbout //导出vuex子模块\r\n```\r\n\r\n`store.js`\r\n```js\r\nimport countAbout from 'countAbout.js'\r\nimport { createStore } from 'vuex'\r\n\r\n// 创建一个新的 store 实例\r\nconst store = createStore({\r\n  modules:{\r\n    countAbout,\r\n    //其他子模块...\r\n    anotherSubStore,//另一个子store\r\n  }\r\n})\r\n\r\n// 导出store\r\nexport default store\r\n```\r\n\r\n`main.js`入口文件\r\n```js\r\nimport store from 'store.js'\r\napp.use(store)\r\n```\r\n\r\n在组件中使用 `mapState` `mapGatters` `mapMutations` `mapActions`\r\n```js\r\nimport {mapState,mapGatters,mapActions,mapMutations} from 'vuex'\r\n{\r\n  computed:{//组件的计算属性\r\n    //vueX没模块化后没有启用命名空间的原始写法:\r\n    ...mapState({'countAbout':'countAbout', ... }), // 等效于 countAbout : ()=>{return this.$store.state.countAbout}, //使用: {{countAbout.count}}\r\n    ...mapState(['countAbout', ... ]),              // 等效于 countAbout : ()=>{return this.$store.state.countAbout}, //使用: {{countAbout.count}}\r\n    ...mapState({'count':state=>state.countAbout.count, ... }), // 等效于 countAbout : ()=>{return this.$store.state.countAbout}, //使用: {{count}}\r\n\r\n    //模块化后并启用命名空间后写法:\r\n    // 利用mapState自动生成计算属性\r\n    ...mapState('countAbout',{'countA':'count', ... }), // 等效于 countA : ()=>{return this.$store.state.countAbout.count}, //使用: {{countA}}\r\n    ...mapState('countAbout',['count', ... ]),          // 等效于 count : ()=>{return this.$store.state.countAbout.count}   //使用: {{count}}\r\n    // 利用mapGatters自动生成计算属性\r\n    ...mapGatters('countAbout',{'bigsum':'sum', ... }), // 等效于 bigsum : ()=>{return this.$store.getters['countAbout/sum']}  //使用: {{bigsum}}\r\n    ...mapGatters('countAbout',['sum', ... ]),          // 等效于 sum : ()=>{return this.$store.getters['countAbout/sum']}     //使用: {{sum}}\r\n  }\r\n  methods:{\r\n    //派发行为 dispatch\r\n    ...mapActions('countAbout',{'addCount': \"add\", ... }),  //等效于  addCount(value){ this.$store.dispatch('countAbout/add',value) }   //使用: @click=\"addCount(value)\"\r\n    ...mapActions('countAbout',[\"add\", ... ]),              //等效于  add(value){ this.$store.dispatch('countAbout/add',value) }        //使用: @click=\"add(value)\"\r\n    //Mutation  直接发送commit\r\n    ...mapMutations('countAbout',{'ADDCount':\"ADD\", ... }), //等效于  addCount(value){ this.$store.commit('countAbout/ADD',value) }    //使用: @click=\"ADDCount(value)\"\r\n    ...mapMutations('countAbout',['ADD', ... ]),            //等效于  ADD(value){ this.$store.commit('countAbout/ADD',value) }         //使用: @click=\"ADD(value)\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Pinia\r\n\r\n\r\n![](./images/index/2022-11-24-15-01-43.png)\r\n\r\npinia 中文文档：https://pinia.web3doc.top/\r\n\r\n#### 1、简单例子\r\n\r\n\r\n**注册Pinia**\r\n```js\r\nimport { createPinia } from 'pinia'\r\napp.use(createPinia())\r\n```\r\n\r\n**定义`Pinia`的`state`、`actions`、`getters`、`Setters`**\r\n```js\r\n// stores/counterStore.js\r\nimport { defineStore } from 'pinia'\r\n\r\n// defineStore 函数返回值本质是一个Hooks\r\nexport const useCounterStore = defineStore('counter', {\r\n  state: () => ({\r\n    count: 0\r\n  }),\r\n\r\n  actions: {\r\n    increment() {\r\n      this.count++\r\n      // console.log(0)\r\n    }\r\n  },\r\n\r\n  getters: {\r\n    doubleCount() {\r\n      return this.count*2\r\n    }\r\n  }\r\n})\r\nexport const counterStore = useCounterStore() // 导出CounterStore实例\r\n```\r\n\r\n```vue\r\n<script setup>\r\n  import { storeToRefs } from 'pinia'\r\n  import { counterStore } from '@/stores/counterStore'\r\n  // const couterStore = useCounterStore()\r\n  \r\n  //从 Store 中提取属性同时保持其响应式，您需要使用storeToRefs()。 \r\n  //它将为任何响应式属性创建 refs。 当您仅使用 store 中的状态但不调用任何操作时，\r\n  const { count, doubleCount } = storeToRefs(counterStore)\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    {{ count }} \r\n    {{ doubleCount }}\r\n    <button @click=\"couterStore.increment\">+</button>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"css\">\r\n/* css 代码 */\r\n</style>\r\n ```\r\n\r\n#### 2、购物车案例\r\n\r\n```js\r\n// data/api.js\r\nfunction catchDataApi() {// 模拟服务端发来的数据，用promise实现\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve([\r\n        {\r\n          id: 1,\r\n          name: 'iphone12',\r\n          price: 3000,\r\n          inventory: 3\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'iphone13',\r\n          price: 8000,\r\n          inventory: 3\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'iphone14',\r\n          price: 13000,\r\n          inventory: 2\r\n        }\r\n      ])\r\n    }, 1000)\r\n  })\r\n}\r\n\r\nexport default catchDataApi\r\n```\r\n\r\n```js\r\n// store/productStore.js\r\nimport { defineStore } from 'pinia'\r\nimport catchDataApi from '../data/api'\r\n\r\nexport const useProductStore = defineStore({\r\n  id: 'productStore',\r\n\r\n  state: () => ({\r\n    products: []\r\n  }),\r\n\r\n  actions: {\r\n    async loadData() {\r\n      try {\r\n        const data = await catchDataApi()\r\n        this.products = data\r\n      } catch (error) {\r\n\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```js\r\n// store/cartStore.js\r\nimport { defineStore, storeToRefs } from 'pinia'\r\nimport { useProductStore } from './productStore'\r\nexport const useCartStore = defineStore({\r\n  id: 'cartStore',\r\n\r\n  state: () => ({\r\n    cartList: []\r\n  }),\r\n\r\n  // cartList = [\r\n  //   {\r\n  //     id: 1,\r\n  //     name: 'iphone12',\r\n  //     price: 10000,\r\n  //     quantity: 1\r\n  //   }\r\n  // ]\r\n\r\n  actions: {\r\n    addToCart(product) {\r\n      // 在购物车里查找是否有这个商品\r\n      const p = this.cartList.find((item) => {\r\n        return item.id === product.id\r\n      })\r\n\r\n      // 如果找到了，购物车里的这个商品的数量加 1\r\n      // 如果没有没有找到，添加这个商品到购物车\r\n      if (!!p) {\r\n        p.quantity++\r\n      } else {\r\n        this.cartList.push({\r\n          ...product,\r\n          quantity: 1\r\n        })\r\n      }\r\n\r\n      // 当点击放入购物车，这个商品的库存需要减少一个\r\n      const productStore = useProductStore()\r\n      const { products } = storeToRefs(productStore)\r\n      const p2 = products.value.find((item) => {\r\n        return item.id === product.id\r\n      })\r\n      p2.inventory--\r\n    }\r\n  },\r\n\r\n  getters: {\r\n    totalPrice() {\r\n      return this.cartList.reduce((sum, item) => {\r\n        return sum + item.price * item.quantity\r\n      }, 0)\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```vue\r\n// views/Product.vue\r\n<script setup>\r\nimport { storeToRefs } from 'pinia'\r\nimport { useProductStore } from '@/stores/productStore'\r\nimport { useCartStore } from '@/stores/cartStore'\r\nconst productStore = useProductStore()\r\nconst cartStore = useCartStore()\r\nconst { products } = storeToRefs(productStore)\r\nconst { addToCart } = cartStore\r\nproductStore.loadData()\r\n</script>\r\n\r\n<template>\r\n  <h1>产品列表</h1>\r\n  <hr>\r\n  <ul>\r\n    <li\r\n      v-for=\"product in products\"\r\n    >\r\n      {{product.name}} - ￥{{product.price}}\r\n      <button \r\n        @click=\"addToCart(product)\"\r\n        :disabled=\"product.inventory <= 0\"\r\n      >放入购物车</button>\r\n    </li>\r\n  </ul>\r\n</template>\r\n\r\n<style lang=\"css\">\r\n/* css 代码 */\r\n</style>\r\n```\r\n\r\n```vue\r\n// views/Cart.vue\r\n<script setup>\r\nimport { storeToRefs } from 'pinia'\r\nimport { useCartStore } from '@/stores/cartStore'\r\nconst cartStore = useCartStore()\r\nconst { cartList, totalPrice } = storeToRefs(cartStore)\r\n</script>\r\n\r\n<template>\r\n  <h1>购物车</h1>\r\n  <hr>\r\n  <ul>\r\n    <li v-for=\"product in cartList\">\r\n      {{product.name}} : {{product.quantity}} x ￥{{product.price}} = ￥{{product.quantity * product.price}}\r\n    </li>\r\n  </ul>\r\n  <div>\r\n    总价：￥{{totalPrice}}\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"css\">\r\n/* css 代码 */\r\n</style>\r\n```\r\n\r\n```vue\r\n// App.vue\r\n<script setup>\r\nimport Product from '@/views/Product.vue'\r\nimport Cart from '@/views/Cart.vue'\r\n</script>\r\n\r\n<template>\r\n  <Product></Product>\r\n  <Cart></Cart>\r\n</template>\r\n\r\n<style lang=\"css\">\r\n/* css 代码 */\r\n</style>\r\n```\r\n\r\n\r\n\r\n\r\n### 总结\r\n* 父子关系组件间数据共享\r\n  * 父`--->`子 属性绑定\r\n  * 父`<---`子 事件绑定\r\n  * 父`<-->`子 v-model\r\n* 后代关系组件间数据共享\r\n  * provide & inject    (父--->后代)\r\n* 兄弟关系组件间数据共享\r\n  * mitt (EventBus)\r\n* 全局数据共享\r\n  * vuex\r\n\r\n\r\n## lodash节流防抖:throttle()\r\n```js\r\nimport {throttle} from 'lodash' //节流防抖\r\n    methods: {\r\n        ...mapActions('home',['getCategoryList']),\r\n        changeIndex:throttle(\r\n            function(index){\r\n                this.currentIndex = index;\r\n                console.log(this);\r\n            },\r\n            200,\r\n        ),\r\n        // 错误写法\r\n        // changeIndex(index){\r\n        //     throttle(\r\n        //         function(index){\r\n        //             this.currentIndex = index;\r\n        //             console.log(this);\r\n        //         },\r\n        //         200,\r\n        //     )\r\n        // },\r\n    }\r\n```\r\n\r\n\r\n## axios\r\n### 全局配置axios\r\n`./src/main.js`\r\n```js\r\nimport { createApp } from 'vue'\r\nimport axios from 'axios'\r\n\r\nimport './style.css'\r\nimport App from './App.vue'\r\n\r\n\r\naxios.defaults.baseURL=\"htts://api.com\"     //配置axios,设置baseURL,以后每次发送请求便不必写完整URL,请求只需要写 axios.get(\"/userinfo\") \r\n\r\nconst app = createApp(App)\r\napp.config.globalProperties.$http = axios //将axios挂载为app的全局自定义属性,从此每个组件的this上都可以直接访问到axios\r\n\r\napp.mount('#app')\r\n```\r\n\r\n### axios的拦截器\r\n\r\n**概念**\r\n* 请求拦截器,从axios发出给API接口服务器的请求将经过请求拦截器\r\n* 响应拦截器,从API接口服务器发回axios的响应将经过响应拦截器\r\n\r\n**请求拦截器**\r\n```js\r\n  // ......\r\naxios.interceptors.request.use(成功回调[,失败回调])\r\naxios.interceptors.response.use(成功回调[,失败回调])\r\n\r\n//示例\r\naxios.interceptors.request.use(config => {\r\n  //修改config\r\n  // ......\r\n  \r\n  //返回config\r\n  return config\r\n},error => {\r\n  return Promise.reject(error)\r\n})\r\n```\r\n\r\n\r\n**为请求头添加token认证**\r\naxios.js\r\n```js\r\nimport axios from 'axios'\r\naxios.defaults.baseURL = 'https://hostname.ltd'\r\naxios.interceptors.request.use(config => {\r\n  //修改config\r\n  config.headers.Authorization = 'Bearer XXX'  \r\n  //返回config\r\n  return config\r\n},error => {//\r\n  return Promise.reject(error)\r\n})\r\n\r\nexport default axios\r\n```\r\n\r\n**loading效果**\r\n```js\r\n// 1.按需导入\r\nimport {Loading} from 'element-ui' //vue2\r\n//声明用于存储Loading实例的变量\r\nlet LoadingInstance = null\r\n\r\naxios.interceptors.request.use(config => {\r\n  //修改config\r\n  config.headers.Authorization = 'Bearer XXX'\r\n  //创建Loading实例\r\n  LoadingInstance = Loading.service({fullscreen:true})\r\n  //返回config\r\n  return config\r\n});\r\n\r\naxios.interceptors.response.use(response => {\r\n  //关闭Loading的实例对象\r\n  LoadingInstance.close()\r\n  return response\r\n});\r\nexport default axios\r\n```\r\n\r\n\r\n\r\n\r\n###  axios配置nprogress进度条\r\n```js\r\nimport axios from 'axios'\r\n\r\nimport nprogress from 'nprogress'//进度条\r\nimport 'nprogress/nprogress.css'//加载的进度条样式\r\n\r\n// axios.defaults.baseURL = ''\r\nlet http = axios.create({\r\n    baseURL: ' http://????/api',\r\n    timeout: 5000,//5s为超时\r\n    //配置 ... \r\n})\r\n\r\n//请求拦截器\r\nhttp.interceptors.request.use((config) => {\r\n    // config.headers\r\n    //进度条开始\r\n    nprogress.start()\r\n\r\n    return config\r\n})\r\n//响应拦截器\r\nhttp.interceptors.response.use(\r\n    (response) => {\r\n        //进度条结束\r\n        nprogress.done()\r\n        return response\r\n    },\r\n    (err) => {\r\n        return Promise.reject(new Error('faile'))\r\n    }\r\n)\r\n\r\nexport default http\r\n```\r\n\r\n\r\n## `购物车案例实现`\r\n实现效果\r\n![图 5](./images/vue3学习笔记/2fbb08b7c47acdb960512432c3bdf516796121e7cb6e05b61525a1239647624b.png)  \r\n\r\n\r\n代码\r\n\r\n`main.js`\r\n```js\r\nimport { createApp } from 'vue'\r\nimport axios from 'axios'\r\nimport 'bootstrap'\r\nimport './style.css'\r\nimport App from './App.vue'\r\n\r\naxios.defaults.baseURL='https://escook.cn' //配置axios\r\nlet app = createApp(App)\r\napp.config.globalProperties.$http=axios //在this上全局挂载axios\r\n\r\napp.mount('#app')\r\n```\r\n\r\n`App.vue`\r\n```html\r\n<template>\r\n\r\n  <esHeaderVue \r\n  headerName=\"购物车\" \r\n  :height=\"40+'px'\"\r\n  ></esHeaderVue>\r\n\r\n  <esOrderListVue\r\n  :orderList=\"orderList\" \r\n  :paddingTop=\"40+'px'\" \r\n  :paddingBottom=\"60+'px'\"\r\n  ></esOrderListVue>\r\n\r\n  <esFooterVue \r\n  :height=\"60+'px'\" \r\n  @checkboxChanged=\"changeAllBeSelecttedStatus\"\r\n  :allIsSelectted=\"allIsSelectted\"\r\n  :totalPrice=\"totalPrice\" \r\n  :countSelectted=\"countSelectted\"\r\n  ></esFooterVue>\r\n\r\n</template>\r\n<script>\r\nimport esHeaderVue from './components/esHeader.vue';\r\nimport esOrderListVue from './components/esOrderList.vue';\r\nimport esFooterVue from './components/esFooter.vue'\r\nexport default\r\n  {\r\n    components:\r\n    {\r\n      esHeaderVue,\r\n      esOrderListVue,\r\n      esFooterVue\r\n    },\r\n    data() {\r\n      return {\r\n        orderList: \r\n        [\r\n          //测试数据\r\n          { \"id\": 1, \"goods_name\": \"班俏BANQIAO超火ins潮卫衣女士2020秋季新款韩版宽松慵懒风薄款外套带帽上衣\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/1.png\", \"goods_price\": 108, \"goods_count\": 1, \"goods_state\": true },\r\n          { \"id\": 2, \"goods_name\": \"嘉叶希连帽卫衣女春秋薄款2020新款宽松bf韩版字母印花中长款外套ins潮\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/2.png\", \"goods_price\": 129, \"goods_count\": 1, \"goods_state\": true },\r\n          { \"id\": 3, \"goods_name\": \"思蜜怡2020休闲运动套装女春秋季新款时尚大码宽松长袖卫衣两件套\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/3.png\", \"goods_price\": 198, \"goods_count\": 1, \"goods_state\": false },\r\n          { \"id\": 4, \"goods_name\": \"思蜜怡卫衣女加绒加厚2020秋冬装新款韩版宽松上衣连帽中长款外套\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/4.png\", \"goods_price\": 99, \"goods_count\": 1, \"goods_state\": false },\r\n          { \"id\": 5, \"goods_name\": \"幂凝早秋季卫衣女春秋装韩版宽松中长款假两件上衣薄款ins盐系外套潮\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/5.png\", \"goods_price\": 156, \"goods_count\": 1, \"goods_state\": true },\r\n          { \"id\": 6, \"goods_name\": \"ME&CITY女装冬季新款针织抽绳休闲连帽卫衣女\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/6.png\", \"goods_price\": 142.8, \"goods_count\": 1, \"goods_state\": true },\r\n          { \"id\": 7, \"goods_name\": \"幂凝假两件女士卫衣秋冬女装2020年新款韩版宽松春秋季薄款ins潮外套\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/7.png\", \"goods_price\": 219, \"goods_count\": 2, \"goods_state\": true },\r\n          { \"id\": 8, \"goods_name\": \"依魅人2020休闲运动衣套装女秋季新款秋季韩版宽松卫衣 时尚两件套\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/8.png\", \"goods_price\": 178, \"goods_count\": 1, \"goods_state\": true },\r\n          { \"id\": 9, \"goods_name\": \"芷臻(zhizhen)加厚卫衣2020春秋季女长袖韩版宽松短款加绒春秋装连帽开衫外套冬\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/9.png\", \"goods_price\": 128, \"goods_count\": 1, \"goods_state\": false },\r\n          { \"id\": 10, \"goods_name\": \"Semir森马卫衣女冬装2019新款可爱甜美大撞色小清新连帽薄绒女士套头衫\", \"goods_img\": \"https://www.escook.cn/vuebase/pics/10.png\", \"goods_price\": 153, \"goods_count\": 1, \"goods_state\": false }\r\n        ]\r\n      }\r\n    },\r\n    created() {//created生命周期函数,创建完毕后便调用\r\n      this.getOrderList()\r\n    },\r\n    computed: {\r\n        selectted(){//筛选出选中的项\r\n            return this.orderList.filter(item => item.goods_state)\r\n        },\r\n        totalPrice() {//计算总价\r\n            let totalPrice = 0\r\n            this.selectted.forEach(element => {\r\n                totalPrice += element.goods_price * element.goods_count\r\n            });\r\n            return totalPrice.toFixed(2);//保留两位小数\r\n        },\r\n        countSelectted(){//选中商品数\r\n            return this.selectted.length\r\n        },\r\n        allIsSelectted(){//计算是否全部被选中\r\n            for (let index = 0; index < this.orderList.length; index++) {\r\n                const element = this.orderList[index];\r\n                if(!element.goods_state)\r\n                    return false\r\n                else\r\n                    continue\r\n            }\r\n            return true\r\n        },\r\n    },\r\n    methods:{\r\n      async getOrderList() {//获取订单列表\r\n        let { data: reqBody } = await this.$http.get(\"/api/cart\")\r\n        // this.orderList = reqBody.list\r\n      },\r\n        changeAllBeSelecttedStatus(){//选中全部 或 全部取消选中\r\n            let nowStates = this.allIsSelectted\r\n            this.orderList.forEach(element=>{\r\n                element.goods_state= !nowStates\r\n            })\r\n        }\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n\r\n</style>\r\n```\r\n\r\n`esHeader.vue`\r\n```html\r\n<template>\r\n  <div class=\"esHeaderBox\" :style=\"{'color':color,'background-color': bgcolor,'height':height}\">\r\n  {{headerName}}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props:{\r\n        'headerName':{\r\n            type:String,\r\n            required:true,\r\n            default:\"默认标题\",\r\n        },\r\n        'color':{\r\n            type:String,\r\n            default:\"white\",\r\n        },\r\n        'bgcolor':{\r\n            type:String,\r\n            default:\"#0d6efd\",\r\n        },\r\n        'height':{\r\n            type:String,\r\n            default:\"40px\"\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .esHeaderBox{\r\n        height: 40px;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;/*左右居中*/\r\n        align-items: center;/*上下居中*/\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: 9999;\r\n    }\r\n</style>\r\n```\r\n\r\n`esOrderList.vue`\r\n```html\r\n<template>\r\n    <div class=\"orderListBox\" :style=\"{'padding-top': paddingTop,'padding-bottom': paddingBottom}\">\r\n        <ul>\r\n            <li v-for=\"item in orderList\" :key=\"item.id\">\r\n                <div class=\"form-check checkbox\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"item.goods_state\">\r\n                </div>\r\n                <img :src=\"item.goods_img\" alt=\"\">\r\n                <div class=\"orderInfo\">\r\n                    <div class=\"goods_name\">{{item.goods_name}}</div>\r\n                    <div class=\"goods_price_info\">\r\n                        <span class=\"goods_price\">¥{{item.goods_price}}</span>\r\n                        <esCounterVue v-model:count=\"item.goods_count\" :min=\"1\"></esCounterVue>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport esCounterVue from './esCounter.vue';\r\nexport default {\r\n    props: {\r\n        orderList: {\r\n            type: Array,\r\n            require: true,\r\n        },\r\n        paddingTop:{\r\n            type:String,\r\n            default:\"40px\"\r\n        },\r\n        paddingBottom:{\r\n            type:String,\r\n            default:\"40px\"\r\n        },\r\n    },\r\n    components: {\r\n        esCounterVue\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.orderListBox {\r\n    ul,\r\n    li {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    li {\r\n        display: flex;\r\n        padding: 10px;\r\n        border-bottom: 1px solid rgb(240, 240, 240);\r\n\r\n        .checkbox {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            /*左右居中*/\r\n            width: 40px;\r\n\r\n            input {\r\n                border-radius: 50%;\r\n            }\r\n        }\r\n\r\n        img {\r\n            height: 100px;\r\n            width: 100px;\r\n        }\r\n\r\n        .orderInfo {\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: space-between;\r\n            margin-left: 10px;\r\n\r\n            .goods_price_info {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                /*上下居中*/\r\n                align-items: center;\r\n                .goods_price {\r\n                    color: red;\r\n                    font-weight: bold;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n</style>\r\n```\r\n\r\n\r\n`esCounter.vue`\r\n```html\r\n<template>\r\n    <div class=\"counterBox\">\r\n        <button class=\"btn\" @click=\"myCount--\">-</button>\r\n        <!-- @keyup.enter=\"event=>event.target.value=myCount\"表示当enter键抬起事件发生后重新更新input的value,否则当在结合[ v-model.lazy]使用时不会自动更新,显示错误值 -->\r\n        <!-- <input class=\"\" type=\"text\" v-model.lazy=\"myCount\" @keyup.enter=\"event=>event.target.value=myCount\"> -->\r\n        <!-- 下面一行代码完美解决了上述问题 -->\r\n        <input class=\"\" type=\"text\" :value=\"myCount\" @focusout=\"myCount = $event.target.value\">\r\n        <button class=\"btn\" @click=\"myCount++\">+</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        count:{\r\n            type:Number,\r\n            require: true\r\n        },\r\n        min:{\r\n            type:Number,\r\n            default: NaN //默认值表示不进行最小值检查\r\n        }\r\n    },\r\n    emits: [\"update:count\"],\r\n    data(){\r\n        return{\r\n            //本地数据 myCount\r\n            myCount:this.count\r\n        }\r\n    },\r\n    methods: {\r\n        setCount(newValue){//设置外部数据 count\r\n            this.$emit(\"update:count\",newValue)\r\n        }\r\n    },\r\n    watch:{\r\n        // 监听 外部数据 count 的改变 和本地数据 myCount 的改变 \r\n        // 使得 myCount ----> `myCount++ 或 myCount-- 或 从input标签输入myCount` ---->  数据合法性检测 ----> count\r\n        // 使得 myCount <------------------------------------------------------------------------------ count\r\n        \r\n        count(newVal){//监听 外部数据 count 的改变,然使其更新到myCount\r\n            this.myCount = newVal\r\n        },\r\n        myCount(newVal,oldVal){//监听 本地数据 myCount 的改变,然使其更新到 外部数据 count\r\n            newVal = parseInt(newVal)\r\n            oldVal = parseInt(oldVal)\r\n            if(typeof newVal == 'number' &&  (this.min == NaN ||  newVal >= this.min) )//判断是否合法\r\n            {\r\n                this.setCount(newVal) //数据合法,则向外部更新新值\r\n            }\r\n            else{\r\n                this.myCount=oldVal //保持原值\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.counterBox {\r\n    display: flex;\r\n    // 水平\r\n    justify-content: space-between;\r\n    // 垂直居中\r\n    align-items: center;\r\n    button{\r\n        // height: 1em;\r\n        padding-top: 0;\r\n        padding-bottom: 0;\r\n    }\r\n    input,p{\r\n        max-width: 3em;\r\n        text-align: center;\r\n        padding: 0 10px;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        border-radius: 5px;\r\n        font-size: smaller;\r\n    }\r\n}\r\n</style>\r\n```\r\n\r\n`esFooter.vue`\r\n```html\r\n<template>\r\n    <div class=\"esFooterBox\" :style=\"{'height':height}\">\r\n        <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" :checked=\"allIsSelectted\" @change=\"checkboxChanged\" id=\"esFooterBox_selecttedAll\">\r\n            <label class=\"form-check-label\" for=\"esFooterBox_selecttedAll\">全选</label>\r\n        </div>\r\n        <div class=\"totalPrice\">\r\n            合计: <span>¥{{totalPrice}}</span> \r\n        </div>\r\n        <button class=\"btn btn-primary checkOut\">\r\n            结算:({{countSelectted}})\r\n        </button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    emits: [\"checkboxChanged\"],\r\n    props: {\r\n        'height': {\r\n            type: String,\r\n            default: \"60px\"\r\n        },\r\n        'allIsSelectted':{\r\n            type:Boolean,\r\n            require:true\r\n        },\r\n        'totalPrice':{\r\n            type:[Number,String],\r\n            require:true\r\n        },\r\n        'countSelectted':{\r\n            type:Number,\r\n            require:true\r\n        }\r\n    },\r\n    methods:{\r\n        checkboxChanged(){\r\n            this.$emit('checkboxChanged')\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.esFooterBox {\r\n    display: flex;\r\n    justify-content:space-between;/*左右居中*/\r\n    align-items: center;/*上下居中*/\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 9999;\r\n    width: 100%;\r\n    padding:0 10px;\r\n    background-color: white;\r\n    .totalPrice{\r\n        span{\r\n            color: red;\r\n        }\r\n    }\r\n    .checkOut{\r\n        padding: 10px 20px;\r\n        border-radius:99999px;\r\n    }\r\n}\r\n</style>\r\n```\r\n\r\n## DOM的引用---ref属性\r\n\r\n```html\r\n<template>\r\n  <!-- 使用ref为 `html元素` 的DOM设置引用名称 -->\r\n  <p ref=\"refName1\">test</p>\r\n\r\n  <!-- 使用ref为 `组件` 的DOM设置引用名称 -->\r\n  <myComponents ref=\"refName2\"></myComponents>\r\n</template>\r\n\r\n<script>\r\n  export default{\r\n\r\n    mounted(){\r\n      //根据 `ref引用名称` 输出 `html元素` 的DOM实例\r\n      console.log(this.$refs.refName1);\r\n\r\n      //根据 `ref引用名称` 输出 `组件` 的DOM实例\r\n      console.log(this.$refs.refName2);\r\n\r\n      //根据 `ref引用名称` 访问 `组件` 上的数据和方法\r\n      console.log(this.$refs.refName2.数据或方法名);\r\n    },\r\n  }\r\n</script>\r\n```\r\n\r\n## DOM更新时机及nextTick()\r\n`DOM 的更新并不是同步的  更改响应式状态时 Vue 将它们缓存在一个队列中，直到下一个“tick”才一起执行。`\r\n```html\r\n<template>\r\n  <input v-if=\"inputVisible\" type=\"text\" ref=\"inputRef\" >\r\n  <button @click=\"changeInputVisible\">显示/隐藏输入框</button>\r\n</template>\r\n\r\n<script>\r\n  export default{\r\n    data(){\r\n      return{\r\n        inputVisible:false\r\n      }\r\n    },\r\n    methods:{\r\n      changeInputVisible(){\r\n        this.inputVisible=!this.inputVisible //切换输入框可见性\r\n        if(this.inputVisible){  //如果切换为可见\r\n          //当切换输入框可见性后,输入框还未更新DOM,所以 `<input>` 元素并不存在,所以以下代码将因无法获取到DOM对象而报错\r\n          this.$refs.inputRef.focus()  //获取输入框焦点\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n`nextTick()`\r\n```html\r\n<template>\r\n  <input v-if=\"inputVisible\" type=\"text\" ref=\"inputRef\" >\r\n  <button @click=\"changeInputVisible\">显示/隐藏输入框</button>\r\n</template>\r\n\r\n<script>\r\nimport { nextTick } from '@vue/runtime-core'\r\n  export default{\r\n    data(){\r\n      return{\r\n        inputVisible:false\r\n      }\r\n    },\r\n    methods:{\r\n      changeInputVisible(){\r\n        this.inputVisible=!this.inputVisible //切换输入框可见性\r\n        if(this.inputVisible){  //如果切换为可见\r\n          //等待一个状态改变后的 DOM 更新完成\r\n          nextTick(()=>{\r\n            this.$refs.inputRef.focus()  //获取输入框焦点\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n## 动态组件component\r\n**动态组件**\r\n* 动态组件用于动态切换组件的显示和隐藏\r\n* `<component>`是组件占位符\r\n* 通过`is`属性动态指定要渲染的组件名称`<component is=\"组件名称\"></component>`\r\n* `<keep-alive>`标签作用是切换动态组件时保持组件的状态,使得其内容变量不会被销毁\r\n\r\n**基本使用**\r\n```html\r\n<template>\r\n  <!-- component绑定字符串变量`comNameVal` -->\r\n  <component :is=\"comNameVal\"></component>\r\n  <!-- button切换遍历`comNameVal`的值 -->\r\n  <button @click=\"comNameVal='ComponentA'\">显示ComponentA</button>\r\n  <button @click=\"comNameVal='ComponentB'\">显示ComponentB</button>\r\n</template>\r\n\r\n<script>\r\n  //导入子组件\r\n  import ComponentA from './components/componentA.vue'\r\n  import ComponentB from './components/componentB.vue'\r\n  export default{\r\n    components:{\r\n      //注册子组件\r\n      ComponentA,\r\n      ComponentB\r\n    },\r\n    data(){\r\n      return{\r\n        //定义变量数据\r\n        comNameVal:'ComponentA'\r\n      }\r\n    },\r\n    methods:{\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n`<keep-alive>`标签作用是切换动态组件时保持组件的状态,使得其内容变量不会被销毁\r\n```html\r\n  <keep-alive>\r\n    <component :is=\"comNameVal\"></component>\r\n  </keep-alive>\r\n```\r\n\r\n## 插槽Slot\r\n**基本写法:插入到默认插槽**\r\n```html\r\n<!-- 子组件 -->\r\n<template>\r\n  <p>组件的第一个标签</p>\r\n  <!-- slot预留占位标签 -->\r\n  <slot>\r\n    这里是后备(默认)内容(可以不填后备内容),当父组件未提供任何内容则显示后备内容\r\n  </slot>\r\n  <p>组件的最后一个标签</p>\r\n</template>\r\n\r\n\r\n<!-- -------------------------------------------------------- -->\r\n<!-- 父组件 -->\r\n<template>\r\n  <!-- 引入子组件 -->\r\n  <subComponent>\r\n    <p>该标签会插入到子组件subComponent的slot标签处</p>\r\n  </subComponent>\r\n</template>\r\n```\r\n\r\n**具名插槽:分别插入到不同的插槽**\r\n```html\r\n<!-- 子组件 -->\r\n<template>\r\n  <header>\r\n    <slot name='header'></slot>\r\n  </header>\r\n  <main>\r\n    <!-- \r\n      <slot name='default'></slot>\r\n      name='default'可以省略\r\n    -->\r\n    <slot></slot>\r\n  </main>\r\n  \r\n  <footer>\r\n      <slot name='footer'></slot>\r\n  </footer>\r\n</template>\r\n\r\n\r\n<!-- -------------------------------------------------------- -->\r\n<!-- 父组件 -->\r\n<template>\r\n  <!-- 引入子组件 -->\r\n  <subComponent>\r\n    <template v-slot:header>\r\n      <h1>滕王阁序</h1>\r\n    </template>\r\n    <template v-slot:default><!-- 该标签内容将插入到默认插槽 所以该标签 可省略 -->\r\n      <p>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>\r\n      <p>画栋朝飞南浦云，珠帘暮卷西山雨。</p>\r\n      <p>闲云潭影日悠悠，物换星移几度秋。</p>\r\n      <p>阁中帝子今何在？槛外长江空自流。</p>\r\n    </template>\r\n    <template v-slot:footer><!-- #footer为v-slot:footer的简写 -->\r\n      <p>落款：王勃</p>\r\n    </template>\r\n  </subComponent>\r\n</template>\r\n```\r\n\r\n**作用域插槽**\r\n```html\r\n<!-- 子组件 -->\r\n<template>\r\n  <h2>这是一个子组件</h2>\r\n  <slot :msgA='msg1' :msgB='msg2' >\r\n  //作用：以何种方式渲染数据，交给父组件处理，所以通过插槽的方式向外部提供一个插入位置和数据\r\n  </slot>\r\n</template>\r\n<script>\r\n  export default{\r\n    data(){\r\n      return{\r\n        msg1:\"内容1\"\r\n        msg2:\"内容2\"\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n\r\n<!-- -------------------------------------------------------- -->\r\n<!-- 父组件 -->\r\n<template>\r\n  <h1>这是一个父组件</h1>\r\n  <subComponent v-slot:default=\"gettedData\"><!-- gettedData是变量名，可以任意 -->\r\n    <p>这是接收到的子组件绑定给插槽的数据msgA: {{gettedData.msgA}}</p>\r\n    <p>这是接收到的子组件绑定给插槽的数据msgB: {{gettedData.msgB}}</p>\r\n  </subComponent>\r\n\r\n  <subComponent v-slot:default=\"{msgA:msgA,msgB:msgB}\"><!-- 由于获取到的数据是一个对象，所以可以解构赋值为{msgA:msgA,msgB:msgB} 或 {msgA,msgB} -->\r\n    <p>这是接收到的子组件绑定给插槽的数据msgA: {{msgA}}</p>\r\n    <p>这是接收到的子组件绑定给插槽的数据msgB: {{msgB}}</p>\r\n  </subComponent>\r\n</template>\r\n```\r\n\r\n## 自定义的指令Directives\r\n\r\n**局部自定义指令**\r\n```html\r\n<template>\r\n<input v-focus />\r\n</template>\r\n\r\n<script>\r\n  const focus = {\r\n    \r\n}\r\n\r\nexport default {\r\n  directives: {\r\n    // 在模板中启用 v-focus\r\n    focus:{\r\n      mounted: (el) => el.focus(),//vue2中函数名为bind\r\n      updated: (el) => el.focus()//vue2中函数名为update\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n**全局自定义指令**\r\n`main.js`\r\n```js\r\nconst app = createApp({})\r\n\r\n// 使 v-focus 在所有组件中都可用\r\napp.directive('focus', {\r\n    mounted: (el) => el.focus(),//vue2中函数名为bind\r\n    updated: (el) => el.focus()//vue2中函数名为update\r\n}\r\n\r\n\r\n)\r\n\r\n// 上述mounted updated 函数内容一致 可以简写为\r\napp.directive('focus',(element)=>{\r\n      el.focus()\r\n}\r\n\r\n\r\n```\r\n\r\n**值令钩子**\r\n```js\r\nexport default {\r\n  directives: {\r\n    // 在模板中启用 v-focus\r\n    focus:{\r\n        // 在绑定元素的 attribute 前 或 事件监听器应用前调用\r\n        created(element, binding, vnode, prevVnode) {},\r\n        // 在元素被插入到 DOM 前调用\r\n        beforeMount(el, binding, vnode, prevVnode) {},\r\n        // 在绑定元素的父组件\r\n        // 及他自己的所有子节点都挂载完成后调用\r\n        mounted(el, binding, vnode, prevVnode) {},\r\n        // 绑定元素的父组件更新前调用\r\n        beforeUpdate(el, binding, vnode, prevVnode) {},\r\n        // 在绑定元素的父组件\r\n        // 及他自己的所有子节点都更新后调用\r\n        updated(el, binding, vnode, prevVnode) {},\r\n        // 绑定元素的父组件卸载前调用\r\n        beforeUnmount(el, binding, vnode, prevVnode) {},\r\n        // 绑定元素的父组件卸载后调用\r\n        unmounted(el, binding, vnode, prevVnode) {}\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n**值令钩子形式参数**\r\n```js\r\ncreated(element, binding, vnode, prevVnode) {\r\n  // element :DOM元素\r\n  // binding :\r\n              // 若:\r\n              // let 变量名valueName = 123\r\n              // v-focus.修饰符AAA=\"变量名valueName\"\r\n              // 或:\r\n              // v-focus.修饰符AAA:变量名valueName=\"123\"\r\n              //\r\n              // 则:\r\n              // binding的值为:{\r\n              //      arg: '变量名valueName',\r\n              //      value: 变量名valueName的值 123,\r\n              //      oldValue: 上一次`变量名valueName`的值\r\n              //      modifiers: { 修饰符AAA: true },\r\n              // }\r\n}\r\n```\r\n\r\n\r\n## 表格案例实现\r\n\r\n**效果**\r\n\r\n![图 1](./images/vue3学习笔记/5696dd27a68603dec0e7b9ae8e216706db68895d151ddb8f35556d54f1d6796c.png)  \r\n\r\n**代码**\r\n`main.js`\r\n```js\r\nimport { createApp } from 'vue'\r\nimport './style.css'\r\n\r\nimport './assets/bootstrap5.css'\r\n\r\nimport App from './App.vue'\r\ncreateApp(App).mount('#app')\r\n```\r\n\r\n`App.vue`\r\n```html\r\n<template>\r\n  <myTable :data=\"goodsList\">\r\n    <template v-slot:header>\r\n      <td>序号</td>\r\n      <td>商品名称</td>\r\n      <td>价格</td>\r\n      <td>标签</td>\r\n      <td>操作</td>\r\n    </template>\r\n    <template v-slot:item=\"{row}\">\r\n      <td>{{row.id}}</td>\r\n      <td>{{row.name}}</td>\r\n      <td>{{row.price}}</td>\r\n      <td>\r\n        <span\r\n        v-for=\"tag in row.tags\" :key=\"tag\" \r\n        class=\"badge bg-warning text-dark\" \r\n        style=\"margin:0 5px;cursor: pointer;\"\r\n        @click=\"row.tags.splice(row.tags.findIndex(item => item == tag),1)\"\r\n        >{{tag}}</span>\r\n\r\n        <input\r\n        type=\"text\" \r\n        class=\"form-control\"\r\n        style=\"display: inline;width: 100px; float: right;\"\r\n        v-if=\"row.inputVisible\" \r\n        v-model.trim=\"row.inputValue\" \r\n        @blur=\"addTag(row),row.inputValue=''\"\r\n        @keyup.enter=\"addTag(row),row.inputValue=''\"\r\n        @keyup.esc=\"row.inputValue=''\"\r\n        v-focus\r\n        >\r\n\r\n        <button \r\n        v-if=\"!row.inputVisible\" \r\n        type=\"button\"\r\n        class=\"btn btn-primary\" \r\n        style=\"padding:2px auto;float: right;\" \r\n        @click=\"row.inputVisible = true\"\r\n        >+Tag\r\n      </button>\r\n\r\n      </td>\r\n      <td>\r\n        <button type=\"button\"  class=\"btn btn-danger\">删除</button>\r\n      </td>\r\n    </template>\r\n  </myTable>\r\n</template>\r\n\r\n\r\n<script>\r\n  import myTable from './components/myTable.vue'\r\n  export default {\r\n    components: {\r\n      myTable\r\n    },\r\n    data() {\r\n      return {\r\n        goodsList: [\r\n          { id: 1, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n          { id: 2, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n          { id: 3, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n          { id: 4, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n          { id: 5, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n          { id: 6, name: \"test test test test test test test\", price: 100, inputVisible:false, tags: ['tag1', 'tag2'] },\r\n        ]\r\n      }\r\n    },\r\n    methods:{\r\n      addTag(row){\r\n        let value =  row.inputValue//获取文本框内容\r\n        row.inputVisible = false//隐藏文本框\r\n        if(value || !row.tags.includes(value)){//判断是否为空 是否已经存在标签\r\n          row.tags.push(value)//添加标签\r\n        }\r\n      },\r\n\r\n    },\r\n    directives:{\r\n        focus:{\r\n          mounted(el){\r\n            console.log(el);\r\n            el.focus()\r\n          }\r\n        }\r\n      }\r\n  }\r\n</script>\r\n<style scoped>\r\n\r\n</style>\r\n```\r\n\r\n`myTable.vue`\r\n```html\r\n<template>\r\n  <table class=\"table table-striped table-bordered\">\r\n    <thead>\r\n        <tr>\r\n            <slot name=\"header\">\r\n            </slot>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr v-for=\"item in data\" :key=\"item.id\">\r\n                <slot name=\"item\" :row=\"item\">\r\n                </slot>\r\n        </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props:{\r\n        data:{\r\n            type:Array,\r\n            require:true,\r\n            default:[]\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n```\r\n\r\n\r\n## 路由\r\n\r\n### 路由原理\r\n```html\r\n<template>\r\n  <a href=\"#/home\"></a>\r\n  <a href=\"#/about\"></a>\r\n  <component :is=\"comNameVal\"></component>\r\n</template>\r\n<script>\r\n  import homeVue from \"./component/home.vue\"\r\n  import aboutVue from \"./component/about.vue\"\r\n  export default{\r\n    components:{\r\n      homeVue,\r\n      aboutVue,\r\n    },\r\n    data(){\r\n      return{\r\n        comNameVal:'homeVue'\r\n      }\r\n    },\r\n    created(){\r\n      //监听url中hash改变的事件 \r\n      window.onhashchange = ()=>{//回调函数\r\n        switch(window.location.hash){\r\n          case `#/home`:\r\n            this.comNameVal = 'homeVue'\r\n            break;\r\n          case `#/about`:\r\n            this.comNameVal = 'aboutVue'\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n```\r\n\r\n### 基本使用:声明式导航\r\n**声明式导航概念**\r\n* 点击`<a>`标签\r\n* 点击`<<router-link>`标签\r\n\r\n`安装`\r\n```bash\r\n# 安装\r\n# vue2 只能使用vue-router 3\r\n# vue3 只能使用vue-router 4\r\nnpm install vue-router@4 \r\n```\r\n\r\n`router.js`\r\n```js\r\nimport homeVue from \"./component/home.vue\"\r\nimport movieVue from \"./component/movie.vue\"\r\nimport aboutVue from \"./component/about.vue\"\r\nimport {createRouter,createWebHashHistory} from 'vue-router'\r\nconst router = createRouter({//创建路由实例\r\n    history:createWebHashHistory(),//指定路由工作模式\r\n    linkActiveClass:'actived_by_Router',//指定被点击后的链接会被添加上类名,默认为`router-link-active`\r\n    routes:[//指定路由规则\r\n        {path:'/',redirect:'/home'},//重定向路由\r\n        {path:'/home',component:homeVue},\r\n        {\r\n          path: '/search/:someSearchKeywords?',//?表示someSearchKeywords可以传递也可不传递,当不加?且不传递someSearchKeywords参数时,url中的`/search/`路径会没有,这会导致路由错误\r\n          name:'search',  // this.$router.push({ name:'search',query:{categoryid,categoryleve,categoryname}})\r\n          component: Search,\r\n          meta:{showFooter:true}//如此组件中便可以使用该变量: `<Footer v-if=\"$route.meta.showFooter\"></Footer>`\r\n        },\r\n        {\r\n            path:'/movie/:movieId',//`:movieId`是动态路由,使得组件中能通过`{{$route.params.movieId}}`访问属性值\r\n            component:() => import '\"./component/movie.vue\"' , //路由懒加载\r\n            name:'mov',//可以给路由命名,但不能重复\r\n            props:true,//使得组件中可以通过:`props:[movieId]` `{{movieId}}` 获取属性值\r\n        },\r\n        {path:'/about',component:aboutVue,redirect:'/about/tab1',children:[//嵌套路由\r\n            {path:'tab1',component:tab1Vue},\r\n            {path:'tab2',component:tab2Vue},\r\n        ]},\r\n    ]\r\n})\r\nexport default router//导出实例对象\r\n```\r\n\r\n`main.js`\r\n```js\r\nimport App from './App.vue'\r\nconst app = createApp(App)\r\nimport router from \"./router.js\";\r\napp.use(router)\r\napp.mount('#app')\r\n```\r\n\r\n`App.vue`\r\n```html\r\n<template>\r\n  <router-link to='/home' >主页<router-link>\r\n  <router-link to='/movie' >电影<router-link>\r\n  <router-link to='/movie/123' >电影<router-link>\r\n  <router-link :to=\"{name:'mov',params:{id:123}}\" >电影<router-link>\r\n  <router-link to='/about' >关于<router-link>\r\n\r\n  <router-view></router-view>\r\n</template>\r\n\r\n<script>\r\n  export default{\r\n  }\r\n</script>\r\n```\r\n\r\n### 基本使用:编程式导航\r\n**编程式导航概念**\r\n* 修改`window.location.herf`使之跳转页面\r\n* 调用vueAPI\r\n\r\n```html\r\n<button @click=\"$router.push('/home')\">首页</button>\r\n<button @click=\"$router.push({name:'mov',params:{id:123}})\">首页</button>\r\n<button @click=\"$router.go(-1)\">返回</button>\r\n```\r\n\r\n\r\n### 导航守卫\r\n```js\r\nimport homeVue from \"./component/home.vue\"\r\nimport movieVue from \"./component/movie.vue\"\r\nimport aboutVue from \"./component/about.vue\"\r\nimport {createRouter,createWebHashHistory} from 'vue-router'\r\nconst router = createRouter({\r\n  // 略......\r\n    routes:[\r\n        // 略......\r\n        {\r\n          path: '/search/:someSearchKeywords?',//作用: `?`表示`someSearchKeywords`可以传递也可不传递,当不加?且不传递`someSearchKeywords`参数时,`url`中的`/search/`路径会没有,这会导致路由错误\r\n          name:'search',  // 作用:  this.$router.push({ name:'search',params:{key:value,...},query:{categoryid,categoryleve,categoryname}})\r\n          component: Search,\r\n          meta:{showFooter:true}//作用: 如此编写组件中便可以使用该变量: `<Footer v-if=\"$route.meta.showFooter\"></Footer>`\r\n        }\r\n    ]\r\n})\r\n\r\n//全局导航守卫\r\nrouter.beforeEach((to,from,next)=>{\r\n  //to 目标路由对象\r\n  //from 来源路由对象\r\n  //next() 调用后将放行路由 若不接收该参数则自动放行;\r\n    // next('/path') 跳转到指定路径\r\n    // next(false) 强制停留在当前页面\r\n\r\n  if(to.path == '/user' && ! localStorage.getItem('token'))//访问user页面,但没有登陆,则跳转到登陆页面\r\n  {\r\n    next('/login')//路由到登陆页面\r\n  }else{\r\n    next() //放行\r\n  }\r\n\r\n})\r\nexport default router//导出实例对象\r\n```\r\n\r\n\r\n## 登陆案例实现\r\n\r\nmain.js\r\n```js\r\nimport { createApp } from 'vue'\r\nimport './style.css'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nconst app = createApp(App)\r\napp.use(router)\r\napp.mount('#app')\r\n```\r\n\r\nrouter.js\r\n```js\r\nimport {createRouter,createWebHashHistory} from 'vue-router'\r\nimport loginVue from './components/login.vue'\r\nimport userVue from './components/user.vue'\r\nimport userInfoVue from './components/userInfo.vue'\r\nimport userRightVue from './components/userRight.vue'\r\nimport userDetailVue from './components/userDetail.vue'\r\nconst router = createRouter({\r\n    history:createWebHashHistory(),\r\n    linkActiveClass:'actived_by_router',\r\n    routes:[\r\n        {path:'/',redirect:'/login'},\r\n        {path:'/login',component:loginVue},\r\n        {path:'/user',redirect:'/user/info',component:userVue ,children:[\r\n            {path:'info',component:userInfoVue},\r\n            {path:'right',component:userRightVue},\r\n            {path:'detail/:userId',component:userDetailVue,props:true},\r\n        ]},\r\n    ]\r\n})\r\n\r\nrouter.beforeEach((to,before,next)=>{\r\n    if(to.path != '/login' && !localStorage.getItem(\"token\"))//若不是访问/login 且没有登陆token 则重定向到/login\r\n    {\r\n        next('/login')\r\n    }else{\r\n        next()//其他页面则允许访问(其实应当需要更复杂的判断)\r\n    }\r\n})\r\nexport default router\r\n```\r\n\r\nApp.vue\r\n```html\r\n<template>\r\n    <router-view></router-view>\r\n</template>\r\n```\r\n\r\n\r\nlogin.vue\r\n```html\r\n<template>\r\n    <div class=\"loginBox\">\r\n        username:<input type=\"text\" v-model=\"username\"><br>\r\n        password:<input type=\"password\" v-model=\"password\"><br>\r\n        <button @click=\"login\">submit</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {} from \"vue-router\"\r\nexport default {\r\n    data(){\r\n        return{\r\n            username:'',\r\n            password:''\r\n        }\r\n    },\r\n    methods:{\r\n        login(){\r\n            localStorage.setItem(\"token\",\"\")\r\n            if(this.username=='admin' && this.password=='admin')//模拟判断是否登陆成功\r\n            {\r\n                this.$router.push('/user')\r\n                localStorage.setItem(\"token\",\"XXXXXXXX\")//模拟存储token\r\n            }else{\r\n                alert('用户名或密码错误')\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.loginBox{\r\n    width: 400px;\r\n    height: 400px;\r\n    background-color: #fff;\r\n}\r\n</style>\r\n```\r\n\r\nuser.vue\r\n```html\r\n<template>\r\n  <div class=\"userInfoBox\">\r\n    <div class=\"left\">\r\n      <button @click=\"logout\">登出</button><br>\r\n      <router-link to=\"/user/info\">用户信息</router-link><br>\r\n      <router-link to=\"/user/right\">用户权利</router-link>\r\n    </div>\r\n    <div class=\"right\">\r\n      <router-view></router-view>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods:{\r\n    logout(){\r\n      localStorage.setItem(\"token\",'')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.userInfoBox{\r\n  display: flex;\r\n  .left{\r\n    width: 200px;\r\n    background-color: skyblue;\r\n  }\r\n  .right{\r\n    flex: 1;\r\n    background-color: pink;\r\n  }\r\n}\r\n.actived_by_router{\r\n  background-color: red;\r\n}\r\n</style>\r\n```\r\n\r\nuserInfo.vue\r\n```html\r\n<template>\r\n  <p>用户信息..................................</p>\r\n  <p>用户1:<router-link :to=\"'/user/detail/'+1\">张三</router-link> <button @click=\"$router.push('/user/detail/'+1)\">张三</button></p>\r\n  <p>用户2:<router-link :to=\"'/user/detail/'+2\">张四</router-link> <button @click=\"$router.push('/user/detail/'+2)\">张四</button></p>\r\n</template>\r\n```\r\n\r\n\r\nuserRight.vue\r\n```html\r\n<template>\r\n  <p>用户权限..................................</p>\r\n</template>\r\n```\r\n\r\nuserDetail.vue\r\n```html\r\n<template>\r\n  <div class=\"userDetailBox\">\r\n    <button @click=\"$router.go(-1)\">返回上一级</button>\r\n    <h2>用户详细信息</h2>\r\n    <p>userId:{{userId}}</p>\r\n    <p>$route.params.userId:{{$route.params.userId}}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props:['userId']\r\n}\r\n</script>\r\n```\r\n\r\n## vue-cli脚手架\r\n\r\n**安装**\r\n\r\n```bash\r\nnpm install -g @vue/cli\r\nvue --version\r\n```\r\n\r\n**创建项目**\r\n```bash\r\n# 命令行方式创建\r\nnpm create project-Name\r\n# 图形界面创建\r\nvue ui\r\n```\r\n\r\n**建议手动勾选配置的功能**\r\n* [*] 使用设置档案`.babelrc`\r\n* [*] babel\r\n* [*] css预处理器(less Sass stylus)\r\n\r\n## vue组件库\r\n\r\n**PC端组件库**\r\n* Element-UI 饿了吗团队开发的组件库\r\n* View UI\r\n\r\n**移动端组件库**\r\n* mintUI\r\n* Vant\r\n\r\n\r\n### element UI\r\n* Element-UI --> **vue2**\r\n* Element Plus --> **vue3**\r\n\r\n**安装**\r\n```bash\r\nnpm i element-ui -S\r\n```\r\n\r\n**完整引入Element-UI**\r\n```js\r\n// 完整引入\r\nimport Vue from 'vue';\r\nimport ElementUI from 'element-ui'\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\nVue.use(ElementUI)\r\n\r\n\r\n```\r\n**按需引入Element-UI:可减小项目体积**\r\n```js\r\n// 1.安装   npm install babel-plugin-component -D\r\n// 2.修改   .babelrc \r\n\"plugins\": [\r\n    [\r\n      \"component\",\r\n      {\r\n        \"libraryName\": \"element-ui\",\r\n        \"styleLibraryName\": \"theme-chalk\"\r\n      }\r\n    ]\r\n  ]\r\n\r\n// 3.修改main.js\r\nimport Vue from 'vue';\r\nimport { Button, Select } from 'element-ui';\r\nimport App from './App.vue';\r\n\r\nVue.component(Button.name, Button);\r\nVue.component(Select.name, Select);\r\n/*\r\n * 或写为\r\n * Vue.use(Button)\r\n * Vue.use(Select)\r\n*/\r\n```\r\n\r\n\r\n## vue-cli的proxy代理服务\r\n\r\n用于处理跨域的问题\r\n\r\n**示例**\r\n```js\r\n// 1.配置axios\r\naxios.defaults.baseURL = 'https://localhost:8080'\r\n// 2.在vue.config.js中配置proxy代理\r\nmodule.exports = {\r\n  devServer:{\r\n    proxy:'http://www.???.???',\r\n    open:true,//自动打开浏览器\r\n    // port:80\r\n  }\r\n}\r\n\r\n// 3.发送请求\r\nthis.$http.get('/api/users')\r\n// 4.vue发现接口不存在,于是将请求转交给proxy代理\r\n\r\n// 5.proxy代理把请求地址的baseURL替换为devServer.proxy的值,并发起真正的请求\r\n\r\n// 6.proxy代理把请求到的数据转发给axios\r\n\r\n```\r\n\r\n\r\n\r\n## transition动画组件\r\n**基本使用**\r\n```vue\r\n<button @click=\"shouldShow = !shouldShow\">切换组件显示</button>\r\n<transition name=\"transitionName\">\r\n    <div v-if=\"shouldShow\">     1. v-if   </div>\r\n    <div v-show=\"shouldShow\">   2. v-show   </div>\r\n    <component is=\"组件名称\">    3. 动态组件    </component>\r\n</transition>\r\n\r\n<style>\r\n        /* // 进入前 */\r\n        .transitionName-enter-from {\r\n            height: 0;\r\n        }\r\n        /* // 进入中 */\r\n        .transitionName-enter-active {\r\n            transition: all 0.2s linear;\r\n        }\r\n        /* // 进入后 */\r\n        .transitionName-enter-to {\r\n            height: 461px;\r\n        }\r\n        /* // 离开前 */\r\n        .transitionName-leave-from {\r\n            height: 461px;\r\n        }\r\n        /* // 离开中 */\r\n        .transitionName-leave-active {\r\n            transition: all 0.2s linear;\r\n        }\r\n        /* // 离开后 */\r\n        .transitionName-leave-to {\r\n            height: 0;\r\n        }\r\n</style>\r\n```\r\n\r\n## swiper在vue中的使用\r\n\r\n**安装**\r\n```bash\r\nnpm i swiper\r\n```\r\n\r\n**引入**\r\n\r\n根据 `swiper` 的`package.json`的 `exports` 属性可知应当引入 `./bundle` `./css/bundle`\r\n```js\r\n//package.json \r\n\"exports\": {\r\n    \".\": \"./swiper.esm.js\",\r\n    \"./core\": \"./swiper.esm.js\",\r\n    \"./bundle\": \"./swiper-bundle.esm.js\",\r\n    \"./css\": \"./swiper.min.css\",\r\n    \"./css/bundle\": \"./swiper-bundle.min.css\",\r\n    \"./css/a11y\": \"./modules/a11y/a11y.min.css\",\r\n    \"./css/autoplay\": \"./modules/autoplay/autoplay.min.css\",\r\n    \"./css/controller\": \"./modules/controller/controller.min.css\",\r\n    \"./css/effect-coverflow\": \"./modules/effect-coverflow/effect-coverflow.min.css\",\r\n    \"./css/effect-cube\": \"./modules/effect-cube/effect-cube.min.css\",\r\n    \"./css/effect-fade\": \"./modules/effect-fade/effect-fade.min.css\",\r\n    \"./css/effect-flip\": \"./modules/effect-flip/effect-flip.min.css\",\r\n}\r\n```\r\n\r\n\r\n```js\r\nimport 'swiper/css/bundle'\r\nimport Swiper from 'swiper/bundle'\r\n\r\n   import { mapState } from 'vuex';\r\n    import { nextTick } from 'vue'\r\n\r\nexport default {\r\n    mounted(){\r\n      this.$store.dispatch('home/getBannerList')//向服务端发送请求获取数据\r\n      nextTick(()=>{\r\n        // 不应在此处执行 new Swiper 因为此时的nextTick并不是由于`bannerList`更新导致的页面更新 且其不能处理数据后续更新导致的页面更新\r\n      })\r\n    },\r\n    computed:{\r\n      ...mapState('home',['bannerList'])//映射bannerList\r\n    },\r\n    watch:{//监听器\r\n        bannerList:{//bannerList监听器\r\n            immediate:true,\r\n            deep:true,\r\n            handler(newValue,oldValue){\r\n                nextTick(()=>{//监听到数据改变后,等待页面的` v-for=\"item in bannerList\" `渲染完毕后再执行回调,否则swiper功能异常\r\n                    var swiper = new Swiper(\r\n                      // \"#swiper_banner\", //css选择器或DOM对象\r\n                      this.$refs.swiper_banner,//vue的ref引用\r\n                      {\r\n                        autoplay:true,\r\n                        loop:true,\r\n                        navigation: {\r\n                          nextEl: \".swiper-button-next\" ,\r\n                          prevEl: \".swiper-button-prev\" ,\r\n                        },\r\n                        pagination: {\r\n                            el: \".swiper-pagination\" ,\r\n                            clickable: true\r\n                        },\r\n                    });\r\n                    console.log('nextTick执行完毕');\r\n                })\r\n                console.log('watch的回调执行完毕');\r\n            },\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```vue\r\n<!--banner轮播-->\r\n<!-- swiper-container是旧版类名 swiper是新版类名 实际上只需要写一个,携带了一些样式,并用于保证其子代的类名能够应用相关css属性 -->\r\n<div class=\"swiper swiper-container\" id=\"swiper_banner\" ref=\"swiper_banner\">\r\n    <div class=\"swiper-wrapper\">\r\n        <div class=\"swiper-slide\" v-for=\"item in bannerList\" :key=\"item.id\">\r\n            <img :src=\"item.imgUrl\" />\r\n        </div>\r\n    </div>\r\n    <!-- 如果需要分页器 -->\r\n    <div class=\"swiper-pagination Pagi_banner\"></div>\r\n    <!-- 如果需要导航按钮 -->\r\n    <div class=\"swiper-button-prev btnPrev_banner\"></div>\r\n    <div class=\"swiper-button-next btnNext_banner\"></div>\r\n</div>\r\n```\r\n\r\n## 根据页面滚动位置改变盒子高度(存在兼容性问题)\r\n```vue\r\n<template>\r\n    <div ref=\"cover\" class=\"cover\">\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    mounted() {\r\n        document.addEventListener('scroll', () => {//根据页面滚动改变div高度\r\n            /* css\r\n                min-height: 20vh;\r\n                height: 80vh;\r\n                max-height: 80vh;\r\n            */\r\n            let px_100vh = window.innerHeight; //px单位的100vh\r\n            let px_scrolled_height = window.pageYOffset; //px单位的滚动内容的高度\r\n            let vh_scrolled_height = px_scrolled_height / px_100vh * 100; //vh单位的滚动内容的高度\r\n\r\n            let vh_min_height = 20;\r\n            let vh_max_height = 80;\r\n            let px_current_height = this.$refs.cover.clientHeight;\r\n            let vh_current_height = px_current_height / px_100vh * 100;\r\n\r\n            let new_vh_current_height = vh_current_height - vh_scrolled_height\r\n            console.log(new_vh_current_height);\r\n            if (vh_min_height <= new_vh_current_height && new_vh_current_height <= vh_max_height) {\r\n                this.$refs.cover.style.height = new_vh_current_height + 'vh';\r\n                window.scroll(0, 0)\r\n            }\r\n        })\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.cover {\r\n    width: 100%;\r\n    min-height: 20vh;\r\n    height: 80vh;\r\n    max-height: 80vh;\r\n    background-color:red;\r\n}\r\n</style>\r\n```"}