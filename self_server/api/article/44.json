{"shortInfo":{"title":"ubuntu22.04配置过程命令记录","date":"2022-08-12T03:54:00.000Z","cover":"\\self_server\\assets\\images\\default_cover2.jpg","tags":["ubuntu22"],"hideAtIndex":true,"categories":"笔记","id":44,"countWords":3539,"readSeconds":353.9,"assetsbaseUrl":"/self_server/assets/"},"content":"# ubuntu22.04配置过程命令记录\r\nwin10关了开机自启的应用 什么程序都没运行 内存竟然吃了近5G CPU吹出来的风热的要死 卸了一堆应用关了一堆系统服务和应用服务内存仍然要吃2.4G 反观最新版的ubuntu22.04 启动至图形界面 只吃了1.5g内存 决定安装使用 在此记录下配置过程 以备不时之需\r\n\r\n\r\n## 目录\r\n- [ubuntu22.04配置过程命令记录](#ubuntu2204配置过程命令记录)\r\n  - [目录](#目录)\r\n  - [安装系统](#安装系统)\r\n    - [空间分配](#空间分配)\r\n  - [换源](#换源)\r\n  - [安装软件](#安装软件)\r\n    - [apt-get常用命令](#apt-get常用命令)\r\n    - [dpkg常用命令](#dpkg常用命令)\r\n  - [配置服务](#配置服务)\r\n  - [防火墙](#防火墙)\r\n  - [权限管理](#权限管理)\r\n    - [sudo命令提示用户不在sudoers中的问题的解决](#sudo命令提示用户不在sudoers中的问题的解决)\r\n  - [挂载NTFS分区](#挂载ntfs分区)\r\n    - [解决不能写入文件系统的问题](#解决不能写入文件系统的问题)\r\n  - [配置sshd](#配置sshd)\r\n  - [配置合上笔记本后不休眠](#配置合上笔记本后不休眠)\r\n  - [使用`./configure`编译文件时依赖报错问题的解决方法](#使用configure编译文件时依赖报错问题的解决方法)\r\n  - [ubuntu安装xfce4并配置xrdp过程记录](#ubuntu安装xfce4并配置xrdp过程记录)\r\n    - [安装及配置](#安装及配置)\r\n    - [在xfce中不能打开终端的解决](#在xfce中不能打开终端的解决)\r\n  - [ubuntu安装gnome并配置xrdp过程记录](#ubuntu安装gnome并配置xrdp过程记录)\r\n    - [安装及配置](#安装及配置-1)\r\n    - [解决“色彩管理设备” 弹窗](#解决色彩管理设备-弹窗)\r\n    - [解决“刷新系统软件源需要认证” / “refresh the system repositories” 弹窗](#解决刷新系统软件源需要认证--refresh-the-system-repositories-弹窗)\r\n    - [XRDP远程桌面连接Ubuntu后没有 Dock、桌面图标 背后的程序们](#xrdp远程桌面连接ubuntu后没有-dock桌面图标-背后的程序们)\r\n    - [使用默认桌面配置](#使用默认桌面配置)\r\n\r\n## 安装系统\r\n### 空间分配\r\n* `/` **根目录** 10-15-20g 足以 此处分配剩余的所有空间\r\n  * `/home` **家目录** 应当分配剩余的所有空间 此处未单独分配\r\n  * `/var` **存放数据库或程序输出日志的目录** 应当视情况而定 此处未单独分配\r\n  * `/boot` **引导分区** 512MB 可有可无 但最好单独分区 否则系统无法引导就只能重装系统了\r\n* `swap` **交换分区** 一倍内存大小足矣\r\n* `efi` **efi系统分区** 512MB\r\n\r\n## 换源\r\n\r\n**备份**\r\n```bash\r\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\r\n```\r\n\r\n**编辑创建新文件**\r\n```bash\r\nsudo gedit /etc/apt/sources.list\r\n```\r\n\r\n**写入文件**\r\n```bash\r\n# 清华源\r\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\r\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\r\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\r\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\r\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\r\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\r\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\r\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\r\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\r\n# 预发布软件源，不建议启用\r\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\r\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\r\n```\r\n\r\n**更新软件包列表（Source）**\r\n```bash\r\napt-get update\r\n    # 其他操作：\r\n    # 更新已安装的软件包 (谨慎使用，会导致linux内核升级到最新版本)\r\n    # apt-get upgrade\r\n    # 更新已安装的软件包（识别并处理依赖关系的改变）\r\n    # apt-get dist-upgrade\r\n```\r\n\r\n## 安装软件\r\n**常用软件包名称**\r\n* python3.10 \r\n* python3-pip\r\n\r\n### apt-get常用命令\r\n```bash\r\n# 普通安装\r\napt-get install PackageName\r\n# 安装指定包的指定版本\r\napt-get install PackageName=VersionName\r\n# 重新安装\r\napt-get --reinstall install PackageName\r\n```\r\n\r\n```bash\r\n# 修复依赖关系\r\napt-get -f install\r\n```\r\n\r\n```bash\r\n# 下载软件包的源码\r\napt-get source PackageName\r\n# 安装源码包所需要的编译环境\r\napt-get build-dep PackageName\r\n```\r\n\r\n\r\n```bash\r\n# 删除软件包, 保留配置文件\r\napt-get remove PackageName\r\n# 删除软件包, 同时删除配置文件\r\napt-get --purge remove PackageName\r\n```\r\n\r\n```bash\r\n# 清除 已下载的软件包 和 旧软件包\r\napt-get clean && apt-get autoclean\r\n```\r\n\r\n```bash\r\n# 搜索软件包\r\napt-cache search PackageName\r\n```\r\n\r\n```bash\r\n# 获取软件包的相关信息, 如说明、大小、版本等\r\napt-cache show PackageName\r\n```\r\n\r\n```bash\r\n# 查看该软件包需要哪些依赖包\r\napt-cache depends PackageName\r\n# 查看该软件包被哪些包依赖\r\napt-cache rdepends PackageName\r\n```\r\n\r\n```bash\r\n# 检查是否有损坏的依赖\r\napt-get check PackageName\r\n```\r\n\r\n### dpkg常用命令\r\n* dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。\r\n* 所有源自Debian的Linux发行版都使用dpkg，如Ubuntu\r\n\r\n```bash\r\n# 安装本地Debian软件包\r\ndpkg -i <package.deb>\r\n# 列出包内容\r\ndpkg -c <package.deb>\r\n# 提取包裹信息(可以查看包的正式名称，用于卸载)\r\ndpkg -I <package.deb>\r\n```\r\n\r\n```bash\r\n# 列出已安装的所有软件包\r\ndpkg -l\r\n# 列出安装的所有文件清单\r\ndpkg -L <package>\r\n```\r\n\r\n```bash\r\n# 移除一个已安装的包裹 并删掉数据和可执行文件\r\ndpkg -r <package>\r\n# 完全清除一个已安装的包裹 并删掉数据和可执行文件 并删除所有的配置文件\r\ndpkg -P <package>\r\n```\r\n\r\n```bash\r\n# 显示已安装包裹的信息\r\ndpkg -s <package>\r\n# 重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)\r\ndpkg-reconfigure <package>\r\n```\r\n\r\n\r\n## 配置服务\r\n```bash\r\n# 编辑配置为系统服务\r\nvim /usr/lib/systemd/system/XXXX.service\r\n#########################################\r\n[Unit]\r\nDescription=XXXX\r\nAfter=network.target\r\n[Service]\r\nTimeoutStartSec=1\r\nExecStart=/usr/local/bin/XXXX -c /etc/frp/XXXX.ini\r\nExecStop=/bin/kill $MAINPID\r\n[Install]\r\nWantedBy=multi-user.target\r\n###########################################\r\n\r\n# 启动 frp 并设置开机启动\r\nsystemctl enable XXXX\r\nsystemctl start XXXX\r\nsystemctl status XXXX\r\n \r\n# 部分服务器上,可以需要加 .service 后缀来操作,即:\r\nsystemctl enable XXXX.service\r\nsystemctl start XXXX.service\r\nsystemctl status XXXX.service\r\n```\r\n\r\n## 防火墙\r\n```bash\r\n# 查看防火墙状态\r\nsudo ufw status\r\n# 开启防火墙\r\nsudo ufw enable\r\n# 关闭防火墙\r\nsudo ufw disable\r\n```\r\n\r\n## 权限管理 \r\n### sudo命令提示用户不在sudoers中的问题的解决\r\n根据文件`/etc/sudoers`内容可知,只需要将指定用户添加到sudo组,指定的用户就能得到执行sudo命令的权限\r\n```txt\r\n# root 用户拥有所有权限 可在此添加一行给某个用户root权限\r\nroot    ALL=(ALL:ALL) ALL\r\n\r\n# admin 组的成员拥有root权限\r\n%admin ALL=(ALL) ALL\r\n\r\n# sudo 组的成员拥有执行任何命令的权限\r\n%sudo   ALL=(ALL:ALL) ALL\r\n```\r\n\r\n只需要将用户添加到sudo组(添加为附加组)\r\n```bash\r\nusermod 你的用户名 -G sudo\r\n# 修改用户组后可能需重启生效\r\n```\r\n\r\n\r\n## 挂载NTFS分区\r\n**查看所有磁盘分区情况**\r\n```bash\r\nfdisk -l\r\n```\r\n\r\n**查看磁盘分区挂载情况**\r\n```bash\r\ndf -h\r\n```\r\n**查看目标分区的UUID**\r\n```bash\r\nsudo blkid |grep sdb2\r\n```\r\n\r\n**查看ubuntu是否安装了ntfs-3g软件包**\r\n```bash\r\ndpkg -l | grep ntfs\r\n# 没有则安装\r\napt-get install ntfs-3g\r\n```\r\n\r\n**临时挂载磁盘**\r\n```bash\r\nmount -t ntfs-3g -o umask=022 /dev/sdc5 /mnt/E/\r\n```\r\n**卸载挂载的磁盘**\r\n```bash\r\numount /mnt/E/\r\n```\r\n\r\n**配置开机自动挂载磁盘**\r\n```bash\r\nsudo vim /etc/fstab\r\n```\r\n\r\n**配置方法1：**\r\n```bash\r\n# 挂载的分区使用默认的权限，也就是属于用户root 属于root组\r\nUUID=EA06BA3106B9FF1F /mnt/E/ ntfs-3g defaults 0 2\r\n```\r\n\r\n**配置方法2：**\r\n* 使用`UUID`的好处是可以保证在重新分区后仍然能够唯一定位一个分区 若使用`/dev/sdb3`的方式则会在分区数量改变后发生错误\r\n* `rw`表示读写 `dmask` 是目录权限掩码 `fmask` 是文件权限掩码 `uid` 和 `gid` 可分别通过 `id -u` `id -g`获取\r\n* `<dump>` 为0时 `dump` 工具不会对其备份,为 1 时则会\r\n* `<pass>` 为0时 `fsck` 工具不会对其检查,为 1 2 时则会,根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2\r\n```bash\r\n# <file system> <mount point>   <type>  <options>       <dump>  <pass>\r\nUUID=EA06BA3106B9FF1F /mnt/E/ ntfs-3g rw,uid=1000,gid=1000,dmask=022,fmask=111 0 2\r\n```\r\n\r\n**挂载测试：检查fstab有无错误**\r\n```bash\r\nmount -a\r\n```\r\n\r\n**创建软连接到桌面**\r\n```bash\r\nln -s /mnt/D ~/Desktop/D\r\nln -s /mnt/E ~/Desktop/E\r\n```\r\n\r\n\r\n### 解决不能写入文件系统的问题\r\n**问题:** 无法写入文件系统,且umount后,重新执行`mount -a`时,报错 `Could not mount read-write, trying read-only`\r\n\r\n**解决:** 该报错可能是由于文件系统错误导致的,须用ntfsfix命令修复之(ntfsfix包含在ntfs-3g中)\r\n```\r\nsudo ntfsfix /dev/sda4\r\nsudo umount /mnt/D/\r\nsudo umount /mnt/E/\r\n```\r\n\r\n## 配置sshd\r\n**安装**\r\n```\r\napt install openssh-server\r\n```\r\n**配置启动服务**\r\n```\r\n# 一条命令启动ssh和sshd\r\nsystemctl enable ssh\r\n```\r\n\r\n\r\n## 配置合上笔记本后不休眠\r\n**编辑文件/etc/systemd/logind.conf**\r\n```\r\nHandlePowerKey: 按下电源键后的行为，默认poweroff\r\nHandleSleepKey: 按下挂起键后的行为，默认suspend\r\nHandleHibernateKey: 按下休眠键后的行为，默认hibernate\r\nHandleLidSwitch: 合上笔记本盖后的行为，默认suspend（改为ignore即可）\r\n```\r\n**配置完毕后需重启服务**\r\n```\r\n# 如果执行下列代码后黑屏则需重启电脑\r\nsudo service systemd-logind restart\r\n```\r\n\r\n\r\n## 使用`./configure`编译文件时依赖报错问题的解决方法\r\n**故障重现**\r\n```bash\r\n./configure\r\n# 报错信息\r\n# checking for Qt5Svg >= 5.15.2... no\r\n# configure: error: Package requirements (Qt5Svg >= 5.15.2) were not met:\r\n# you may set the environment variables Qt5Svg_CFLAGS\r\n# and Qt5Svg_LIBS to avoid the need to call pkg-config.\r\n```\r\n```\r\n大概意思就是:提示缺少依赖Qt5Svg,并提示应当指定环境变量 Qt5Svg_CFLAGS Qt5Svg_LIBS\r\n```\r\n\r\n**查找相关库所在的包的包名**\r\n```bash\r\nsudo apt-cache search Qt5Svg\r\n# 输出: \r\n# libqt5svg5 - Qt 5 SVG module\r\n# libqt5svg5-dev - Qt 5 SVG module development files\r\n```\r\n**安装包名**\r\n```bash\r\nsudo apt-get install libqt5svg5-dev\r\n```\r\n\r\n**查找包的安装路径**\r\n```bash\r\ndpkg -L libqt5svg5-dev\r\n# 输出信息\r\n# /.\r\n# /usr\r\n# /usr/include\r\n# /usr/include/x86_64-linux-gnu\r\n# /usr/include/x86_64-linux-gnu/qt5\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QGraphicsSvgItem\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QSvgGenerator\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QSvgRenderer\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QSvgWidget\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QtSvg\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QtSvgDepends\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/QtSvgVersion\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qgraphicssvgitem.h\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qsvggenerator.h\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qsvgrenderer.h\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qsvgwidget.h\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qtsvgglobal.h\r\n# /usr/include/x86_64-linux-gnu/qt5/QtSvg/qtsvgversion.h\r\n# /usr/lib\r\n# /usr/lib/x86_64-linux-gnu\r\n# /usr/lib/x86_64-linux-gnu/cmake\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5Gui_QSvgIconPlugin.cmake\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5Gui_QSvgPlugin.cmake\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Svg\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Svg/Qt5SvgConfig.cmake\r\n# /usr/lib/x86_64-linux-gnu/cmake/Qt5Svg/Qt5SvgConfigVersion.cmake\r\n# /usr/lib/x86_64-linux-gnu/libQt5Svg.prl\r\n# /usr/lib/x86_64-linux-gnu/pkgconfig\r\n# /usr/lib/x86_64-linux-gnu/pkgconfig/Qt5Svg.pc\r\n# /usr/lib/x86_64-linux-gnu/qt5\r\n# /usr/lib/x86_64-linux-gnu/qt5/mkspecs\r\n# /usr/lib/x86_64-linux-gnu/qt5/mkspecs/modules\r\n# /usr/lib/x86_64-linux-gnu/qt5/mkspecs/modules/qt_lib_svg.pri\r\n# /usr/share\r\n# /usr/share/doc\r\n# /usr/share/doc/libqt5svg5-dev\r\n# /usr/share/doc/libqt5svg5-dev/copyright\r\n# /usr/lib/x86_64-linux-gnu/libQt5Svg.so \r\n# /usr/share/doc/libqt5svg5-dev/changelog.Debian.gz\r\n```\r\n\r\n\r\n**设定环境变量**\r\n根据上一步的输出可以推测出\r\n  * **头文件所在目录(XXX.h所在目录)** 和\r\n  * **库文件所在目录(XXX.so所在目录)**\r\n```bash\r\nexport Qt5Svg_CFLAGS=/usr/include/x86_64-linux-gnu/qt5/QtSvg\r\nexport Qt5Svg_LIBS=/usr/lib/x86_64-linux-gnu\r\n```\r\n\r\n**重新执行**\r\n```bash\r\n./configure\r\n```\r\n\r\n\r\n\r\n## ubuntu安装xfce4并配置xrdp过程记录\r\n当前ubuntu22.04的图像界面是gnome 而xrdp对gnome支持并不好 所以安装xfce4的图像界面\r\n\r\n### 安装及配置\r\n\r\n**安装xrdp**\r\n```\r\nsudo apt-get install xrdp\r\n```\r\n**安装xfce4**\r\n```\r\nsudo apt-get install xfce4\r\n```\r\n\r\n**配置xrdp开机自启动**\r\n```\r\n# xrdp xrdp的守护进程\r\nsudo service xrdp restart\r\nsudo systemctl enable xrdp\r\n# xrdp-sesman 会话管理的守护进程\r\nsudo service xrdp-sesman restart\r\nsudo systemctl enable xrdp-sesman\r\n```\r\n\r\n**配置 `xrdp` 的 `/etc/xrdp/startwm.sh`**\r\n```\r\n# 注释掉原先配置\r\n# test -x /etc/X11/Xsession && exec /etc/X11/Xsession\r\n# exec /bin/sh /etc/X11/Xsession\r\n\r\n# 添加新配置用于启动xfce4\r\nstartxfce4\r\n```\r\n**由于xrdp远程连接创建后，对登录使用的账户不知道该启动哪个桌面Session会话导致闪退,需手动创建**\r\n```\r\n# vi ~/.xsession\r\n# xfce4桌面\r\necho xfce4-session > ~/.xsession\r\n```\r\n\r\n\r\n### 在xfce中不能打开终端的解决\r\n\r\n**安装xfce4-terminal**\r\n```\r\nsudo apt install xfce4-terminal\r\n```\r\n**修改默认xfce4的默认terminal**  \r\n鼠标右键->`applications`->运行程序->输入：`xfce4-settings-manager`-> 找到:`默认应用程序` -> 工具 -> 修改默认terminal为**xfce终端**\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## ubuntu安装gnome并配置xrdp过程记录\r\n\r\n### 安装及配置\r\n\r\n\r\n**重新安装gnome使其自动解决依赖问题自动安装未安装的工具插件**\r\n```\r\nsudo apt-get install gnome\r\n```\r\n\r\n**安装xrdp**\r\n```\r\nsudo apt-get install xrdp\r\n```\r\n\r\n\r\n**配置xrdp开机自启动**\r\n```\r\n# xrdp xrdp的守护进程\r\nsudo service xrdp restart\r\nsudo systemctl enable xrdp\r\n# xrdp-sesman 会话管理的守护进程\r\nsudo service xrdp-sesman restart\r\nsudo systemctl enable xrdp-sesman\r\n```\r\n\r\n**配置 `xrdp` 的 `/etc/xrdp/startwm.sh`**\r\n```\r\n# 维持原先配置\r\ntest -x /etc/X11/Xsession && exec /etc/X11/Xsession\r\nexec /bin/sh /etc/X11/Xsession\r\n\r\n```\r\n\r\n**由于xrdp远程连接创建后，对登录使用的账户不知道该启动哪个桌面Session会话导致闪退,需手动创建**\r\n```\r\n# vi ~/.xsession\r\n# Unity 桌面(老版本)\r\necho unity> ~/.xsession\r\n \r\n# ubuntu-desktop 原始桌面\r\necho gnome-session > ~/.xsession\r\n```\r\n\r\n\r\n### 解决“色彩管理设备” 弹窗\r\n\r\n**创建文件 `/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla`**\r\n\r\n**并写入内容：**\r\n```\r\n[Allow Colord all Users]\r\nIdentity=unix-user:*\r\nAction=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile\r\nResultAny=no\r\nResultInactive=no\r\nResultActive=yes\r\n```\r\n\r\n\r\n### 解决“刷新系统软件源需要认证” / “refresh the system repositories” 弹窗\r\n\r\n**创建文件 `/etc/polkit-1/localauthority/50-local.d/46-allow-packagekit.pkla`**\r\n\r\n**并写入内容：**\r\n```\r\n[Allow Refresh Repository all Users]\r\nIdentity=unix-user:*\r\nAction=org.freedesktop.packagekit.system-sources-refresh\r\nResultAny=no\r\nResultInactive=no\r\nResultActive=yes\r\n```\r\n\r\n\r\n### XRDP远程桌面连接Ubuntu后没有 Dock、桌面图标 背后的程序们\r\n\r\n各个扩展程序可在如下目录中看到\r\ncd /usr/share/gnome-shell/extensions/\r\n\r\n**安装并执行**\r\n```\r\nsudo apt-get install gnome-extensions-app \r\ngnome-extensions-app \r\n# 然后弹出的窗口中开启dock\r\n```\r\n\r\n\r\n### 使用默认桌面配置\r\n**添加配置文件`~/.xsessionrc`**\r\n```bash\r\nexport GNOME_SHELL_SESSION_MODE=ubuntu\r\nexport XDG_CURRENT_DESKTOP=ubuntu:GNOME\r\nexport XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg\r\n```"}