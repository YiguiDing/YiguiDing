{"shortInfo":{"title":"vue3_blog项目笔记","date":"2022-10-19T11:23:00.000Z","cover":"\\self_server\\assets\\images\\vue3_blog项目笔记\\default_cover2.jpg","tags":["vue3","blog"],"categories":"笔记","imageMin":true,"id":1876821530,"countWords":4822,"readSeconds":482.2,"assetsbaseUrl":"/self_server/assets/"},"content":"## 目录\r\n- [目录](#目录)\r\n- [导航条毛玻璃效果实现](#导航条毛玻璃效果实现)\r\n- [图片背景实现](#图片背景实现)\r\n- [封面文字动态输入效果实现](#封面文字动态输入效果实现)\r\n- [为数字添加单位函数实现](#为数字添加单位函数实现)\r\n- [分页器实现](#分页器实现)\r\n- [滚动事件切换类名animate改变封面高度](#滚动事件切换类名animate改变封面高度)\r\n- [文章页Markdown内容的渲染](#文章页markdown内容的渲染)\r\n- [filter实现文章页封面效果](#filter实现文章页封面效果)\r\n- [vue中hash路由与markdown中锚点链接冲突的解决及链接跳转的实现](#vue中hash路由与markdown中锚点链接冲突的解决及链接跳转的实现)\r\n- [markdown中script标签内代码不执行问题的解决](#markdown中script标签内代码不执行问题的解决)\r\n- [使markdown中script标签支持jQuery(`$`)语法](#使markdown中script标签支持jquery语法)\r\n- [使markdown支持渲染KaTex语法数学公式及复制KaTex源代码](#使markdown支持渲染katex语法数学公式及复制katex源代码)\r\n- [归档页github风格代码贡献统计效果的组件实现](#归档页github风格代码贡献统计效果的组件实现)\r\n- [将文章标题字符串计算HASH作为ID](#将文章标题字符串计算hash作为id)\r\n- [通过front-matter将markdown文章首部的yml格式信息获取](#通过front-matter将markdown文章首部的yml格式信息获取)\r\n- [在ECMAScript标准语法下获取`__filename`及`__dirname`](#在ecmascript标准语法下获取__filename及__dirname)\r\n- [文件枚举函数的实现和使用](#文件枚举函数的实现和使用)\r\n- [imagemin图像压缩](#imagemin图像压缩)\r\n\r\n\r\n## 导航条毛玻璃效果实现\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-06-24-02.png)\r\n\r\n```less\r\n//contrast对比度\r\n//saturate饱和度\r\n//blur() 模糊(像素)\r\n@backdrop_Filter:saturate(200%) contrast(80%) blur(20px);\r\n.cssName{\r\n    backdrop-filter: @backdrop_Filter;\r\n    -webkit-backdrop-filter: @backdrop_Filter;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n## 图片背景实现\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-06-25-09.png)\r\n\r\n```html\r\n<template>\r\n  <img class=\"bg_img\" src=\"./images/1.jpg\" alt=\"\">\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'BackGround'\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.bg_img {\r\n  z-index: -999;//放到最底层\r\n  position: fixed;//相对浏览器窗口定位\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;//宽为视口宽度的100%\r\n  height: 100vh; //高度为100%视口宽度\r\n  object-fit: cover;//内容以封面方式适应盒子宽高\r\n  object-position: center top;//内容对齐方式，水平方向居中，垂直方向顶部对齐\r\n}\r\n</style>\r\n```\r\n\r\n\r\n## 封面文字动态输入效果实现\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-06-25-50.png)\r\n\r\n<span id=\"span\" data-value=\"在绝望中坚持真理,在荒诞中奋起抵抗.\" ></span><span class=\"_\">_</span>\r\n<br>\r\n<button id=\"btn\">点击此处触发效果</button>\r\n<style>\r\n._{\r\n    display: inline-block;\r\n    margin-left: 5px;\r\n    animation: dash_flash 0.7s ease infinite;\r\n}\r\n@keyframes dash_flash {\r\n    /* 定义动画 */\r\n    from{opacity: 0;}\r\n    to{opacity: 1;}\r\n}\r\n#btn{\r\n    padding:5px;\r\n    background-color:white;\r\n    color:black;\r\n}\r\n</style>\r\n<script>\r\nlet span = document.querySelector(\"#span\")\r\nlet btn = document.querySelector(\"#btn\")\r\nbtn.addEventListener('click',async ()=>{\r\n    try{\r\n        await autoTyping(span,'',span.dataset['value'],150)\r\n        await waitMs(2000)\r\n        await autoBackSpacing(span,span.dataset['value'],'',50)\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n})\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nasync function autoTyping(DomElement, start_TextString, ended_TextString, interval = 150) {\r\n    return new Promise(async (TypingResolve, TypingReject) => {\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function WriteCharOnce() {\r\n                return new Promise((WriteCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (index < ended_TextString.length) {\r\n                            let char = ended_TextString[index++]\r\n                            DomElement.innerText += (char == ' ') ? '\\xa0' : char; //空格无法直接拼接,需要转移\r\n                            WriteCharOnceResolve('isTyping')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            WriteCharOnceResolve('done') //WriteCharOnce 的 done\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await WriteCharOnce() == 'isTyping');\r\n            TypingResolve('done') //autoTyping 的 done\r\n        } else {\r\n            TypingReject('in_use');\r\n        }\r\n    });\r\n}\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nasync function autoBackSpacing(DomElement, start_TextString, ended_TextString = '', interval = 150) {\r\n    return new Promise(async (BackSpaceResolve, BackSpaceReject) => {\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function BackSpaceCharOnce() {\r\n                return new Promise((BackSpaceCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (DomElement.innerText.length != 0 && DomElement.innerText != ended_TextString) {\r\n                            DomElement.innerText = DomElement.innerText.substring(0, DomElement.innerText.length - 1) //删除最后一个字符\r\n                            BackSpaceCharOnceResolve('isBackSpacing')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            BackSpaceCharOnceResolve('done')\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await BackSpaceCharOnce() == 'isBackSpacing');\r\n            BackSpaceResolve('done');\r\n        } else {\r\n            BackSpaceReject('in_use');\r\n        }\r\n    });\r\n}\r\n/**\r\n * \r\n * @param {延迟时间} timeout 500\r\n * @returns Promise对象\r\n */\r\nfunction waitMs(timeout) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve('done');\r\n        }, timeout);\r\n    });\r\n}\r\n</script>\r\n\r\n\r\n\r\n```js\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nexport const autoTyping = async function (DomElement, start_TextString, ended_TextString, interval = 150) {\r\n    return new Promise(async (TypingResolve, TypingReject) => {\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function WriteCharOnce() {\r\n                return new Promise((WriteCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (index < ended_TextString.length) {\r\n                            let char = ended_TextString[index++]\r\n                            DomElement.innerText += (char == ' ') ? '\\xa0' : char; //空格无法直接拼接,需要转移\r\n                            WriteCharOnceResolve('isTyping')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            WriteCharOnceResolve('done') //WriteCharOnce 的 done\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await WriteCharOnce() == 'isTyping');\r\n            TypingResolve('done') //autoTyping 的 done\r\n        } else {\r\n            TypingReject('in_use');\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/****\r\n    * @param {DOM元素} DomElement \r\n    * @param {初始字符串} start_TextString \r\n    * @param {目标字符串} ended_TextString \r\n    * @param {字符写入速度} interval \r\n    */\r\nexport const autoBackSpacing = async function (DomElement, start_TextString, ended_TextString = '', interval = 150) {\r\n    return new Promise(async (BackSpaceResolve, BackSpaceReject) => {\r\n        if (DomElement.in_use != true) {//节流阀:判断是否正在使用中\r\n            DomElement.in_use = true;//节流阀:标记为正在使用中\r\n            let index = 0;\r\n            DomElement.innerText = start_TextString //初始化\r\n            function BackSpaceCharOnce() {\r\n                return new Promise((BackSpaceCharOnceResolve, reject) => {\r\n                    setTimeout(() => {\r\n                        if (DomElement.innerText.length != 0 && DomElement.innerText != ended_TextString) {\r\n                            DomElement.innerText = DomElement.innerText.substring(0, DomElement.innerText.length - 1) //删除最后一个字符\r\n                            BackSpaceCharOnceResolve('isBackSpacing')\r\n                        } else {\r\n                            DomElement.in_use = false;//节流阀:标记为使用完毕\r\n                            BackSpaceCharOnceResolve('done')\r\n                        }\r\n                    }, interval);\r\n                });\r\n            }\r\n            while (await BackSpaceCharOnce() == 'isBackSpacing');\r\n            BackSpaceResolve('done');\r\n        } else {\r\n            BackSpaceReject('in_use');\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * \r\n * @param {延迟时间} timeout 500\r\n * @returns Promise对象\r\n */\r\nexport const waitMs = function (timeout) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve('done');\r\n        }, timeout);\r\n    });\r\n}\r\n```\r\n\r\n\r\n## 为数字添加单位函数实现\r\n\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-06-59-04.png)\r\n\r\n```js\r\n//使用\r\nlet result = getNumberWithUnit(12345,2);\r\nconsole.log(result) // 12.34k\r\n```\r\n\r\n```js\r\n/**\r\n * @param {数字} number 12345\r\n * @param {保留小数位数} Fixed 2\r\n * @returns 12.34k\r\n */\r\nexport function getNumberWithUnit(number, Fixed = 1) {\r\n    number = Number(number); //数值化\r\n    if (number == 0) return '0';//处理0\r\n    let sign = number > 0 ? '' : (number = - number, '-') //处理负数\r\n\r\n    let units = [//单位和进率 关系\r\n        { char: '' , multiple: 1     },\r\n        { char: 'k', multiple: 1000  },\r\n        { char: 'w', multiple: 10000 },\r\n    ];\r\n\r\n    let i = 0 ;\r\n    let unit = units[i];\r\n    for (; i < units.length; i++) {\r\n        if (number / units[i].multiple > 1) {\r\n            unit = units[i]\r\n            continue;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (unit == units[0]) {\r\n        return sign + number\r\n    } else {\r\n        return sign + (number / unit.multiple).toFixed(Fixed) + unit.char\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 分页器实现\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-07-07-59.png)\r\n\r\n```html\r\n<!-- 使用 -->\r\n<Pagination :currentPage=\"pageRange_current\" :totalPage=\"pageRange_max\" :subPaginationSize=\"5\" @gotoPage=\"gotoPage\"></Pagination>\r\n<script>\r\nexport default {\r\n    methods: {\r\n        gotoPage(index) {\r\n            this.getHomeArticlesInfo(index);\r\n        }\r\n    },\r\n}\r\n</script>\r\n```\r\n\r\n```html\r\n<template>\r\n  <div class=\"pagination\">\r\n    <a class=\"left\" @click=\"emitPages(currentPage-1)\">&lt;</a>\r\n    <a class=\"firstPage\" v-if=\"SubPagination.start_SubPagination != 1\" @click=\"emitPages(1)\">1</a>\r\n    <a class=\"dots\" v-if=\"SubPagination.start_SubPagination != 1\">...</a>\r\n    <a class=\"subPagination\" v-for=\"index in SubPagination.yieldRange\" :key=\"index\" :class=\"{'currentPage':index==currentPage}\" @click=\"emitPages(index)\"\r\n    >{{index}}\r\n    </a>\r\n    <a class=\"dots\" v-if=\"SubPagination.ended_SubPagination != totalPage\">...</a>\r\n    <a class=\"lastPage\" v-if=\"SubPagination.ended_SubPagination != totalPage\" @click=\"emitPages(totalPage)\">{{totalPage}}</a>\r\n    <a class=\"right\" @click=\"emitPages(currentPage+1)\">&gt;</a>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'Pagination',\r\n    props:['currentPage','totalPage','subPaginationSize'],\r\n    emits:['gotoPage'],\r\n    methods:{\r\n        yieldRange(start,ended){//生成数组\r\n            let result = [];\r\n            if(start>ended) return result;\r\n            for(let i = start;i<=ended;i++){\r\n                result.push(i)\r\n            }\r\n            return result;\r\n        },\r\n        yieldSubPagination(currentPage){//计算页码\r\n            let start_SubPagination = currentPage - Number.parseInt(this.subPaginationSize/2);\r\n            let ended_SubPagination = currentPage + Number.parseInt(this.subPaginationSize/2);\r\n            if(start_SubPagination<=1) start_SubPagination = 1;\r\n            if(ended_SubPagination>=this.totalPage) ended_SubPagination = this.totalPage;\r\n            return {\r\n                start_SubPagination,\r\n                ended_SubPagination,\r\n                yieldRange:this.yieldRange(start_SubPagination,ended_SubPagination)\r\n            }\r\n        },\r\n        emitPages(newPage){\r\n            console.log(\"newPage:\",newPage);\r\n            console.log(\"totalPage:\",this.totalPage);\r\n            if(newPage>=1 && newPage <= this.totalPage){\r\n                this.$emit('gotoPage',newPage)\r\n            }\r\n        }\r\n    },\r\n    computed:{\r\n        SubPagination(){\r\n            return this.yieldSubPagination(this.currentPage)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.pagination{\r\n    text-align: center;\r\n    margin: 20px;\r\n    a{\r\n        display: inline-block;\r\n        padding: 5px;\r\n        margin-right:5px;\r\n        margin-bottom:5px;\r\n        min-width: 50px;\r\n    }\r\n}\r\n</style>\r\n```\r\n\r\n\r\n## 滚动事件切换类名animate改变封面高度\r\n\r\n![](./images/vue3_blog项目笔记/d32023ri0fj234j003.gif)\r\n\r\n```html\r\n<template>\r\n    <div ref=\"cover\" class=\"cover\" :class=\"{\"small\":coverSmall}\" >\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { throttle } from 'lodash';\r\nexport default {\r\n    name: 'Cover',\r\n    data() {\r\n        return {\r\n            coverSmall:false,\r\n            updataSignThrottle:undefined,\r\n        }\r\n    },\r\n    computed: {\r\n    },\r\n    methods: {\r\n        updataSign_coverSmall(){\r\n            let newVal = window.pageYOffset\r\n            if(newVal>0 && this.coverSmall != true){\r\n                this.coverSmall = true\r\n                window.scroll(0, 0)\r\n            }else if(newVal<=0 && this.coverSmall != false){\r\n                this.coverSmall = false\r\n                window.scroll(0, 0)\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.updataSignThrottle = throttle(this.updataSign_coverSmall,50,{leading:true}) //节流,throttle返回一个带有节流功能的事件处理函数\r\n        window.addEventListener('scroll',this.updataSignThrottle)\r\n    },\r\n    beforeUnmount(){\r\n        window.removeEventListener('scroll',this.updataSignThrottle)//移除事件处理函数\r\n        console.log('removeEventListener');\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.cover {\r\n    width: 100%;\r\n    height: 75vh;\r\n    transition: height ease 1s ;\r\n    &.small{\r\n        height: 30vh;//改变高度\r\n    }\r\n}\r\n</style>\r\n```\r\n\r\n## 文章页Markdown内容的渲染\r\n*  Markdown的渲染器marked的配置\r\n* hljs代码高亮配置\r\n* Markdown的样式\r\n* hijs代码高亮样式配置\r\n* 资源相对路径修改\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-07-50-41.png)\r\n\r\n```js\r\n// Create reference instance\r\nimport { marked } from 'marked';//markdown的渲染脚本\r\n\r\nimport hljs from 'highlight.js';//hijs的脚本\r\nimport './base16_dracula.min.css' //highlight的某个样式文件\r\nimport 'github-markdown-css/github-markdown-dark.css' //github风格的Markdown样式\r\n\r\nconst options = {\r\n  renderer: new marked.Renderer(),\r\n\r\n  langPrefix: 'hljs language-', // highlight.js css expects a top-level 'hljs' class.\r\n  highlight: function (code, lang) {\r\n    // ```lang\r\n    // code\r\n    // code\r\n    // code\r\n    // ```\r\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\r\n    return hljs.highlight(code, { language:language }).value;\r\n  },\r\n  // baseUrl: //为所有相对路径添加的前缀\r\n  pedantic: false,// 只解析符合Markdwon定义的，不修正Markdown的错误\r\n  gfm: true,// 启动类似于Github样式的Markdown语法\r\n  breaks: false,\r\n  sanitize: false,//原始输出，忽略HTML标签（关闭后，可直接渲染HTML标签）\r\n  smartypants: false,\r\n  xhtml: false\r\n}\r\n\r\n// Set options\r\nmarked.setOptions(options);\r\n\r\n// export\r\nexport const markdownParser = (rawContent,assetsbaseUrl) => marked.parse(rawContent,{baseUrl:assetsbaseUrl})\r\n// export const markdownParser = (rawContent) => marked.parse(rawContent)\r\n```\r\n\r\n```less\r\n.markdown-body { //自定义样式： .markdown-body 为 github-markdown-css 中定义的类名\r\n    background-color: unset;\r\n\r\n    ul {\r\n        position: relative;\r\n\r\n        li {\r\n            position: relative;\r\n\r\n            &::before,\r\n            &::after {\r\n                content: '';\r\n                display: inline-block;\r\n                position: absolute;\r\n                box-sizing: border-box;\r\n            }\r\n\r\n            &::after {\r\n                left: -1.25em;\r\n                top: 0.75em;\r\n                width: 0.75em;\r\n                height: 0.75em;\r\n                background-color: #58a6ff;\r\n                border: 2px solid white;\r\n                transform: translate(0, -50%);\r\n                border-radius: 50%;\r\n            }\r\n\r\n            &::before {\r\n                left: -1em;\r\n                top: 1em;\r\n                width: 0.25em;\r\n                height: 100%;\r\n                background-color: white;\r\n            }\r\n\r\n            &:last-child::before {\r\n                content: none;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n## filter实现文章页封面效果\r\n\r\n\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-09-38-34.png)\r\n\r\n虽呈现效果一般，但已经是一种折中了，封面宽度若和版心宽度一致则会导致封面高度的等比例放大，在pc端浏览效果不佳，封面的高度占用了整个浏览器视口，若用同时指定宽高的方式规定封面的高度则会导致封面的变形或是被封面截取导致封面部分信息丢失。\r\n\r\n```html\r\n<template>\r\n  <div class=\"article_header\">\r\n      <div class=\"cover\" v-if=\"article_Attrs.cover\">\r\n          <img :src=\"article_Attrs.cover\" alt=\"\" class=\"main_Img\">\r\n          <img :src=\"article_Attrs.cover\" alt=\"\" class=\"mask_Img\">\r\n      </div>\r\n  </div>\r\n</template>\r\n<style lang=\"less\">\r\n.article_header {\r\n    text-align: center;\r\n\r\n    .cover {\r\n        width: 100%;\r\n        height: 30vh;\r\n        overflow: hidden;\r\n        position: relative;\r\n\r\n        .main_Img {\r\n            z-index: 1;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: scale-down;\r\n            object-position: center center;\r\n        }\r\n\r\n        .mask_Img {\r\n            z-index: 0;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            filter: contrast(200%) blur(50px);\r\n            // object-fit:  scale-down;\r\n            // object-position: center center;\r\n        }\r\n    }\r\n  }\r\n</style>\r\n```\r\n\r\n\r\n\r\n\r\n## vue中hash路由与markdown中锚点链接冲突的解决及链接跳转的实现\r\n\r\n![](./images/vue3_blog项目笔记/fiwqefj0302.gif)\r\n\r\n```html\r\n<template>\r\n    <div ref=\"markdown_body\" v-html=\"article_HTML\" @click=\"clickHandle\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\nexport default {\r\n    computed: {\r\n      ...mapGetters('article', ['article_HTML']),\r\n    },\r\n    methods: {\r\n        ...mapActions('article', ['getArticleById']),\r\n        clickHandle(event){\r\n            let address = event.target.getAttribute(\"href\")\r\n            if (address) {//有address\r\n                if(address[0] == '#') {//判断是否为锚点\r\n                    this.goToElementById(address);\r\n                }else if(address[0] == '/') {//绝对地址\r\n                    window.location.replace(address)\r\n                }else{//url地址\r\n                    window.location.replace(address)\r\n                }\r\n                event.preventDefault() //有address则禁止默认事件的触发\r\n            } else {\r\n                //不禁止\r\n            }\r\n        },\r\n        goToElementById(id) {//滚动到指定元素\r\n            document.querySelector( decodeURI(id) ).scrollIntoView({\r\n                behavior: \"smooth\", // 定义动画过渡效果， \"auto\"或 \"smooth\" 之一。默认为 \"auto\"\r\n                block: \"center\",// 定义垂直方向的对齐， \"start\", \"center\", \"end\", 或 \"nearest\"之一。默认为 \"start\"\r\n                inline: \"nearest\" // 定义水平方向的对齐， \"start\", \"center\", \"end\", 或 \"nearest\"之一。默认为 \"nearest\"\r\n            })\r\n        },\r\n    },\r\n    watch:{\r\n      \"$route.params\":{//监听路由变化请求文章内容\r\n          deep:true,\r\n          immediate:true,\r\n          handler(){\r\n              this.getArticleById(this.$route.params.id);\r\n          }\r\n      },\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\n\r\n## markdown中script标签内代码不执行问题的解决\r\n\r\n* script只会在DOM第一次加载的时候执行，\r\n* 通过innerHTML方式插入的script标签不会执行，\r\n* 通过createElement(script);appendChild()附加的标签会执行\r\n\r\n\r\n```html\r\n<template>\r\n    <div ref=\"markdown_body\" v-html=\"article_HTML\" @click=\"clickHandle\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\nexport default {\r\n    computed: {\r\n        ...mapGetters('article', ['article_HTML']),\r\n    },\r\n    methods: {\r\n        ...mapActions('article', ['getArticleById']),\r\n    },\r\n    watch:{\r\n        \"$route.params\":{//监听路由变化请求文章内容\r\n            deep:true,\r\n            immediate:true,\r\n            handler(){\r\n                this.getArticleById(this.$route.params.id);\r\n            }\r\n        },\r\n        article_HTML:{//监听article_HTML的更新\r\n            handler(){\r\n                nextTick(()=>{//nextTick是为了等待Dom元素渲染完毕，因为应当等DOM元素渲染完毕后执行script脚本\r\n                    //附加文章中的script脚本\r\n                    //script只会在DOM第一次加载的时候执行，通过innerHTML方式插入的script标签不会执行，通过createElement(script);appendChild()附加的标签会执行\r\n                    this.$refs.markdown_body.querySelectorAll(\"script\").forEach(element => {\r\n                        var script = document.createElement(\"script\")\r\n                        if(element.src)//外链式\r\n                            script.src = element.src\r\n                        if(element.innerHTML)//内联代码\r\n                            script.innerHTML = element.innerHTML\r\n                        this.$refs.markdown_body.appendChild(script)\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\n\r\n## 使markdown中script标签支持jQuery(`$`)语法\r\n\r\n```html\r\n<template>\r\n    <div ref=\"markdown_body\" v-html=\"article_HTML\" @click=\"clickHandle\"></div>\r\n</template>\r\n\r\n<script>\r\nimport jQuery from \"jQuery\" //jQuery\r\nimport { mapActions, mapGetters } from 'vuex'\r\nexport default {\r\n    computed: {\r\n        ...mapGetters('article', ['article_HTML']),\r\n    },\r\n    methods: {\r\n        ...mapActions('article', ['getArticleById']),\r\n    },\r\n    watch:{\r\n        \"$route.params\":{//监听路由变化请求文章内容\r\n            deep:true,\r\n            immediate:true,\r\n            handler(){\r\n                this.getArticleById(this.$route.params.id);\r\n            }\r\n        },\r\n        article_HTML:{//监听article_HTML的更新\r\n            handler(){\r\n                nextTick(()=>{//nextTick是为了等待Dom元素渲染完毕，因为应当等DOM元素渲染完毕后执行script脚本\r\n                    //附加文章中的script脚本\r\n                    //script只会在DOM第一次加载的时候执行，通过innerHTML方式插入的script标签不会执行，通过createElement(script);appendChild()附加的标签会执行\r\n                    this.$refs.markdown_body.querySelectorAll(\"script\").forEach(element => {\r\n                        var script = document.createElement(\"script\")\r\n                        if(element.src)//外链式\r\n                            script.src = element.src\r\n                        if(element.innerHTML)//内联代码\r\n                            script.innerHTML = element.innerHTML\r\n                        this.$refs.markdown_body.appendChild(script)\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    },\r\n    created(){\r\n        window.$ = jQuery  //for jquery \r\n    }\r\n}\r\n</script>\r\n```\r\n\r\n\r\n## 使markdown支持渲染KaTex语法数学公式及复制KaTex源代码\r\n\r\n渲染前后效果\r\n![](./images/vue3_blog项目笔记/2022-10-19-09-35-14.png)\r\n![](./images/vue3_blog项目笔记/2022-10-19-09-34-04.png)\r\n\r\n```html\r\n<template>\r\n    <div ref=\"markdown_body\" v-html=\"article_HTML\" @click=\"clickHandle\"></div>\r\n</template>\r\n\r\n<script>\r\n//katex\r\nimport \"katex/dist/katex.css\" //katex样式\r\nimport \"katex/dist/katex.js\" //katex核心库\r\nimport renderMathInElement from \"katex/contrib/auto-render/auto-render\" //自动渲染扩展库\r\nimport \"katex/contrib/copy-tex\" //copy-tex扩展库 使得复制katex公式将得到katex源代码 $\\log_2{N}$\r\n\r\nimport { mapActions, mapGetters } from 'vuex'\r\nexport default {\r\n    computed: {\r\n        ...mapGetters('article', ['article_HTML']),\r\n    },\r\n    methods: {\r\n        ...mapActions('article', ['getArticleById']),\r\n    },\r\n    watch:{\r\n        \"$route.params\":{//监听路由变化请求文章内容\r\n            deep:true,\r\n            immediate:true,\r\n            handler(){\r\n                this.getArticleById(this.$route.params.id);\r\n            }\r\n        },\r\n        article_HTML:{//监听article_HTML的更新\r\n            handler(){\r\n                nextTick(()=>{//nextTick是为了等待Dom元素渲染完毕\r\n                    //自动渲染katex\r\n                    renderMathInElement(\r\n                        this.$refs.markdown_body,\r\n                        {\r\n                            delimiters: [\r\n                                {left: \"$$\", right: \"$$\", display: true},\r\n                                {left: \"$\", right: \"$\", display: false},\r\n                                {left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true},\r\n                                {left: \"\\\\begin{align}\", right: \"\\\\end{align}\", display: true},\r\n                                {left: \"\\\\begin{alignat}\", right: \"\\\\end{alignat}\", display: true},\r\n                                {left: \"\\\\begin{gather}\", right: \"\\\\end{gather}\", display: true},\r\n                                {left: \"\\\\(\", right: \"\\\\)\", display: false},\r\n                                {left: \"\\\\[\", right: \"\\\\]\", display: true}\r\n                            ]\r\n                        }\r\n                    );\r\n                })\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n```\r\n\r\n## 归档页github风格代码贡献统计效果的组件实现\r\n\r\n![](./images/vue3_blog项目笔记/2022-10-19-09-05-47.png)\r\n\r\n\r\n```html\r\n<template>\r\n    <div id=\"GitCalendar_bg\">\r\n        <h2 class=\"title\">博客内容更新及站点维护提交次数统计</h2>\r\n        <div class=\"_container\">\r\n            <div ref=\"GitCalendar\"></div>\r\n        </div>\r\n        <div id=\"tooltip\"></div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { SVGGraph } from 'calendar-graph/es/index.js';\r\nimport moment from 'moment';\r\nimport { mapActions, mapState } from 'vuex';\r\nexport default {\r\n    name: 'GitCalendar',\r\n    methods: {\r\n        SVGGraph,\r\n        ...mapActions('commit', ['getCommitData']),\r\n        tooltipInit() {\r\n            const tip = document.getElementById('tooltip');\r\n            let elems = document.getElementsByClassName('cg-day');\r\n            const mouseOver = function (e) {\r\n                e = e || window.event;\r\n                const elem = e.target || e.srcElement;\r\n                const rect = elem.getBoundingClientRect();\r\n                const count = elem.getAttribute('data-count');\r\n                const date = elem.getAttribute('data-date');\r\n                tip.style.display = 'block';\r\n                tip.textContent = `${count} contributions on ${date}`;\r\n                const w = tip.getBoundingClientRect().width;\r\n                tip.style.left = `${rect.left - (w / 2) + 6}px`;\r\n                tip.style.top = `${rect.top - 35}px`;\r\n            };\r\n            const mouseOut = function (e) {\r\n                e = e || window.event;\r\n                tip.style.display = 'none';\r\n            };\r\n            for (let i = 0; i < elems.length; i++) {\r\n                if (document.body.addEventListener) {\r\n                    elems[i].addEventListener('mouseover', mouseOver, false);\r\n                    elems[i].addEventListener('mouseout', mouseOut, false);\r\n                } else {\r\n                    elems[i].attachEvent('onmouseover', mouseOver);\r\n                    elems[i].attachEvent('onmouseout', mouseOut);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState('commit', ['CommitData'])\r\n    },\r\n    watch: {\r\n        CommitData(newVal, oldVal) {\r\n            // const newVal = [ //数据格式\r\n            //   { date: '2016-01-01', count: 1 },\r\n            //   { date: '2016-01-03', count: 4 },\r\n            //   { date: '2016-01-06', count: 2 },\r\n            //   // ...and so on\r\n            // ];\r\n            let mySVGGraph = new this.SVGGraph(this.$refs.GitCalendar, newVal, {\r\n                startDate: new Date(moment().add(-1, 'years')),//开始日期为去年的今日\r\n                endDate: new Date(moment()),//结束时间为今日\r\n                colorFun: (v) => {\r\n                    let colors = [ // https://colordesigner.io/\r\n                        '#d8f1ce',\r\n                        // '#b1e39e',\r\n                        // '#8ad56d',\r\n                        '#63c73d',\r\n                        '#4b9a2c',\r\n                        '#33691E',\r\n                    ];\r\n                    let count = v.count < colors.length ? v.count : colors.length - 1\r\n                    let result = colors[count]\r\n                    return result;\r\n                },\r\n                onClick: v => {\r\n                    // console.log('12312321');\r\n                },\r\n                size: 12,\r\n                space: 1,\r\n                padX: 20,\r\n                padY: 20,\r\n            })\r\n            this.tooltipInit();\r\n        }\r\n    },\r\n    mounted() {\r\n        this.getCommitData();\r\n    }\r\n}\r\n\r\n</script>\r\n<style lang=\"less\">\r\n#GitCalendar_bg {\r\n    width: 100%;\r\n    text-align: center;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\r\n    padding-top: 10px;\r\n    .title {\r\n        color: black;\r\n        font-size: medium;\r\n    }\r\n\r\n    ._container {\r\n        overflow: auto;\r\n\r\n        &::-webkit-scrollbar {\r\n            display: none; // 清除滚动条\r\n        }\r\n    }\r\n}\r\n\r\n#tooltip {\r\n    display: none;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    height: 20px;\r\n    background-color: rgba(0, 0, 0, .8);\r\n    color: #fff;\r\n    padding: 0px 10px;\r\n    border-radius: 3px;\r\n}\r\n\r\n#tooltip:after {\r\n    display: block;\r\n    position: absolute;\r\n    content: '';\r\n    bottom: -6px;\r\n    left: 50%;\r\n    margin-left: -6px;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 6px solid transparent;\r\n    border-right: 6px solid transparent;\r\n    border-top: 6px solid rgba(0, 0, 0, .8);\r\n}\r\n</style>\r\n```\r\n\r\n\r\n```js\r\n// 数据的生成\r\nconst counts = (arr, value) => arr.reduce((a, v) => v === value ? a + 1 : a + 0, 0)\r\nimport { execSync } from 'child_process'\r\nimport { log } from 'console'\r\nfunction getCommitData(weeks = '55') {\r\n  const _cmd = `git log --all --since=\"${weeks}.weeks\" --date=iso --pretty=format:\"%ad\"`//git log --all --since=\"40.weeks\" --date=iso --pretty=format:\"%ad\"\r\n  const _gitLog = execSync(_cmd).toString()\r\n  const gitlogData = _gitLog.split('\\n').map(e => {\r\n    return e.split(' ')[0]\r\n  })\r\n  // console.log(gitlogData);\r\n  const uniaueDate = [...new Set(gitlogData)]\r\n  const commitData = []\r\n  for (const e of uniaueDate) {\r\n    commitData.push({\r\n      date: e,\r\n      count: counts(gitlogData, e)\r\n    })\r\n  }\r\n  return commitData\r\n}\r\nawait fs.writeFile(path.join(webSiteRootDir, './api/archive_commitData.json'), JSON.stringify(getCommitData())) //写入新文件名\r\n```\r\n\r\n## 将文章标题字符串计算HASH作为ID\r\n\r\n```js\r\nimport stringHash from 'string-hash'\r\nlet id = stringHash(article_title)//给文章生成id\r\n```\r\n\r\n\r\n## 通过front-matter将markdown文章首部的yml格式信息获取\r\n\r\n```js\r\nimport FM from 'front-matter'\r\nlet fm = FM(articleTEXT);\r\n```\r\n\r\n## 在ECMAScript标准语法下获取`__filename`及`__dirname`\r\n```js\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname } from 'path';\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nconsole.log(__filename);\r\nconsole.log(__dirname);\r\n```\r\n\r\n## 文件枚举函数的实现和使用\r\n\r\n```js\r\n// 调用\r\nawait fileEnum(searchRoot, searchDir, relativeDir,async (fileInfo)=>{\r\n    return new Promise((resolve,reject)=>{\r\n        console.log(fileInfo);\r\n        resolve();\r\n    })\r\n})\r\n```\r\n\r\n```js\r\nimport fs from 'fs/promises'\r\nimport path from 'path'\r\n/**\r\n * 文件枚举方法\r\n * @param searchRoot 需要遍历的文件夹的所在路径\r\n * @param searchDir 需要遍历的文件夹名\r\n * @param relativeDir 需要遍历的文件夹名\r\n * @param callback 回调函数,接收一个文件路径\r\n * @return \r\n */\r\nexport const fileEnum = (searchRoot, searchDir, relativeDir, callback) => {\r\n  return new Promise(async (resolve) => {\r\n    let fullDirPath = path.join(searchRoot, searchDir, relativeDir);//拼接路径\r\n    let fileNameList = await fs.readdir(fullDirPath)//根据文件路径读取文件，返回文件列表\r\n    for (let index = 0; index < fileNameList.length; index++) {//遍历读取到的文件名列表\r\n      const filename = fileNameList[index];\r\n      var fullFilePath = path.join(fullDirPath, filename);//拼接路径 //获取当前文件的绝对路径\r\n      try {\r\n        let stats = await fs.stat(fullFilePath)//根据文件路径获取文件信息，返回一个fs.Stats对象\r\n        if (stats.isFile()) {//是文件\r\n          let fileNameWithExt = filename //带后缀的文件名\r\n          let fileNameWithoutExt = path.basename(fullFilePath, path.extname(fullFilePath))//不带后缀文件名\r\n          let extname = path.extname(fullFilePath)//后缀名\r\n          await callback({\r\n            searchRoot,\r\n            searchDir,\r\n            relativeDir,\r\n            fileNameWithExt,\r\n            fileNameWithoutExt,\r\n            extname,\r\n            fullFilePath, //文件的绝对路径 \r\n            fullDirPath, //文件的绝对路径 \r\n            stats //stats 包含创建时间\r\n          })\r\n        } else if (stats.isDirectory()) { //是文件夹\r\n          let newRelativeDir = path.join(relativeDir, filename)//拼接新相对路径\r\n          await fileEnum(\r\n            searchRoot,\r\n            searchDir,\r\n            newRelativeDir,\r\n            callback\r\n          )\r\n        }\r\n      } catch (err) {\r\n        console.warn(err);\r\n      }\r\n    }\r\n    resolve('done')\r\n  })\r\n}\r\n```\r\n\r\n## imagemin图像压缩\r\n\r\n```js\r\n//图像压缩\r\nimport imagemin from 'imagemin';\r\n// import imagemin_mozjpeg from 'imagemin-mozjpeg'; //JPEG有损压缩\r\nimport imagemin_jpegtran from 'imagemin-jpegtran'; //JPEG无损压缩\r\nimport imagemin_pngquant from 'imagemin-pngquant'; //PNG有损压缩\r\n// import imagemin_optipng from 'imagemin-optipng'; //PNG无损压缩\r\n// import imagemin_giflossy from 'imagemin-giflossy'; //GIF有损压缩 @forked from imagemin/imagemin-gifsicle\r\nimport imagemin_gifsicle from 'imagemin-gifsicle'; //GIF无损压缩\r\n\r\n\r\n\r\nasync function markdownAssetsProcesser(//把某个文件夹下的所有文件(除markdown文件) 全部复制到指定目录\r\n  targetDir,//目标文件夹\r\n  excludeFilePath,//不包含的文件\r\n  destinationDirPath,//保存到的目标文件夹\r\n  requireImagemin,//是否需要对图片压缩\r\n) {\r\n  return await fileEnum(targetDir, './', './', async ({\r\n    relativeDir,\r\n    fileNameWithExt,\r\n    extname,//扩展名\r\n    fullDirPath,//文件原所在目录路径\r\n    fullFilePath, //文件的绝对路径 \r\n  }) => {\r\n    if (fullFilePath != excludeFilePath) {//\r\n      let saveTo_DirPath = path.join(destinationDirPath, relativeDir) // 拼接 存储路径 \r\n      await fs.mkdir(saveTo_DirPath, { recursive: true /* 递归 */ }) //递归创建输出目录\r\n\r\n      let saveTo_FilePath = path.join(saveTo_DirPath, fileNameWithExt) // 拼接 文件存储路径\r\n\r\n      //图像压缩\r\n      if(requireImagemin && (extname == \".png\" || extname == \".PNG\" || extname == \".jpg\" || extname == \".JPG\" || extname == \".gif\" || extname == \".GIF\")){\r\n        console.log(`当前压缩文件所在路径:${fullFilePath}`);\r\n        console.log(`压缩完毕后的保存路径：${saveTo_FilePath}`);\r\n        try{\r\n            const files = await imagemin.buffer(\r\n              await fs.readFile(fullFilePath),\r\n              {\r\n                plugins: [\r\n                  //jpg/jpeg无损压缩\r\n                  imagemin_jpegtran(),\r\n\r\n                  //jpg/jpeg有损压缩\r\n                  // imagemin_mozjpeg({quality: 0.8}),\r\n\r\n                  //png有损压缩\r\n                  imagemin_pngquant({speed:5,quality: [0.5,0.8]}),\r\n\r\n                  //GIF无损压缩\r\n                  imagemin_gifsicle(),\r\n                ]\r\n              }\r\n            );\r\n            await fs.writeFile(saveTo_FilePath, files) //写入新文件名\r\n          }catch(error){\r\n            console.log(error);\r\n            console.warn(`压缩图片失败(${fileNameWithExt})`);\r\n            console.log(\"尝试直接复制\");\r\n            await fs.copyFile(fullFilePath, saveTo_FilePath)//复制 目标文件 到 指定文件路径\r\n          }\r\n      }else{\r\n        await fs.copyFile(fullFilePath, saveTo_FilePath)//复制 目标文件 到 指定文件路径\r\n      }\r\n    }\r\n  })\r\n}\r\n```"}