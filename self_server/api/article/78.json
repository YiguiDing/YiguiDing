{"shortInfo":{"title":"同源策略和跨域","date":"2022-08-26T15:43:00.000Z","cover":"/self_server/assets/images/default_cover2.jpg","tags":["前端"],"hideAtIndex":true,"categories":"笔记","id":78,"countWords":586,"readSeconds":58.6,"assetsbaseUrl":"/self_server/assets/"},"content":"## 同源策略和跨域\r\n同源策略(Same-Origin Policy)最早由Netscape公司提出,是**浏览器**的一种安全策略\r\n* **同源**: 协议 域名 端口号 均一致\r\n* **跨域**: 违背同源策略就是跨域,\r\n* **具体表现**: 如果在`a.com`的页面中向`b.com`的服务器的发送**请求报文**,则其**响应报文**会被浏览器**拦截**.\r\n\r\n## CROS跨域(源)资源共享\r\n**CROS**(Cross-Origin Resource Sharing)跨域(源)资源共享,解决跨域资源共享的解决方案.\r\n\r\n**特点**: 不需要在客户端做特殊操作,解决跨域的步骤完全在服务器中进行.\r\n\r\n**工作原理**: 通过设置一个**响应头**来告诉浏览器该请求允许跨域\r\n```\r\nAccess-Control-Allow-Origin: *\r\n```\r\n\r\n\r\n## 完整访问控制请求头\r\n* `Access-Control-Allow-Origin: URL或*` 指定了允许访问该资源的外域\r\n* `Access-Control-Expose-Headers: 自定义响应头名1, 自定义响应头名2` 使得客户端能够获取到自定义的响应头\r\n* `Access-Control-Max-Age: <delta-seconds>` 指定了 preflight 请求的结果能够被缓存多久\r\n* `Access-Control-Allow-Credentials: true` 指定跨域请求时候能够携带验证信息,如cookie\r\n* `Access-Control-Allow-Methods: <method>[, <method>]*` 设置请求允许的方法,默认仅支持 GET POST HEAD\r\n* `Access-Control-Allow-Headers: <field-name>[, <field-name>]*` 设置允许的请求头的头名,默认仅支持9个请求头\r\n\r\n\r\n## CORS请求分类\r\n* 简单请求 : \r\n  * 请求方式必须为: `GET` `POST` `HEAD`\r\n  * 请求头必须: **不能包含自定义请求** ,仅能包含默认支持9个请求头\r\n  * 简单请求仅会在客户端和服务端之间发送一次请求,\r\n* 预检请求 : \r\n  * 请求方式: 除去`GET` `POST` `HEAD`之外的请求\r\n  * 请求头为: 请求头中**包含自定义的头部** 或包含 `application/json`\r\n  * 预检请求会在客户端和服务端之间发送两次请求,第一次会发送OPTIONS类型的请求进行预检,之后才会发送真正的请求\r\n\r\n**预检请求**  \r\n在浏览器和服务器通信前,浏览器会先发送OPTIONS类型的请求进行预检,以获知服务器是否允许该实际请求,  \r\n**服务器响应OPTIONS类型的请求后浏览器才会发送真正的请求并携带真实的数据**"}